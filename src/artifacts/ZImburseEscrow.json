{"transpiled":true,"noir_version":"0.34.0+02fea6abe8637b9fb8f9535d1709b367d5e1da5c","name":"ZImburseEscrow","functions":[{"name":"redeem_linode_entitlement","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"body","type":{"kind":"array","length":832,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"body_hash_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"body_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"header","type":{"kind":"array","length":640,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"header_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"pubkey","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"pubkey_redc","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"from_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"subject_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"amount_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"amount_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"date_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"receipt_id_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"claim_secret_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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rDZ7Vj5ZjeZNSr5wmtVo3qTkC6dZjeZNSr5wmtXoXbiWL5xkNZo3KfnCaVajeZOSL5xmNZo3KfnCaVajd+FKvnCa1WjepOULJ1mNvJdavnCS1WbPyierzZ6VT1afedOm5AunWX3mTZuSL5xm9Zk3ba9mlNXnXfim5QsnWX3mTZuSL5xm9Zk3bUq+cJrVZ960KfnCaVafd+Gbki+cZvWZN21avnCS1cd7uWn5wklWnz0rm5IvnGY1mjcp+cJpVqN5k5IvnGY1mjcp+cJpVp934ZuWL5xkNZo3KfnCaVajeZOSL5xmNZo3KfnCaVafd+Gbki+cZjWaN2n5wklWH+/lpuULJ1l99qxsSr5wmtVo3qTkC6dZjeZNSr5wmtVo3qTkC6dZjd6Fa/nCSVajeZOSL5xmNZo3KfnCaVajeZOSL5xmNXoXruQLp1mN5k1avnCS1cd7uWn5wklWnz0rm5IvnGY1mjcp+cJpVqN5k5IvnGY1mjcp+cJpVqN34Vq+cJLVaN6k5AunWY3mTUq+cJrVaN6k5AunWY3ehSv5wmlWo3mTli+cZPXxXm5avnCS1WfPyqbkC6dZjeZNSr5wmtVo3qTkC6dZjeZNSr5wmtXoXbiWL5xkNZo3KfnCaVajeZOSL5xm9Zk37Uq+cJrV5134ruQLp1l95k37qxll9fFe7lq+cJLVZ8/KruQLp1l95k27ki+cZvWZN+1KvnCa1WfetCv5wmlWn3fhu5YvnGT1mTftSr5wmtVo3qTkC6dZjeZNSr5wmtXnXfiu5AunWY3mTVq+cJLVx3u5a/nCSVafPSu7ki+cZjWaNyn5wmlWo3mTki+cZjWaNyn5wmlWn3fhu5YvnGQ1mjcp+cJpVqN5k5IvnGY1mjcp+cJpVp934buSL5xmNZo3afnCSVYf7+Wu5QsnWX32rOxKvnCa1WjepOQLp1mN5k1KvnCa1WjepOQLp1mN3oVr+cJJVqN5k5IvnGY1mjcp+cJpVqN5k5IvnGY1eheu5AunWY3mTVq+cJLVx3u5a/nCSVafPSu7ki+cZjWaNyn5wmlWo3mTki+cZjWaNyn5wmlWo3fhWr5wktVo3qTkC6dZjeZNSr5wmtVo3qTkC6dZjd6FK/nCaVajeZOWL5xkNfJeavnCSVafPSu7ki+cZjWaNyn5wmlWn3nToeQLp1l95k2Hki+cZvV5F368mlFW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Lj3+2rcuPf7aty47/uKqSHr8tW9devzat+7ipkZ6/Nq37uJORXr82rfu4vZDevzat+7inkJ2/MXlg/T4tW/dxTWB9Pi1b93FhX70+LVv3cXVe/T4tW/dxSV59Pi1b93FdXb0+LVv3cXFc/T4tW/dxRVx9Pi1b93FZW70+LVv3cW1a/T4tW/dxQVp9Pi1b93FVWb0+LVv3cWlY/T4tW/dxfVg9Pi1b93FRV70+LVv3cWVW/T4tW/dxeVY9Pi1b93FNVb0+LVv3cXdVPT4tW/dxd1U9Pi1b93F3VT0+LVv3cXdVPT4tW/dxd1U9Pi1b93F3VT0+LVv3cXdVHv/8dfe+33/fvzFb11y/MXdVPT4i9+67PiL37rs+Ivfuuz4i9+67PiL37rs+Ivfuuz4i9+67Pi1b93F3VTk+O/F3VT0+KVv3ffibip6/NK37vtV+tZ9L+6moscvfeu+F3dT0eOXvnXfi7up2PEXd1PR49e+dRd3U9Hj1751F3dT0ePXvnUXd1PR49e+dRd3U9Hj1751F3dT0ePXvnVXd1Ox49e+dVd3U7Hj1751V3dTsePXvnVXd1Ox49e+dVd3U7Hj1751V3dTsePXvnVXd1Ox49e+dVd3U7Hj1751V3dTsePXvnVXd1Ox49e+dVd3U7Hj1751V3dTsePXvnVXd1Ox49e+dVd3U7Hj1751V3dTsePXvnVXd1Ox49e+dVd3U7Hj1751V3dTsePXvnVXd1Ox49e+dVd3U7Hj1751V3dTsePXvnVXd1Ox49e+dVd3U7Hj1751V3dTsePXvnVXd1Ox49e+dVd3U7Hj1751V3dTsePXvnVXd1Ox49e+dVd3U7Hj1751V3dTsePXvnVXd1Ox49e+dVd3U7Hj1751V3dTsePXvnVru6netd1U79puqndtN9W7tpvqXdtN9a7tpnrXdlO9a7up3rXdVO/abqp3bTfVWdtNddZ2U5213VRnbTfV+Sp965613VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtNddZ2U5213VRnbTfVWdtN1Wu7qXptN1Wv7abqtd1U/VX61u213VS9tpuq13ZT9dpuql7bTdVru6l6bTdVr+2m6rXdVL22m6rXdlP12m6qXttN1Wu7qXptN1Wv7abqtd1Uvbabqtd2U/Xabqpe203Va7upem03Va/tpuq13VS9tpuq13ZT9dpuql7bTdVru6l6bTdVr+2m6rXdVL22m6rXdlP12m6qXttN1Wu7qXptN1Wv7abqtd1Uvbabqtd2U/Xabqpe203Va7upem03Va/tpuq13VS9tpuq13ZT9dpuql7bTdVru6l6bTdVr+2m6rXdVL22m6rXdlP12m6qXttN1Wu7qXptN1Wv7abqtd1Uvbabqtd2U/Xabqpe203Va7upem03Va/tpuq13VS9tpuq13ZT9dpuql7bTdVru6l6bTdVr+2m6rXdVL22m6rXdlP12m6qXttN1Wu7qXptN1Wv7abqtd1Uvbabqtd2U/Xabqpe203Va7upem031VXbTXXVdlNdtd1UV2031fUqfetetd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXXVdlNdtd1UV2031VXbTXUt7qY6Xq/tx0+/r1+PPzjI/d6/H+S+jt+zrn1FP5t17fv82axrX/6PZl3cp/Vs1rVrxbNZ1+4gz2Zdu7A8m7UpZX21H1n3/nvWtavQs1mlehPJKtWbSFbV3tTfv2dV7U2DrIsb0Z7NatSbFnetPZvVqDctbnF7NqtUbyJZjeZNi8vkns1qNG9aXFP378q6v7bvp95f+2/z4Xtxp92zWYV6E80q1JtoVqneNP1+/fx/NcrqM2+6Fzf8PZtVtTf9/q1+L+4OfDarz3+nuxe3Ej6b1WfedC/uO3w2q8+86V7cpPhsVp950724o/HZrEK9iX3TLW5/fDar0bxpca/ks1mN5k2LGyufzSrUm2jWZpTVaN60uGXz2aw+75vuxf2dz2b1ed90L24GfTar0bxpcefos1mN5k2L20yfzWo0b1rck/psVp/3TffiBtZnsxrNmxZ3uz6b1WjetLg19tmsRvOmxX20z2YV6k00q1BvolmN5k2LO3SfzSo1b5pnXdzO+2xW1XnTYLa2uPf32axG86bFjcLPZjWaNy3uKn42q9G8aXEL8rNZjd6FL+5Xfjar0bxpcXPzs1mN5k2LO6GfzWo0b1rcNv1sVqN34Yt7rJ/NajRvWtyQ/WxWqXkTySo1byJZVedNg9na4lbvZ7MazZuMfOG3kS/8NvKF30a+8NvIF34b+cJvI1/4reQLZ990Sr5wmtVo3qTkC6dZjeZNSr5wmtXoXbiSL5xmNZo3afnCSVYj76WWL5xkVZ03DWZrsr7wUVajeZORL/xW8oXPs14vJV84zWozb/pktZk3fbLavAv/ZG1GWW3mTZ+sNvOmT1abedMnq8286ZPVZt50vZR84TSrzbvwT1abd+GfrDbzpk/WZpTVxnv5yWrjvfxktdmz8slqs2flk9Vo3qTkC6dZjeZNSr5wmtVo3qTkC6dZbd6Ff7LavAv/ZDWaNyn5wmlWo3mTki+cZjWaNyn5wmlWm3fhn6zNKKvRvEnLF06y2ngvP1ltvJefrDZ7Vq6Xki+cZjWaNyn5wmlWo3mTki+cZjWaNyn5wmlWm3fhn6w278I/WY3mTUq+cJrVaN6k5AunWY3mTUq+cJrV6F24ki+cZjWaN2n5wklWG+/l9dLyhZOsNntWPllt9qx8shrNm5R84TSr0bxJyRdOsxrNm5R84TSr0btwLV84yWo0b1LyhdOsRvMmJV84zWo0b1LyhdOsRu/ClXzhNKvRvEnLF06y2ngvP1ltvJefrDZ7Vj5Zm1FWo3mTki+cZjWaNyn5wmlWo3mTki+cZjV6F67lCydZjeZNSr5wmtVo3qTkC6dZjeZNSr5wmtXnXfim5AunWX3mTZuWL5xk9fFebq9mlNVmz8onq82elU9Wn3nTpuQLp1l95k2bki+cZvWZN21KvnCa1edd+KblCydZfeZNm5IvnGb1mTdtSr5wmtVo3qTkC6dZfd6Fb0q+cJrVaN6k5QsnWX28l5uWL5xk9dmzsin5wmlWo3mTki+cZjWaNyn5wmlWo3mTki+cZvV5F75p+cJJVqN5k5IvnGY1mjcp+cJpVqN5k5IvnGb1eRe+KfnCaVajeZOWL5xk9fFeblq+cJLVZ8/KpuQLp1mN5k1KvnCa1WjepOQLp1mN5k1KvnCa1ehduJYvnGQ1mjcp+cJpVqN5k5IvnGY1mjcp+cJpVqN34Uq+cJrVaN6k5QsnWX28l5uWL5xk9dmzsin5wmlWo3mTki+cZjWaNyn5wmlWo3mTki+cZjV6F67lCydZjeZNSr5wmtVo3qTkC6dZjeZNSr5wmtXoXbiSL5xmNZo3afnCSVYj76WWL5xk9dmzsin5wmlWo3mTki+cZjWaNyn5wmlWn3nTruQLp1l93oXvWr5wktVn3rS/mlFWn3nTruQLp1l95k27ki+cZvV5F74r+cJpVp95067lCydZfbyXu5YvnGT12bOyK/nCaVafedOu5AunWY3mTUq+cJrVaN6k5AunWX3ehe9avnCS1WjepOQLp1mN5k1KvnCa1WjepOQLp1l93oXvSr5wmtVo3qTlCydZfbyXu5YvnGT12bOyK/nCaVajeZOSL5xmNZo3KfnCaVajeZOSL5xm9XkXvmv5wklWo3mTki+cZjWaNyn5wmlWo3mTki+cZjV6F67kC6dZjeZNWr5wktXHe7lr+cJJVp89K7uSL5xmNZo3KfnCaVajeZOSL5xmNZo3KfnCaVajd+FavnCS1WjepOQLp1mN5k1KvnCa1WjepOQLp1mN3oUr+cJpVqN5k5YvnGT18V7uWr5wktVnz8qu5AunWY3mTUq+cJrVaN6k5AunWY3mTUq+cJrV6F24li+cZDWaNyn5wmlWo3mTki+cZjWaNyn5wmlWo3fhSr5wmtVn3nRo+cJJVh/v5aHlCydZffasHK9mlNVn3nQo+cJpVp9506HkC6dZfeZNh5IvnGb1eRd+aPnCSVafedOh5AunWX3mTYeSL5xm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rDbey09Wmz0rn6w2e1Y+WW3mTfdLyRdOs9rMmz5ZbeZNn6w286ZP1maU1eZd+CerzbvwT1abedMnq8286ZPVaN6k5AunWY3mTUq+cJrV5l34J2szymo0b9LyhZOsNt7LT1Yb7+Unq82elful5AunWY3mTUq+cJrVaN6k5AunWY3mTUq+cJrV5l34J6vNu/BPVqN5k5IvnGY1mjcp+cJpVqN5k5IvnGa1eRf+yWrzLvyT1WjepOULJ1ltvJf3S8sXTrLa7Fn5ZLXZs/LJajRvUvKF06xG8yYlXzjNajRvUvKF06xG78K1fOEkq9G8SckXTrMazZuUfOE0q9G8SckXTrMavQtX8oXTrEbzJi1fOMlq4738ZLXxXn6y2uxZ+WRtRlmN5k1KvnCa1WjepOQLp1mN5k1KvnCa1ehduJYvnGQ1mjcp+cJpVqN5k5IvnGY1mjcp+cJpVqN34Uq+cJrVaN6k5QsnWY28l1q+cJLVZs/KJ6vNnpVPVqN5k5IvnGb1mTdtSr5wmtVn3rQp+cJpVp934durGWX1mTdtSr5wmtVn3rQp+cJpVp9506bkC6dZfd6Fb0q+cJrVZ960afnCSVYf7+Wm5QsnWX32rGxKvnCa1WjepOQLp1mN5k1KvnCa1WjepOQLp1l93oVvWr5wktVo3qTkC6dZjeZNSr5wmtVo3qTkC6dZfd6Fb0q+cJrVaN6k5QsnWX28l5uWL5xk9dmzsin5wmlWo3mTki+cZjWaNyn5wmlWo3mTki+cZvV5F75p+cJJVqN5k5IvnGY1mjcp+cJpVqN5k5IvnGY1eheu5AunWY3mTVq+cJLVx3u5afnCSVafPSubki+cZjWaNyn5wmlWo3mTki+cZjWaNyn5wmlWo3fhWr5wktVo3qTkC6dZjeZNSr5wmtVo3qTkC6dZjd6FK/nCaVajeZOWL5xk9fFeblq+cJLVZ8/KpuQLp1mN5k1KvnCa1WjepOQLp1mN5k1KvnCa1ehduJYvnGQ1mjcp+cJpVqN5k5IvnGY1mjcp+cJpVp934buSL5xm9Zk37Vq+cJLVx3u5v5pRVp89K7uSL5xm9Zk37Uq+cJrVZ960K/nCaVafedOu5AunWX3ehe9avnCS1WfetCv5wmlWn3nTruQLp1mN5k1KvnCa1edd+K7kC6dZjeZNWr5wktXHe7lr+cJJVp89K7uSL5xmNZo3KfnCaVajeZOSL5xmNZo3KfnCaVafd+G7li+cZDWaNyn5wmlWo3mTki+cZjWaNyn5wmlWn3fhu5IvnGY1mjdp+cJJVh/v5a7lCydZffas7Eq+cJrVaN6k5AunWY3mTUq+cJrVaN6k5AunWY3ehWv5wklWo3mTki+cZjWaNyn5wmlWo3mTki+cZjV6F67kC6dZjf47nZIvnGY16k1KvnCa1ag3GfnC99V94cfdfx7k9zHo6gpwdvzF2w07/uKFhR1/8Q7S3j8P0vv83/Pr/D7OuPr1e9LFG8iDSRfvH88lXd26/WDSxbvHg0kXbx4PJl28dzyYtNkkXbzNPJh08eLzYFKbjrS6ZfvBpDYdaXXD9oNJbTrS6nbtB5PadKTVzdoPJrXpSKtbtR9MatORVjdqP5jUpSMdq9u0H0zq0pGO1U3aDyZ16UjHq9kkdelIx+oG7QeTunSkY3V79oNJbTrS6ubsB5PadKTVrdkPJrXpSKsbsx9MatORVrdlP5jUpiOtbsp+MKlNR1rdkv1gUpuOtLoh+8GkNh1pdTv2g0ltOtLqZuwHk9p0pNWt2A8mtelIqxuxH0xq05FWt2E/mNSmI61uwn4wqU1HWt2C/WBSm460ugH7waQ2HWl1+/WDSW060urm6weT2nSk1a3XDya16UirG68fTGrTkVa3XT+Y1KYjrW66fjCpTUda3XL9YFKbjrS64frBpDYdaXW79YNJbTrS6mbrB5PadKTVrdYPJrXpSKsbrR9MatORVrdZP5jUpiOtbrJ+MKlNR1rdYv1gUpuOtLrB+sGkNh1pdXv1g0ltOtLqmusHk9p0pNXl2Q8mtelINp7tw8azfdh4tg8bz/Zh49k+bDzbh41n+7DxbB82nu3DxrN92Hi2DxvP9mHj2T5sPNuHjWf7sPFsHzae7cPGs33YeLYPG8/2YePZPmw8283Gs91sPNvNxrPdbDzb7dVskrp0pGbj2W42nu1m49luNp7tZuPZbjae7Wbj2W42nu1m49luNp7tZuPZbjae7Wbj2W42nu1m49luNp7tZuPZbjae7Wbj2W42nu1m49luNp7tZuPZbjae7Wbj2W42nu1m49luNp7tZuPZbjae7Wbj2W42nu1m49luNp7tZuPZbjae7Wbj2W42nu1m49luNp7tZuPZbjae7Wbj2W42nu1m49luNp7tZuPZbst7to/24yDX9vvx29rHP+7+8yDv34+/eJthx1+8orDjL9472PEXLxPs+Is3BHL81dXR7PiL3+Xs+Itf0Oz4i9+67Pi1b93VHcvs+LVv3dVtyOz4tW/d1b3F5Piry4jZ8Wvfuqtrg9nxa9+6qwt+2fFr37qrq3jZ8WvfuqtLc9nxa9+6q+tt2fFr37qri2jZ8WvfuqsrY9nxa9+6q8td2fFr37qra1jZ8WvfuqsLU9nxa9+6q6tN2fFr37qrS0jZ8WvfuqvrQtnxa9+6q4s92fFL37rv1RWc7Pilb9334rLM/by///Te2+D4a9+69Phr37r0+GvfuvT4a9+69Phr37r0+GvfuvT4a9+67PiLSx3p8de+denxa9+6izsV6fFr37qL2w/p8Wvfuot7Cunxa9+6ixsF2fEX1wTS49e+dRcX+tHj1751F1fv0ePXvnUXl+TR49e+dRfX2dHj1751FxfP0ePXvnUXV8TR49e+dReXudHj1751F9eu0ePXvnUXF6TR49e+dRdXmdHj1751F5eO0ePXvnUX14PR49e+dRcXedHj1751F1du0ePXvnUXl2PR49e+dRfXWNHj1751F3dT0ePXvnUXd1PR49e+dRd3U9Hj1751F3dT0ePXvnUXd1PR49e+dRd3U9Hj1751F3dT0ePXvnUXd1Pt/cdfe+/3/fvxF791yfEXd1PR4y9+67LjL37rsuMvfuuy4y9+67LjL37rsuMvfuuy4y9+67Lj1751F3dTseMv7qaix6996y7upqLHr33rLu6mosevfesu7qaix6996y7upqLHr33rLu6mosevfesu7qaix6996y7upqLHr33rLu6mosevfesu7qaixy99656Lu6no8Uvfuufqbip2/NK37vkqfeueq7up2PFL37rn6m4qdvzSt+65upuKHH91NxU7fu1bd3U3FTt+7Vt3dTcVO37tW3d1NxU7fu1bd3U3FTt+7Vt3dTcVO37tW3d1NxU7fu1bd3U3FTt+7Vt3dTcVO37tW3d1NxU7fu1bd3U3FTt+7Vt3dTcVO37tW3d1NxU7fu1bd3U3FTt+7Vt3dTcVO37tW3d1NxU7fu1bd3U3FTt+7Vt3dTcVO37tW3d1NxU7fu1bd3U3FTt+7Vt3dTcVO37tW3d1NxU7fu1bd3U3FTt+7Vt3dTcVO37tW3d1NxU7fu1bd3U3FTt+7Vt3dTcVO37tW3d1NxU7fu1bd3U3FTt+7Vu3tpvqrO2mOmu7qc7abqqztpvqrO2mOmu7qc7abqqztpvqrO2mOmu7qc7abqqztpvqrO2mOmu7qc7abqqztpvqrO2mOmu7qc7abqqztpvqrO2mOmu7qc7abqqztpvqrO2mOmu7qc7abqqztpvqrO2mOmu7qc7abqpe203Va7upem03Va/tpuqv0rdur+2m6rXdVL22m6rXdlP12m6qXttN1Wu7qXptN1Wv7abqtd1Uvbabqtd2U/Xabqpe203Va7upem03Va/tpuq13VS9tpuq13ZT9dpuql7bTdVru6l6bTdVr+2m6rXdVL22m6rXdlP12m6qXttN1Wu7qXptN1Wv7abqtd1Uvbabqtd2U/Xabqpe203Va7upem03Va/tpuq13VS9tpuq13ZT9dpuql7bTdVru6l6bTdVr+2m6rXdVL22m6rXdlP12m6qXttN1Wu7qXptN1Wv7abqtd1Uvbabqtd2U/Xabqpe203Va7upem03Va/tpuq13VS9tpuq13ZT9dpuql7bTdVru6l6bTdVr+2m6rXdVL22m6rXdlP12m6qXttN1Wu7qXptN1Wv7abqtd1Uvbabqtd2U/Xabqpe203Va7upem03Va/tpuq13VS9tpuq13ZT9dpuql7bTdVru6mu2m6qq7ab6qrtprpqu6muV+lb96rtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qq7ab6qrtprpqu6mu2m6qu7ab6q7tprpru6nu2m6q+1X61r1ru6nu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/l3df0XPX/z+Xd1/Rc9f/P5d3X9Fz1/8/l3df0XPX/z+Xd1/Rc9f/P5d3X9Fz1/8/l3df0XPX/z+Xd1/Rc9f+/7tq/uv6Plr3799df8VPX/t+7e/at+/fXX/FT1/7fu3r+6/ouevff/21f1X7Pyr+6/o+Yvfv6v7r+j5i9+/q/uv6PmL37+r+6/o+Yvfv6v7r+j5i9+/q/uv6PmL37+r+6/o+Yvfv6v7r+j5i9+/q/uv6PmL37+r+6/o+Yvfv6v7r+j5i9+/q/uv6PmL37+r+6/o+Yvfv6v7r+j5i9+/q/uv6PmL37+r+6/o+Yvfv6v7r+j5i9+/q/uv6PmL37+r+6/o+Yvfv8X9V724/6oX91/14v6rXtx/1Yv7r3px/1Uv7r/qxf1Xvbj/qhf3X/Xi/qte3H/Vi/uvenH/VS/uv+rF/Ve9uP+qF/df9eL+q17cf9WL+696cf9VL+6/6sX9V724/6oX91/14v6rXtx/1Yv7r3px/1Uv7r/qxf1Xvbj/qhf3X/Xi/qte3H/Vi/uvenH/VS/uv+rF/Ve9uP+qF/df9eL+q17cf9WL+696cf9VL+6/6sX9V724/6oX91/14v6rq7j/6iruv7qK+6+u4v6r61X7/r2K+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6iruv7qK+6+u4v6rq7j/6i7uv7qL+6/u4v6ru7j/6n7Vvn/v4v6ru7j/6i7uv7qL+6/u4v6ru7j/6i7uv7qL+6/u4v6ru7j/6i7uv7qL+6/u4v6ru7j/6i7u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3BXj82ffv9dwAYzPn33/XsOtLjz/cICLzx9+/w6nsvj84ffvcP+Kzx9+/w73r/j84ffvcP+Kzx9+/w73r/j84ffvcP+Kzx9+/w73r/j84ffvcP+Kzx9+/w73r/br3//u/XqeP84//P6l8w/3r/j8w+9fPP/w+xfPP/z+xfMPv3/x/MPvXzz/8PsXzz/8/sXzh9+/w/0rPP9w/4rPH37/Dvev+Pzh9+9w/4rPH37/Dvev+Pzh9+9w/4rPH37/Dvev+Pzh9+9w/4rPH37/Dvev+Pzh9+9w/4rPH37/Dvev+Pzh9+9w/4rPH37/Tvev8Pzh9+90/wrPH37/Tvev8Pzh9+90/wrPH37/Tvev8Pzh9+90/wrPH37/Tvev8Pzh9+90/wrPH37/Tvev8Pzh9+90/wrPH37/Tvev8Pzh9+90/wrPH37/Tvev8Pzh9+90/wrPH37/Tvev8Pzh9+90/wrPH37/Tvev8Pzh9+90/wrPH37/Tvev8PzZ9+893b/C82ffv/d0/wrPn33/3p/s+/ee7l/h+bPv33u6f4Xnz75/7+n+FZ1/un+F5w+/f6f7V3j+8Pt3un+F5w+/f6f7V3j+8Pt3un+F5w+/f6f7V3j+8Pt3un+F5w+/f6f7V3j+8Pt3un+F5w+/f8P9qzvcv7rD/as73L+6w/2rO9y/usP9qzvcv7rD/as73L+6w/2rO9y/usP9qzvcv7rD/as73L+6w/2rO9y/usP9qzvcv7rD/as73L+6w/2rO9y/usP9qzvcv7rD/as73L+6w/2rO9y/usP9qzvcv7rD/as73L+6w/2rO9y/usP9qzvcv7rD/as73L+6w/2rO9y/usP9qzvcv7rD/as73L+6w/2rO9y/usP9qzvcv7rD/as73L+6w/2rO9y/usP9qzvcv7rD/as73L+6w/2rO9y/usP9qzvcv7rD/as73L+6w/2rO9y/usP9qzvcv7rD/as73L+6w/2rO9y/esL9qyfcv3rC/asn3L96Ptn37xPuXz3h/tUT7l894f7VE+5fPeH+1RPuXz3h/tUT7l894f7VE+5fPeH+1RPuXz3h/tUT7l894f7VE+5fPeH+1RPuXz3h/tUT7l894f7VE+5fPeH+1RPuXz3h/tUT7l894f7VE+5fPeH+1RPuXz3h/tUT7l894f7VE+5fPeH+1RPuXz3h/tUT7l894f7VE+5f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qZ6vpelA98pUz9eSx/L+eSzvn8fy/nks75/H8v55LO+fx/L+eSzvn8fy/nks75/H8v55LO+fx/L+eSzvn8fy/nks75/H8v55LO+fx/L+eSzvn8fy/nks75/H8v55LO+fx/L+eSzvn8fy/nks75/H8v55LO+fx/L+eSzvn8fy/nks75/H8v55LO+fx/L+eSzvn8fy/nks75/H8v55LO+fx/L+eSzvn8fy/nks75/H8v55LO+fx/L+eSzvn8fy/nks75/H8v55LO+fx/L+eSzvn8fy/nks75/H8v55LO+fx/L+eSzvn8fy/nks75/H8v55LO+fx/L+eSzvn8fy/nks75/H8v55LO+fx/L+eSzvn8fy/o23vI/z34Pc2x/nP2ef/3iu/x7k+8f5h3/X4PmHf6zg+Yd/geD5h39W4PmHfyvA+a/pPDWef/itjucfflXj+Yffv3j+7Pv3mu444/mz799ruriM58++f6/pNjKdfzp4jOcPv3+n08R4/vD7dzoijOcPv3+nc794/vD7dzrMi+cPv3+nE7p4/vD7dzp2i+cPv3+ns7R4/vD7dzogi+cPv3+nU694/vD7dzrKiucPv3+n86l4/vD7dzp0iucPv3+nk6R4/vD7dzoeiucPv3+nM594/vD7dzjIuf+ef/7T+3X+df7Z9y+ff/b9y+efff/y+Wffv3z+2fcvn3/2/cvnn33/4vmHw5F8/tn3L58//P4d7jby+cPv3+HCIp8//P4dbiHy+cPv3+FqIZ5/OEXI5w+/f4ejgXz+8Pt3OO/H5w+/f4dDfHz+8Pt3OJnH5w+/f4fjdnz+8Pt3OEPH5w+/f4eDcXz+8Pt3OO3G5w+/f4cjbHz+8Pt3OJfG5w+/f4fDZnz+8Pt3OEHG5w+/f4djYXz+8Pt3OOvF5w+/f4cDXHz+8Pt3OJXF5w+/f4f7V3z+8Pt3uH/F5w+/f4f7V3z+7Pv3Hu5f8fmz7997uH/F58++f+9P9v17D/ev+PzZ9+893L/i8w+/f69//7v396794/zD7186/3D/is8//P7F8w+/f/H8w+9fPP/w+xfPP/z+xfMPv3/x/MPvXzx/+P073L/C8w/3r/j84ffvcP+Kzx9+/w73r/j84ffvcP+Kzx9+/w73r/j84ffvcP+Kzx9+/w73r/j84ffvcP+Kzx9+/w73r/j84ffvcP+Kzx9+/w73r/j84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kzx9+/073r/D84ffvdP8Kz599/z7T/Ss8f/b9+0z3r/D82ffv88m+f5/p/hWeP/v+fab7V3j+7Pv3CfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qCfevnnD/6gn3r55w/+oJ96+ecP/qyfavfp9s/+o9f/T9+54/+v59zx99/77nj75/3/NH37/v+aPv3/f80ffve/7o+/c9f/j9m+1fvecPv3+z/av3/OH3b7Z/9Z4//P7N9q/e84ffv9n+1Xv+8Ps32796zx9+/2b7V+/5w+/fbP/qPX/4/ZvtX73nD79/s/2r9/zh92+2f/WeP/z+zfav3vOH37/Z/tV7/vD7N9u/es8ffv9m+1fv+cPv32z/6j1/+P2b7V+95w+/f7P9q/f84fdvtn/1nj/8/s32r97zh9+/2f7Ve/7w+zfbv3rPH37/ZvtX7/nD799s/+o9f/j9m+1fvecPv3+z/av3/OH3b7Z/9Z4//P7N9q/e84ffv9n+1Xv+8Ps32796zx9+/2b7V+/5w+/fbP/qPX/4/ZvtX73nD79/s/2r9/zh92+2f/WeP/z+zfav3vOH37/Z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+ZjuX+E//+z79/hMv3/p35/sv3+P6f4Vnj97fz6m+1f4zz/8/p3uX9G/P9P9K/znH37/Tvev8N+f6fcv/fMPv3/H+1f070/2379HuH91jPev4N+f8f4V/PMP96+O8f4V/fsT/vdvuH91hPtXR7h/dYz3r+j82fvzMd6/gn/+4f7VMd6/gn9/xvtX9M8//P4d71/Rvz/hf/+G+1fHeP+K/v0J//s33L86xvtX8O/PeP+K/vmH37/j/Sv692f6/Uv//MP//g33r47x/hWdP/zv33D/6hjvX9H5w//+DfevjvH+FZ1/+v1L//6E//073r+i84f//RvuXx3j/Ss4/3j/Cv79CfevjvH+FZ0//O/fcP/qGO9f0fnD31+F+1fHeP+Kzh/+/ircvzrC/asj3L86wv2rI9y/OsL9qyPcvzrC/asj3L86wv2rI9y/OsL9qyPcvzrC/asj3L86wv2rI9y/OsL9qyPcvzrC/asj3L86wv2rI9y/OsL9qyPcvzrC/asj3L86wv2rI9y/OsL9qzPcvzrD/atzun91ff757/5e+1/nH37/4vmH3794/uH3L55/+P177f/+v9/rvP44//D7F88//P7F8w+/f+n80/2r6/r9e/7n+eP8w+9fPP/0+5fOP/3+/e/578/3j/NPv3/p/NPvXzr/9PuXzj/8/r3389/zn9sf5x9+/+L5h9+/dP7p/hWef/j9i+cffv/i+Yffv3j+4fcvnj/879/p/hWef/rfv3T+6X//0vnD//6d7l/h+af//Uvnn/73L50/5+/fP/9+n+5f4flz/v79+/zhf/9O96/w/NPvXzr/9PsXzj/dv6Lv/+n+FZ4//O/f6f4Vnn/4/YvnH37/4vmH3794/vD9ebp/RX//Tvev6PzT/Ss8//S/f+n84X//Tvev8PzD7188//S/f+n8OX///vn3+3T/Cs+f8/fv3+cP//t3un+F5895f/X3+XPeX/19/vC/f6f7V3j+8L9/p/tXeP7wv3+n+1d4/vD3V9P9Kzx/+N+/0/0rPH/4//5oun+F5w//+3e6f4XnD//fH033r/D8OX///vn3+3T/Cs8f/r8/mu5f0d+/0/0rPP/0+5fOH/6/P5ruX9H3/3T/Cs8f/vfvdP+Kzj/dv8Lzh7+/mu5f4fnD9+fp/hX9/Tvdv8Lzh//vj6b7V3j+8L9/p/tXcP7vdP8Kz5/9vz/6jvev/ve/37/j/Ss6//T7l86f/ffvd7x/RefP/t8ffcf7V3T+7L9/v9P9Kzx/9t+/3+n+FZ4/++/f73T/Cs+f/f7qO92/wvNn//37ne5f4fmz//dH3+n+FZ4//O/f6f4Vnj/7f3/0ne5f4fmz/Y3veP+Kzp/9vz/6jvev4O/f8f4VnH+8f0Xnz/7fH32n+1f0/T/dv8LzD79/8fzhf/9O96/w/Nnvr77T/Ss8f/j+PN2/or9/p/tXeP7s//3Rd7p/hecffv/S37/T/Ss8f/b//ug73b/C82f7G9/x/hWcf7x/RecP//t3vH9F58/+3x99x/tXdP7wv3+n+1d4/vC/f6f7V3j+8L9/p/tXeP7w91fT/Ss8//T9+d7+Pf9f32/j/Ss6//T7l84//f6l8w+/f5/jn4N8n+//39+//+9/+P7t/99/9r7uP1KHX9UrU4ff6gtTpwNcK1OHfyusTB3+WbEydfgXyMrU05M6/LtmZerwT6CVqZ6vpemw2cpUz9fSdC5tZarna2k6wrYy1fO1NJ12W5nq+VqaDsatTPV8LU1n6Famer6WpuN2K1M9X0vTybyVqZ6vpekQ38pUz9fSdN5vZarna2k6GrgyVfO19JtOEa5M1Xwt/aYDhytTNV9Lv8/pSdV8Lf2mY4wrUzVfS7/pxOPKVM/X0nQ4cmWq52tpOke5MtXztTQduVyZ6vlamk5nrkz1fC1NBzlXpnq+lqYznytTPV9L0/HQlamer6XpJOnKVM/X0nTodGWq52tpOp+6MtXztTQdZV2Z6vlamk69rkz1fC1NB2RXpnq+lqaztCtTPV9L07Hblamer6XphO7KVM/X0nSYd2Wq52tpOve7MtXztTQdEV6Z6vlamk4Tr0z1fC1NB49Xpnq+lqYzyitTPV9L03Hmlamer6Xp5PPKVM/X0nRIemWq52tpOk+9MtXztTQdvV6Z6vlamk5pr0z1fC1NB7pXpnq+ljyW989jef88lvfPY3n/PJb3z2N5/zyW989jef88lvf/j727y44jyRLuOheNAAEa/uY/MfGTkmRndfQ9nkpvhQdsv2PVcu4yhp8bCdp93+cu7/d97vJ+3+cu7/d97vJ+3+cu7/d97vJ+3+cu7/d97vJ+3+cu7/d97vJ+3+cu7/d97vJ+3+cu7/d97vJ+3+cu7/d97vJ+3+cu7/d97vJ+3+cu7/d97vJ+3+cu7/d97vJ+3+cu74997vL+2Ocu74997vL+2Ocu74+Xtc8fdZta+tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Pfe7y/tjnLu+Py9/lfVu//6jvtzvPv679/J+ft1/P//n1def5L941+fwXj5V8/osXSD7/xbMin//irVDPf/XrqfP5L/5Wz+e/+Ks6n//i7998/id//179Hud8/id//179xuV8/id//179buR6/qtfeJzP/+Tv36tfTZzP/+Tv36tfIpzP/+Tv36tf95vP/+Tv36tfzJvP/+Tv36tfoZvP/+Tv36tfdpvP/+Tv36tfS5vP/+Tv36tfIJvP/+Tv36tf9ZrP/+Tv36tfyprP/+Tv36tfn5rP/+Tv36tfdJrP/+Tv36tfSZrP/+Tv36tfHprP/+Tv36tf85nP/+Tv38tfyPn58ev5vz7v/P7V5W/ZrOe/9vv3/eXHy18//f7y9Xrn+a/9/u3nv/b7t5//2u/ffv5rv3/7+a/9/q3n/7z4xZH9/Nd+//bzX/v9289/7fdvP/9zv38/L37DYj//c79/Py9+F2I//3O/fz8vfmthPv/FryLs53/y9+/FLw3s53/y9+/Fr/fr53/y9+/FL+Lr53/y9+/Fr8zr53/y9+/FL7fr53/y9+/Fr6Hr53/y9+/FL4zr53/y9+/Fr3br53/y9+/FL2Hr53/y9+/Fr0vr53/y9+/FLzbr53/y9+/FryDr53/y9+/FLwvr53/y9+/Fr/Xq53/y9+/FL+Dq53/y9+/Fr8rq53/y9+/F77/q53/y9+/F77/q53/y9+/F77/q53/y9+/F77/q53/y9+/F77/q53/y9+/F77/q53/y9+/F77/q53/y9+/F77/q57/4+/f15ffzv97e//vzX/z+q37+i79/8/kv/v7N57/4+/f17eP383/e+ft78fuv+vkv/v798fL+6/l//Phx5/kv/v7N83/x928+/8Xfv/n8T/7+vfj9V/n5c/H7r/r5L/7+rc/Pi99/1ef/6u/fev6Lv3/z+Z/8/Xvx+6/68+fq7996/ou/f+vz8+L3X+X5v/j9V/38Tz7/Xvz+q37+q79/4/Pn4vdf9fNf/P2bn59PPv9e/P6rfv4nn38vfv9VP/+Tz78Xv/+qn//i79/6/Lz6/Vd5/p98/r36/Vf5/E/+/r36/Vf5+XP19+/8/F9Xv/8qPj+/rn7/VZz/r6vff5XP/9zz79fLc79/v65+/1V+/lz9/VvPf/H3b35+Pvf8+3X1+6/q+a9+/1U+/5O/f69+/1V9/lz9/qt8/ou/f+vz8+r3X+X5f+759+vq91/l8z/5+/fq91/V58/V77/K57/4+7c+P69+/1Wd/6vff5XPf/H3bz7/k79/r37/VX7+PPfvX31d/f6r/Px88vn36vdf5fM/+fx79fuv8vmffP69+v1X+fzP/e+Pvq5+/1We/yeff69+/1U+/5O/f69+/1V9/lz9/qt8/uf+90dfV7//Ks//1d+/9fxPPv9e/f6rfP4nn3+vfv9VPv9z//ujr6vff1Xn/+r3X+XzP/n8e/X7r/L5r/7+jc+fq99/lc//3P/+6Ovq91/l+X/y+ffJ77/6evL7r74uf/9VfP5c/v6rev7n/vdHX5e//6rO/5PPv09+/9XXk99/9XX5+6/q8+fJf//q6vdf1efn5e+/ivN/9fuv8vmffP598vuvvi5//1V9/jz5719d/f6r/Px88vn36vdf1fM/+f1XX09+/9XX5e+/is+fy99/Vc9/8fdvfX5e/v6rOv9PPv8++f1XX09+/9XX5e+/is+fy99/Vc//5P/+6PL3X8X5v/r9V/n8F3//5vM/+fv38vdf1efPk//+1dXvv8rPz6eefz9ern7/VT7/U8+/P5//qd+/P5//qeffn89/9fdvPf9T//ujn8//1PPvz+d/6vn35/M/9fz78/mf/P17+fuv4vPn8vdf1fM/9b8/+vn8Tz3//nz+q79/6/mfev79+fxP/v69/P1X9fnz1L9/9fP5n/rfH328XP7+qzj/V7//Kp//yeff577/6ufzX/39G58/l7//qp7/qf/90c/nf/L59+r3X+XzP/n8+9z3X/18/ieffy9//1U9/1P/+6Ofz3/192+d/yeff5/7/qufz//k79/L339Vnz9P/ftXHy9Xv/+qPj8vf/9VnP+r33+Vz//k8+9z33/18/mffP69/P1X9fxP/e+Pfj7/k8+/V7//qp7/ue+/+vn8T/7+vfz9V/H5c/n7r+r5L/7+rc/Py99/Vef/yeff577/6ufzP/n79/L3X8Xnz+Xvv6rnf+p/f/Tz+Z98/r36/Vf5/Bd//+bzP/n79/L3X9Xnz5P//tXV77/Kz88nn3+vfv9VPv+Tz7/Pff/Vz+d/8vn38vdf1fM/+b8/uvz9V3X+n3z+fe77r34+/5O/fy9//1V8/lz+/qt6/if/90eXv/+qzv/V37/1/E8+/z73/Vc/n//J59/L339Vz//k//7o8vdfxfm/+v1X+fxPPv8+9/1XP5//6u/f+Py5/P1X9fxP/u+PLn//VZ3/J59/n/z+q9uT3391u/z9V/Pnz+3y91/V8z/3vz+6vVz9/Vvn/7nn39uT3391e/L7r26Xv/+qPn+e+/evble//6o+Py9//1Wc/6vff5XP/9zz7+3J77+6Xf7+q/r8ee7fv7pd/f6r/Px87vn3dvX7r+r5n/z+q9uT3391u/z9V/H5c/n7r+r5L/7+rc/Py99/Vef/yeffJ7//6vbk91/dLn//VXz+XP7+q3r+5/73R7fL338V5//q91/l81/8/ZvP/+Tv38vff1WfP8/9+1e3q99/lZ+fTz7/Xv3+q3z+J59/n/z+q9vl77+Kz5/L339Vz//c//7odvn7r+r8P/n8++T3X92e/P6r2+Xvv4rPn8vff1XP/9z//uh2+fuv6vxf/f1bz//k8++T3391u/z9V/X58+S/f3X1+6/q8/Py91/F+b/6/Vf5/E8+/z75/Ve3y99/FZ8/l7//qp7/uf/90e3y91/V+X/y+ffJ77+6Pfn9V7fL338Vnz+Xv/+qnv/J//3R5e+/qvP/5PPvk99/dXvy+69ul7//qj5/nvz3r65+/1V9fl7+/qs4/1e//yqf/8nn3ye//+p2+fuv6vPnyX//6ur3X+Xn55PPv1e//6qe/8nvv7o9+f1Xt8vffxWfP5e//6qe/+Lv3/r8vPz9V3X+n3z+ffL7r25Pfv/V7fL3X82fP6+Xv/+qnv+5//3R6+Xvv5rP/+vV77/K57/4+zef/7nfv6+Xv/+qPn+e+/evXq9+/1V+fj73/Pt69fuv8vmfe/59ffL7r14vf/9VfP5c/v6rev7n/vdHr5e//6rO/3PPv69Pfv/V65Pff/V6+fuv4vPn8vdf1fM/978/er38/Vd1/q/+/q3nf/L598nvv3q9/P1X9fnz3L9/9Xr1+6/q8/Py91/F+b/6/Vf5/E8+/z75/Vevl7//Kj5/Ln//VT3/c//7o9fL339V5//J598nv//q9cnvv3q9/P1X8flz+fuv6vmf+98fvV7+/qs6/08+/z75/VevT37/1evl77+qz58n//2rq99/VZ+fV7//6v19/Xr+9//607+f/+Lv33z+i79/8/kv/v7N57/4+/fj5evX83/81//ttzs//Pnz/42/fvjz9eMzfvj99dfP/v1H/3K5+Hv9YS4X74WHuVy8Qx7mcvG+eZTL1e8te5jLxXvsYS4X77yHuVy8Hx/msrjcddG791307n0XvXvfRe/ed9G7d12ufk/gw1z07n0XvXvfRe/ed1lc7rro3fsueve+i96976J377vo3bsuV7+X82Eueve+i96976J377ssLndd9O59F71730Xv3nfRu/dd9O5dl6vfg/swF71730Xv3nfRu/ddFpe7Lnr3voveve+id++76N37Lnr3nsuPq987/TAXvXvfRe/ed9G7910Wl7sueve+i96976J377vo3fsueveuy9XveX+Yi96976J377vo3fsui8tdF71730Xv3nfRu/dd9O59F7171+XqexUe5qJ377vo3fsueve+y+Jy10Xv3nfRu/dd9O59F71730Xv3nW5+h6Th7no3fsueve+i96977K43HXRu/dd9O59F71730Xv3nfRu3ddrr436GEueve+i96976J377ssLndd9O59F71730Xv3nfRu/dd9O5dl6vv6XqYi96976J377vo3fsui8tdF71730Xv3nfRu/dd9O59F71718V+tf/BRe/ed9G791307n2XxeWui96976J377vo3fsueve+i96962K/2v/gonfvu+jd+y56977L4nLXRe/ed9G791307n0XvXvfRe/edbFf7X9w0bv3XfTufRe9e99lcbnronfvu+jd+y56976L3r3vonfvutiv9j+46N37Lnr3voveve+yuNx10bv3XfTufRe9e99F79530bv3XJb9av+Di96976J377vo3fsui8tdF71730Xv3nfRu/dd9O59F71718V+tf/BRe/ed9G791307n2XxeWui96976J377vo3fsueve+i96962K/2v/gonfvu+jd+y56977L4nLXRe/ed9G791307n0XvXvfRe/e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N70Lb3oX3vSuvOldedO78qZ35Z29a+dJ4k3vypvelTe9K296V970bri3lqsVniTe9G686d1407vxpnfjTe/Gm96NN70bb3p33tm7887enTe9O296d9707rzp3XnTu+PeWq6+eZJ403vwpvfgTe/Bm96DN70Hb3oP3vQevOk9eGfvwTt7D970nrzpPXnTe/Km9+RN79lx56U5eJJ403vypvfkTe/Jm96LN70Xb3ov3vRevOm9Ok8S7+y9eNN78ab34k3vxZvemze9N++t5X/QtYySeNOb17VcvK7l4nUtF69ruXhdy8XrWi5e13LxupaL17VcvK7l4nUtF69ruQ5veh/e9D68t5YHxznZvK7l5nUtN69ruXldy33hpvfmdS03r2u5eV3Lzetabl7XcvO6lpvXtdy8ruUuvOldeNO74N5a7oLjnGxe13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l5nUtd+NN78ab3g331nI3HOdk87qWm9e13Lyu5eZ1LTeva7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7k7b3p33vTuvLeWA8c52byu5eZ1LTeva7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7l5XcvN61ruyZvekze9J++t5cRxTjava7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7l5XcvN61puXtdy87qWm/ddy837ruXevLeW/0HXMkriTW9e13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l5n3XcvO+a3ku3FvLc+E4J4fXtTy8ruW5cNP78LqWh9e1PLyu5eF1LQ+va3l4XcvD61oeXtfy8LqWh9e1PLzvWh7edy1Pwb21PAXHOTm8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHt53LQ/vu5bnP+hapvNSw3FODq9reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH913Lw/uu5Rm8t5YDxzk5vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh7edy0P77uWZ/LeWk4c5+TwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXjftTy871qezXtruXGck8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8uK5lvXDftbwl0ab3LYn21vKWROOc3JJo0/uWRJvetyTa9L4l0ab3LYk2vW9JvOmN61reknjTG9e1vCXRzt63JN70xnUtb0m86Y37ruUtiTe9C+2tZb0qjXNyS+JNb1zX8pbEm964ruUtiTe9cV3LWxJveuO6lrck3tkb17W8JfGmN65reUviTW/cdy1vSbzp3WhvLW9JNM7JLYk3vXFdy3rhupa3JN70xnUtb0m86Y3rWt6SeNMb17W8JfHO3riu5S2JN71xXctbEm96475reUvivbX8D7qWURJveuO6lrck3vTGdS1vSbzpjeta3pJ40xvXtbwl8c7euK7lLYk3vXFdy1sSb3rjvmt5S+JN78V7a7lonJNbEm9647qWtyTe9MZ1LW9JvOmN61reknjTG9e1rBeua3lL4p29cV3LWxJveuO6lrck3vTGfdfylsR7a7lpnJNbEm9647qWtyTe9MZ1LW9JvOmN61reknjTG9e1vCXxzt64ruUtCTe9C69rWXhdy4L7ruUtCTe9y9Vp56Vy0TgntyTc9C68rmXhdS0Lr2tZeF3LwutaFl7XsvC6loXXtSy8rmXhdS0Lr2tZeF3LgvuuZS2471reknBvLUvFcU4Kr2tZeF3LwutaFl7XsvC6loXXtSy8rmXhdS0Lr2tZeF3LwutaFl7XsvC6lgX3XctbEm96N9xby9JwnJPC61oWXtey8LqWhde1LLyuZeF1LQuva1l4XcvC61oWXtey8LqWhde1LLyuZcF91/KWxJveg/fWcuA4J4XXtSy8rmXhdS0Lr2tZeF3LwutaFl7XsvC6loXXtSy8rmXhdS0Lr2tZeF3Lgvuu5S2JN70X763lwnFOCq9rWXhdy8LrWhZe17LwupaF17UsvK5l4XUtC69rWXhdy8LrWhZe17LwupYF913LWxJvem/eW8uD45wUXtey8LqWhde1LLyuZeF1LQuva1l4XcvC61oWXtey8rqWlde1rLyuZeV1LeuFm96V913LeuHeWtYLxzmpvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlbedy0r77uW9RNdy1F+/+Ey+gmSftUV/udP/7rQ9b/+9P4tqfMkDZ6kyZO0flrSbPu3pLkfJW2epIOT9Imu5aclFZ6kypPUeJI6T9LgSZo8Sbzp3XjTu/Gmd+dN786b3p03vTtvenfe9O686d1507vzpnfnTe/Om96DN70Hb3oP3vQevOk9eNN78Kb34E3vwZvegze9B296T970nrzpPXnTe/Km9+RN78mb3pM3vSdvek/e9J686b1403vxpvfiTe/Fm96LN70Xb3ov3vRevOm9eNN78ab35k3vzZvemze9N296b9703rzpvXnTe/Om9+ZN782b3oc3vQ9veh/e9D4/Pr1XKb8lrTaeJHWepMGTNHmSFk/S5kk6NEntuniSCk9S5UnCTe924aZ3u3DTu1246d0u3PRuF256t4s3vQtvehfe9C686V1407vwpnfhTe/Cm96FN70Lb3oX3vSuvOldedO78qZ35U3vypvelTe9K296V970rrzpXXnTu/Gmd+NN78ab3o03vRtvejfe9G686d1407vxpnfjTe/Om96dN707b3p33vTuvOndedO786Z3503vzpvenTe9B296D970HrzpPXjTe/Cm9+BN78Gb3oM3vQdveg/e9J686T1503vypvfkTe/Jm96TN70nb3pP3vSevOk9edN78ab34k3vxZveize9F296L970XrzpvXjTe/Gm9+JN782b3ps3vTdvem/e9N686b1503vzpvfmTe/Nm96bN70Pb3of3vQ+vOnN61o2Xtey8bqWjde1bLyuZeN1LRuva9l5XcvO61p2Xtey87qW/cJN787rWnZe17Lzupad17XsvK5l53UtO69r2Xldy87rWnZe17Lzupad17XsvK5l53UtO69r2Xldy87rWnZe17Lzupad17XsP9+1PG39lnRO/z+SHv7uPX4bKHvXJwPTbmDZDWy7gSM38PON0k8bKHYD1W6gwQ2U6x8DdT4Z6HYD9E0cDdA3cTQg2sSrPxkQbeJnA6JN/Gig2zdxt2/ibt/Enb6JowH6Jo4G7Jm42zNxt2fiDt/Ep9Tff/ep+8kAfBNHAwO+ibMB+CbOBuibOOWBYc/EP99Q/7QBeyYeok38GGiGPRMP+6/Tw/7r9LRn4mnPxNOeiac9E/88beDTBuyZeMI3cTxOT/gmzgbsmXjaM/GyZ+Jlz8QLvomzAfgmzgbomzhFymXPxMv+nnjRM3E0YH9PvOzvibc9E297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ST/OwfoDSYUn6ac32v339X/+6rbD/xjGHv/zh+dVnuQ3t/zulj/c8qdb/nLL3275Ry3/x9lUH5Zf3PLdW7e5t+6PM6k+LN+9dZt76zb31m3urdvcW7e7t253b93u3rrdvXV/nD/1YfnurdvdW7e7t253b93u3rrDvXWHe+sO99Yd7q3746ypD8t3b93h3rrDvXWHe+sO99ad7q073Vt3urfudG/dH+dKfVi+e+tO99ad7q073Vt3urfucm/d5d66y711l3vr/jhD6sPy3Vt3ubfucm/d5d66y711t3vrbvfW3e6tu91b98d5UR+W79662711t3vrbvfW3e6te9xb97i37nFv3ePeuj/OhvqwfPfWPe6te9xb97i37lFv3XOpt+651Fv3XOqtey711j2XeuueS711z6XeuudSb91zqbfuudxbt7i3bnFv3eLeusW9dX+c+fRh+e6tW9xbt7i3bnFv3eLeutW9dat767rZVMfNpjpuNtVxs6mOm0113Gyq42ZTHTeb6rjZVMfNpjpuNtVxs6mOm0113Gyq42ZTHTeb6rjZVMfNpjpuNtVxs6mOm0113Gyq42ZTHTeb6rjZVMfNpjpuNtVxs6mOm0113Gyq42ZTHTeb6rjZVMfNpjpuNtVxs6mOm0113Gyq42ZTHTeb6rjZVMfNpjpuNtVxs6mOm0113Gyq42ZTHTeb6rjZVMfNpjpuNtVxs6mOm0113Gyq42ZTHTeb6rjZVMfNpjpuNtVxs6mOm0113Gyq42ZTHTeb6rjZVMfNpjpuNtVxs6mOm0113Gyq42ZTHTeb6rjZVMfNpjpuNtVxs6nOz7Op7pex//zVvT5J+vFN2sr5/Ve3Nf//JPXr5xlSWVLhSao8SY0nqfMkDZ6kyZO0eJI2TxJvehfe9C686V1407vwpnfhTe/Cm96FN70Lb3oX3vQuvOldedO78qZ35U3vypvelTe9K296V970rrzpXXnTu/Kmd+NN78ab3o03vRtvejfe9G686d1407vxpvePszvqbPt//nSdez9JOjhJP87Y+ANJhSep8iQ1nqTOkzR4kiZP0uJJ4k3vzpvegze9B296D970HrzpPXjTe/Cm9+BN78Gb3oM3vQdvek/e9J686T1503vypvfkTe/Jm96TN70nb3pP3vSevOm9eNN78ab34k3vxZveize9F296L970XrzpvXjTe/Gm9+ZN782b3ps3vTdvem/e9N686b1503vzpvfmTe/Nm96HN70Pb3of3vQ+vOl9eNP78Kb34U3vw5vehze9D256lws3vcuFm97lwk3vcuGmd7l+fHqvUn5LWm08SRo8SZMnafEkbZ6kg5P0413LP5BUeJIqT1LjSeJN78Kb3oU3vQtvehfe9C686V1507vypnflTe/Km96VN70rb3pX3vSuvOldedO78qZ3403vxpvejTe9G296N970brzp3XjTu/Gmd+NN78ab3p03vTtvenfe9O686d1507vzpnfnTe/Om96dN707b3oP3vQevOk9eNN78Kb34E3vwZvegze9B296D970HrzpPXnTe/Km9+RN78mb3pM3vSdvek/e9J686T1503vypvfiTe/Fm96LN70Xb3ov3vRevOm9eNN78ab34k3vxZvemze9N296b9703rzpvXnTe/Om9+ZN782b3ps3vTdveh/e9D686X140/vwpvfhTe/Dm96HN70Pb3of3vQ+uOldL9z0rhduetcLN73rhZve9cJN78rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l5XUtK69r2Xhdy8brWjZe17Lxupbtwk3vxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXj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2VS3fPfWVbOpbvnuratmU93y3VtXzaa65bu3rppNdct3b101m+qW7966ajbVLd+9ddVsqlu+e+uq2VS3fPfWVbOpbvk/vnXbGf/81b0+SPp53lQr5/df3dZ8klR4kipPUuNJ6jxJgydp8iQtnqTNk3RwkjZvem/e9N686b1503vzpvfmTe/Nm96bN703b3pv3vQ+vOl9eNP78Kb34U3vw5vehze9D296H970PrzpfXDTu1y46V0u3PQuF256lws3vcuFm97lwk3vcuGmd7lw07tcuOldLt70LrzpXXjTu/Cmd+FN78Kb3oU3vQtvehfe9C686V140/vHuQ51tv0/f7rOvZ8kFZ6kypPUeJI6T9LgSZo8SYsnafMkHZykxpvejTe9G296N970brzp3XjTu/Gmd+NN78ab3o03vTtvenfe9O686d1507vzpnfnTe/Om96dN707b3p33vQevOk9eNN78Kb34E3vwZvegze9B296D970HrzpPXjTe/Km9+RN78mb3pM3vSdvek/e9J686T1503vypvfkTe/Fm96LN70Xb3ov3vRevOm9eNN78ab34k3vxZveize9N296b9703rzpvXnTe/Om9+ZN7x/vWtZVym9Jq40nSYsnafMkHZykH+9a/oGkwpNUeZIaT1LnSRo8SbzpfXjT+/Cm98FN73rhpne9cNO7XrjpXS/c9K4XbnrXCze964Wb3vXCTe964aZ3vXjTu/Cmd+FN78Kb3oU3vQtvehfe9C686V1407vwpnfhTe/Km96VN70rb3pX3vSuvOldedO78qZ35U3vypvelTe9G296N970brzp3XjTu/Gmd+NN78ab3o03vRtvejfe9O686d1507vzpnfnTe/Om96dN707b3p33vTuvOndedN78Kb34E3vwZvegze9B296D970HrzpPXjTe/Cm9+BN78mb3pM3vSdvek/e9J686T1503vypvfkTe/Jm96TN70Xb3ov3vRevOm9eNN78ab34k3vxZveize9F296L9703rzpvXnTe/Om9+ZN782b3ps3vXldy8rrWlZe17LyupaV17WsvK5l5XUtK69rWXldy8rrWlZe17LyupaV17WsvK5l43UtG69r2Xhdy8brWrYLN70br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXndS07r2vZeV3Lzuta9gs3vTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17Lyu5eB1LQevazl4XcvB61qOCze9B69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13Lwupbj57uWp63fks7p/0fSw9+9x28DZe/6ZGDYDUy7gWU3sO0GjtzAz/dP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VvfWre6t++MkqQ/Ld2/d6t661b11q3vrVvfWbe6t29xbt7m3bnNv3R+nRn1YvnvrNvfWbe6t29xbt7m3bndv3e7eut29dbt76/44IerD8t1bt7u3bndv3e7eut29dYd76w731h3urTvcW/fHaVAflu/eusO9dYd76w731h3urTvdW3e6t+50b93p3ro/Tn76sHz31p3urTvdW3e6t+50b93l3rrLvXWXe+su99b9ed7UZ+W7t66aTXXLd29dNZvqlu/eumo21S3fvXXVbKpbvnvrqtlUt3z31lWzqW757q2rZlPd8t1bV82muuW7t66aTXXLd29dNZvqlu/eumo21S3fvXXVbKpbvnrrFjebqrjZVMXNpipuNlW51Fu3uNlUxc2mKm42VXGzqYqbTVXcbKriZlMVN5uquNlUxc2mKm42VXGzqYqbTVXcbKriZlMVN5uquNlUxc2mKm42VXGzqYqbTVXcbKriZlMVN5uquNlUxc2mKm42VXGzqYqbTVXcbKriZlMVN5uquNlUxc2mKm42VXGzqYqbTVXcbKriZlMVN5uquNlUxc2mKm42VXGzqYqbTVXcbKry82yqdsY/f3WvT5J+fJO2cn7/1W3NJ0mNJ6nzJA2epMmTtHiSNk/SwUn6eR5SllR4knjTe/Km9+RN78mb3pM3vSdvek/e9J686b1403vxpvfiTe/Fm96LN70Xb3ov3vRevOm9eNN78ab35k3vzZvemze9N296b9703rzpvXnTe/Om9+ZN782b3oc3vQ9veh/e9D686X140/vwpvfhTe/Dm96HN70PbnrXCze964Wb3vXHuQ51tv0/f7rOvZ8kNZ6kzpM0eJImT9LiSdo8SQcn6ce5A38gqfAk8aZ34U3vwpvehTe9C296F970LrzpXXjTu/Kmd+VN78qb3pU3vStvelfe9K686V1507vypnflTe/Gm96NN70bb3o33vRuvOndeNO78aZ3403vxpvejTe9O296d9707rzp3XnTu/Omd+dN786b3p03vTtvenfe9B686T1403vwpvfgTe/Bm96DN70Hb3oP3vQevOk9eNN78qb35E3vyZvekze9J296T970nrzpPXnT+8e7lnWV8lvSauNJ0sFJ+vGu5R9IKjxJlSep8SR1nqTBkzR5khZPEm96L9703rzpvXnTe/Om9+ZN782b3ps3vTdvem/e9N686b150/vwpvfhTe/Dm96HN70Pb3of3vQ+vOl9eNP78Kb3wU3vduGmd7tw07tduOndLtz0bhduercLN73bhZve7cJN73bhpne7eNO78KZ34U3vwpvehTe9C296F970LrzpXXjTu/Cmd+FN78qb3pU3vStvelfe9K686V1507vypnflTe/Km96VN70bb3o33vRuvOndeNO78aZ3403vxpvejTe9G296N9707rzp3XnTu/Omd+dN786b3p03vTtvenfe9O686d1503vwpvfgTe/Bm96DN70Hb3oP3vQevOk9eNN78Kb34E3vyZvekze9J296T970nrzpPXnTe/Km9+RNb17XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3LxutaNl7XsvG6lo3XtWy8rmXjdS0br2vZeF3Lxutadl7XsvO6lp3Xtey8rmW/cNO787qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61p2Xtey87qWnde17LyuZed1LTuva9l5XcvO61oOXtdy8LqWg9e1HLyu5bhw03vwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69rOXhdy8HrWg5e13LwupaD17UcvK7l4HUtB69r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Pw/dsZUB1BdbfwDUF1t/ANSZ+A8AfRNHALXZ4w+A2uzxB0Btu/wDoLZd/gFQZ+IXgO7YygDqTPwHQJ2J/wCoM/EfAPomjgDqi60/AOqLrT8A6kz8B0Cdif8A2DMx3bGVAeyZmO7YygDqi60/APBNnAHsmRjv2IoAarPHHwC12eMPgNp2+QLQHVsZwJ6J6Y6tDGDPxHTHVgawZ2K6YysDqC+2/gCoL7b+ANgzMd2xlQHsmZju2MoA9kxMd2xlAPXF1h8A9cXWHwD7X6fpjq0MYN/EdMdWBrBvYrdj6w/ArzfxGLP+fvQ469OTJu9Ji/ekzXvSrzfa+3nz348eN/xnWHf988P7aZ+ef93PL/Xzf26p+vLzm/v53f384X7+dD9/uZ+/3c93b93t3rrbvXWPe+se99Y97q173Fv35yaqLz/fvXWPe+se99Y97q173Fv3urfudW/d69661711f26d+vLz3Vv3urfudW/d69661711y711y711y711y711f26Y+vLz3Vu33Fu33Fu33Fu31Fu3Peqt2x711m2Peuu2R71126Peuu1Rb932qLdue9Rbtz3qrdse99Zt7q3b3Fu3ubduc2/dn5ujvvx899Zt7q3b3Fu3ubduc2/d7t663b11u3vrdvfW/bkl6svPd2/d7t663b11u3vrdvfWHe6tO9xbd7i37nBv3Z8bob78fPfWHe6tO9xbd7i37nBv3eneutO9dad760731v25/enLz3dv3eneutO9dad760731l3urbvcW3e5t+5yb93fe6G++3z31l3uret2UzW3m6q53VTN7aZqbjdVc7upmttN1dxuquZ2UzW3m6q53VTN7aZqbjdVc7upmttN1dxuquZ2UzW3m6q53VTN7aZqbjdVc7upmttN1dxuquZ2UzW3m6q53VTN7aZqbjdVc7upmttN1dxuquZ2UzW3m6q53VTN7aZqbjdVc7upmttN1dxuquZ2UzW3m6q53VTd7abqbjdVd7uputtN1R/11u1uN1V3u6m6203V3W6q7nZTdbebqrvdVN3tpupuN1V3u6m6203V3W6q7nZTdbebqrvdVN3tpupuN1V3u6m6203V3W6q7nZTdbebqrvdVN3tpupuN1V3u6m6203V3W6q/ns31aj170fP/ulJP9+ko9Xfjx5nf3rS4j1p8550eE+6vCcV7km/9yzlJzXekzrvSYP3JN70nrzpPXnTe/Km9+RN78mb3os3vRdvei/e9F686b1403vxpvfiTe/Fm96LN70Xb3pv3vTevOm9edN786b35k3vzZvemze9N296b9703rzpfXjT+/Cm9+FN78Ob3oc3vQ9veh/e9D686X140/vwpvflTe/Lm96XN70vb3r/3OvwBpD7z0+/v6zdT09avCdt3pMO70mX96TCPennPoP/8KTGe1LnPWnwnsSb3sWb3sWb3sWb3sWb3oWb3uPBTe/x4Kb3eHDTezy46T0e3PQeD256jwc3vceDm97jwU3v8fCmd+NN78ab3o03vRtvejfe9G686d1407vxpnfjTe/Gm96dN707b3p33vTuvOndedO786Z3503vzpvenTe9O296D970HrzpPXjTe/Cm9+BN78Gb3oM3vQdveg/e9B686T1503vypvfkTe/Jm96TN70nb3pP3vSevOk9edN78qb3z7uW/bT290lnrE9Parwndd6TBu9Jk/ekxXvS5j3p8J50eU8q3JM2b3pv3vTevOm9edN786b35k3vzZvemze9N296b970PrzpfXjT+/Cm9+FN78Ob3oc3vQ9veh/e9D686X140/vypvflTe/Lm96XN70vb3pf3vS+vOl9edP78qb35U3v4k3v4k3v4k3v4k3v4k3v4k3v4k3v4k3v4k3vwk3v+eCm93xw03s+uOk9H9z0ng9ues8HN73ng5ve88FN7/ngpvd8eNO78aZ3403vxpvejTe9G296N970brzp3XjTu/Gmd+NN786b3p03vTtvenfe9O686d1507vzpnfnTe/Om96dN70Hb3oP3vQevOk9eNN78Kb34E3vwZvegze9B296D970nrzpPXnTe/Km9+RN78mb3pM3vSdvek/e9J686T1505vXtZy8ruXkdS0nr2s5eV3LyetaTl7XcvK6lpPXtZy8ruXkdS0nr2s5eV3LyetaTl7XcvK6lpPXtZy8ruXkdS0nr2s5eV3LyetaTl7XcvK6lpPXtZy8ruXkdS0nr2s5eV3LyetaTl7XcvK6lpPXtZy8ruXkdS0nr2s5eV3LyetaTl7XcvK6lpPXtZy8ruXkdS0nr2s5eV3LyetaTl7XcvK6lpPXtZy8ruXidS0Xr2u5eF3Lxetargc3vReva7l4XcvF61ouXtdy8bqWi9e1XLyu5eJ1LReva7l4XcvF61ouXtdy8bqWi9e1XLyu5eJ1LReva7l4XcvF61ouXtdy8bqWi9e1XLyu5eJ1LReva7l4XcvF61ouXtdy8bqWi9e1XLyu5eJ1LReva7l4XcvF61ouXtdy8bqWi9e1XLyu5eJ1LReva7l4XcvF61ouXtdy8bqWi9e1XLyu5eJ1LReva7l4XcvF61ouXtdy8bqWi9e1XLyu5eJ1LReva7l4XcvF61ouXtdy8bqWi9e1XLyu5eJ1LReva7l4XcvF61ouXtdy8bqWi9e1XLyu5eJ1LReva7l4XcvF61ouXtdy8bqWi9e1XLyu5eJ1LReva7l4XcvF61ouXtdy8bqWi9e1XLyu5eJ1LReva7l4XcvF61ouXtdy8bqWi9e1XLyu5eZ1LTeva7l5XcvN61ruBze9N69ruXldy83rWm5e13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l5nUtN69ruXldy83rWm5e13Lzupab17XcvK7l4XUtD69reXhdy8PrWp4HN70Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5ft+1rHH+Pqlq/s+TPnz2XX8B2r39E0DJAX7f4/w2QLMDdDvAsANMO8CyA2w4QHv+Bej7E8CxA9A3cQSgb+IEsESb+MxPAKJN/BlAtIk/A9g38e+7xN8GsG/iRd/EEYC+iSOAPRMveybe9ky84Zu4Wv/72dXvJwD4Js4A8E2cAeCbOAPQN3HKA9ueibc9E297Jt6iTfwx0Bx7Jj72v04f+1+njz0T/77j/20AeyY+9kx87Jn42DPxgW/i+Ov0hW/iDGDPxNeeia89E//e1/BtAPgmzgDwTZwB7Jn42jPxtX9PXPRMHAHs3xOX/Xvismfi37s3vg1gz8Rlz8Rlz8Rlz8Ql/574PvLvie8jz8T3kWfi+8gz8X3gmzgDyDPxfeSZ+D7wTZwB4Js4A8gz8W3yTHwbPRNHAHomjgCiTPwp1N/fO3G+DSDPxLfJM/Ft8kx8mzwT32bPxN2eibv8Yut2+cXW7fZM/Hu/0bcB7Jm42zNxt2fibs/EXX6xdYf8YusOeyYe9kw86Jk4AsA3cQYQZeKPoX6IMvFnAHsmtju2rt2xde2OrWt3bF27Y+vaHVvX7ti6dMdW/HWa7tjKAPZMTHdsZQB7JqY7tjKA/WKL7tjKAPZMjHdsRQC52ePiHVsRQJSJP4Z6k2PrM4A9E9sdW5fu2MoA9kxMd2xlAPomjgD2iy28YysC2DMx3bGVAeyZmO7YygD2TEx3bGUA+8UW3bGVAeyZGO/YigBys8fFO7YigNx2eemOrQxgz8R0x1YGsGdiumMrA9gzMd2xlQHsF1t4x1YEsGdiumMrA9gzMd2xlQHsmZju2MoA9ostumMrA9gzMd6xFQHkZo/CO7YigNx2WXTHVgaQZ+J64Js4A8gzcdEdWxlAnomL7tjKAPKLrcI7tiKAPBMX3bGVAeSZuOiOrQwgz8RFd2xlAPnFVtEdWxnAnonxjq0IIDd7FN6xFQHktsuiO7YygD0T0x1bGcCeiemOrQxgz8R0x1YGkF9sFd6xFQHsmZju2MoA9kxMd2xlAHsmpju2MoD8Yqvojq0MYM/EeMdWBJCbPQrv2IoActtl0R1bGcCeiemOrQxgz8R0x1YGsGdiumMrA9gvtvCOrQhgz8R0x1YGsGdiumMrA9gzMd2xlQHsF1t0x1YGsGdivGMrAsjNHoV3bEUAue2y6I6tDGDPxHTHVgawZ2K6YysD2DMx3bGVAewXW3jHVgSwZ2K6YysD2DMx3bGVAeyZmO7YygD2iy26YysD2DMx3rEVAeRmj8I7tiKA3HZZdMdWBrBnYrpjKwPYMzHdsZUB7JmY7tjKAPaLLbxjKwK4M3F76I6tDODOxC+AOxO/AO5M/ALAN3EGcF9svQDui60XwJ2JXwB3Jn4B3GaP9uAdWxHAbbt8Ady2yxfAnYlfAPgmzgDuTPwCuDPxC+DOxC+AOxO/AO6LrfbgHVsRwJ6J6Y6tDGDPxHTHVgawZ2K6YysDuC+2XgD3xdYLYM/EeMdWBHCbPV4At9njBXDbLl8A+CbOAPZMTHdsZQB7JqY7tjKAPRPTHVsZwH2x9QK4L7ZeAHsmpju2MoA9E9MdWxnAnonpjq0MYL/Yoju2MoA9E+MdWxHAbfZ4AeCbOAO4bZcvgNt2+QLYMzHdsZUB7JmY7tjKAPZMTHdsZQD7xRbesRUB7JmY7tjKAPZMTHdsZQB7JqY7tjKA/WKL7tjKAPZMjHdsRQC32eMFcJs9XgC37fIFcNsuXwB7JqY7tjKAPRPTHVsZwJ6J6Y6tDGC/2MI7tiKAPRPTHVsZwJ6J6Y6tDGDPxHTHVgawX2zRHVsZwJ6J8Y6tCGA3e+AdWxHAbbtsje7YygDyTNzojq0MIM/E7YFv4gwgz8SN7tjKAPKLrYZ3bEUAeSZudMdWBpBn4kZ3bGUAeSZudMdWBpBfbDW6YysDyDNxwzu2IoDc7NHwjq0IILddNrpjKwPYMzHdsZUB7JmY7tjKAPZMTHdsZQD5xVbDO7YigD0T0x1bGcCeiemOrQxgz8R0x1YGkF9sNbpjKwPYMzHesRUB5GaPhndsRQC57bLRHVsZwJ6J6Y6tDGDPxHTHVgawZ2K6YysD2C+28I6tCGDPxHTHVgawZ2K6YysD2DMx3bGVAewXW3THVgawZ2K8YysCyM0eDe/YigBy22WjO7YygD0T0x1bGcCeiemOrQxgz8R0x1YGsF9s4R1bEcCeiemOrQxgz8R0x1YGsGdiumMrA9gvtuiOrQxgz8R4x1YEkJs9Gt6xFQHktstGd2xlAHsmpju2MoA9E9MdWxnAnonpjq0MYL/Ywju2IoA9E9MdWxlAnok73bGVAeSZuNMdWxlAfrHVH/gmzgDyTNzxjq0IIDd7dLxjKwLIbZed7tjKAPJM3OmOrQwgz8Sd7tjKAPJM3OmOrQwgv9jqeMdWBLBnYrpjKwPYMzHdsZUB7JmY7tjKAPKLrU53bGUAeybGO7YigNzs0fGOrQggt112umMrA9gzMd2xlQHsmZju2MoA9kxMd2xlAPnFVsc7tiKAPRPTHVsZwJ6J6Y6tDGDPxHTHVgaQX2x1umMrA9gzMd6xFQHkZo+Od2xFALntstMdWxnAnonpjq0MYM/EdMdWBrBnYrpjKwPYL7bwjq0IYM/EdMdWBrBnYrpjKwPYMzHdsZUB7BdbdMdWBrBnYrxjKwLIzR4d79iKAHLbZac7tjKAPRPTHVsZwJ6J6Y6tDGDPxHTHVgawX2zhHVsRwJ6J6Y6tDGDPxHTHVgawZ2K6YysD2C+26I6tDGDPxHjHVgSwmz3wjq0IILdddrpjKwPIM/GgO7YygDwTD7pjKwPIM/F46Js4AsgvtgbesRUB5Jl40B1bGUCeiQfdsZUB5Jl40B1bGUB+sTXojq0MIM/EA+/YigBys8fAO7YigNx2OeiOrQxgz8R0x1YGsGdiumMrA9gzMd2xlQHkF1sD79iKAPZMTHdsZQB7JqY7tjKAPRPTHVsZQH6xNeiOrQxgz8R4x1YEkJs9Bt6xFQHktstBd2xlAHsmpju2MoA9E9MdWxnAnonpjq0MYL/Ywju2IoA9E9MdWxnAnonpjq0MYM/EdMdWBrBfbNEdWxnAnonxjq0IIDd7DLxjKwLIbZeD7tjKAPZMTHdsZQB7JqY7tjKAPRPTHVsZwH6xhXdsRQB7JqY7tjKAPRPTHVsZwJ6J6Y6tDGC/2KI7tjKAPRPjHVsRQG72GHjHVgSQ2y4H3bGVAeyZmO7YygD2TEx3bGUAeyamO7YygP1iC+/YigD2TEx3bGUAeyamO7YygDwTT7pjKwPIL7Ym3bGVAeSZeD70TRwB5GaPiXdsRQC57XLSHVsZQJ6JJ92xlQHkmXjSHVsZQJ6JJ92xlQHkF1sT79iKAPJMPOmOrQxgz8R0x1YGsGdiumMrA8gvtibdsZUB7JkY79iKAHKzx8Q7tiKA3HY56Y6tDGDPxHTHVgawZ2K6YysD2DMx3bGVAeQXWxPv2IoA9kxMd2xlAHsmpju2MoA9E9MdWxlAfrE16Y6tDGDPxHjHVgSQmz0m3rEVAeS2y0l3bGUAeyamO7YygD0T0x1bGcCeiemOrQxgv9jCO7YigD0T0x1bGcCeiemOrQxgz8R0x1YGsF9s0R1bGcCeifGOrQggN3tMvGMrAshtl5Pu2MoA9kxMd2xlAHsmpju2MoA9E9MdWxnAfrGFd2xFAHsmpju2MoA9E9MdWxnAnonpjq0MYL/Yoju2MoA9E+MdWxHAbvbAO7YigNx2OemOrQxgz8R0x1YGkGfiRXdsZQB5Jl50x1YGkF9srYe+iSOAPBMvumMrA8gz8aI7tjKAPBMvumMrA8gvthbdsZUB5Jl44R1bEUBu9lh4x1YEkNsuF92xlQHsmZju2MoA9kxMd2xlAHsmpju2MoD8YmvhHVsRwJ6J6Y6tDGDPxHTHVgawZ2K6YysDyC+2Ft2xlQHsmRjv2IoAcrPHwju2IoDcdrnojq0MYM/EdMdWBrBnYrpjKwPYMzHdsZUB5BdbC+/YigD2TEx3bGUAeyamO7YygD0T0x1bGcB+sUV3bGUAeybGO7YigNzssfCOrQggt10uumMrA9gzMd2xlQHsmZju2MoA9kxMd2xlAPvFFt6xFQHsmZju2MoA9kxMd2xlAHsmpju2MoD9Yovu2MoA9kyMd2xFALnZY+EdWxFAbrtcdMdWBrBnYrpjKwPYMzHdsZUB7JmY7tjKAPaLLbxjKwLYMzHdsZUB7JmY7tjKAPZMTHdsZQD5xdamO7YygDwTb7xjKwLIzR77gW/iDCC3XW66YysDyDPxpju2MoA8E2+6YysDyDPxpju2MoD8YmvjHVsRQJ6JN92xlQHkmXjTHVsZwJ6J6Y6tDCC/2Np0x1YGsGdivGMrAsjNHhvv2IoActvlpju2MoA9E9MdWxnAnonpjq0MYM/EdMdWBpBfbG28YysC2DMx3bGVAeyZmO7YygD2TEx3bGUA+cXWpju2MoA9E+MdWxFAbvbYeMdWBJDbLjfdsZUB7JmY7tjKAPZMTHdsZQB7JqY7tjKA/WIL79iKAPZMTHdsZQB7JqY7tjKAPRPTHVsZwH6xRXdsZQB7JsY7tiKA3Oyx8Y6tCCC3XW66YysD2DMx3bGVAeyZmO7YygD2TEx3bGUA+8UW3rEVAeyZmO7YygD2TEx3bGUAeyamO7YygP1ii+7YygD2TIx3bEUAu9kD79iKAHLb5aY7tjKAPRPTHVsZwJ6J6Y6tDCDPxIfu2MoA8outg3dsRQB5Jj4PfBNnAHkmPnTHVgaQZ+JDd2xlAPnF1qE7tjKAPBMfvGMrAsjNHgfv2IoActvloTu2MoA8Ex+6YysD2DMx3bGVAeyZmO7YygDyi62Dd2xFAHsmpju2MoA9E9MdWxnAnonpjq0MIL/YOnTHVgawZ2K8YysCyM0eB+/YigBy2+WhO7YygD0T0x1bGcCeiemOrQxgz8R0x1YGkF9sHbxjKwLYMzHdsZUB7JmY7tjKAPZMTHdsZQD7xRbdsZUB7JkY79iKAHKzx8E7tiKA3HZ56I6tDGDPxHTHVgawZ2K6YysD2DMx3bGVAewXW3jHVgSwZ2K6YysD2DMx3bGVAeyZmO7YygD2iy26YysD2DMx3rEVAeRmj4N3bEUAue3y0B1bGcCeiemOrQxgz8R0x1YGsGdiumMrA9gvtvCOrQhgz8R0x1YGsGdiumMrA9gzMd2xlQHsF1t0x1YGkGfii3dsRQC52ePiHVsRQG67vA98E2cAeSa+dMdWBpBn4kt3bGUAeSa+dMdWBpBfbF28YysCyDPxpTu2MoA8E1+6YysDyDPxpTu2MoD8YuvSHVsZwJ6J8Y6tCCA3e1y8YysCyG2Xl+7YygD2TEx3bGUAeyamO7YygD0T0x1bGUB+sXXxjq0IYM/EdMdWBrBnYrpjKwPYMzHdsZUB5Bdbl+7YygD2TIx3bEUAudnj4h1bEUBuu7x0x1YGsGdiumMrA9gzMd2xlQHsmZju2MoA9ostvGMrAtgzMd2xlQHsmZju2MoA9kxMd2xlAPvFFt2xlQHsmRjv2IoAcrPHxTu2IoDcdnnpjq0MYM/EdMdWBrBnYrpjKwPYMzHdsZUB7BdbeMdWBLBnYrpjKwPYMzHdsZUB7JmY7tjKAPaLLbpjKwPYMzHesRUB7GYPvGMrAshtl5fu2MoA9kxMd2xlAHsmpju2MoA9E9MdWxlAfrFVeMdWBJBn4qI7tjKAPBPXA9/EGUCeiYvu2MoA8outoju2MoA8ExfesRUB5GaPwju2IoDcdll0x1YGkGfioju2MoA8ExfdsZUB7JmY7tjKAPKLrcI7tiKAPRPTHVsZwJ6J6Y6tDGDPxHTHVgaQX2wV3bGVAeyZGO/YigBys0fhHVsRQG67LLpjKwPYMzHdsZUB7JmY7tjKAPZMTHdsZQD5xVbhHVsRwJ6J6Y6tDGDPxHTHVgawZ2K6YysD2C+26I6tDGDPxHjHVgSQmz0K79iKAHLbZdEdWxnAnonpjq0MYM/EdMdWBrBnYrpjKwPYL7bwjq0IYM/EdMdWBrBnYrpjKwPYMzHdsZUB7BdbdMdWBrBnYrxjKwLIzR6Fd2xFALntsuiOrQxgz8R0x1YGsGdiumMrA9gzMd2xlQHsF1t4x1YEsGdiumMrA9gzMd2xlQHsmZju2MoA9ostumMrA9gzMd6xFQHcZo/+4B1bEcBtu3wB3LbLF8CdiV8A+CbOAO5M/AK4M/EL4M7EL4A7E78A7out/uAdWxHAnYlfAHcmfgHcmfgFgG/iDODOxC+AOxO/AO6LrRfAfbH1AtgzMd6xFQHcZo8XwG32eAHctssXAL6JM4A9E9MdWxnAnonpjq0MYM/EdMdWBnBfbL0A7outF8CeiemOrQxgz8R0x1YGsGdiumMrA7gvtvpDd2xlAHsmxju2IoDb7PECwDdxBnDbLl8At+3yBbBnYrpjKwPYMzHdsZUB7JmY7tjKAPaLLbxjKwLYMzHdsZUB7JmY7tjKAPZMTHdsZQD7xRbdsZUB7JkY79iKAG6zxwvgNnu8AG7b5Qvgtl2+APZMTHdsZQB7JqY7tjKAPRPTHVsZwH6xhXdsRQB7JqY7tjKAPRPTHVsZwJ6J6Y6tDGC/2KI7tjKAPRPjHVsRwG32eAHcZo8XwG277A/dsZUB7JmY7tjKAPZMTHdsZQB7JqY7tjKA/WIL79iKAPJM3OiOrQwgz8SN7tjKAPJM3B74Js4A8outRndsZQB5Jm54x1YEkJs9Gt6xFQHktstGd2xlAHkmbnTHVgaQZ+JGd2xlAHkmbnTHVgaQX2w1vGMrAtgzMd2xlQHsmZju2MoA9kxMd2xlAPnFVqM7tjKA/a/TdMdWBrBvYrpjKwPYN7HdsdV+7tgaY9bfjx5nfXrS5j3p8J50eU/69UZ7P2/++9Hjhv8M665/fng/7cPzf26q+vLzm/v53f384X7+dD9/uZ+/3c8/7udf9/PdW3e5t+5yb93l3rrLvXV/bqP68vPdW3e5t+5yb93l3rrLvXW3e+tu99bd7q273Vv35+apLz/fvXW3e+tu99bd7q273Vv3uLfucW/d4966x711f26Z+vLz3Vv3uLfucW/d4966x711r3vrXvfWve6te91b9+dGqS8/3711r3vrXvfWve6te91bt9xbt9xbt9xbt9xb9+f2qC8/3711y711y711y711S711+6Peuv1Rb93+qLduf9Rbtz/qrdsf9dbtj3rr9ke9dfuj3rr9cW/d5t66zb11m3vrNvfW/bkV6svPd2/d5t66zb11m3vrNvfW7e6t291bt7u3bndv3Z8boL78fPfW7e6t291bt7u3bndv3eHeusO9dYd76w731v257enLz3dv3eHeusO9dYd767rdVN3tpupuN1V3u6m6203V3W6q7nZTdbebqrvdVN3tpupuN1V3u6m6203V3W6q7nZTdbebqrvdVN3tpupuN1V3u6m6203V3W6q7nZTdbebqrvdVN3tpupuN1V3u6m6203V3W6q7nZTdbebqrvdVN3tpupuN1V3u6m6203V3W6q7nZTdbebqrvdVN3tpupuN1V3u6m6203V3W6q7nZTdbebqrvdVN3tpupuN1V3u6m6203V3W6q7nZTdbebqrvdVN3tpupuN1V3u6m620013G6q4XZTDbebarjdVONRb93hdlMNt5tquN1Uw+2mGm431XC7qYbbTTXcbqrhdlMNt5tq/N5NNWr9+9Gzf3rSzzfpaPX3o8fZn550eE+6vCcV7km/9zflJzXekzrvSYP3pMl70uI9iTe9O296d9707rzpPXjTe/Cm9+BN78Gb3oM3vQdveg/e9B686T1403vwpvfkTe/Jm96TN70nb3pP3vSevOk9edN78qb35E3vyZveize9F296L970XrzpvXjTe/Gm9+JN78Wb3os3vRdvem/e9N686b1503vzpvfmTe/Nm94/9zr0Pe4/P933vZ+edHhPurwnFe5JP/ck/IcnNd6TOu9Jg/ekyXvS4j2JN70Pb3of3vQ+vOl9edP78qb35U3vy5velze9L296X970vrzpfXnT+/Kmd/Gmd/Gmd/Gmd/Gmd/Gmd/Gmd/Gmd/Gmd/Gmd+Gm93xw03s+uOk9H9z0ng9ues8HN73ng5ve88FN7/ngpvd8cNN7Przp3XjTu/Gmd+NN78ab3o03vRtvejfe9G686d1407vxpnfnTe/Om96dN707b3p33vTuvOndedO786Z3503vzpvegze9B296/7xr2U9rf590xvr0pMF70uQ9afGetHlPOrwnXd6TCvekn3ct/8OTGu9JvOk9edN78qb35E3vyZvekze9J296T970XrzpvXjTe/Gm9+JN78Wb3os3vRdvei/e9F686b1403vzpvfmTe/Nm96bN703b3pv3vTevOm9edN786b35k3vw5vehze9D296H970PrzpfXjT+/Cm9+FN78Ob3oc3vS9vel/e9L686X150/vypvflTe/Lm96XN70vb3pf3vQu3vQu3vQu3vQu3vQu3vQu3vQu3vQu3vQu3vQu3PReD256rwc3vdeDm97rwU3v9eCm93pw03s9uOm9Htz0Xg9ueq+HN70bb3o3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z3dv3eneutO9dad760731l3urbvcW3e5t+5yb92fm6a+/Hz31l3urbvcW3e5t+5yb93t3rrbvXW3e+tu99b9uVXqy893b93t3rrbvXW3e+tu99Y97q173Fv3uLfucW/dnxukvvx899Y97q173Fv3uLfucW/d69661711r3vrXvfW/bkt6svPd2/d69661711r3vrXvfWLffWLffWLffWLffW/bkZ6svPd2/dcm/dcm/dcm/dUm/d8ai37njUW3c86q07HvXWHY96645HvXXHo96641Fv3fGot+543Fu3ubduc2/d5t66zb11f258+vLz3Vu3ubduc2/d5t66zb11u3vrut1Uw+2mGm431XC7qYbbTTXcbqrhdlMNt5tquN1Uw+2mGm431XC7qYbbTTXcbqrhdlMNt5tquN1Uw+2mGm431XC7qYbbTTXcbqrhdlMNt5tquN1Uw+2mGm431XC7qYbbTTXcbqrhdlMNt5tquN1Uw+2mGm431XC7qYbbTTXcbqrhdlMNt5tquN1Uw+2mGm431XC7qYbbTTXcbqrhdlMNt5tquN1Uw+2mGm431XC7qYbbTTXcbqrhdlMNt5tquN1Uw+2mGm431XC7qYbbTTXcbqrhdlMNt5tquN1Uw+2mGm431XC7qYbbTTXcbqrhdlMNt5tquN1Uw+2mGm431XC7qcbv3VTvP/i/Hz37pyf9fJOOVn8/+v3bxacnFe1J8/deqPykxntS5z1p8J40eU9avCdt3pMO70m46T0f3vRuvOndeNO78aZ3403vxpvejTe9G296N970brzp3XjTu/Omd+dN786b3p03vTtvenfe9O686d1507vzpnfnTe/Bm96DN70Hb3oP3vQevOk9eNN78Kb34E3vwZvegze9J296T970nrzpPXnTe/Km9+RN78mb3pM3vX/udeh73H9+uu97Pz2pcE/6uX/hPzyp8Z7UeU8avCdN3pMW70mb96TDexJvei/e9N686b1503vzpvfmTe/Nm96bN703b3pv3vTevOm9edP78Kb34U3vw5vehze9D296H970PrzpfXjT+/Cm9+FN78ub3pc3vS9vel/e9L686X150/vypvflTe/Lm96XN72LN72LN72LN72LN72LN72LN72LN72LN72LN70LN73Xg5ve68FN7/Xgpvd6cNN7PbjpvR7c9F4PbnqvBze914Ob3uvhTe/Gm96NN70bb3o33vT+edeyn9b+PumM9elJi/ekzXvS4T3p8p5UuCf9vGv5H57UeE/qvCcN3pN407vzpnfnTe/Om96dN707b3oP3vQevOk9eNN78Kb34E3vwZvegze9B296D970HrzpPXnTe/Km9+RN78mb3pM3vSdvek/e9J686T1503vypvfiTe/Fm96LN70Xb3ov3vRevOm9eNN78ab34k3vxZvemze9N296b9703rzpvXnTe/Om9+ZN782b3ps3vTdveh/e9D686X140/vwpvfhTe/Dm96HN70Pb3of3vQ+vOl9edP78qb35U3vy5velze9L296X970vrzpfXnT+/Kmd/Gmd/Gmd/Gmd/Gmd/Gmd/Gmd/Gmd/Gmd/Gmd+Gm935w03s/uOm9H9z03g9ueu8HN733g5ve+8FN7/3gpvd+cNN7P7zp3XjTu/Gmd+NN78ab3ryu5eZ1LTeva7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7l5XcvN61puXtdy87qWm9e13Lyu5eZ1LTeva7l5XcvN61puXtfy8LqWh9e1PLyu5eF1Lc+Dm96H17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8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l53u2MoA9kxMd2xlAHsmpju2MoA9E9MdWxnAfrGFd2xFAHsmpju2MoA9E9MdWxnAnonpjq0MYL/Yoju2MoA9E+MdWxFAbvboeMdWBJDbLjvdsZUB7JmY7tjKAPZMTHdsZQB7JqY7tjKA/WIL79iKAPZMTHdsZQB7JqY7tjKAPRPTHVsZwH6xRXdsZQD7X6fpjq0MYN/EdMdWBrBvYrtjq//csTXGrL8fPc76v580fm7N+g9Parwndd6Tfr3R3s+b/370uOE/w7rrnx/eT/v0/Ol+/nI/f7uff9zPv+7nl/r5P7dTffn5zf387n6+e+v+3Er15ee7t25zb93m3rrNvXWbe+t299bt7q3b3Vu3u7fuzw1UX36+e+t299bt7q3b3Vu3u7fucG/d4d66w711h3vr/tw29eXnu7fucG/d4d66w711h3vrTvfWne6tO91bd7q37s/NUl9+vnvrTvfWne6tO91bd7q37nJv3eXeusu9dZd76/7cIvXl57u37nJv3eXeusu9dZd762731t3urbvdW3e7t+7PjVFffr5762731t3urbvdW3e7t+5xb93j3rrHvXWPe+v+3A715ee7t+5xb93j3rrHvXWPe+te99a97q173Vv3urfuz01QX36+e+te99a97q173Vv3urduubduubduubduubfuz61PX36+e+uWe+uWe+uWe+uWeuvOR71156PeuvNRb93pdlPNR711p9tNNd1uqul2U023m2q63VTT7aaabjfVdLuppttNNd1uqul2U023m2q63VTT7aaabjfVdLuppttNNd1uqul2U023m2q63VTT7aaabjfVdLuppttNNd1uqul2U023m2q63VTT7aaabjfVdLuppttNNd1uqul2U023m2q63VTT7aaabjfVdLuppttNNd1uqul2U023m2q63VTT7aaabjfVdLuppttNNd1uqul2U023m2q63VTT7aaabjfVdLuppttNNd1uqul2U023m2q63VTT7aaabjfVdLuppttNNd1uqul2U023m2q63VTT7aaabjfVdLuppttNNd1uqvl7N9Wo9e9Hz/7hSb/3TY1Wfz96nP3pSY33pM570uA9afKetHhP2rwnHd6TLu9JhXtS8aZ38aZ38aZ38aZ38aZ38aZ38aZ38aZ38aZ34ab3enDTez246b0e3PReD256rwc3vdeDm97rwU3v9eCm93pw03s9vOndeNO78aZ3403vxpvejTe9G296N970brzp3XjTu/Gmd+dN786b3p03vTtvenfe9O686d1507vzpnfnTe/Om94/9zr0Pe4/P933vZ+e1HhP6rwnDd6TJu9Ji/ekzXvS4T3p8p5UuCdN3vSevOk9edN78qb35E3vyZvekze9J296T970nrzpvXjTe/Gm9+JN78Wb3os3vRdvei/e9F686b1403vxpvfmTe/Nm96bN703b3pv3vTevOm9edN786b35k3vzZvehze9D296H970PrzpfXjT+/Cm9+FN78Ob3oc3vQ9vel/e9L686X150/vypvflTe/Lm96XN70vb3pf3vS+vOldvOldvOldvOldvOldvOldvOn9865lP639fdIZ69OTDu9Jl/ekoj1p/7xr+R+e1HhP6rwnDd6TJu9Ji/ck3PTeD2567wc3vffDm96NN70bb3o33vRuvOndeNO78aZ3403vxpvejTe9G296d9707rzp3XnTu/Omd+dN786b3p03vTtvenfe9O686T1403vwpvfgTe/Bm96DN70Hb3oP3vQevOk9eNN78Kb35E3vyZvekze9J296T970nrzpPXnTe/Km9+RN78mb3os3vRdvei/e9F686b1403vxpvfiTe/Fm96LN70Xb3pv3vTevOm9edN786b35k3vzZvemze9N296b9703rzpfXjT+/Cm9+FN78Ob3oc3vQ9veh/e9D686X140/vwpvflTe/Lm96XN70vb3pf3vS+vOl9edP78qb35U3vy5vexZvexZvexZvexZvexZvexZvevK7l5nUtN69ruXldy8PrWh5e1/LwupaH17U8D256H17X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8ruXhdS0Pr2t5eF3Lw+taHl7X8vC6lofXtTy8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ud1Uy+2mWm431XK7qZbbTbXcbqrldlMtt5tqud1Uy+2mWm431XK7qZbbTbXcbqrldlMtt5tqud1Uy+2mWm431XK7qZbbTbXcbqrldlMtt5tqud1Uy+2mWm431XK7qZbbTbXcbqrldlMtt5tqud1Uy+2mWm431XK7qZbbTbXcbqrldlMtt5tqud1Uy+2mWm431XK7qZbbTbV+76Yatf796Nk/Pennm3S0+vvR4+xPTxq8J03ekxbvSZv3pMN70uU9qXBP+r0PKT+p8Z7Em96HN70Pb3of3vQ+vOl9eNP78Kb34U3vy5velze9L296X970vrzpfXnT+/Km9+VN78ub3pc3vYs3vYs3vYs3vYs3vYs3vYs3vYs3vYs3vYs3vQs3vfeDm977wU3v/eCm935w03s/uOm9H9z03g9ueu8HN733g5ve++FN78ab3o03vX/udeh73H9+uu97Pz1p8J40eU9avCdt3pMO70mX96TCPenn3oH/8KTGexJvenfe9O686d1507vzpnfnTe/Om96dN70Hb3oP3vQevOk9eNN78Kb34E3vwZvegze9B296D970nrzpPXnTe/Km9+RN78mb3pM3vSdvek/e9J686T1503vxpvfiTe/Fm96LN70Xb3ov3vRevOm9eNN78ab34k3vzZvemze9N296b9703rzpvXnTe/Om9+ZN782b3ps3vQ9veh/e9D686X140/vwpvfhTe/Dm96HN71/3rXsp7W/TzpjfXpS4Z70867lf3hS4z2p8540eE+avCct3pM270mH9yTe9L686V286V286V286V286V286V286V286V286V286V246X0e3PQ+D256nwc3vc+Dm97nwU3v8+Cm93lw0/s8uOl9Htz0Pg9vejfe9G686d1407vxpnfjTe/Gm96NN70bb3o33vRuvOndedO786Z3503vzpvenTe9O296d9707rzp3XnTu/Om9+BN78Gb3oM3vQdveg/e9B686T1403vwpvfgTe/Bm96TN70nb3pP3vSevOk9edN78qb35E3vyZvekze9J296L970XrzpvXjTe/Gm9+JN78Wb3os3vRdvei/e9F686b1503vzpvfmTe/Nm96bN703b3pv3vTevOm9edN786b34U3vw5vehze9D296H970PrzpfXjT+/CmN69reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17U8vK7l4XUtD69reXhdy8PrWh5e1/LwupaH17W8vK7l5XUtL69reXldy/vgpvfldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtSxe17J4XcvidS2L17WsBze9i9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS2L17UsXteyeF3L4nUti9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS2L17UsXteyeF3L4nUti9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS2L17UsXteyeF3L4nUti9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS2L17UsXteyeF3L4nUti9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS2L17UsXteyeF3L4nUti9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS2L17UsXteyeF3L4nUti9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS2L17UsXteyeF3L4nUti9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS2L17UsXteycF3LenBdy/dJtOn9Pok2vd8n0ab3+yTa9H6fRJve75No0/t9Em16v0+iTe/3Sbzpjetavk/iTW9c1/J9Em9647qW75N40xvXtXyfxJveuK7l+yTe9MZ1Ld8n8aY3rmv5Pok3vXFdy/dJvOmN61q+T+JNb1zX8n0Sb3rjupbvk3jTG9e1fJ/Em964ruX7JN70xnUt3yfxpjeua/k+iTe9cV3L90m86Y3rWr5P4k1vXNfyfRJveuO6lu+T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m3vrNvfWbe6t29xb9+c2qS8/3711m3vrNvfWbe6t29xbt7u3bndv3e7eut29dX9ujvry891bt7u3bndv3e7eut29dYd76w731h3urTvcW/fnlqgvP9+9dYd76w731h3urTvcW3e6t+50b93p3rrTvXV/boT68vPdW3e6t+50b93p3rrTvXWXe+su99Zd7q273Fv35/anLz/fvXWXe+su99Zd7q273Ft3u7fudm/d7d662711f++F+u7z3Vt3u7eu20213G6q5XZTLbebarndVMvtplpuN9Vyu6mW20213G6q5XZTLbebarndVMvtplpuN9Vyu6mW20213G6q5XZTLbebarndVMvtplpuN9Vyu6mW20213G6q5XZTLbebarndVMvtplpuN9Vyu6mW20213W6q7XZTbbebarvdVPtRb93tdlNtt5tqu91U2+2m2m431Xa7qbbbTbXdbqrtdlNtt5tqu91U2+2m2m431Xa7qbbbTbXdbqrtdlNtt5tqu91U2+2m2m431Xa7qbbbTbXdbqrtdlNtt5tqu91U2+2m2m431Xa7qbbbTbXdbqrtdlNtt5tqu91U2+2m2m431Xa7qfbv3VSj1r8fPfunJ/18k45Wfz96nP3pSYv3pM170uE96fKeVLgn/d6zlJ/UeE/qvCcN3pN403vxpvfiTe/Fm96LN70Xb3pv3vTevOm9edN786b35k3vzZvemze9N296b9703rzpfXjT+/Cm9+FN78Ob3oc3vQ9veh/e9D686X140/vwpvflTe/Lm96XN70vb3pf3vS+vOl9edP78qb35U3vy5vexZvexZvexZvexZveP/c69D3uPz/d3//vn560eE/avCcd3pMu70lFe9L5uc/gPzyp8Z7UeU8avCfhpvd5cNP7PLjpfR7c9D4Pbnqfhze9G296N970brzp3XjTu/Gmd+NN78ab3o03vRtvejfe9O686d1507vzpnfnTe/Om96dN707b3p33vTuvOndedN78Kb34E3vwZvegze9B296D970HrzpPXjTe/Cm9+BN78mb3pM3vSdvek/e9J686T1503vypvfkTe/Jm96TN70Xb3ov3vRevOm9eNN78ab34k3vxZveize9F296L970/nnXsr/fSv590htsPz2p8Z7UeU8avCdN3pMW70mb96TDe9LlPalwTzq86X140/vwpvfhTe/Dm96HN70Pb3of3vQ+vOl9eNP78qb35U3vy5velze9L296X970vrzpfXnT+/Km9+VN7+JN7+JN7+JN7+JN7+JN7+JN7+JN7+JN7+JN78JN7/vgpvd9cNP7PrjpfR/c9L4PbnrfBze974Ob3vfBTe/74Kb3fXjTu/Gmd+NN78ab3o03vRtvejfe9G686d1407vxpnfjTe/Om96dN707b3p33vTuvOndedO786Z3503vzpvenTe9B296D970HrzpPXjTe/Cm9+BN78Gb3oM3vQdveg/e9J686T1503vypvfkTe/Jm96TN70nb3pP3vSevOk9edN78ab34k3vxZveize9F296L970XrzpvXjTe/Gm9+JNb17X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taXl7X8vK6lpfXtby8ruXldS0vr2t5eV3Ly+taFq9rWbyuZfG6lsXrWtaDm97F61oWr2tZvK5l8bqWxetaFq9rWbyuZfG6lsXrWhava1m8rmXxupbF61oWr2tZvK5l8bqWxetaFq9rWbyuZfG6lsXrWhava1m8rmXxupbF61oWr2tZvK5l8bqWxetaFq9rWbyuZfG6lsXrWhava1m8rmXxupbF61oWr2tZvK5l8bqWxetaFq9rWbyuZfG6lsXrWhava1m8rmXxupbF61oWr2tZvK5l8bqWxetaFq9rWbyuZfG6lsXrWhava1m8rmXxupbF61oWr2tZvK5l8bqWxetaFq9rWbyuZfG6lsXrWhava1m8rmXxupbF61oWr2tZvK5l8bqWxetaFq9rWbyuZfG6lsXrWhava1m8rmXxupbF61oWr2tZvK5l8bqWxetaFq9rWbyuZfG6lsXrWhava1m4rmV7cF3L90m06f0+iTa93yfRpvf7JNr0fp9Em97vk2jT+30SbXq/T6JN7/dJvOmN61q+T+JNb1zX8n0Sb3rjupbvk3jTG9e1fJ/Em964ruX7JN70xnUt3yfxpjeua/k+iTe9cV3L90m86Y3rWr5P4k1vXNfyfRJveuO6lu+TeNMb17V8n8Sb3riu5fsk3vTGdS3fJ/GmN65r+T6JN71xXcv3Sbzpjetavk/iTW9c1/J9Em9647qW75N40xvXtXyfxJveuK7l+yTe9MZ1Ld8n8aY3rmv5Pok3vXFdy/dJvOmN61q+T+JNb1zX8n0Sb3rjupbvk3jTG9e1fJ/Em964ruX7JN70xnUt3yfxpjeua/k+iTe9cV3L90m86Y3rWr5P4k1vXNfyfRJveuO6lu+TeNMb17V8n8Sb3riu5fsk3vTGdS3fJ/GmN65r+T6JN71xXcv3Sbzpjetavk/iTW9c1/J9Em9647qW75N40xvXtXyfxJveuK7l+yTc9G68rmXjdS0br2vZeF3L91t53pNw07vxupaN17VsvK5l43UtG69r2Xhdy8brWjZe17LxupaN17VsvK5l43UtG69r2Xhdy8brWjZe17LxupaN17VsvK5l43UtG69r2Xhdy8brWjZe17LxupaN17VsvK5l43UtG69r2Xhdy8brWjZe17LxupaN17VsvK5l43UtG69r2Xhdy8brWjZe17LxupaN17Vsv+9a1jh/n1Q1/+dJHz77rr8A7d7+CaDkAL/vcX4boNkBuh1g2AGmHWDZATYcoD3/AvT9CeDYAeibOALQN3EC2KJNfOYnANEm/gwg2sSfAeyb+Pdd4m8D2Dfxpm/iCEDfxBHAnom3PRMfeyY+8E1crf/97Or3EwB8E2cA+CbOAPBNnAHomzjlgWPPxMeeiY89Ex/RJv4YaK49E1/7X6ev/a/T156Jf9/x/zaAPRNfeya+9kx87Zn4wjdx/HW64Js4A9gzcdkzcdkz8e99Dd8GgG/iDADfxBnAnonLnolL/j1xf+iZOALIvyfuj/x74v7IM3F/4Js4A8gzcX/kmbg/8kzcH3km7o/8e+Le5N8T9ybPxL3JM3Fv8kzcf+9R+TaAPBP3Js/EvcE3cQaAb+IMYM/E3Z6JOz0TRwB6Jo4Aokz8MdT/3onzbQB7Ju72TNztmbjbM3G3Z+Jhz8RDfrHVh/xiqw97Jv693+jbAPZMPOyZeNgz8bBn4iG/2OpTfrHVpz0TT3smnvRMHAHgmzgDiDLxx1A/RZn4M4A9E9sdW93u2Op2x1a3O7a63bHV7Y6tbndsdbpjK/46TXdsZQB7JqY7tjKAPRPTHVsZwH6xRXdsZQB7JsY7tiKA3OzR8Y6tCCDKxB9Dvcmx9RnAnontjq1Od2xlAHsmpju2MgB9E0cA+8UW3rEVAeyZmO7YygD2TEx3bGUAeyamO7YygP1ii+7YygD2TIx3bEUAudmj4x1bEUBuu+x0x1YGsGdiumMrA9gzMd2xlQHsmZju2MoA9ostvGMrAsgz8aA7tjKAPBMPumMrA8gz8XjgmzgDyC+2Bt2xlQHkmXjgHVsRQG72GHjHVgSQ2y4H3bGVAeSZeNAdWxlAnokH3bGVAeSZeNAdWxlAfrE18I6tCGDPxHTHVgawZ2K6YysD2DMx3bGVAeQXW4Pu2MoA9kyMd2xFALnZY+AdWxFAbrscdMdWBrBnYrpjKwPYMzHdsZUB7JmY7tjKAPKLrYF3bEUAeyamO7YygD0T0x1bGcCeiemOrQxgv9iiO7YygD0T4x1bEUBu9hh4x1YEkNsuB92xlQHsmZju2MoA9kxMd2xlAHsmpju2MoD9Ygvv2IoA9kxMd2xlAHsmpju2MoA9E9MdWxnAfrFFd2xlAHsmxju2IoDc7DHwjq0IILddDrpjKwPYMzHdsZUB7JmY7tjKAPZMTHdsZQD7xRbesRUB7JmY7tjKAPZMTHdsZQB7JqY7tjKA/WKL7tjKAPZMjHdsRQC72QPv2IoActvlpDu2MoA8E0+6YysDyDPxfOCbOAPIM/GkO7YygPxia+IdWxFAnokn3bGVAeSZeNIdWxlAnokn3bGVAeQXW5Pu2MoA8kw88Y6tCCA3e0y8YysCyG2Xk+7YygD2TEx3bGUAeyamO7YygD0T0x1bGUB+sTXxjq0IYM/EdMdWBrBnYrpjKwPYMzHdsZUB5Bdbk+7YygD2TIx3bEUAudlj4h1bEUBuu5x0x1YGsGdiumMrA9gzMd2xlQHsmZju2MoA9ostvGMrAtgzMd2xlQHsmZju2MoA9kxMd2xlAPvFFt2xlQHsmRjv2IoAcrPHxDu2IoDcdjnpjq0MYM/EdMdWBrBnYrpjKwPYMzHdsZUB7BdbeMdWBLBnYrpjKwPYMzHdsZUB7JmY7tjKAPaLLbpjKwPYMzHesRUB5GaPiXdsRQC57XLSHVsZwJ6J6Y6tDGDPxHTHVgawZ2K6YysD2C+28I6tCGDPxHTHVgaQZ+JFd2xlAHkmXnTHVgaQX2ytB76JM4A8Ey+8YysCyM0eC+/YigBy2+WiO7YygDwTL7pjKwPIM/GiO7YygDwTL7pjKwPIL7YW3rEVAeyZmO7YygD2TEx3bGUAeyamO7YygPxia9EdWxnAnonxjq0IIDd7LLxjKwLIbZeL7tjKAPZMTHdsZQB7JqY7tjKAPRPTHVsZQH6xtfCOrQhgz8R0x1YGsGdiumMrA9gzMd2xlQHkF1uL7tjKAPZMjHdsRQC52WPhHVsRQG67XHTHVgawZ2K6YysD2DMx3bGVAeyZmO7YygD2iy28YysC2DMx3bGVAeyZmO7YygD2TEx3bGUA+8UW3bGVAeyZGO/YigBys8fCO7YigNx2ueiOrQxgz8R0x1YGsGdiumMrA9gzMd2xlQHsF1t4x1YEsGdiumMrA9gzMd2xlQHsmZju2MoA9ostumMrA9gzMd6xFQHsZg+8YysCyG2Xi+7YygDyTLzpjq0MIM/Em+7YygDyTLwf+iaOAPKLrY13bEUAeSbedMdWBpBn4k13bGUAeSbedMdWBpBfbG26YysDyDPxxju2IoDc7LHxjq0IILddbrpjKwPYMzHdsZUB7JmY7tjKAPZMTHdsZQD5xdbGO7YigD0T0x1bGcCeiemOrQxgz8R0x1YGkF9sbbpjKwPYMzHesRUB5GaPjXdsRQC57XLTHVsZwJ6J6Y6tDGDPxHTHVgawZ2K6YysD2C+28I6tCGDPxHTHVgawZ2K6YysD2DMx3bGVAewXW3THVgawZ2K8YysCyM0eG+/YigBy2+WmO7YygD0T0x1bGcCeiemOrQxgz8R0x1YGsF9s4R1bEcCeiemOrQxgz8R0x1YGsGdiumMrA9gvtuiOrQxgz8R4x1YEkJs9Nt6xFQHktstNd2xlAHsmpju2MoA9E9MdWxnAnonpjq0MYL/Ywju2IoA9E9MdWxnAnonpjq0MIM/Eh+7YygDyi61Dd2xlAHkmPg99E0cAudnj4B1bEUBuuzx0x1YGkGfiQ3dsZQB5Jj50x1YGkGfiQ3dsZQD5xdbBO7YigDwTH7pjKwPYMzHdsZUB7JmY7tjKAPKLrUN3bGUAeybGO7YigNzscfCOrQggt10eumMrA9gzMd2xlQHsmZju2MoA9kxMd2xlAPnF1sE7tiKAPRPTHVsZwJ6J6Y6tDGDPxHTHVgaQX2wdumMrA9gzMd6xFQHkZo+Dd2xFALnt8tAdWxnAnonpjq0MYM/EdMdWBrBnYrpjKwPYL7bwjq0IYM/EdMdWBrBnYrpjKwPYMzHdsZUB7BdbdMdWBrBnYrxjKwLIzR4H79iKAHLb5aE7tjKAPRPTHVsZwJ6J6Y6tDGDPxHTHVgawX2zhHVsRwJ6J6Y6tDGDPxHTHVgawZ2K6YysD2C+26I6tDGDPxHjHVgSwmz3wjq0IILddHrpjKwPYMzHdsZUB5Jn40h1bGUCeiS/dsZUB5Bdb96Fv4gggz8SX7tjKAPJMfOmOrQwgz8SX7tjKAPKLrUt3bGUAeSa+eMdWBJCbPS7esRUB5LbLS3dsZQB7JqY7tjKAPRPTHVsZwJ6J6Y6tDCC/2Lp4x1YEsGdiumMrA9gzMd2xlQHsmZju2MoA8outS3dsZQB7JsY7tiKA3Oxx8Y6tCCC3XV66YysD2DMx3bGVAeyZmO7YygD2TEx3bGUA+cXWxTu2IoA9E9MdWxnAnonpjq0MYM/EdMdWBrBfbNEdWxnAnonxjq0IIDd7XLxjKwLIbZeX7tjKAPZMTHdsZQB7JqY7tjKAPRPTHVsZwH6xhXdsRQB7JqY7tjKAPRPTHVsZwJ6J6Y6tDGC/2KI7tjKAPRPjHVsRQG72uHjHVgSQ2y4v3bGVAeyZmO7YygD2TEx3bGUAeyamO7YygP1iC+/YigD2TEx3bGUAeyamO7YygD0T0x1bGUB+sVV0x1YGkGfiwju2IoDc7FEPfBNnALntsuiOrQwgz8RFd2xlAHkmLrpjKwPIM3HRHVsZQH6xVXjHVgSQZ+KiO7YygDwTF92xlQHsmZju2MoA8outoju2MoA9E+MdWxFAbvYovGMrAshtl0V3bGUAeyamO7YygD0T0x1bGcCeiemOrQwgv9gqvGMrAtgzMd2xlQHsmZju2MoA9kxMd2xlAPnFVtEdWxnAnonxjq0IIDd7FN6xFQHktsuiO7YygD0T0x1bGcCeiemOrQxgz8R0x1YGsF9s4R1bEcCeiemOrQxgz8R0x1YGsGdiumMrA9gvtuiOrQxgz8R4x1YEkJs9Cu/YigBy22XRHVsZwJ6J6Y6tDGDPxHTHVgawZ2K6YysD2C+28I6tCGDPxHTHVgawZ2K6YysD2DMx3bGVAewXW3THVgawZ2K8YysC2M0eeMdWBJDbLovu2MoA9kxMd2xlAHsmpju2MoA7E/eH7tjKAO6LrRfAfbH1Argz8QsA38QZwJ2JXwB3Jn4B3Jn4BXBn4hfAfbHVH7pjKwO4M/EL4M7EL4Db7PECwDdxBnDbLl8At+3yBXBn4hfAnYlfAHsmpju2MoA9E9MdWxnAfbH1AtA3cQSwZ2K6YysD2DMx3bGVAeyZmO7YygDui60XwH2x9QLYMzHesRUB3GaPF8Bt9ngB3LbLF8Btu3wB7JmY7tjKAPZMTHdsZQB7JqY7tjKA+2LrBXBfbL0A9kxMd2xlAHsmpju2MoA9E9MdWxnAfrFFd2xlAHsmxju2IoDb7PECuM0eL4DbdtkfumMrA9gzMd2xlQHsmZju2MoA9kxMd2xlAPvFFt6xFQHsmZju2MoA9kxMd2xlAHsmpju2MoD9Yovu2MoA9kyMd2xFALfZoz94x1YEcNsuXwC37fIFsGdiumMrA9gzMd2xlQHsmZju2MoA9ostvGMrAtgzMd2xlQHsmZju2MoA9kxMd2xlAPvFFt2xlQHkmbjhHVsRQG72aHjHVgRw2y5fAPgmzgDyTNzojq0MIM/Eje7YygDyTNzojq0MIL/YanjHVgSQZ+JGd2xlAHkmbnTHVgaQZ+JGd2xlAPnFVqM7tjKAPRPjHVsRQG72aHjHVgSQ2y4b3bGVAeyZmO7YygD2TEx3bGUAeyamO7YygPxiq+EdWxHAnonpjq0MYM/EdMdWBrBnYrpjKwPIL7Ya3bGVAeyZGO/YigBys0fDO7YigNx22eiOrQxgz8R0x1YGsGdiumMrA9gzMd2xlQHsF1t4x1YEsGdiumMrA9gzMd2xlQHsmZju2MoA9ostumMrA9gzMd6xFQHkZo+Gd2xFALntstEdWxnAnonpjq0MYM/EdMdWBrBnYrpjKwPYL7bwjq0IYM/EdMdWBrBnYrpjKwPYMzHdsZUB7BdbdMdWBrBnYrxjKwLYzR54x1YEkNsuG92xlQHsmZju2MoA9kxMd2xlAHsmpju2MoD8YqvjHVsRQJ6JO92xlQHkmbg/8E2cAeSZuNMdWxlAfrHV6Y6tDCDPxB3v2IoAcrNHxzu2IoDcdtnpjq0MIM/Ene7YygDyTNzpjq0MYM/EdMdWBpBfbHW8YysC2DMx3bGVAeyZmO7YygD2TEx3bGUA+cVWpzu2MoA9E+MdWxFAbvboeMdWBJDbLjvdsZUB7JmY7tjKAPZMTHdsZQB7JqY7tjKA/GKr4x1bEcCeiemOrQxgz8R0x1YGsGdiumMrA9gvtuiOrQxgz8R4x1YEkJs9Ot6xFQHktstOd2xlAHsmpju2MoA9E9MdWxnAnonpjq0MYL/Ywju2IoA9E9MdWxnAnonpjq0MYM/EdMdWBrBfbNEdWxnAnonxjq0IIDd7dLxjKwLIbZed7tjKAPZMTHdsZQB7JqY7tjKAPRPTHVsZwH6xhXdsRQB7JqY7tjKAPRPTHVsZwJ6J6Y6tDGC/2KI7tjKAPRPjHVsRQG72GHjHVgSQ2y4H3bGVAeSZeDzwTZwB5Jl40B1bGUCeiQfdsZUB5BdbA+/YigDyTDzojq0MIM/Eg+7YygDyTDzojq0MIL/YGnTHVgawZ2K8YysCyM0eA+/YigBy2+WgO7YygD0T0x1bGcCeiemOrQxgz8R0x1YGkF9sDbxjKwLYMzHdsZUB7JmY7tjKAPZMTHdsZQD5xdagO7YygD0T4x1bEUBu9hh4x1YEkNsuB92xlQHsmZju2MoA9kxMd2xlAHsmpju2MoD9Ygvv2IoA9kxMd2xlAHsmpju2MoA9E9MdWxnAfrFFd2xlAHsmxju2IoDc7DHwjq0IILddDrpjKwPYMzHdsZUB7JmY7tjKAPZMTHdsZQD7xRbesRUB7JmY7tjKAPZMTHdsZQB7JqY7tjKA/WKL7tjKAPZMjHdsRQC52WPgHVsRQG67HHTHVgawZ2K6YysD2DMx3bGVAeyZmO7YygD2iy28YysCyDPxpDu2MoA8E0+6YysDyDPxfOCbOAPIL7Ym3bGVAeSZeOIdWxFAbvaYeMdWBJDbLifdsZUB5Jl40h1bGUCeiSfdsZUB5Jl40h1bGUB+sTXxjq0IYM/EdMdWBrBnYrpjKwPYMzHdsZUB5Bdbk+7YygD2TIx3bEUAudlj4h1bEUBuu5x0x1YGsGdiumMrA9gzMd2xlQHsmZju2MoA8outiXdsRQB7JqY7tjKAPRPTHVsZwJ6J6Y6tDGC/2KI7tjKAPRPjHVsRQG72mHjHVgSQ2y4n3bGVAeyZmO7YygD2TEx3bGUAeyamO7YygP1iC+/YigD2TEx3bGUAeyamO7YygD0T0x1bGcB+sUV3bGUAeybGO7YigNzsMfGOrQggt11OumMrA9gzMd2xlQHsmZju2MoA9kxMd2xlAPvFFt6xFQHsmZju2MoA9kxMd2xlAHsmpju2MoD9Yovu2MoA9kyMd2xFALvZA+/YigBy2+WiO7YygDwTL7pjKwPIM/F64Js4A8gz8aI7tjKA/GJr4R1bEUCeiRfdsZUB5Jl40R1bGUCeiRfdsZUB5Bdbi+7YygDyTLzwjq0IIDd7LLxjKwLIbZeL7tjKAPZMTHdsZQB7JqY7tjKAPRPTHVsZQH6xtfCOrQhgz8R0x1YGsGdiumMrA9gzMd2xlQHkF1uL7tjKAPa/TtMdWxnAvonpjq0MYN/EdsfW+rlja4xZfz96nPXpSZv3pMN70uU96dcb7f28+e9Hjxv+M6y7/vnh/bQPz/+5qerLz2/u53f384f7+dP9/OV+/nY//7iff93Pd2/d7d662711t3vrbvfW/bmN6svPd2/d7d662711t3vrbvfWPe6te9xb97i37nFv3Z+bp778fPfWPe6te9xb97i37nFv3eveute9da9761731v25ZerLz3dv3eveute9da9761731i331i331i331i331v25UerLz3dv3XJv3XJv3XJv3VJv3f2ot+5+1Ft3P+qtux/11t2PeuvuR71196PeuvtRb939qLfuftxbt7m3bnNv3ebeus29dX9uivry891bt7m3bnNv3ebeus29dbt763b31u3urdvdW/fnVqgvP9+9dbt763b31u3urdvdW3e4t+5wb93h3rrDvXV/boD68vPdW3e4t+5wb93h3rrDvXWne+tO99ad7q073Vv357anLz/fvXWne+tO99ad7q3rdlNtt5tqu91U2+2m2m431Xa7qbbbTbXdbqrtdlNtt5tqu91U2+2m2m431Xa7qbbbTbXdbqrtdlNtt5tqu91U2+2m2m431Xa7qbbbTbXdbqrtdlNtt5tqu91U2+2m2m431Xa7qbbbTbXdbqrtdlNtt5tqu91U2+2m2m431Xa7qbbbTbXdbqrtdlNtt5tqu91U2+2m2m431Xa7qbbbTbXdbqrtdlNtt5tqu91Ux+2mOm431XG7qY7bTXUe9dY9bjfVcbupjttNddxuquN2Ux23m+q43VTH7aY6bjfVcbupjttNddxuquN2Ux23m+q43VTH7aY6bjfVcbupjttNddxuqvN7N9Wo9e9Hz/7pST/fpKPV348eZ3960uE96fKeVLgn/d7flJ/UeE/qvCcN3pMm70mL9yTe9B686T1403vwpvfkTe/Jm96TN70nb3pP3vSevOk9edN78qb35E3vyZveize9F296L970XrzpvXjTe/Gm9+JN78Wb3os3vRdvem/e9N686b1503vzpvfmTe/Nm96bN703b3pv3vTevOl9eNP78Kb34U3vw5vehze9D296/9zr8EdS/89P/2lYfnrS4T3p8p5UuCf93JPwH57UeE/qvCcN3pMm70mL9yTe9L686X150/vypnfxpnfxpnfxpnfxpnfxpnfxpnfxpnfxpnfxpnfhpvd9cNP7PrjpfR/c9L4PbnrfBze974Ob3vfBTe/74Kb3fXDT+z686d1407vxpnfjTe/Gm96NN70bb3o33vRuvOndeNO78aZ3503vzpvenTe9O296d9707rzp3XnTu/Omd+dN786b3oM3vQdveg/e9B686T1403vwpvfgTe/Bm96DN70Hb3pP3vSevOn9867lHyfc3yedsT49afCeNHlPWrwnbd6TDu9Jl/ekwj3p513L//CkxnsSb3ov3vRevOm9eNN78ab34k3vxZveize9N296b9703rzpvXnTe/Om9+ZN782b3ps3vTdvem/e9D686X140/vwpvfhTe/Dm96HN70Pb3of3vQ+vOl9eNP78qb35U3vy5velze9L296X970vrzpfXnT+/Km9+VN7+JN7+JN7+JN7+JN7+JN7+JN7+JN7+JN7+JN78JN73pw07se3PSuBze968FN73pw07se3PSuBze968FN73pw07se3vRuvOndeNO78aZ3403vxpvejTe9G296N970brzp3XjTu/Omd+dN786b3p03vTtvenfe9O686d1507vzpnfnTe/Bm96DN70Hb3oP3vQevOk9eNN78Kb34E3vwZvegze9J296T9705nUti9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS2L17UsXteyeF3L4nUti9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS2L17UsXteyeF3L4nUti9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS2L17UsXteyeF3L4nUti9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS2L17UsXteyeF3L4nUti9e1LF7Xsnhdy+J1LYvXtSxe17J4XcvidS0L17UcD65r+T6JNr3fJ9Gm9/sk2vR+n0Sb3u+TaNP7fRJter9Pok3v90m06f0+iTe9cV3L90m86Y3rWr5P4k1vXNfyfRJveuO6lu+TeNMb17V8n8Sb3riu5fsk3vTGdS3fJ/GmN65r+T6JN71xXcv3Sbzpjetavk/iTW9c1/J9Em9647qW75N40xvXtXyfxJveuK7l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rlvdXbe6u251d93q7rqXE59eLN/ddau761Z3163urlvdXbe5u66bTTXdbKrpZlNNN5tqutlU082mmm421XSzqaabTTXdbKrpZlNNN5tqutlU082mmm421XSzqaabTTXdbKrpZlNNN5tqutlU082mmm421XSzqaabTTXdbKrpZlNNN5tqutlU082mmm421XSzqaabTTXdbKrpZlNNN5tqutlU082mmm421XSzqaabTTXdbKrpZlNNN5tqutlU082mmm421XSzqaabTTXdbKrpZlNNN5tqutlU082mmm421XSzqaabTTXdbKrpZlNNN5tqutlU082mmm421XSzqaabTTXdbKrpZlNNN5tqutlUy82mWm421XKzqZabTbUOddddbjbVcrOp1vVsqrbH93+612eSLu+kreyv/3Sb5zNJGyfpei5UllR4kipPUuNJ6jxJgyfp5EmaPEm86l141bvyqnflVe/Kq96VV70rr3pXXvWuvOpdedW78qp35VXvxqvejVe9G696N171brzq3XjVu/Gqd+NV78ar3o1XvTuvende9e686t151bvzqnfnVe/Oq96dV707r3p3XvUevOo9eNV78Kr34FXvwaveg1e9B696D171vpzrUM+2/vzX9VzrmaSNk3Q5f+EfSCo8SZUnqfEkdZ6kwZN08iRNniRe9T551XvyqvfkVe/Jq96TV70nr3pPXvWevOo9edV78qr35FXvxavei1e9F696L171XrzqvXjVe/Gq9+JV78Wr3otXvTevem9e9d686r151XvzqvfmVe/Nq96bV703r3pvXPXeB6567wNXvfeBq977wFXvfeCq9z5w1XsfuOq9D1z13geueu+DV70Lr3oXXvUuvOpdeNW78Kp34VXvwqvehVe9C696F171rrzqXXnVu/Kqd+VV78t3Less5UvSbOOZpMGTdPIkTZ6kxZO0cZIu37X8B5IKT1LlSWo8Sbzq3XjVu/Gqd+NV78ar3o1XvTuvende9e686t151bvzqnfnVe/Oq96dV707r3p3XvUevOo9eNV78Kr34FXvwaveg1e9B696D171HrzqPXjV++RV75NXvU9e9T551fvkVe+TV71PXvU+edX75FXvk1e9J696T171nrzqPXnVe/Kq9+RV78mr3pNXvSevek9e9V686r141XvxqvfiVe/Fq96LV70Xr3ovXvVe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YysakJM9TjxjKxqQ0y5POmMrG7BnYjpjKxuwZ2I6YysbsGdiOmMrG7B/sYVnbEUD9kxMZ2xlA/ZMTGdsZQPyTDzpjK1sQP7F1qQztrIB+XR6HvBOnA3IO/GkM7ayAXknnnbG1rycsdVa31//6TbHE0mXU7P+gaTCk1R5kq7uaI//Xv/+T7cVHoaxxp//+DzKM/ndLX+45Z9u+dMtf7nlb7X8y+lUL5Zf3PKrW767615OpXqxfHfXre6uW91dt7q7bnV33ebuus3ddZu76zZ3172cQPVi+e6u29xdt7m7bnN33ebuut3ddbu763Z31+3urns5berF8t1dt7u7bnd33e7uut3ddYe76w531x3urjvcXfdystSL5bu77nB33eHuusPddYe7657urnu6u+7p7rqnu+teTpF6sXx31z3dXfd0d93T3XVPd9ed7q473V13urvudHfdy4lRL5bv7rrT3XWnu+tOd9ed7q673F13ubvucnfd5e66l9OhXizf3XWXu+sud9dd7q673F13u7vudnfd7e662911LydBvVi+u+tud9fd7q673V13q7vuOtRddx3qrrsOddddh7rrrkPdddeh7rrrUHfddai77jrUXXcd7q5b3F23uLtucXddN5tqudlUy82mWm421XKzqZabTbXcbKrlZlMtN5tqudlUy82mWm421XKzqZabTbXcbKrlZlMtN5tqudlUy82mWm421XKzqZabTbXcbKrlZlMtN5tqudlUy82mWm421XKzqZabTbXcbKrlZlMtN5tqudlUy82mWm421XKzqZabTbXcbKrlZlMtN5tqudlUy82mWm421XKzqZabTbXcbKrlZlMtN5tqudlUy82mWm421XKzqZabTbXcbKrlZlMtN5tqudlUy82mWm421XKzqZabTbXcbKrlZlMtN5tqudlUy82mWm421XKzqZabTbXcbKrlZlMtN5tqudlUy82mWm421bqeTdX2+P5P9/pE0vW8qVb213+6zfOZpMKTVHmSGk9S50kaPEknT9LkSVo8SZsmaR+46r0PXPXeB6567wNXvfeBq977wFXvfeCq9z5w1XsfuOq9D171LrzqXXjVu/Cqd+FV78Kr3oVXvQuvehde9S686l141bvyqnflVe/Kq96VV70rr3pXXvWuvOpdedW78qp35VXvxqvejVe9G696N171brzq3XjV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NmDPxHTGVjZg/2KLztjKBuyZGM/YigbkZI8Tz9iKBuS0y5PO2MoG7JmYztjKBuyZmM7YygbsmZjO2MoG7F9s4Rlb0YA9E9MZW9mAPRPTGVvZgD0T0xlb2YD9iy06YysbsGdiPGMrGpCTPU48YysakNMuTzpjKxuwZ2I6YysbsGdiOmMrG7BnYjpjKxuwf7GFZ2xFA/ZMTGdsZQP2TExnbGUD9kxMZ2xlA/YvtuiMrWzAnonxjK1oQE72mHjGVjQgp11OOmMrG5Bn4nnAO3E2IM/Ek87YygbkmXjSGVvZgPyLrYlnbEUD8kw86YytbECeiSedsZUNyDPxpDO2sgH5F1uTztjKBuyZGM/YigbkZI+JZ2xFA3La5aQztrIBeyamM7ayAXsmpjO2sgF7JqYztrIB+RdbE8/YigbsmZjO2MoG7JmYztjKBuyZmM7YygbkX2xNOmMrG7BnYjxjKxqQkz0mnrEVDchpl5PO2MoG7JmYztjKBuyZmM7YygbsmZjO2MoG7F9s4Rlb0YA9E9MZW9mAPRPTGVvZgD0T0xlb2YD9iy06YysbsGdiPGMrGpCTPSaesRUNyGmXk87YygbsmZjO2MoG7JmYztjKBuyZmM7YygbsX2zhGVvRgD0T0xlb2YA9E9MZW9mAPRPTGVvZgP2LLTpjKxuwT6fpjK1swN6J6YytbMDeie2MrXk5Y6u1vr/+022OZ5IqT1LjSeo8SVd3tMd/r3//p9sKD8NY489/fB7lmfzTLX+65S+3/G2Wvy4nVL1YfnHLr275zS2/u+Wru+461F13Hequuw51112Hu+sWd9ct7q5b3F23uLvu5RSqF8t3d93i7rrF3XWLu+sWd9et7q5b3V23urtudXfdy4lTL5bv7rrV3XWru+tWd9et7q7b3F23ubtuc3fd5u66l9OlXizf3XWbu+s2d9dt7q7b3F23u7tud3fd7u663d11LydJvVi+u+t2d9ft7q7b3V23u7vucHfd4e66w911h7vrXk6NerF8d9cd7q473F13uLvucHfd0911T3fXPd1d93R33csJUS+W7+66p7vrnu6ue7q77unuutPddae76053153urns5DerF8t1dd7q77nR33enuutPddZe76y53113urrvcXfdy8tOL5bu77nJ33eXuusvddZe76253193urrvdXXe7u+71vKnXynd3XTebarnZVMvNplpuNtV2s6m2m0213Wyq7WZT7UPddbebTbXdbKrtZlNtN5tqu9lU282m2m421XazqbabTbXdbKrtZlNtN5tqu9lU282m2m421XazqbabTbXdbKrtZlNtN5tqu9lU282m2m421XazqbabTbXdbKrtZlNtN5tqu9lU282m2m421XazqbabTbXdbKrtZlNtN5tqu9lU282m2m421XazqbabTbXdbKrtZlNtN5tqu9lU282m2m421XazqbabTbXdbKrtZlNtN5tqu9lU282m2m421XazqbabTbXdbKrtZlNtN5tqu9lU282m2m421XazqbabTbXdbKp9PZuq7fH9n+71maTLO2kr++s/3eb5TFLjSeo8SYMn6eRJmjxJiydp4yRdz0PKkgpPEq96L171XrzqvXjVe/Gq9+JV78Wr3otXvTevem9e9d686r151XvzqvfmVe/Nq96bV703r3pvWvXex0Gr3g9JtOr9kESr3g9JtOr9kESr3g9JtOr9kESr3g9JtOr9kESr3g9JvOpdeNW78Kp34VXvwqvehVe9C696F171LrzqXXjVu/Cqd+VV78qr3pdzHXobX//68X/2Z5IaT9LV1buv8/iStFZ7JmnwJJ08SVdX7/G4MX/+63GcTyUtnqSNk3Q5d+AfSCo8SZUnqfEkdZ6kwZN08iTxqnfjVe/Gq96dV707r3p3XvXuvOrdedW786p351XvzqvenVe9O696D171HrzqPXjVe/Cq9+BV78Gr3oNXvQeveg9e9R686n3yqvfJq94nr3qfvOp98qr3yaveJ696n7zqffKq98mr3pNXvSevek9e9Z686j151XvyqvfkVe/Jq96TV70nr3ovXvVevOq9eNV78ar34lXvxavei1e9F696L171XrzqvXnVe/Oq9+ZV782r3pfvWo5Wv76FG609lXR59W7HGSSdvKs0eVdp8a7Spl2lcvmuZbxK5fJdy39wlSrvKjXeVcJV73Lgqnc5cNW7HLjqXQ5c9S4Hr3oXXvUuvOpdeNW78Kp34VXvwqvehVe9C696F171LrzqXXnVu/Kqd+VV78qr3pVXvSuvelde9a686l151bvyqnfjVe/Gq96NV70br3o3XvVuvOrdeNW78ap341XvxqvenVe9O696d1717rzq3XnVu/Oqd+dV786r3p1XvTuveg9e9R686j141XvwqvfgVe/Bq96DV70Hr3oPXvUevOp98qr3yaveJ696n7zqffKq98mr3ievep+86n3yqvfJq96TV70nr3pPXvWevOo9edV78qr35FXvyavek1e9J696L171XrzqvXjVe/Gq9+JV78Wr3otXvRevei9e9V686r151XvzqvfmVe/Nq968XcvC27UsvF3Lwtu1LLxdy8Lbtay8XcvK27WsvF3Lytu1rAeuelfermXl7VpW3q5l5e1aVt6uZeXtWlbermXl7VpW3q5l5e1aVt6uZeXtWlbermXl7VpW3q5l5e1aVt6uZb1+1/L8/iOS4/zjv/f/Smo8SZ0nafAkXV69z9m/Je36TNLkSVo8SRsn6fpdy1nLl6TZ+zNJhSep8iS1n5Q0jmeSOk/S4Ek6eZIur97z3N+S1vlM0uJJ2jhJ1+9aZkmFJ6nyJDWepM6TxDt7X79rmSVNnqTFk8Q7e1+/a5klFZ6kypPUcHHg+l3LLGnwJPHO3tfvWmZJiydp4ySdvLP3yTt7n7yz98k7e1+/a5klDZ6kkyeJNzk5eWfv63cto6Trdy2zpMKTxDt7X79rmSV1nqTBk3Ti4sCcPEmLJ4l39l4HT1LhSao8Sbyz9/W7llkS7+y9eGfvxTt7L95by8V7a7l5k5PNO3tv3heDm/fF4PW7llkS7+y9eV8Mbt4Xg5v3xeDetDjQDtwXg+3AfTHYDtzZux24Lwbb0XmScF8MtgN39m4H7uzdDtzZux24s3cruLN3K7i3lq3g3lq2gpuctOt3LdPZuxXcF4Ot4L4YbAX3xWAruLN3K7gvBlvFfTHYKu6LwVZx2zqt4r4YbNfvWmZJvLN3xX0x2Crui8FWcV8Mtso7ezfe2bvxzt6Nd/ZuvLP3D+xaRkm4t5at8SYnjXf2brgvBlvDfTHYOu6LwdZ5Z++O+2KwddwXg+36XcssCbet0zrui8HWcV8Mts47e3fcF4Nt4L4YbAP3xWAbvLP34J29f2DXMkrinb0H7+w9eG8tB++t5eBNTk7e2fvEfTHYTtwXg+3EfTHYrt+1jGfvE/fFYDtxXwy2E/fFYDtx2zrt5H0xOHlfDE7e2XvyvhicvC8Gr9+1zJJ4Z+/JO3tP3tl78s7ek3f2Xry3lov31nLxJifX71qu+k1BX0/b7vW7llnS4Ek6eZIur95rri9J+/jPs/ezfz3+/Mfn8SzzXb+X+Vr5Wy3/+n3P18ovbvnVLb+55Xe3/OGWf7rlu7vudnfdre66/VB33X6ou24/1F23H+qu2w911+2Huuv2Q911+6Huuv1Qd91+uLtucXfd4u66xd11i7vrXr8P/lr57q5b3F23uLtucXfd4u661d11q7vrVnfXre6ue/0e/2vlu7tudXfd6u661d11q7vrNnfXbe6u29xdt7m77vX8hdfKd3fd5u66zd11m7vrNnfX7e6u291dt7u7bnd33eu5Ga+V7+663d11u7vrdnfX7e6uO9xdd7i77nB33eHuutfzTl4r3911h7vrDnfXHe6uO9xd93R33dPddU931z3dXfd6Ts1r5bu77unuuqe7657urnu6u+50d93p7rrT3XWnu+tezxd6rXx3153urjvdXXe6u+50d93l7rrL3XWXu+sud9f9AS7US+W7u+5yd103m6q72VTdzabqbjZVd7OpuptN1d1squ5mU3U3m6q72VTdzabqbjZVd7OphptNNdxsquFmUw03m2oc6q473Gyq4WZTDTebarjZVMPNphpuNtVws6mGm0013Gyq4WZTDTebarjZVMPNphpuNtVws6mGm0013Gyq4WZTDTebarjZVMPNphpuNtVws6mGm0013Gyq4WZTDTebarjZVMPNphpuNtVws6mGm0013Gyq4WZTDTebarjZVMPNphpuNtVws6mGm0013Gyq4WZTDTebarjZVMPNphpuNtVws6mGm0013Gyq4WZTDTebarjZVMPNphpuNtVws6mGm0013Gyq4WZTjR9gU439S/75TNL1nbSeX5JW788kDZ6kkydp8iQtnqSNk/QDnKUoqfAkVZ6kxpPEq96TV70nr3pPXvWevOo9edV78ar34lXvxavei1e9F696L171XrzqvXjVe/Gq9+JV782r3ptXvTevem9e9d686r151XvzqvfmVe/Nq94bV73PA1e9zwNXvc8DV73PA1e9zwNXvc8DV73PA1e9zwNXvc8DV73Pg1e9C696F171vp4XsVv9krRbeyap8SRdXr33/PVqt81nkgZP0smTNHmSFk/Sxkm6nmeQJRWepMqT1HiSeNW78qp35VXvyqvelVe9K696N171brzq3XjVu/Gqd+NV78ar3o1XvRuvejde9W686t151bvzqnfnVe/Oq96dV707r3p3XvXuvOrdedW786r34FXvwaveg1e9B696D171HrzqPXjVe/Cq9+BV78Gr3ievep+86n3yqvfJq94nr3qfvOp98qr3yaveJ696n7zqPXnVe/Kq9+RV78mr3pNXvSevek9e9Z686j151fvyXcuz9K9/fZaxn0i6fNfyH0gqPEmVJ+nq6n3W4/iSVOt4JqnzJI3LJfX9LWmezySdvN+lyZO0eJJ41fvyXcv8xF2+a/kPJFVcEbh81/If/C51nqTBk8Sr3pfvWv6DJ27xJG1aEZgH7uw9D9zZex64s/c8cNV7Hriz9zwGT9LJKwK4s/c8cGfveeDO3rPwqnfBnb1nqTxJDVcELt+1/Ae/S7iz9yy4s/csvOpdcGfvWTZOUj1wRaDyzt6Vd/auvLN35VXvyjt715MnafKKAO/sXXln78Y7ezde9W68s3fDvbWcl+9a5iLQeGfvxjt7N97Zu/Gqd+OdvTvureXsBVcEOu/s3Xln78t3Lf+BJF717ryzd8e9tZx98YoA7+w9eGfvwTt7D171Hryz9+W7lv9AEu6LwTl4Z+/BO3sP3tl78Kr3yTt7n7y3lifui8F58s7el+9a/gNJvLP3yaveJ+/sffLeWp68LwYn7+w9eWfvyTt7T171vnzXMj9xk/fWcvK+GJy8s/fknb15u5aTt2s5F+/svXhvLRfvi8Hrdy3z7xLv7M3btZy8Xcu5eGfvxXtruXlfDG7e2Xvzzt68XcvJ27Wcm3f23ry3lpv3xeDmnb037uy9eLuWi7druQ7c2XsduLeW6+i0IrAO3Nl7Hbiz9+LtWi7eruU6cGfvVXBvLVfBfTG4Cu7svQru7L14u5aLt2u5Cu7svQrureUquC8GV+GdvSvv7M3btVy8XctVeWfv63ctsyTcF4Or8s7elXf25u1aLt6u5Wq8s3fDvbVcDffF4Gq8s/f1u5ZZEu/szdu1XI139m64t5ar4b4YXJ139u68szdv13Lxdi3X9buW8YnruLeWq+O+GFydd/buvLM3b9dy8XYt1+CdvQfvreXAfTG4rt+1zL9LvLM3b9dy8XYt1+CdvQfvreWJ+2Jwnbyz98k7e/N2LRdv13KdvLP3yXtreeK+GFwn7+x98s7evF3Lxdu1XJN39p68t5Y/sGuZisDknb0n7+zN27VcvF3LNXln78V7a7l4Xwzy/q7lWryzN2/XcvF2Ldfinb0X763l4n0xyPu7lmvzzt68XcvF27Vcm3f2vn7XMkvifTHI+7uWa/PO3rxdy8XbtdwH7uy9D9xby33gvhjcvL9ruQ/c2Xvzdi03b9dyH7iz9z5wby33gfticPP+ruUuuLP35u1abt6u5b5+1zI+cQX31nIX3BeDm/d3LXfBnb03b9dy83Ytd+WdvSvureWuuC8GN+/vWu7KO3vzdi03b9dyV97Zu+LeWu6G+2Jw8/6u5W68szdv13Lzdi134529G+6t5W64LwY37+9a7sY7e/N2LTdv13J33tm7495a7h/YtUxFgPd3LXfnnb15u5abt2u5O+/sPXhvLQfui8HN+7uWe/DO3rxdy83btdyDd/YevLeWA/fF4Ob9Xct98s7evF3Lzdu13Cfv7H39rmWWhPticPP+ruU+eWdv3q7l5u1a7sk7e0/eW8vJ+2KQ93ct9/W7llkS7+zN27Xck3f2nry3lpP3xSDv71ruxTt783YtN2/Xcl+/axmfuMV7a7l4Xwzy/q7lXryzN2/XcvN2Lffmnb03763l5n0xyPu7lnvzzt68XcvN27Xcm3f23rC3lus4DtgXg39Igp29/5AEO3v/IQl29v5DEqx6/yEJdvb+QxLsreUfkmBfDP4hCXb2/kMS7Oz9kETbtfxDEq96F9jZ+w9JsLeWf0jquCJA+7uWf0iCnb3/kAQ7e/8hiVe9C+/sXWFvLf+QBPti8A9JvLN35Z29abuWf0jiVe/KO3tX2FvLPyTBvhj8QxLv7N14Z2/aruUfknjVu/HO3tfvWmZJsC8G/5DEO3s33tmbtmv5hyRe9e68s3eHvbX8QxLsi8E/JPHO3tfvWmZJvLM3bdfyD0m8s3eHvbX8QxLsi8GHJNrftfxDEu/sTdu1/EMSr3pfv2sZn7jBe2s5YF8M/iGJd/YevLM3bdfyIYm2a/mHJN7Z++S9tTxhXwz+IYl39j55Z2/aruUfknjV++SdvU/eW8vJ+2Lw+l3LfqwvSb32Z5IqT9Ll1fs85peks61nkjpP0uBJOnmSLq/e56jfklb9D0n/779ej3PBn/96HWuFfz3W+PpPH+WZ2fVJZvcHmb1+8/QnzZZPMls/yWz7JLP9k8yOTzJ7fpLZTzpBrU86Qa1POkHtTzpB7U86Qe1POkHtTzpBXb9l/5NmP+kEtT/pBLU/6QS1P+kEtT/oBFWODzpBleODTlDl+KATVDk+6ARVjv5JZj/oBFWODzpBleODTlDl+KATVDk+6QRVPukEVT7pBFU+6QRVPukEdT1t5ifNftIJqnzSCap80gmqfNIJqnzSCap+0gmqftIJqn7SCap+0gnqeuLTT5r9pBNU/aQTVP2kE1T9pBNU/aQTVPukE1T7pBNU+6QTVPukE9T11LWfNPtJJ6j2SSeo9kknqPZJJ6j2SSeo/kknqP5JJ6j+SSeo/kknqOvJhz9p9pNOUP2TTlD9k05Q/ZNOUP2TTlDjk05Q45NOUOOTTlDjk05Q19NHf9LsJ52gxiedoMYnnaDGJ52gxiedoM5POkGdn3SCOj/pBHV+0gnqegLwT5r9pBPU+UknqPOTTlDnJ52gzk86Qc1POkHNTzpBzU86Qc1POkH9AIX7B81+0glqftIJ6pOY5OWTmOTlk5jk5ZOY5OWTmOTlk5jk5ZOY5OWTmOTlk5jk5ZOY5OWTmOTlk5jk5ZOY5OWTmOTlk5jk5ZOY5OWTmOTlk5jk5ZOY5OWTmOTlk5jk5ZOY5OWTmOT1k5jk9ZOY5PWTmOT1k5jk9eifZPaDTlD1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jk9ZOY5PWTmOT1k5jkFc8k7+Pb7D6fGYCfisraXwYeL9bCv27H/JZ9rF9K6vnkH/cyvq5NL7P99R//eWn6fWl+d2ngJ66fvDTw89lPXhr4ae4nLw387PeTlwZ+UvzBS0Mntf/kpYGfQn/y0sDPrD95ae7T8G8vTb8vze8uzX0a/u2luU/Dv70092n4t5fmPg3/9tLcp+HfXRo6df8nL819Gv7tpblPw7+9NPdp+LeXpt+X5neX5j4N//bS3Kfh316a+zT820tzn4Z/e2nu0/DvLg39Lyj85KW5T8O/vTT3afi3l+Y+Df/20vT70vzu0tyn4d9emvs0/NtLc5+Gf3tp7tPwby/NfRr+3aWh/zWMn7w092n4t5fmPg3/9tLcp+HfXpp+X5rfXZr7NPzbS3Ofhn97ae7T8G8vzX0a/u2luU/Dv7k0jf6XTX7y0tyn4d9emvs0/NtLc5+Gf3tp+n1pfndp7tPwby/NfRr+7aW5T8O/vTT3afi3l+YFp+Gzza9Lc87xH5fm//6QV/y9l/xDyhU/pF7xQ9oVP6Rf8UPGFT/kvOKHzCt+yLrih1zxxNcrnvh6xRNfr3ji6xVPfL3iia9XPPH1iie+XvHE1yue+HrFE9+ueOLbFU98u+KJb1c88e2KJ75d8cS3K574dsUT36544tsVT3y/4ol/BXf1Eaq+fsg6Z4pu++u/PI+/gLEe/+U/BdWfE1T6M0GNJqjTBA2aoPNiQbN8DRhmP54JmjRBiyZowwS9gh35X/5S129B5Zmgqyv17sef/3iP9kxQpQm6ulLv1r4FPatDo/+coPn0d2j83C3761D3l6CTJmjSfqkXTdCGPWXnAXvKzgL7pT4rTVCD/VKfnSZo0J6yk/aUTdov9aIJ2rBf6nnQBBXYUzYr7CmbDfZLPTtN0KD9Up80QZP2lC3aU7Zhv9TroAmiTT8WbfqxaNOP1WFP2aJNPxZt+rFo049Fm34s2vRj06Yfmzb92LTpx6ZNP3anCaJNPzZt+rFp049Nm35s2PSjH7DpRz9g049+wKYf/YBNP/rRaYJg049+wKYf/YBNP/oBm370Azb96AU2/egFNv3oBTb96AU2/eilw56yApt+9AKbfvQCm370Apt+9AKbfvQKm370Cpt+9AqbfvQKm3702mmCYNOPXmHTj15h049eYdOPXmnTj0abfjTa9KPRph+NNv1onSaINv1otOlHo00/Gm360WjTj06bfnTa9KPTph+dNv24fEcxPWWdNv3otOlHp00/Om360WnTj0Gbfgza9GPQph+DNv24fkcxCaJNPwZt+jFo049Bm34M2vTjpE0/Ttr046RNP07a9OMndxSfC6JNP07a9OOkTT9O2vTjpE0/Jm36MWnTj0mbfkza9OP6HcXwlE3a9GPSph+TNv2YtOnHpE0/Fm36cfmOYjm+6ePlmE+vUeVJaj8qaT2T1HmSxuWS+vol6VmJvHxb8T8krflM0tVVu5TvGlDKOJ9JWjxJ+3JJ9fwl6dmNu3xr8T8kneOZpBdU792+JNXjaElSb+VL0uOF2TNJ9ScljfpMUuNJ6jxJgyfpvFzS+GYP96c97hU7jK+WtHiSNk3SeMUm43/76338krSfSbq8ep+7f0max3wmqfIkXV69zzV/SXr6u9R/UlKrzySNH71x7Zmkkydp8n69F0/Sxj1x5cA9caXgfr1L5UlquF/v0nmSBu+JO3lP3OT9ei+epI379a4HT1LBPXG14p642nC/3rXzJA3er/fJkzR5T9ziPXEb9+vdDp4k3uSk8SYnjTc5aR33xDXe5KTxJieNNzlpvMlJ401OOm9y0nmTk86bnHTe5KR3niTe5KTzJiedNznpvMlJ501OBm9yMniTk8GbnAze5GR0niTe5GTwJieDNzkZvMnJ4E1OTt7k5ORNTk7e5OTkTU7OjnviTt7k5ORNTk7e5OTkTU5O3uRk8iYnkzc5mbzJyeRNTmbnSeJNTiZvcjJ5k5PJm5xM3uRk8SYnizc5WbzJyeJNTlbnSeJNThZvcrJ4k5PFm5ws3uRk8yYnmzc52bzJyeZNTq7ftYxP3OZNTjZvcrJ5k5PNm5xs3OTkPHCTk/PATU7OAzc5OQ/c5OQ8Ok8SbnJyHrjJyXngJifngZucnAducnIW3OTkLLjJyVlwk5Oz4CYn5w/vWj6VhJucnAU3OTkLbnJyFtzk5Cy4yclZcZOTs+ImJ2fFTU7OipucnD+wa5meuIqbnJwVNzk5K25yclbc5OSsvMlJ401OGm9y0niTk8abnPzArmWUxJucNN7kpPEmJ403OWm8yUnnTU46b3LSeZOTzpuc/PCu5VNJvMlJ501OOm9y0nmTk86bnAze5GTwJieDNzkZvMnJD+xapidu8CYngzc5GbzJyeBNTgZvcnLyJicnb3Jy8iYnJ29y8gO7llESb3Jy8iYnJ29ycvImJydvcjJ5k5PJm5xM3uRk8iYnP7xr+VQSb3IyeZOTyZucTN7kZPImJ4s3OVm8ycniTU4Wb3LyA7uW6YlbvMnJ4k1OFm9ysniTk8WbnGze5GTzJiebNznZvMnJD+xaRkm8ycnmTU42b3KyeZOTjZuczAM3OZkHbnIyD9zkZB64yck8Ok8SbnIyD9zkZB64yck8cJOTeeAmJ7PgJiez4CYns+AmJ7PgJifzB3Yt0xN3/a7lPveXpL2fXqWTJ2n+nKR61Ke/3osn6erqXY/ev//1+axUXr5r+R+S1ngmqeB+va/ftcySGu7X+/pdyyxp8J64k/fETd6v9+JJ2rhf7+t3LbOkgnviLt+1zE/cC3YtaznG1w8pZwmSxm5f/3rs89lB9wW7li+XNC6XVPcvSc+KwAt2Lf+FpP3013tef+P6r6v0tAgsnqSN+116wa7lq3+XXrBr+eob94Jdy5dLarzfpc77XRq8G3fyJE3e79Li/S5t3I0bB09Swf0ujYr7XRqNd+M6TxLv7D14Z+/BO3sP3tl78M7eJ+/sffLO3ifv7H3yzt5n5/0u8c7eJ+/sffLO3ifv7H3yzt6Td/aevLP35J29J+/sPTtPEu/sPXln78k7e0/e2Xvyzt6Ld/ZevLP34p29F+/svTrvd4l39l68s/finb0X7+y9eGfvzTt7b97Ze/PO3pt39t6dJ4l39t68s/fmnb037+y9cWfvdeDO3uvAnb3XgTt7rwN39l4H7uy9DtzZex24s/c6cGfvdeDO3uvAnb1XwZ29V8GdvVfBnb1XwZ29V+k8Sbiz9yq4s/cquLP3Kriz9yq8s3flnb0r7+xdeWfvyjt71877XeKdvSvv7F15Z+/KO3tX3tm78c7ejXf2bryzd+OdvX9i1zJJ4p29ebuWi7druXi7lou3a7l4u5aLt2u5eLuWi7druXi7lou3a7l4u5aLt2u5eLuWi7druXi7lou3a7l4u5aLt2u5eLuWi7druXi7lou3a7l4u5aLt2u5eLuWi7druXi7lou3a7l4u5aLt2u5eLuWi7druXi7lou3a7l4u5aLt2u5eLuWi7druXi7lou3a7l4u5aLt2u5eLuWi7druXi7lou3a7l4u5aLt2u5eLuWi7druXi7lou3a7l4u5aLt2u5eLuWi7druXi7lou3a7l4u5aLt2u5eLuWi7druXi7lou3a7l5u5abt2u5ebuWm7druQ/c2Xvzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcvN2LTdv13Lzdi03b9dy83YtN2/XcuN2LcuB27V8SKKdvR+SaGfvhyTa2fshiXb2fkiinb0fkmhn74ck2tn7IYl29n5Iop29y4HbtXxIop29H5JoZ++HJNrZ+yGJdvZ+SKKdvR+SaGfvhyTa2fshiXb2fkjinb1xu5YPSbyzN27X8iGJd/bG7Vo+JPHO3rhdy4ck3tkbt2v5kMQ7e+N2LR+SeGdv3K7lQxLv7I3btXxI4p29cbuWD0lXV++zjOPPf32W+fQqLZ6k/ZOSVn0i6fJdy38gqVwuqe9fkp4Vgct3Lf+BpMaT1HmSrq7eZ9tf//rsx/lM0vmTksrTJ+7y6t3X+S1pj2eSFk/Svl5S+SXp2e/S5buWf5U0jme/S5fvWv4DSZUnqfEkXV69x68n7jyenSov37X8B5JOnqTJk3R59T6/E8p59v5M0sZJunzX8pxlfUma9VlCuXzX8h9IqjxJjSfp8uo9W/uW1J8Vgct3Lf+BpJMnafIkret/vecvSU9L5cZJunzX8lzf//pc9T8TypOZ3XF8z+yOv5SMen7pL3L9Va6/yfV3uf4h13/K9U+5/iXXv936l7z/Lnn/XfL+u+T99/IN31frl/ffJe+/S95/l7z/Lnn/3fL+u+X9d8v775b338t3tF+tX95/t7z/bnn/3fL+u939txzu/lsOd/8th7v/lsPdf8vh7r/lcPffcrj7bznc/bcc7v5bDnn/LfL+W+T9t8j7b5H338s5Ca/WL++/Rd5/i7z/Fnn/LfL+W+X9t8r7b6X33/292Vv+8q9/6Yf331LXt/7Rn+iH99+on95/5/H9+z/PJ/rp/Tfpp/ffpJ/ef1P9gfff9Pw2eP+N+un9N/z+N3r/Tfrp+Tfph/ffVH8avP/G5xfef6N+ef9t9P6b9NPzb9Df6fk31J8O77/p+e3w/hv1y/vv9bSZF+uX599Oz7+p/sD7b3x+4f036pf330Hvv0m/PP8O+fx5yOfP1/OCXqxf3n+HfP485Pl3yOfPQz5/PuXz51Pef0/5/PmU59/riU+vrT+nfP58yufPp7z/nvL58ynPv3j+Vag/dP5Ven7p/KuoX95/8fyrpF+ef/H8q1R/5PNnOv8q6pf3Xzz/KumX5188/yrUHzr/Kj2/dP5V1C/vv3j+VdIvz794/lWqP/L5M51/FfXL+y+ef5X0y/Mvnn8V6g+dfxWfX/n8Gc+/Sr//8vkznn/19/ornn/19/Wn0vlX4fmtdP5V1O/uv/Wg99+k351/K55/leqPe/5c6fyrqF/ef/H8q6TfnX8rnn8V6g+df5WeXzr/KuqX9188/yrpd+ffiudfpfrjnj9XOv8q6pf3Xzz/KumX5186/yrVHzr/Kj6/7vlzlfOvKp5/lfTL8y+df5XqD51/lZ5fOv8q6pf3Xzz/KumX5186/yrWH/n8mc6/ivrl/RfPv0r65fmXzr9K9YfOv0rPL51/FfXL+y+ef5X0y/MvnX8V6498/kznX0X98v6L518l/fL8S+dfpfpD51/F51c+f5bzryqef5X0y/MvnX+V6g+df5WeXzr/KuqX9188/yrpl+dfOv8q1h/5/JnOv4r65f0Xz79K+uX5l86/SvWHzr9Kzy+dfxX1y/svnn+V9MvzL51/FeuPfP5M519F/fL+i+dfJf3y/EvnX6X6Q+dfxedXPn+W868qnn+V9MvzL51/leoPnX+Vnl86/yrql/dfPP8q6ZfnXzr/KtYf+fyZzr+K+t39t+H5V0m/O/82Ov8q1J9G51+F57cd8P4b9V/ef+eq3/pb/Q/9f0o6eZImT9LiSdo4ST+Ahxr7W9K5nkkqvKtUeVep8SRdXurHOr8knUd7JmnwJJ08SZMn6fLqfbb+Lak/lbRxkq6HC511/5LUn0kqPEmXV+9Zvg6V56zPSuX1VJ8sqfMkDZ6k68/erX1Lel4EJk/S4knaOEnXo2lmmb8kPSuV19NmsiT6AOfY3wOov5SM7wECHiCT9He5fvoLlKSf/gIl6ad/wJD00z9gSPrpL1CCfjxAJumnv0BJ+uX9lw6Qifrl/RcPkEn65f0XD5BJ+uX9lw6QSfrpAJmoX95/8QCZpF/ef/EAmaRf3n/pAJmoX95/8QCZpF/ef/EAmaRf3n/pAJmoX95/8QCZpF/ef/EAmaRf3n/pAJmoX95/8QCZpF/ef/EAmaRf3n/pAJmoX95/8QCZpF/ef/EAmaRf3n/pAJmoX95/8QCZpF/ef/EAmaRf3n/pAJm0QEoHyKQFTDpAJuqXL7DjATJJv3yBnQ6QSfWHDpBJzy8dIBP1uwEyDQ+QSfrdALdGB8jE+uMGqHY6QCbqd/ffjgfIJP1ugFs/4P031J9+uAGq/XADVPvh7r/9cANU++HOv724Aaq9uAGqvbgBqr3I++/1VJ8X63fn317c8+de3PPnXtzz517k/be658+9yvNvdc+fe3XPn/v1XKYX65f33+qeP/cqz7/VPX/uVT5/bvL5c5P3Xzz/KumX5188/yrUHzr/Kj6/8vkznn+Vfv/l82c8/yrox/OvQv2h86/S80vnX0X98v6L518l/fL8i+dfpfojnz/T+VdRv7z/4vlXSb88/+L5V6H+0PlX6fml86+ifnn/xfOvkn55/sXzr1L9kc+f6fyrqF/ef/H8q6Rfnn/x/KtQf+j8q/j8yufPeP5V+v2Xz5/x/KugH8+/CvWHzr9Kzy+dfxX1y/svnn+V9MvzL55/leqPfP5M519F/fL+i+dfJf3y/IvnX4X6Q+dfpeeXzr+K+uX9F8+/Svrl+ZfOv4r1Rz5/pvOvon55/8Xzr5J+ef6l869S/aHzr+LzK58/y/lXHc+/Svrd+XfQ+Veh/gw6/yo8v4POv4r63f13HPT+m/S78++g869i/XHPnwedfxX1y/svnn+V9Lvz76Dzr1L9ofOv0vNL519F/fL+i+dfJf3u/Dvo/KtYf9zz50HnX0X98v6L518l/fL8S+dfpfpD51/F59c9fx5y/tXA86+Sfnn+pfOvUv2h86/S80vnX0X98v6L518l/fL8S+dfxfojnz/T+VdRv7z/4vlXSb88/9L5V6n+0PlX6fml86+ifnn/xfOvkn55/qXzr2L9kc+f6fyrqF/ef/H8q6Rfnn/p/KtUf+j8q/j8yufPcv7VwPOvkn55/qXzr1L9ofOv0vNL519F/fL+i+dfJf3y/EvnX8X6I58/0/lXUf/l/Xeu+q2/1f/Q/38lXY+0ypIKT1LlSbq8l835F0ntmaTOkzR4kk6epMmTtHiSNk7S9UCkLOn6jDP2t6RzPZNUeZIur95jnV+SzuPpjes8SYMn6eRJurx6n61/S+pPJS2epMur91n3L0n9iaTrcTpZ0vVn7/KVmc5Zn5XK66E3WVLjSeo8SdefvVv7lvS0CFwPkMmSJk/S4km6/uxd5i9JT0rleT2MJUuiv98/9vd89S8l42s+dtL5KlE//f1C0t/l+unvF5J++vuFpJ/+fj/pp7/fT/rp7/eDfjxfJemX9188XyXpl/dfOl8l6pf3XzxfJemX9188XyXpl/dfOl8l6pf3XzxfJemX9188XyXpl/dfOl8l6pf3XzxfJemX9188XyXpl/dfOl8l6pf3XzxfJemX9188XyXpl/dfOl8l6pf3XzxfJemX9188XyXpl/dfOl8l6pf3XzxfJemX9188XyXpl/dfOl8l6pf3XzxfJemX9188XyXpp/ffv9+PPuV8lZPOV4n63XyVU85XOfF8laSf3n9D/ZHzVU46XyXqp/ff9Pvv5quceL5K0k/Pv6n+uPkq5+nmi55T3n+nmy96Tjdf9Jz0/Bvqz/UAmRc/v26+6Dnl/Xe6+aLnlOffSc+/of4sN9/7XG6+6Lnk/Xe5+aLn9QigF+uXz5+XfP685PPnJe+/Sz5/3vL8u+Xz5y2fP2/5/Pl6iNOLf//l8+ctz79bPn/e8vnzds+f5+HuvxPPv0r63fl34vlXf19/5gHvv/H5dc+fJ55/lX7/3fPniedfJf3u+fOk86/S80vnX0X98v6L518l/fD+G/W758+Tzr+Kz697/jzx/Kv0+++eP088/yrpd8+fJ51/lZ5fOv8q6pf3Xzz/KumX5188/yrVH/f8edL5V0k/nn8Vfv/x/KukX55/8fyrUH/o/Kv4/Mrnz3j+Vfr9l8+f8fyrpF8+f6bzr9LzS+dfRf3y/ovnXyX98P4b9cvnz3T+VXx+5fNnPP8q/f7L5894/lXSL58/0/lX6fml86+ifnn/xfOvkn55/qXzr2L9kc+f6fyrpF/Ov5p4/lXSL8+/dP5Vqj90/lV8fuXzZzn/auL5V0m/PP/S+Vep/tD5V+n5pfOvon55/8Xzr5J+eP+N+uXzZzr/Kj6/8vmznH818fyroJ/Ov4r65fNnOv8qPb90/lXUL++/eP5V0i/Pv3T+Vaw/8vkznX+V9Mv5VxPPv0r65fmXzr9K9YfOv4rPr3z+LOdfTTz/KumX5186/yrUn0XnX4Xnd9H5V1G/u/8uPP8q6Yf336jfPX9edP5VfH7d8+cl518tPP8q6Kfzr6J+9/x50flX6fml86+ifnn/xfOvkn53/l10/lWsP+7586Lzr5J+Of9q4flXSb88/9L5V6n+0PlX8fl1z5+XnH+18PyrpF+ef+n8q1R/6Pyr9PzS+VdRv7z/4vlXST+8/0b98vkznX8Vn1/5/Pl6/tVc9Vt/q/+h/09JGyfpekpVllR4ki7vZXP+RVJ7JqnxJHWepMGTdPIkTZ6kxZO0cZKuZxxlSYUn6fokMva3pHM9k9R4ki6v3mOdX5LO4+mNGzxJJ0/S5Em6vHqfrX9L6k8lbZyk6wk5Z92/JPVnkgpP0vVn7/KVLM9Zn5XK69E0WVLnSRo8SdefvVv7lvS8CEyepMWTtHGSruerzDJ/SXpWKq9HpmRJ9LcAx/6eQv+lZHxPEfEUlKS/y/XT3wIk/fS38Ek//S180k9/C5/009/CB/14CkrST/8KLumX9186BSXql/dfPAUl6Zf3XzwFJemX9186BSXpx1NQkn55/8VTUJJ+ef+lU1Cifnn/xVNQkn55/8VTUJJ+d//ddApK1O/uvxtPQUn63f13H+7+u/EUlKTf3X83nYIS9bv778ZTUIJ+PAUl6Zf3XzoFJeqX9188BSXpl/dfPAUl6Zf3XzoFJeqX9188BSXpl/dfPAUl6Zf3XzoFJeqX9188BeXvt8g3nYIStrA3nYIS9bspoJtOQYn63RSyjaeghPpDp6Ck55dOQYn63RTQTaegRP1uCtlu9Pyb6o+bArq7m0K2u7z/djeFbHc3hWxfz4R5bf3pbgro7m4K2e7y/tvdFNDd5fl30PNvqD/DTQHdw/1XMPaQ99/rqT4v1i/Pv0M+fx7y+fOQz5+HvP+e8vnzKc+/p3z+fMrnz9dzmV6sX95/T/n8+ZTn31M+fz7l8+cpnz9Pef/F86+Sfnn+xfOvQv2h86/i8yufP+P5V+n3Xz5/xvOvgn48/yrUHzr/Kj2/dP5V1C/vv3j+VdIvz794/lWqP/L5M51/FfXL+y+ef5X0y/Mvnn8V6g+df5WeXzr/KuqX9188/yrpl+dfPP8q1R/1/LkedP5V1K/uvw/96vnzQ786/z70w/vv39efh371/PmhXz1/fuhX99+HfvX8+aFfnX/rgedfhfpD51+l55fOv4r65f0Xz79K+tX596FfPX9+6FfPnx/61fPnh355/8Xzr5J+ef7F869C/aHzr9LzS+dfRf3y/ovnXyX98vxL51/F+iOfP9P5V1G/vP/i+VdJvzz/0vlXqf7Q+Vfx+ZXPn938q4d++fyZzr9K+un8q1R/6Pyr9PzS+VdRv7z/4vlXSb88/9L5V7H+yOfPdP5V1C/vv3j+VdIvz790/lWqP3T+VXp+6fyrqF/ef/H8q6Rfnn/p/KtYf+TzZzr/KuqX9188/yrpl+dfOv8q1R86/yo+v/L5s5t/9dAvnz/T+VdJP51/leoPnX+Vnl86/yrql/dfPP8q6ZfnXzr/KtYf+fyZzr+K+uX9F8+/Svrl+ZfOv0r1h86/Ss8vnX8V9cv7L55/lfTL8y+dfxXrj3z+TOdfRf3y/ovnXyX98vxL51+l+kPnX8XnVz5/dvOvHvrl82c6/yroL3T+Vag/hc6/Cs9vofOvon53/y0Hvf8m/e78W+j8q1h/3PPnQudfRf2X99+56rf+Vv9D//+VdD3SKksqPEmVJ+nyXjbnXyS1Z5I6T9LgSTp5kiZP0uJJ2jhJ1wORsqTCk1R5kq5PImN/SzrXM0mdJ+ny6j3W+SXpPJ7euJMnafIkLZ6ky6v32fq3pP5M0vU4nSzp8up91v1LUn8mqfIkXX/2Ll/J8pz1Wam8Hk2TJQ2epJMn6fqzd2vfkp4XgcWTtHGSroexZEnXn73L/CXpWam8HpmSJdHfAhz7ewr9l5LxPUXEU1CSfvpbgKSf/hYg6ae/hU/66W/hk376W/igH09BSfrpX8El/fSv4JJ+ef+lU1Cifnn/xVNQkn55/8VTUJJ+ef+lU1Cifnn/xVNQkn55/8VTUJJ+ef+lU1Cifnn/xVNQkn55/8VTUJJ+ef+lU1Cifnn/xVNQkn55/8VTUJJ+ef+lU1Cifnn/xVNQkn55/8VTUJJ+ef+lU1Cifnn/xVNQkn55/8VTUJJ+ef+lU1Cifnn/xVNQkn55/8VTUJJ+ef+lU1Cifnr/DVvkdApK2sKmU1CC/oqnoPw9RaHSKShRv5tCVvEUlL+vP/WA99/4/LopZBVPQUm//24KWaVTUKJ+ev4N9ae4KaC1uClktcj7b3FTyOr1mJcX66fn31R/3BTQWtwUslrk/be4KaC1yvNvpeffUH+qmwJaq/uvYNQfAPW89vffTQGtVZ5/q3v+XKt7/lyrfP7c5P23yefPTZ5/m3z+fD1q6cXPr3z+3OT9t8nnz02ef5t8/tzl8+cunz93ef/F86+Sfnj/jfrl82c6/yo+v/L5M55/lX7/5fNnPP8q6ZfPn+n8q/T80vlXUb+8/+L5V0m/PP/i+Vep/sjnz3T+VdKP51+F3388/yrpl+dfPP8q1B86/yo+v/L5M55/lX7/5fNnPP8q6ZfPn+n8q/T80vlXUb+8/+L5V0k/vP9G/fL5M51/FZ9f+fwZz79Kv//y+TOef5X0y+fPdP5Ven7p/KuoX95/8fyrpF+ef/H8q1R/5PNnOv8q6cfzr8LvP55/lfTL8y+efxXqD51/FZ9f+fwZz79Kv//y+TOdfxX1u+fPjc6/Cs9vo/Ovon53/214/lXSD++/Ub97/tzo/Kv4/Lrnz03Ov2p4/lXQT+dfRf3u+XOj86/S80vnX0X98v6L518l/e782+j8q1h/3PPnRudfJf1y/lXD86+Sfnn+pfOvUv2h86/i8+uePzc5/6rh+VdJvzz/0vlXqf7Q+Vfp+aXzr6J+ef/F86+Sfnj/jfrl82c6/yo+v/L5s5x/1fD8q6Cfzr+K+uXzZzr/Kj2/dP5V1C/vv3j+VdIvz790/lWsP/L5M51/lfTL+VcNz79K+uX5l86/SvWHzr+Kz698/iznXzU8/yrpl+dfOv8q1R86/yo9v3T+VdQv7794/lXSD++/Ub98/kznX8XnVz5/lvOvGp5/FfTT+VdRv3z+TOdfpeeXzr+K+uX9F8+/Svrl+ZfOv4r1Rz5/pvOvkv7r+Vdz1W/9rf6H/j8lFZ6kypPUeJIu72Vz/kVSeyZp8CSdPEmTJ2nxJG2cpOvpSVlS4UmqPEmNJ+ny6r3G/pZ0rmeSBk/S5dV7rPNL0nk8vXGTJ2nxJG2apH49e+ds/VtSfyqp8CRdXr3Pun9J6s8kNZ6k68/e5StZnrOuZ5IGT9LJkzR5kq4/e7f2Lel5Edg4SdeTW7KkwpN0/dm7zF+SnpXK65EpWdL1Z+//bop77O8p9F9KxtcUseMpKEk//S1A0k9/C5D009/CJ/30t/BBP56CkvTT38In/fSv4JJ++ldwSb+8/9IpKFG/vP/iKShJv7z/4ikoQT+dghL1y/svnoKS9Mv7L56CkvTL+y+dghL1y/svnoKS9Mv7L56CkvTL+y+dghL1y/svnoKS9Mv7L56CkvTL+y+dghL1y/svnoKS9Mv7L56CkvTL+y+dghL1y/svnoKS9Mv7L56CkvTL+y+dghL1y/svnoKS9Mv7L56CkvTL+y+dghL1y/svnoLy91vknU5BCVvYnU5BifrdFNBOp6BE/W4KWcdTUEL9oVNQ4vPrppB1PAUl/f67KWSdTkFJ+hc9/4b6s9wU0L7cFLK+5P33enLLi/W7KWR90fNvqj9uCmhfbgpZX/L+u90U0L7l+XfT82+oP9tNAe0/wN55rX55/91uCmjf8vy75fPn7Z4/j8M9fx6Hu/+Owz1/Hoc7/44D3n9D/RmHe/48Dvf8eRzu/jsO9/x5HO78O4p7/jyKe/48inv+PIq8/+L5V0m/O/8OPP8q1R/3/HnQ+VdRv7z/4vlXSb88/+L5V6H+0PlX6fml86+ifnn/xfOvkn55/sXzr1L9kc+f6fyrqF/ef/H8q6Rfnn/x/KtQf+j8q/j8yufPeP5V+v2Xz5/x/KugH8+/CvWHzr9Kzy+dfxX1y/svnn+V9MvzL55/leqPfP5M519F/fL+i+dfJf3y/IvnX4X6Q+dfpeeXzr+K+uX9F8+/Svrl+RfPv0r1Rz5/pvOvon55/8Xzr5J+ef7F869C/aHzr+LzK58/4/lX6fdfPn+m86+Sfjr/KtUfOv8qPb90/lXUL++/eP5V0i/Pv3T+Vaw/8vkznX8V9cv7L55/lfTL8y+df5XqD51/lZ5fOv8q6pf3Xzz/KumX5186/yrWH/n8mc6/ivrl/RfPv0r65fmXzr9K9YfOv4rPr3z+LOdfDTz/Kul359+Tzr8K9eek86/C83vS+VdRv7v/nge9/yb97vx70vlXsf64588nnX8V9cv7L55/lfS78+9J51+l+kPnX6Xnl86/ivrl/RfPv0r63fn3pPOvYv1xz59POv8q6pf3Xzz/KumX5186/yrVHzr/Kj6/7vnzKedfnXj+VdIvz790/lWqP3T+VXp+6fyrqF/ef/H8q6Rfnn/p/KtYf+TzZzr/KuqX9188/yrpl+dfOv8q1R86/yo9v3T+VdQv7794/lXSL8+/dP5VrD/y+TOdfxX1X95/56rf+lv9D/1/Sqo8SY0nqfMkXd7L5vyLpPZM0smTNHmSFk/Sxkm6HrWUJRWepMqT1HiSOk/S9Ulk7G9J53om6eRJurx6j3V+STqPpzdu8SRtnKTrQT1Z0uXV+/G64ltSfyqp8iRdXr0fL2V/SerPJHWepOvP3uUrWT5+a56VyuvRNFnS5ElaPEnXn71b+5b0tAhcj3nJkgpPUuVJuv7sXeYvSc9K5fXIlCyJ/hbg2N9T6L+UjO8pIp6CkvTT3wIk/fS3AEk//S180E+noET99LfwST/9LXzST/8KLunvcv3y/kunoET98v6Lp6Ak/e7+O/EUlKTf3X8nnYIS9bv77zzc/XfiKShJv7v/TjoFJep399+Jp6AE/XgKStIv7794CkrSL++/dApK1C/vv3gKStIv7794CkrSL++/dApK1C/vv3gKStIv7794CkrSL++/dApK1C/vv3gKStIv7794CkrSL++/dApK1C/vv3gKStIv7794CkrSL++/dApK1E/vv3+/RT7pFJSwhT3pFJSo300BnXQKStRP779JP73/pvrjpoBOOgUl6ndTQCedgpL00ykoUT89/4b6M9wU0DncFLJ5PYzlxb//bgrZHG4K2Rz0/Jvqj5sCOoebQjZPef893RTQecrz70nPv6H+XI/TefHz6/4rGPOU99/TTQGdpzz/nvL585TPn6d8/jzl/XfK58/XA5FerF8+f57y+fOUz5+nvP9O+fx5yfPvks+fl3z+vOTz5+uRVi/+/ZfPn/H8q6RfPn+m86/i8yufP+P5V+H3H8+/Svrl+RfPvwr1h86/is+vfP6M51+l33/5/BnPv0r63fPnRedfhed30flXUb+7/y48/yrph/ffqN89f150/lV8ft3z54XnX6Xff/f8eeH5V0m/e/686Pyr9PzS+VdRv7z/4vlXSb87/y48/yrVH/f8edH5V0k/nn8Vfv/x/KukX55/8fyrUH/o/Kv4/LrnzwvPv0q//+7588Lzr5J++fyZzr9Kzy+dfxX1y/svnn+V9MP7b9Qvnz/T+Vfx+ZXPn/H8q/T7L58/0/lXUb98/kznX6Xnl86/ivrl/RfPv0r65fmXzr+K9Uc+f6bzr5J+Of9q4flXSb88/9L5V6n+0PlX8fmVz5/l/KuF518l/fL8S+dfpfpD51+l55fOv4r65f0Xz79K+uH9N+qXz5/p/Kv4/Mrnz3L+1cLzr4J+Ov8q6pfPn+n8q/T80vlXUb+8/+L5V0m/PP/S+Vex/sjnz3T+VdIv518tPP8q6ZfnXzr/KtUfOv8qPr/y+bOcf7Xw/KukX55/6fyrVH/o/Kv0/NL5V1G/vP/i+VdJP7z/Rv3y+TOdfxWfX/n8Wc6/Wnj+1d/r33T+VdTvnj9vOv8qPL+bzr+K+t39d+P5V0m/O/9uOv8q1h/3/HnT+VdJv5x/tfH8q6TfnX83nX+V6g+dfxWfX/f8ecv5VxvPv0r63fl30/lXqf7Q+Vfp+aXzr6L+y/vvXPVbf6v/of9PSY0nqfMkDZ6ky3vZnH+R1J5JmjxJiydp4yRdz2XKkgpPUuVJajxJnSdp8CRdn0TG/pZ0rmeSJk/S5dV7rPNL0nk8vXEbJ+l6qk+WVHiSLq/eZ+vfkvpTSY0n6fLqfdb9S1J/JmnwJF1/9i5fyfKc9VmpvB5NkyUtnqSNk3Q9E2a29i3paRG4HvOSJVWepMaTdP3Zu8xfkp6VyuuRKVkS/S3Asb+n0H8pGd9TRDwFJemnvwVI+ulvAYJ+OgUl6qe/hU/66W/hk376W/ikv8v107+CS/rl/ZdOQYn65f0XT0EJ+vEUlKRf3n/pFJSoX95/8RSUpF/ef/EUlKRf3n/pFJSoX95/8RSUpF/ef/EUlKRf3n/pFJSoX95/8RSUpF/ef/EUlKRf3n/pFJSoX95/8RSUpF/ef/EUlKRf3n/pFJSoX95/8RSUpF/df9uBp6Ak/er++9Cv7r8P/er++9Cv7r8P/er++9Cv7r8P/er++9Cv7r8P/fL+i6eg/O0W+UO/egv7oV9NIXvoV1NAH/rp/TfpV1PIHvrp/TfVHzUF9KFfTSF76FdTQNtBp6BE/WoK2UM/Pf+G+lPVFNCHfnj/jfrl/beqKWQP/WoK2UM/Pf+m+qOmgLajqSlkD/3y/tvUFNCHfnn+vZ6Q89r609QU0Id+9V/BeOiX99+mpoA+9Mvzb5fPn7t8/tzl8+cu77/XM45erF+ef7t8/tzl8+cunz93ef8d8vnzkOffIZ8/D/n8+XpK1Yv1y/svnn+V9MvzL55/leqPfP5M519F/fL+i+dfJf3y/IvnX4X6Q+dfxedXPn/G86/S7798/oznXwX9eP5VqD90/lV6fun8q6hf3n/x/KukX55/8fyrVH/k82c6/yrql/dfPP8q6ZfnXzz/KtQfOv8qPb90/lXUL++/eP5V0i/Pv3j+Vao/8vkznX8V9cv7L55/lfTL8y+efxXqD51/FZ9f+fwZz79Kv//y+TOef/X3+guef/X39afQ+Vfh+S10/lXU7+6/5aD336TfnX8Lnn+V6o97/lzo/KuoX95/8fyrpN+dfwudf5XqD51/lZ5fOv8q6pf3Xzz/Kul3599C51/F+uOePxc6/yrql/dfPP8q6ZfnXzr/KtUfOv8qPr/u+XOR868Knn+V9MvzL51/leoPnX+Vnl86/yrql/dfPP8q6ZfnXzr/KtYf+fyZzr+K+uX9F8+/Svrl+ZfOv0r1h86/Ss8vnX8V9cv7L55/lfTL8y+dfxXrj3z+TOdfRf3y/ovnXyX98vxL51+l+kPnX8XnVz5/lvOvCp5/lfTL8y+df5XqD51/lZ5fOv8q6pf3Xzz/KumX5186/yrWH/n8mc6/ivrl/RfPv0r65fmXzr9K9YfOv0rPL51/FfXL+y+ef5X0y/MvnX8V6498/kznX0X98v6L518l/fL8S+dfpfpD51/F51c+f5bzrwqef5X0y/MvnX+V6g+df5WeXzr/Kuq/vP/OVb/1t/of+v+U1HmSBk/SyZN0eS+b8y+S2jNJiydp0yTV6yFOWVLhSao8SY0nqfMkDZ6kkyfp+iQy9rekcz2TtHiSLq/eY51fks7j2Y27HgGUJRWepMqTdHn1Plv/ltSfSuo8SZdX77PuX5L6M0knT9L1Z+/ylSzPWZ+VyuvRNFnSxkm6HiCTJV1/9m7tW9LTInA95iVLajxJnSfp+rN3mb8kPSuV1yNTsiT6W4Bjf0+h/1IyvqaIFU9BSfrpbwGCfjwFJemnv4VP+ulv4ZN++lv4pL/L9dO/gkv66V/BJf3y/kunoET98v6Lp6Ak/fL+i6egJP3y/kunoET98v6Lp6Ak/fL+i6egJP3y/kunoET98v6Lp6Ak/fL+i6egJP3y/kunoET98v6Lp6Ak/fL+i6egJP3y/kunoET98v6Lp6Ak/fL+i6egJP3y/kunoET98v6Lp6Ak/fL+i6egJP3y/kunoET98v6Lp6Ak/fL+i6egJP3y/kunoET99P7791vklU5BCVvYlU5Bifrp/ffvKQqVTkGJ+t0UsoqnoKT646aAVjoFJenHU1DC7z+dghL1uylkddPzb6g/1yNTXvz8uilkdcv773ZTyOp2U8jqpuffv68/7XBTQNvhppC1w91/2+GmgLYD3n+jfnr+TfXHTQFth/uvYLTD3X/b4aaAtuLOv62458+tuOfPrbjnz+16bNGLf//d8+dW3Pm3Fff8uRX3/LkV9/y5VXn/re75c6vy/Fvd8+d2PXjqxc+ve/7cqrz/4vlXSb88/+L5V6H+0PlX6fml86+ifnn/xfOvkn54/4365fNnOv8qPr/y+TOef5V+/+XzZzz/KumXz5/p/Kv0/NL5V1G/vP/i+VdJvzz/4vlXqf7I5890/lXSj+dfhd9/PP8q6ZfnXzz/KtQfOv8qPr/y+TOef5V+/+XzZzz/KumXz5/p/Kv0/NL5V1G/vP/i+VdJP7z/Rv3y+TOdfxWfX/n8Gc+/Sr//8vkznn+V9Mvnz3T+VXp+6fyrqF/ef/H8q6Rfnn/x/KtUf+TzZzr/KunH86/C7z+ef5X0y/MvnX+V6g+dfxWfX/n8Wc6/anj+VdIvz790/lWqP3T+VXp+6fyrqF/ef/H8q6Qf3n+jfvn8mc6/is+vfP4s5181PP/q7/V3Ov8q6nfPnzudfxWe307nX0X97v7b8fyrpN+dfzudfxXrj3v+3On8q6Rfzr/qeP5V0u/Ov53Ov0r1h86/is+ve/7c5fyrjudfJf3u/Nvp/KtUf+j8q/T80vlXUb+8/+L5V0k/vP9G/e75c6fzr+Lz654/dzn/quP5V0E/nX8V9cvnz3T+VXp+6fyrqF/ef/H8q6Rfnn/p/KtYf+TzZzr/KumX8686nn+V9MvzL51/leoPnX8Vn1/5/FnOv+p4/lXSL8+/dP5Vqj90/lV6fun8q6hf3n/x/KukH95/o375/JnOv4rPr3z+LOdfdTz/Kuin86+ifvn8mc6/Ss8vnX8V9V/ef+eq3/pb/Q/9f0oaPEknT9LkSbq8l835F0ntmaSNk3Q98SlLKjxJlSep8SR1nqTBk3TyJE2epOuTyNjfks71TNLGSbqeFzTW+SXpPJ7duOsRQFlS5UlqPEmXV++z9W9J/amkwZN0efU+6/4lqT+TNHmSrj97l69kec76tFRunKTraTNZUuFJuv7s3dq3pKdF4HrMS5bUeZIGT9L1Z+8yf0l6ViqvR6ZkSfS3AMf+nkL/pWR8TxHxFJS/1z/wFJSkn/4WIOmnv4VP+ulv4ZP+LtdPfwuf9NO/gkv66V/BJf3u/jvoFJSkH09BSfrl/RdPQUn65f2XTkGJ+uX9F09BSfrl/RdPQUn65f2XTkGJ+uX9F09BSfrl/RdPQUn65f2XTkGJ+uX9F09BSfrl/RdPQUn65f2XTkGJ+uX9F09BSfrl/RdPQUn65f2XTkGJ+uX9F09BSfrl/RdPQUn65f2XTkGJ+uX9F09BSfrl/RdPQUn65f2XTkGJ+uX9F09B+fst8kGnoIQt7EGnoET9bgrooFNQon43hWzgKSip/rgpoINOQYn63RTQQaegRP1uCtm4noLy2vpzuimg43RTyMYp77+nm0I2TjeFbEx6/g31Z7opoGO6KWRjyvvv9RybF+uX599Jz7+p/rgpoGO6/wrGmPL+u9wU0LHk+XfJ589LPn++nkT0Yv3y/rvk8+clz79LPn9e8vnzls+ft7z/bvn8ecvz7/UsqdfWny2fP2/5/HnL+y+ef5X0u/Pviedf/X39Oen8q/D8nnT+VdTv7r/nQe+/Sb87/554/lWqP+7580nnX0X98v6L518l/e78e+L5V6H+0PlX6fml86+ifnn/xfOvkn53/j3x/KtUf9zz55POv4r65f0Xz79K+uX5F8+/CvWHzr+Kz697/nzi+Vfp9989fz7x/KugH8+/CvWHzr9Kzy+dfxX1y/svnn+V9MvzL55/leqPfP5M519F/fL+i+dfJf3y/IvnX4X6Q+dfpeeXzr+K+uX9F8+/mkG/PP/i+Vep/sjnz3T+VdQv7794/lXSL8+/dP5Vqj90/lV8fuXzZzn/6sTzr5J+ef6l869S/aHzr9LzS+dfRf3y/ovnXyX98vxL51/F+iOfP9P5V1G/vP/i+VdJvzz/0vlXqf7Q+Vfp+aXzr6J+ef/F86+Sfnn+pfOvYv2Rz5/p/KuoX95/8fyrpF+ef+n8q1R/6Pyr+PzK589y/tWJ518l/fL8S+dfpfpD51+l55fOv4r65f0Xz79K+uX5l86/ivVHPn+m86+ifnf/nXj+VdLvzr+Tzr8K9WfS+Vfh+Z0HvP9G/e7+O/H8q6TfnX8nnX8V6497/jzp/KuoX95/8fyrpN+dfyedf5XqD51/FZ9f9/x5yvlXE8+/Svrl+ZfOv0r1h86/Ss8vnX8V9cv7L55/lfTL8y+dfxXrj3v+POn8q6hf3n/x/KukX55/6fyrVH/o/Kv0/NL5V1H/5f13rvqtv9X/0P+npJMnafIkLZ6ky3vZnH+R1J5Iuh4PlSUVnqTKk9R4kjpP0uBJOnmSJk/S4km6PomM/S3pXE8k/QBcKEq6vHqPdX5JOo9nN+56BFCW1HiSOk/S5dX7bP1bUn8q6eRJurx6n3X/ktSfSVo8SdefvctXsjwfU7gnkq5H02RJhSep8iRdf/Zu7VvS0yJwPeYlSxo8SSdP0vVn7zJ/SXpWKq9HpmRJ9LcAx/6eQv+lZHxPEfEUlKSf/hYg6ae/BUj66W/hk/4u109/C5/009/CJ/30r+CSfvpXcEm/vP/SKShRv7z/4ikoSb+8/+IpKEm/vP/SKShRv7z/4ikoSb+8/+IpKEm/vP/SKShRv7z/4ikoSb+8/+IpKEm/vP/SKShRv7v/LjwFJel399+Fp6Ak/e7+uw53/114CkrS7+6/C09BSfrd/XfRKShJP52CEvXL+y+egpL0y/svnoKS9Mv7L52CEvXL+y+egpL0y/svnoKS9Mv7L52CEvXT++/fb5EvOgUlbGEvOgUl6ndTQBedghL1uylkC09BCfWHTkFJzy+dghL1uymgi05Bifrh/Tfqp+ffVH/cFNDV3BSy1eT9t7kpZKu7KWSr0/NvqD/dTQFd3U0hW9ejaV78+++mgK4uz7+dnn9T/XFTQFd3/xWMNeT9d7gpoGvI8++Qz5+vhwu9+PmVz5+HvP8O+fx5yPPvkM+fT/n8+ZTPn095/z3l8+fr8VAv1i+fP5/y+fMpnz+f8v6L518F/Xj+VdIvnz/T+Vfp+aXzr6J+ef/F86+Sfnn+xfOvUv2Rz5/p/KukH8+/Cr//eP5V0i/Pv3j+Vag/dP5VfH7l82c8/yr9/svnz3j+VdIvnz/T+Vfp+aXzr6J+ef/F86+Sfnj/jfrl82c6/yo+v/L5M55/lX7/3fPnjedfJf3u+fOm86/C87vp/Kuo391/N55/lfS78+/G869S/XHPnzedf5X04/lX4fcfz79K+t35d+P5V6H+0PlX8fl1z583nn+Vfv/d8+eN518l/e7586bzr9LzS+dfRf3y/ovnXyX98P4b9bvnz5vOv4rPr3v+vOX8q43nXwX9dP5V1C+fP9P5V+n5pfOvon55/8Xzr5J+ef6l869i/ZHPn+n8q6Rfzr/aeP5V0i/Pv3T+Vao/dP5VfH7l82c5/2rj+VdJvzz/0vlXqf7Q+Vfp+aXzr6J+ef/F86+Sfnj/jfrl82c6/yo+v/L5s5x/tfH8q6Cfzr+K+uXzZzr/Kj2/dP5V1C/vv3j+VdIvz790/lWsP/L5M51/lfTL+Vcbz79K+uX5l86/SvWHzr+Kz698/iznX208/yrpl+dfOv8q1R86/yo9v3T+VdQv7794/lXSD++/Ub98/kznX8XnVz5/lvOvNp5/FfTT+VdRv3z+TOdfpeeXzr+K+uX9F8+/Svrl+ZfOv4r1Rz5/pvOv/l5/P9z8q4d+9fz5oV+dfx/61fPnh354/43Pr3r+/NB/ef+dq37rb/U/9P8pafIkLZ6kjZN0PUtqzr9Ias8kFZ6kypPUeJI6T9LgSTp5kiZP0uJJ2jhJP0AiGvtb0rmeSSo8SZdX77HOL0nn8fTGNZ6kzpM0eJIur95n69+S+lNJkyfp8up91v1LUn8maeMkXc+xmeUrWZ6zPiuV16NpsqTKk9R4kq4/e7f2LelpEbge85IlnTxJkyfp+rN3mb8kPS2VGycJT0E59vcU+i8l43uKiKegJP30twBJP/0tQNLf5frpb+GTfvpb+KSf/hY+6ad/BZf007+CC/rpFJSoX95/8RSUpF/ef/EUlKRf3n/pFJSoX95/8RSUpF/ef/EUlKRf3n/pFJSoX95/8RSUpF/ef/EUlKRf3n/pFJSoX95/8RSUpF/ef/EUlKRf3n/pFJSoX95/8RSUpF/ef/EUlKRf3n/pFJSoX95/8RSUpF/ef/EUlKRf3n/pFJSoX95/8RSUpF/ef/EUlKRf3n/pFJSoX95/8RSUsEVOp6CkLWw6BSXqV1NAH/rVFLKHfjWFrBc8BeXv60+hU1DC81voFJSoX00Bfein99+kX00he+in599Uf9QU0Id+NYXsoV/ef4ubQlaKm0JWCj3/hvpT1BTQh354/4365f23qCmgD/3u/FsKPf+m+uOmgJaq/isYD23y/lvdFNBS5fn3el7Qa+tPdc+fS3XPn0uV99/qnj+XKs+/TT5/bvL5c5PPn5u8/15PfHqxfnn+bfL5c5PPn5t8/tzk/RfPv0r65fkXz78K9YfOv0rPL51/FfXL+y+ef5X0y/Mvnn+V6o98/kznX0X98v6L518l/fL8i+dfhfpD51/F51c+f8bzr9Lvv3z+jOdfBf14/lWoP3T+VXp+6fyrqF/ef/H8q6Rfnn/x/KtUf+TzZzr/KuqX9188/yrpl+dfPP8q1B86/yo9v3T+VdQv7794/lXSL8+/eP5Vqj/y+TOdfxX1y/svnn+V9MvzL55/FeoPnX8Vn1/5/BnPv0q///L5M55/FfTj+Veh/tD5V+n5pfOvon55/8Xzr5J+ef6l869i/ZHPn+n8q6jf3X8rnn+V9Lvzb6Xzr0L9qXT+VXh+6wHvv1G/u/9WPP8q6Xfn30rnX8X6454/Vzr/KuqX9188/yrpd+ffSudfpfpD51/F59c9f65y/lXF86+Sfnn+pfOvUv2h86/S80vnX0X98v6L518l/fL8S+dfxfrjnj9XOv8q6pf3Xzz/KumX5186/yrVHzr/Kj2/dP5V1C/vv3j+VdIvz790/lWsP/L5M51/FfXL+y+ef5X0y/MvnX+V6g+dfxWfX/n8Wc6/qnj+VdIvz790/lWqP3T+VXp+6fyrqF/ef/H8q6Rfnn/p/KtYf+TzZzr/KuqX9188/yrpl+dfOv8q1R86/yo9v3T+VdQv7794/lXSL8+/dP5VrD/y+TOdfxX1y/svnn+V9MvzL51/leoPnX8Vn1/5/Pl6/tVc9Vt/q/+h/09Jiydp4yRdD57Kki7vZXP+RVJ7JqnyJDWepM6TNHiSTp6kyZO0eJI2TtL12KIs6fLqvY+vs+G5y3wmqfIkNZ6kzpM0eJJOnqTJk7R4kjZNUrseepMl4ap3O3DVux246t2OF1Tv2r5+SH0MRIOkttb8+k/vej6TNHiSzqsl7b6+Jf31X/+SNH9U0nomafEkbZykVyBTXi2pXSzpjz8c+Oe//mMH7f/8/RTx8Zb3awr9eGHanxnodgPDY+BpOSqn3cC0G1h2A5ttYB1fI4zHqPnJALrVw26g2A1UuIG2vg30Z8fxCu/E2QC8E69Wfhl4dhaq8E6cDcA78V8NjGdhq8I7cTYA78TZAL0TJwON3omjAXgn3vW7E+//37/+0wC8E2cD8E68y/hl4NlZ6BVojp81AO/EfzXQnwWaBu/E2QC8E2cD8E6cDbA78WNW/y3kWM8e4s7uxP/AALsT/wMD7E78DwywO/FjoP91mGultmcG2J34Hxhgd+L/MPD0MNfZnfgfGGB34n9ggN2J/4EBeCeOBga8E5f9/RK+lvHMALwTZwPwTlz28cvAs6nEoHfiaIDeif9ioD57TzzonTgaoHfiaIDeiaMBeCdu81tIW89OowPeiaOBE96JswF4J84G4J24H+e3kKeJ7IR34mwA3on/auDpcfqEd+JsAN6JswF4J84G4J04G7B34mnvxNPeiSe8E2cD9E5cfgmpz8brr0B4/KwBUSd+ehaaok783IC9E097J57wThwNLHgnzgbgnTgbsHfiBe/E2QC8E2cD8E6cDdA7cToLLXonjgZEnfjpWWiJOvFTA9veibe9E2/RdPq5AdF0+rkBeCfOBuydeMM7cTYA78TZgP098aZ34nAW6ge9E0cDok787CzUD/l74n7IO3E/5J24H/L3xP2Qvyfuh3w63Q95J+6H/D1xL/L3xL3I3xM/1MnPQnDG1j8wIOrET89CcMbWPzBg78RwxtY/MCB/T9zhjK1sAM7Y+gcG7J0Yztj6Bwbk74k7nLH1DwzQO3E6C8EZW//AgKgTPz0LwRlb/8CAvRPDGVv/wID8PXGHM7b+gQH7dBrO2MqdGM7Y+gcG5O+JO5yx9Q8M0DtxOgvRGVvRAJ2xFc9CdMZWNmDvxHTGVjYA78TZgP09MZ2xlQ3YOzGdsZUN2N8T0xlb2QC9E6ezEJ2xlQ3IyR6dztjKBuydmM7Yygbs74npjK1swD6dtjO2up2x1emMrWzA/p4Yz9hKZyE8YysakJM9uomx9dyAvRPTGVvRAJ2xlQ3Y3xPTGVvZgL0T0xlb2YD9PTGdsZUNyMkeHc/YigbkZI9uYmw9N2DvxHTGVjZgf09MZ2xlA/bpNJ2xFTsxnbGVDdjfE9MZW9EAnrGVzkJ4xlY0YCd7mBhbzw3YOzGdsZUN2N8T0xlb2YB9Ok1nbKVOPOiMrWxA/p540Blb2YC8E49D1ImfG5B34mFnbA07Y2vQGVvZgPw98bAztoadsTXojK1sQP6eeOAZW2GsMvCMrWhA/sXWMDG2nhuwd2I7Y2vYGVuDztjKBuTviYedsTXsjK1BZ2xlA/L3xAPP2EpnITxjKxqQf7E1TIyt5wbsndjO2Bp2xtagM7ayAft02s7YGnbG1qAztrIB+3tiPGMrnYXwjK1oQP7F1jAxtp4bsHdiO2Nr2Blbg87Yygbs02k7Y2vYGVuDztjKBuzvifGMrXQWwjO2ogH532IaJsbWcwP2TmxnbA07Y2vQGVvZgH06bWdsDTtja9AZW9mA/T0xnrGVzkJ4xlY0IP9bTMPE2HpqwM7YGnbG1rAztgadsZUNwDtxNmDvxHbG1qAztrIB+3tiPGMrnYXwjK1oQP63mIaJsfXcgL0T2xlbw87YGnTGVjZgn07bGVvDztgadMZWNmB/T4xnbKWzEJ6xFQ2IOvHTs5CJsfXcgL0T2xlbw87YGnTGVjJw0hlb2YC8E592xtZJZ2xlA/BOnA3IyR4nnrEVDcjJHqeJsfXcgL0T0xlb2YD8PfFJZ2xlA/Lp9ElnbMVOTGdsZQPy98QnnbGVDcjJHieesZUMmBhbT89CJsbWcwP2TkxnbGUD8E6cDcjfE590xlY2YO/EdMZWNiB/T3zSGVvZgJzsceIZW9GAnOxxmhhbzw3YOzGdsZUNyN8Tn3TGVjZgn07TGVuxE9MZW9mA/T0xnbGVDdA7cToL4Rlb0YCc7HGaGFvPDdg7MZ2xFQ3QGVvZgP09MZ2xlQ3YOzGdsZUN2N8T0xlb2YCc7HHiGVvRgJzscZoYW88N2DsxnbGVDdjfE9MZW9mAfTpNZ2zFTkxnbGUD9vfEdMZWNIBnbKWzEJ6xFQ3IyR6nibH13IC9E9MZW9mA/T0xnbGVDdin03TGVuzEdMZWNmB/T0xnbGUDcrLHiWdsRQNyssdpYmw9N2DvxHTGVjZgf09MZ2xlA/bpNJ2xFTsxnbGVDcA7cTZgf0+MZ2ylsxCesRUN2MkeJsbWMwPTztiadMZWNiB/TzzpjK1sAN6JswF5J550xlY2IH9PPOmMrWxATvaYeMZWNCAne0wTY+u5AXsnpjO2sgH5e+JJZ2xlA/Lp9KQztmInpjO2ogE6YysbkL8nnnjGVjoL4Rlb0YCoEz89C5kYW88N2DsxnbGVDcjfE086YysaoDO2sgF7J6YztrIB+XviSWdsZQNyssfEM7aiATnZY5oYW88N2DsxnbGVDdjfE9MZW9mAfTpNZ2zFTkxnbGUD9vfEdMZWNiAne0w8YysZMDG2np6FTIyt5wbsnZjO2MoG4J04G7C/J6YztrIBeyemM7ayAft7YjpjKxuQkz0mnrEVDcjJHtPE2HpuwN6J6YytbMD+npjO2MoG7NNpOmMrdmI6YysbsL8npjO2sgF6J05nITxjKxqQkz2mibH13IC9E9MZW9EAnbGVDdjfE9MZW9mAvRPTGVvZgP09MZ2xlQ3IyR4Tz9iKBuxkDxNj67kBeyemM7ayAft7YjpjKxuwT6fpjK3YiemMrWzA/p6YzthKBhaesRXOQgvP2IoG5GSPZWJsPTcg78SLztjKBuTviRedsZUNyKfTi87Yip2YztjKBuTviRedsZUNyMkeC8/YigbkZI9lYmw9N2DvxHTGVjYgf0+86IytbEA+nV50xlbsxHTGVjYA78TZgPw98cIzttJZCM/YigbkZI9lYmw9NWBnbC06YysbkL8nXnTGVjYA78TZgL0T0xlb2YD8PfGiM7ayATnZY+EZW9GAnOyxTIyt5wbsnZjO2MoG7O+J6YytbMA+naYztmInpjO2ogE6YysbsL8nxjO20lkIz9iKBkSd+OlZyMTYem7A3onpjK1swP6emM7YigbojK1swN6J6YytbMD+npjO2MoG5GSPhWdsRQNysscyMbaeG7B3YjpjKxuwvyemM7ayAft0ms7Yip2YztjKBuzviemMrWxATvZYeMZWMmBibD09C5kYW88N2DsxnbGVDcA7cTZgf09MZ2xlA/ZOTGdsZQP298R0xlY2YCd74Blb0YCd7GFibD03YO/EdMZWNmB/T0xnbGUD8un0vp6x1b4lPRTtZ5LKT0qq85mkypPUeJI6T9LlPepxYPyWNJ7+ep88SZMnafEkXV7r29zfkvazX+/ruUx91y9Jo7RnkgpPUv1JSf2ppHa9pP3rKtVnkjpP0uD9Lp2836XJu3GLJ2njfpfqgftdqgV342rlSWq836XO+126vHqv/p2N1/nsvHQ9tyZLurx6r1F+STqfSVo8SRt3467nv8SrdD3RJUuqvBvXeFep8yTxqvf1rJN8lXjV+3oeSb5xG3eVOq96X08BiTfueq5Hvkq86n09eyPfuMG7SrzqfT3xIt843tm786r39ZyJeOMG7+w9eNX7erpDvnG8s/fgVe/Bm5wM3tl78Kr34E1OTt7Z++RV75M3OTl5Z++TV71P3uTk5J29T171PnmTk5N39p686j15k5PJO3tPXvW+fi883zje2XvyqvfkTU4m7+w9edV78SYni3f2XrzqvXiTk+t3ifNV4lXvxZucLN7Ze/Gq9+JNTjbv7L151XvzJiebd/bevOq9eZOTzTt7b1713rzJyaadvcdx0Kr3QxJtcvKQdHn13vV78+sxdf8PSf/vv27j++vwdta//Ldn/TLQ7Aa63cCwG6Blhock2sTnIYnWdR6SaJlhHIU28XlI4nWdQssMD0m0ic9DUudJomWGh6ST3X7mN0KkzXn+R/t5omQf80vJbiP8630ef/7jPcuTxnb9rqrn0qz70vzu0uz70vzm0ly/Q8y5NGt8XZo9nl2acl+a310aeMb+yUsDT+8/eWn6W12aXr4vzbn/bRmGTxx+8tK812n4pZfmvU7DL70073Ua/q8uTSrD73UafuWlae91Gn7ppXmv0/BLLw38NLzq1yGurdGfGYCfWbOBbjcAP/+t8c0BXv8BtP82AD+lZQPws9T6LkJt/wdU7NsA/MSTDcDPJav0XwZ66Bnz+FI9awn/tqz+9T63rL+gY89n//YYX9i0cpzjL//2/17EDj/BOC4i/KzjuIj0U5HiItJPZoqL2O+L+O8vIv2EqriI9FOy4iLST+qKi0hPC4qLeCeWf38Rx51YXnARPzextF8X8dz/74W5U8gLfrvuFPKCi9jvi/jvL+KdQl5wEe8U8oKLeKeQF1zEO4W84CLeKeTfX8TzTiEvuIj3e5MXXMQ7sbzgIt6J5QUXsd9DhadDhfOtUsj3OuLs//kl3J9m3yotJLNvdapPZt/q9J3MvtUpOZidb3WaTWbvU+e/7/XzPnW+4CLep84XXMR+X8R/fxHvOfkLLuI9J3/BRbzn5C+4iPec/AUX8XPn5H8/zliflBbWW6WFZPatTvXJ7FudvpPZ/klm79Psv29/6z7NvuAi3qfZF1zE+zT7got4f/Xx7y/ivr/6eMFFvOfvL7iI9/z9BRfxc+fvf5/wr/9bLT+YFvYnfZ2xP+nrjP1JX2fsT/o6Y9+n2X/d/spxn2ZfcBHv0+wLLuJ9mn3BRfygeXY5+ieZ/aATajk+6IRajg86oZbjnuO+oMrfJ99/fxHLffJ9wUW8T74vuIife/L92xFkKZ90mr3+79z9pNlPOs3S/zbfa81+0mmW/vfzHO3vPs3++4tI/5t8jot4n2ZfcBE/6PvhQv/Lfa812z/J7CedUOl/L++1Zu/vcV9Q5e+T7wsu4n3y/fcXkf739xwX8WZBPx9B4v9O3ys7I/5v+r3UbP8ks590msX/XcGXmr1Psy9of/dp9gUX8T7N/vuLeP8txldcxHuO+4KLeH+P+4KLeNPdXnAR+30R//1F/Fwext8n/Pf6+4ohLbzX30FMZj9oG668198VDGbf6+//JbP3afbft7/7b/q94iLep9kXXMR+X8R/fxFvutsLLuJNd3vBRbzn7y+4iPf8/QUX8Z6///uLeP9Nv1dcxDuxvOAi3onlBRfxprs9n3q+19/pCxOUT/rbe+WT/vZe+aS/vVc+6W/vlff623s/1P7e62/6/dRFvE+zL7iI92n2BRfxnr+/4CL2+yL++4t4z99fcBHv+fsLLuI9f3/BRbzn7y+4iHdi+fcX8b3+ruBPXcR7m/P51POT/rZh+aS/bVg+6W8blvf624bJ7CfNs++/FfiK9nefZl9wEe/T7L+/iPffCnzFRbzn7y+4iPf8/QUX8Z6/v+Ai9vsi/vuLeG9zPk/4n/S3Dcsn/W3D8kl/27C81982/Huz9b3+BmEyCz/N7jq/zbb5zAD8JJkNwE9x2UC3G2CfXvpxfP23+9HKMwPsU8Y/MMA+OfSjl28D53pmgH0a+AcG2B2+H/P7Xz/CyBMD8L+f9g8MsDtxL2V8G+j1mQF2J/4HBuideH6X0TLSwa88/t9XMi39CP96n8ef/3jPZwWa/tfAfvLSwGcfP3lp4NOPn7w08FnJ/+alWV91eO+njRA+WfnJSwOfw/zgpaH/xbGfvDT0Gc/PlWH6Xwf7yUtzn4Z/e2n6fWl+d2k++DScyvAHn4bTpblPw7+9NPdp+LeX5oNPw6EM0/8K2U9emvs0/NtLc5+Gf3tpPvg0HMow/S+X/eSluU/Dv70092n4t5fmg0/DqQx/8Gk4XZr7NPy7S0P/K2Y/eWk++DQcyjD9L4795KW5T8O/vTT9vjS/uzTw7ywfr1e//nXtzz4Uhf9trn9gAP6dZR3z28B6+isE/84yG4B/Z1n390dyrbYnBuB/6+ofGIB/Z9la+zZwPjuywf921D8wwD499Mf/97eB/WxpBv43k/6BAXgn7sd3I+tPVzbgfyvoHxiAd+LevxtZn88aGfxv5PwDA/BO3L9P032UZ40M/rdh/oEB+sbD+n6IH78u/ydEpXN8TVrKOfe/HMvA/9rKj14a+OnhJy9Nvy/N7y4N/MTzv3lpwlgG/hdafvTSwE9pP3lp4Oe/n7w08JPlf3lpvt2WGXETqQzD/wLMj16a9zoNv/TSvNdp+KWX5r1Ow//VpQllGP6XVX700rzXafill+a9TsMvvTRvdRqe31igMp/iIOB/heS/tfuL9jjn+rdd561OuC+9NPC/GPKjl+atTrivvTRvdcL97y5N6Drwvxvyo5em35fmd5fmrU64r700b3XCnetLSVn/v7eM/4My/F4n3Jdemvc6Db/00rzXafiVlwb+F0f+Vy9NKMPwvyPyo5fmvU7DL70073Uafuml6e90aVY9vy9Nf1pa3+qEu/r6tjvnv+06b3XCfe2leasT7msvzVudcF97ad7qhPvfXZq/7zoN/tdCfvTSvNUJ97WX5q1OuK+9NG91wl3fsssu9d+V4Xb0+9L87tK812n4pZfmvU7DL70073Ua/q8uTSrD73Uafumlea/T8CsvDf2v8PzkpYGfhsf+Gjj1s/ZnBuBn1mwAfrI8v//b/TzrMwPdbgB+Sjvn15857vM4nhmAn6WyAfiJZ5bj20BbzwzAzyXZAPz0ML/DfJ/zfGIA/pdW/oEBeic+v8voXOlrn9rOr7ZX22rP7NL79ovtwrv8q+32z7ILP0H8d3Z7+4oj9fG/fGYXft54tV346eTVduFnmVfbhZ98XmwX/jc4/ku743tdqo7xL9cdGvxvcPzopXmr09prL81bnexee2n6516aMHeF/w2OH700b3W6fO2leauT6GsvzVudWl9bht/qhPvSSwP/Gxw/emnu0/BvL80Hn4ZDGYb/DY4fvTT9vjS/uzT3afi3l+aDT8OpDH/waThdmvs0/NtLc5+Gf3dp6H9F5QfLMP3vs/zkpblPw7+9NPdp+LeXpt9l+Hdl+INPw+nS3Kfh316a+zT820vzwafhVIY/+DQcLg39Lxn95KW5T8O/vTTw0/Aa3/soayW4zUPr8Uv2fmYXfsJ9td3+WXbhJ9FX273+dHn+srt2sPvHqtWf//qPrySeGZh2A8tuYMsN/MDfwnmxgWI3UO0Gmt1AtxsYdgP2TjztnXjaO/G0d+Jl78TL3omXvRMveyf+gb8l8WID9k687J142TvxsnfiZe/E296Jt70Tb3sn3vZO/AMc+xcbsHfibe/E296Jt70Tb3kn7oe8E/dD3on7Ie/E/ZB34n7IO3E/5J24/4ZdfX7/cZzHi9j19wb64936l6RHxv7+x+d69o/PryvT/6K+nl9yJkvO+vdyfr2qf/yf669y/vwZ+3//Z/yGGvzan1Eu+Bn1gp/RLvgZ/YKfMS74GecFP2Ne8DOeP+fzuzo8XsH0v/8Z5/4uteeuz37G/t//Gb8hh772Z5QLfka94Ge0C35Gv+BnjAt+xnnBz5gX/IxXPOdtfP+McTz5Gft//2e044KfUS74GfWCn9Eu+Bn9gp8xLvgZ5wU/Y17wM17Sz9v3z2gtxIh5fGeOWX79ga6vHNE2S08/YHoKTE+9Ws85v/XM/f/qaTA9HaZnwPS8osat8q3nL+s53zWurwt+xv7f/xnjuOBnlAt+Rr3gZ7QLfka/4GeMC37GecHPeMlz/jWbmMdx/Lu+NRZMz2bpOQ+YnnK1nr/vW2eF6WkwPR2m59/XuHm09q3nHH+vp9Xz689ftbqe6JkwPQumZ7P0zP/2+frzf9b/Z/+z8T/7n53/s//Z/J/9z9b/7H/29M7249cO8DH239/Z2sZXZaht/WoWpT17ETzn9/L+XxaAyxhP/m15/M58yX/83/3Xf7sez9aLyzq/zj1lrb+8ku7P/nE5voaupYz213/8fy/N8+WP/8VLU47vqvkQt/7j4vwpqfAkVZ6kxpPUeZIGT9LJkzR5khZP0sZJ2tdX7+83+6X8hZvxF0mFJ+ny6n3O7xv3OBKGA8DjhciXjlF+Nf/+7L+8+1fv32P8x7/902r7HKv9c6yO97H6F4TeU6vn51idn2N1vY/V7wnR3vuZ1f0pVsdxfI7V8kbN5vieNvxlxPkXr+9zXHo4/B5/HLU/M/s+B6Z/YLZ/ktk3OjT95ZGt45lX+Klpf/2x4LFH8jrL9+z0Mdf9P38/DG3r67/cWxiF1sdo9dvgmeambX/76+X8P/9qyDoO+Env028P/HSKuD1zfi/C/QfquP9vv6IYB/xE/eG3p8BTwItuz59mr88B4/vyzzaC2dm/RqHz/Mt7xFK+5Fe3/OaW393yh1v+6ZY/3fKXW/5Wy6+HW76761Z3163urlvdXbe6u251d93q7rrV3XWru+s2d9dt7q7b3F23ubtuc3fd5u66zd11m7vrNnfXbe6u291dt7u7bnd33e7uut3ddbu763Z31+3urtvdXbe7u+5wd93h7rrD3XWHu+sOd9cd7q473F13uLvucHfd4e66p7vrnu6ue7q77unuuqe7657urnu6u+7p7rqnu+ue7q473V13urvuZHfddX794/UXJtxf5LO7bpTP7rr7/GaB/Mdya3kmpJ/zFwDy+MsO4dNtjHfc3ZjsQ8h9N/+7u8k+k91387+7m+wj6n03/7u7yT6x33fzv7ub7ABz383/6m4udp677+Z/dzfZ8fa+m//d3WSn/ftu/nd3kz38uO/mf3c3+3033+hu3rOgd7qb9yzone7mPQt6p7t5z4Le6W7es6A3upv7ngW90928Z0HvdDfvWdA73c17FvROd7Pfd/ON7uY9C3qnu3nPgt7pbt6zoHe6m/cs6J3u5j0Lep+7eR73LOid7uY9C3qnu3nPgt7pbt6zoHe6m/2+m290N+9Z0DvdzXsW9E53854FvdPdvGdB73Q371nQG93Ncs+C3ulu3rOgd7qb9yzone7mPQt6p7vZ77v5RnfzngW90928Z0HvdDfvWdA73c17FvROd/OeBb3R3YT/Ne37bv53d/OeBb3T3bxnQe90N+9Z0DvdzX7fzTe6m/cs6J3u5j0Leqe7ec+C3ulu3rOgd7qb9yzoje5mu2dB73Q371nQO93Nexb0TnfzngW9093s9918o7t5z4Le6W7es6B3upv3LOid7uY9C3qnu3nPgt7obvZ7FvROd/OeBb3T3bxnQe90N+9Z0DvdzX7fzTe6m/cs6J3u5j0Leqe7ec+C3ulu3rOgd7qb9yzoje7muGdB73Q371nQO93Nexb0TnfzngW9093s9918o7t5z4Le6W7es6B3upv3LOid7uY9C3qnu3nPgt7obp73LOid7uY9C3qnu3nPgt7pbt6zoHe6m/2+m290N+9Z0DvdzXsW9E53854FvdPdvGdB73Q371nQG93Nec+C3ulu3rOgd7qb9yzone7mPQt6p7vZ77v5RnfzngW90928Z0HvdDfvWdA73c17FvROd/OeBb3R3Vz3LOid7uY9C3qnu3nPgt7pbt6zoHe6m/2+m290N+9Z0DvdzXsW9E53854FvdPdvGdB73Q371nQG93Nfc+C3ulu3rOgd7qb9yzone7mPQt6p7vZ77v5RnfzngW90928Z0HvdDfvWdA73c17FvROd/OeBb3P3ZzHPQt6p7t5z4Le6W7es6B3upv3LOid7ma/7+Yb3c17FvROd/OeBb3T3bxnQe90N+9Z0DvdzXsW9EZ3s9yzoHe6m/cs6J3u5j0Leqe7ec+C3ulu9vtuvtHdvGdB73Q371nQO93Nexb0TnfzngW90928Z0FvdDfrPQt6p7t5z4Le6W7es6B3upv3LOid7ma/7+Yb3c17FvROd/OeBb3T3bxnQe90N+9Z0DvdzXsW9EZ3s92zoHe6m/cs6J3u5j0Leqe7ec+C3ulu9vtuvtHdvGdB73Q371nQO93Nexb0TnfzngW90928Z0FvdDf7PQt6p7t5z4Le6W7es6B3upv3LOid7ma/7+Yb3c17FvROd/OeBb3T3bxnQe90N+9Z0DvdzXsW9EZ3c9yzoHe6m/cs6J3u5j0Leqe7ec+C3ulu9vtuvtHdvGdB73Q371nQO93Nexb0TnfzngW90928Z0FvdDfPexb0TnfzngW90928Z0HvdDfvWdA73c1+3803upv3LOid7uY9C3qnu3nPgt7pbt6zoHe6m/cs6I3u5rxnQe90N+9Z0DvdzXsW9E53854FvdPd7PfdfKO7ec+C3ulu3rOgd7qbl8+Cxl6/u5t/Srp6oFFbrb/+dQm/YKXW70ta/3Jna392A0Y/25//evR1/vrX57NfmXPMP/9xO89f16Y+09Ha8XVBWiv9r//4z+u47+v4iuu4jvs6vuQ6lvs6vuQ61vs6/pPr2NtXn2y9zyfXsd3X8SXXsd/X8R9dx++Taet/Uf30H9c9v/7Lda8d/nH7PsXWtuuTOzTuO/Szd6j37wP+I3P8/T/+5a//9b97ft3M876Z73Mz530z3+dm3sH1p2/m+vov13Hsf3cz7/T8Pjdz3xH+h2/m2N9l9qzH/3tE3fdwgH6H7rED/Q7dAw36Her3HfrZOzTr96hknv3v//Hj9dr3m7Z9PJmr7Huu8la3856siG5nPdr3pT7+8mr7f5QP7jHMp975e2bzqXf+HvCo7vy5vu/8Lv/mzq/jngZ96p2/p0wvv/PtKF8y2lHDfzm9ql7HPWX64Tv0uhdi67gHUm90M/t9M3/4Zr7shdg67snVG93Me271wzczzP3Xcc+X6HfongPR79A9r4HfoXLPVX74Dr3yddgq97DkrW7nPVkR3c4XvulY5R7DfOqd7/ed/9A7fw94VHf+de+4yj0N+tQ7f0+Z/hfu/P7efi71X5/B7ykT/Q7dU6afvUOvPATVeyD1RjfzHke90c28h1FvdDPv+dJP38zXhYja75v5PjfzngL9o5s5+pfqNkb4TO6laKZV72nND9+hF34iWe8BzBvdzHtW80Y38x7r/PTNfN33ru0e67zRzbzHOj98M9Nnfe2e1dDv0D2Aod+hft8h+B26RyU/fIde+rVru+cqb3U778mK6Ha+8uVSu8cwn3rn75nNh975fg94VHf+dS8s+z0N+tQ7f0+ZXn7nX4tm6veU6Yfv0AtfiPV+38z3uZn37Oqnb+brXoj1e3L1Rjfznlv98M1Mc/9+z5fod+ieA8Hv0LjnNfQ7dM9VfvgOvfR12LiHJW91O+/Jiuh2vvJNx+j3nf/QO3/PbD71zt8DHtWdf907rnFPgz71zt9Tpv+FO/9K8M+4p0zwO3TeU6afvUOvPASd90DqjW7mPY56o5t5D6Pe6Gb2+2b+8M18XYg475HRG93My6dAvXyL76tabmY7vlS3VvqTVDDv6/iS67ju6/iS67jv6/iK6ziP+zr+Iw5h++5fvc8n17Hc1/El17He1/HVXMzXohRnu+/Qz96hF640zH7fzPe5meO+me9zM+/g+tM383X7KfNOz290M+8I/8M3M32GP+/hAPwOrXvsQL9D90CDfofuUckP36GXbqese67yVrez37fTcztf+THIuscwn3rn75nNp975e8CjuvOv+8Bo3dOgT73z95Tp5Xf+tSjFfU+ZfvgOvfCF2L4HUm90M+/Z1U/fzNe9ENv35OqNbma/b+bP3sw099/3fIl+h+45EP0O3fMa+h265yo/fIde+jps38OSN7qd+7gnK6Lb+cI3Hfu4xzCfeufvmc2n3vl7wKO68y97x7WPft/5D73z95Tpf+HOvxDUt497ykS/Q/eU6Wfv0EsPQfdA6o1u5j2Oep+bWe5h1BvdzHu+9NM383Uhotwjoze6mfcU6P9j7292JddhcG3sXjLOQD/U38UcBEkGwQEO8gFJZsG596+6V5er1i5VsZdalsjXnGys3rCKfEyJL03b8l8F87yPxjPPuzZPFqG9EZr3iGTz1oABCqb1aoCCaW2d3cGc9rxr89bWAQqmtXU2B5N5rK8F69VIj5A1YKRHyLoq0iNkrZLNEZr6tGsgCydSOK2zoiicM28uBWvDXDXy1rO5auStwaMq8vNuWAbrBl008tG6TNMjP3Vrphaty7Q5QhNviEVrSAEF03pXu4M574ZYJAsmTjCtb7U5mFzfP1p/SXqErA8kPULWr5EeIeurbI7Q1NthZM0SqHBaZ0VROGfe6SBrw1w18tazuWrkySKvKfLz7nGRdYOuGnnrMp0Q+Zkb/5B1maRHyLpMeyM0tQiyhhROMJO1o4CCac0ooGBaf2l3MOddRCRrGQEFk1YHM/vj6Bzbt2D+cSnJc2n5dXOq7XCJXM+lIs+l5VdGJcajj1K6LjVxLmUnzyUvz6XVFUM5HjtvvnES4+Lh/+1vekruvzoGr8fXfPQUan3gxp4iee8O/fJPddft4D+nZrX+ehfy4VEOvWiRPJdWq4jPx/stvrjITCGKhx/pScGp98u3G/P3qZnSt2P/oObroJbroFYc1Hx3o5UuarsManHXQfU4qPVAba2HGq6DGq+DSkBi44561bkeK065dCM8Cmj33Et5wOIUTH8Bi1My/QUsUNH0tGRDV1+FV03t3i66tWE41uKPq++SI3M5HY9GFEXmYjrcLs4PwMxdecd28JHP/3iZXoVXeiLCU8rxwkiplTnjU7soVXh1evXwCK+oJ4XnD+z6mjodp7/ExMAWuvfayvMOAd7f3Sfd7ifd7mfd7hfd7lfd7jfV7jen232v2/2g233dqtt0q27TrbpNt+o23arbdKtu06y6+dZA1u2+ZtW9ua9ZdW/ua1bdm/uaVffmvmbVvbmvWXVv7mtW3Zv7mlX35r5u1fW6VdfrVl2vW3W9btVd/nniye7rVl2vW3W9btX1ulXX61bdoFt1g27VDbpVN+hW3eUfr5vsvm7VDbpVN+hW3aBbdYNu1Y26VTfqVt2oW3WjbtVd/uGNye7rVt2oW3WjbtWNulU36lZd0q26pFt1Sbfqkm7VXb4b8s/cr/l+cC2t575s1WXdl626LR+bTXx7e9L3HKF87CRCxT29pNZ9GwPv3Y1bNGUXIRbNn0VTdk1m0fxZNGWXqBbNH0Uzya7YLZo/i6bsCxiL5s+iKft6zqL5s2jKvry1aP4smmTRBIqm7OaHRfNn0bReEFI0rReEFE3rBSFF03pBQNHM1gtCiqb1gpCiab0gpGhaLwgpmmTRBIqm9YKQomm9IKRoWi8IKZrWC0KKpvWCgKJZrBeEFE3rBSFF03pBSNG0XhBSNMmiCRRN6wUhRdN6QUjRtF4QUjStF4QUTesFAUWzWi8IKZrWC0KKpvWCkKJpvSCkaJJFEyia1gtCiqb1gpCiab0gpGhaLwgpmtYLAoqm8O8lWzR/Fk3rBSFF03pBSNG0XhBSNMmiCRRN6wUhRdN6QUjRtF4QUjStF4QUTesF4UTzdo4smkDRtF4QUjStF4QUTesFIUWTLJpA0bReEFI0rReEFE3rBSFF03pBSNG0XhBQNL31gpCiab0gpGhaLwgpmtYLQoomWTSBomm9IKRoWi8IKZrWC0KKpvWCkKJpvSCgaAbrBSFF03pBSNG0XhBSNK0XhBRNsmgCRdN6QUjRtF4QUjStF4QUTesFIUXTekFA0YzWC0KKpvWCkKJpvSCkaFovCCmaZNEEiqb1gpCiab0gpGhaLwgpmtYLQoqm9YKAoknWC0KKpvWCkKJpvSCkaFovCCmaZNEEiqb1gpCiab0gpGhaLwgpmtYLQoqm9YKAopmsF4QUTesFIUXTekFI0bReEFI0yaIJFE3rBSFF03pBSNG0XhBSNK0XhBRN6wUBRTNbLwgpmtYLQoqm9YKQomm9IKRokkUTKJrWC0KKpvWCkKJpvSCkaFovCCma1gsCimaxXhBSNK0XhBRN6wUhRdN6QUjRJIsmUDStF4QUTesFIUXTekFI0bReEFI0rRcEFM1qvSCkaFovCCma1gtCiqb1gpCiSRZNoGhaLwgpmtYLQoqm9YKQomm9IKRoWi8IKJrNekFI0bReEFI0rReEFE3rBSFFkyyaQNG0XhBSNK0XhBRN6wUhRdN6QUjRtF4QTjSDs14QUjStF4QUTesFIUXTekFI0SSLJlA0rReEFE3rBSFF03pBSNG0XhBSNK0XBBRNb70gpGhaLwgpmtYLQoqm9YKQokkWTaBoWi8IKZrWC0KKpvWCkKJpvSCkaFovCCiawXpBSNG0XhBSNK0XhBRN6wUhRZMsmkDRtF4QUjStF4QUTesFIUXTekFI0bReEFA0o/WCkKJpvSCkaFovCCma1gtCiiZZNIGiab0gpGhaLwgpmtYLQoqm9YKQomm9IKBokvWCkKJpvSCkaFovCCma1gtCiiZZNIGiab0gpGhaLwgpmtYLQorm8l5QavVdNP+4tLqhcbvJGx5He2aC+RCOUxqeInsrQTpHJ8rxz9GJan4cnXtTJqfy5+CY8+PchJ4fMbr7CYnR0/PBX+cxOTuPU86jt/M45TwGO49TzmO08/g355HiXScjUemcR7LzOOU8JjuPf3Uej8o00pPX3YNDK/dfDq025uB4VLG3u0GhE6FsEdobIaKjwL9dc3w++MFHz7+b78EsFkycYFYLJk4w7cJ1dzDr/ZdvV7/tn4KZ7eoZKJh2Cb85mKkdaTYH91qiZmsOSI+QtR2kR4gsQsIjZK2SzREq4WiVlEyfD77dXjvutDXX6atk66tAhdM6K4rCGVw8TrV7urU9dH1gbZirRt56NheNfLEGj6rI53pEvvl/i7x1g64aeesyTY98dP7uRnSB+WX2VnWxLtPmCE28IVbIgokTTOtd7Q7mvBtixTpXQMG0vtXmYHJ9/2L9JekRsj6Q8AhV69dIj5D1VTZHaOrtsGrNEqhwWmdFUThn3umoZJG/aOStZ3PVyFuDR1Xk593jqtYNumrkrct0QuTb8fazD/9cg1uXSXiEmnWZ9kZoZhHUrCEFFExrRwEF05pRQMEkC+bmYM67iGjWMgIKpnWB/iqYie5ex5SYx+Tmbs3UrFuzOUITH5Fs1oABCqb1amCCGZ21dXYHc9rzrrdmvAUTJ5jW1tkcTOaxvuisVyM9QmQREh4h66pIj5C1SjZHaObTrtFZXwUqnNZZURTOiTeXbq1zi/w1I++tZ3PVyFuDR1Xkp92wvN0dtchfNPLWZZoe+albM0VPFqG9EZp4Q8xbQwoomNa72h3MeTfEvHWugIJpfavNweT6/t76S8IjFKwPJD1C1q+RHiHrq2yO0NTbYcGaJVDhJAunnnDOvNMRrA1z1chbz+aqkbcGj6rIz7vHFawbdNXIW5fphMhP3PgnRusySY+QdZn2RmhmERStIQUUTGtHAQWTLJg4wbT+0u5gzruIiNYyAgrm8i4Q+cN5qkFLMKO7e327AKDOVUG18zjlPDY7jzPOIzk7j1POo7fz+Ff7EMZDv4hK5zwGO49TzmO08zh7X8ypWynewmYR2huhia80ULJg4gQzWzBxgmkXrruDOe/9FLKrZ6Bg2iX85mByj+Enaw5Ij5C1HaRHyBoa0iNkrZLNEZr6dkoiCydSOK2zoiicMx8GSdaGuWrkrWdz1chbg0dV5Oc9YJSsG3TRyGfrMk2P/NytFLN1mTZHaOINsWwNKaBgWu9qdzDn3RDLZMHECab1rTYHk+v7Z+svSY+Q9YGkR8j6NdIjZH2VzRGaejusWLMEKpzWWVEUzpl3Ooq1Ya4aeevZXDXyZJHXFPl597iKdYOuGnnrMp0Q+Zkb9RXrMkmPkHWZ9kZoahFkDSmcYFZrRwEF05pRQMG0/tLuYM67iKjWMgIKJlkwZ++LOXdrpmrdms0RmviIZLUGDFAwrVcDFExr6+wO5rznXau1dXCC2aytszmY3GN9zXo10iNkDRjpEbKuivQIkUVob4SmPu3arK8CFU7rrCgK58ybS83aMFeNvPVsrhp5a/Coivy0G5bkrBt01chbl2l65KduzXQLhUVob4Tm3RAjZw0poGCSBXNzMKfdELuFyoKJE0zrW20OJtP3J2f9JekRsj6Q9AhZv0Z4hLz1VTZHaObtMPLWLIEKp3VWFIVz4p0O8taGuWrkySJ/0chbg0dV5Ofd4/LWDbpq5K3LdELkJ278cztdFiHhEbIu094IzSyCgjWkgIJp7SigYFozCiiY1l/aHcx5FxGBLJg4wVzeBcr+ODrH9i2Yf1zK8lxaft2cajtcItdzqcpzafmVUYnx6KOUnkvRyXPJy3MpyHNpdcVQjsfOm2+cxLh4+H/7m56S+6+OwevxNR89hVofuLGnSN67Q7/8U911O/jPqVmtv96FfHiUQy9aSZ5Lq1XE5+P9Fl9cZKYQxcOP9KTg1PvlRvfZ01L6duwf1HId1Hod1IaDmu9utNJDJXcdVH8d1ICDWg/U1nqo8TqodB3UBCQ27qhXneux4pRLN8KjgHbPvZQHLE7B9BewOCXTX8ACFU1PSzb09DUJr5ravV2UWuJYiz+uvkuOzOV0PBpRFJmL6XC7OD8AM3flHdvBRz7/42V6El7piQhPKccLI6VW5oxP7aIk4dXp1cMjvKKeFJ4/sLQcNh2nv8TEwBa699rK8w4B3t/dT7rdz7rdL7rdr7rdb6rdz063+163+0G3+1G3+7pVN+tW3axbdbNu1c26VTfrVt2iW3WLbtUtulW36Fbdolt1i27VLbpVt+hW3aJbdYtu1a26VbfqVt2qW3WrbtVd/gXmye7rVt2qW3WrbtWtulW36lbdplt1m27VbbpVt+lW3eUf85vsvm7VbbpVt+lW3aZbdZtq1U1Oteomp1p1k1OtusmpVt3kVKtucqpVNznVqpucatVNTrXqJqdbdb1u1fW6VdfrVl2vW3WXbyQ92X3Zqnu7IvlzcC2t575s1WXdl626LR+bTXx7e9L3HKF87CRCxT29pNZ9GwPw3Y3kZRchFs2fRVN2TWbR/FE0g+wS1aL5s2jKrtgtmj+LpuwLGIvmz6Ip+3rOovmzaJJFEyiasq/2LZo/i6bs5odF82fRtF4QUjStF4QUTesFAUUzWi8IKZrWC0KKpvWCkKJpvSCkaJJFEyia1gtCiqb1gpCiab0gpGhaLwgpmtYLAoomWS8IKZrWC0KKpvWCkKJpvSCkaJJFEyia1gtCiqb1gpCiab0gpGhaLwgpmtYLAopmsl4QUjStF4QUTesFIUXTekFI0SSLJlA0rReEFE3rBSFF03pBSNG0XhBSNK0XBBRN4R8Itmj+LJrWC0KKpvWCkKJpvSCkaJJFEyia1gtCiqb1gpCiab0gpGhaLwgpmtYLAopmsV4QUjStF4QUTesFIUXTekFI0SSLJlA0rReEFE3rBSFF03pBSNG0XhBSNK0XBBTNar0gpGhaLwgpmtYLQoqm9YKQokkWTaBoWi8IKZrWC0KKpvWCkKJpvSCkaFovCCiazXpBSNG0XhBSNK0XhBRN6wUhRZMsmkDRtF4QUjStF4QUTesFIUXTekFI0bReEE40s7NeEFI0rReEFE3rBSFF03pBSNEkiyZQNK0XhBRN6wUhRdN6QUjRtF4QUjStFwQUTW+9IKRoWi8IKZrWC0KKpvWCkKJJFk2gaFovCCma1gtCiqb1gpCiab0gpGhaLwgomsF6QUjRtF4QUjStF4QUTesFIUWTLJpA0bReEFI0rReEFE3rBSFF03pBSNG0XhBQNKP1gpCiab0gpGhaLwgpmtYLQoomWTSBomm9IKRoWi8IKZrWC0KKpvWCkKJpvSCgaJL1gpCiab0gpGhaLwgpmtYLQoomWTSBomm9IKRoWi8IKZrWC0KKpvWCkKJpvSCgaCbrBSFF03pBSNG0XhBSNK0XhBRNsmgCRdN6QUjRtF4QUjStF4QUTesFIUXTekFA0czWC0KKpvWCkKJpvSCkaFovCCmaZNEEiqb1gpCiab0gpGhaLwgpmtYLQoqm9YKAolmsF4QUTesFIUXTekFI0bReEFI0yaIJFE3rBSFF03pBSNG0XhBSNK0XhBRN6wUBRbNaLwgpmtYLQoqm9YKQomm9IKRokkUTKJrWC0KKpvWCkKJpvSCkaFovCCma1gsCimazXhBSNK0XhBRN6wUhRdN6QUjRJIsmUDStF4QUTesFIUXTekFI0bReEFI0rReEE83irBeEFE3rBSFF03pBSNG0XhBSNMmiCRRN6wUhRdN6QUjRtF4QUjStF4QUTesFAUXTWy8IKZrWC0KKpvWCkKJpvSCkaJJFEyia1gtCiqb1gpCiab0gpGhaLwgpmst7QanVd9H8cimsbmiEGMLjaM9MMB/CcUrDU2QD9QKQKMc/Ryeq+XF07k2ZnMqfg2POj3MTen7E6O4nJEZPzwf/OY/ezuOU8xjsPE45j9HO45TzSHYe/+Y8UrzrZCQqnfOY7DxOOY/ZzuNfncejMo305HX34NDK/ZdDq405OB5VbIgtdCJULEJ7I0R0FPi3a47PBz/46Pl38z2Y1YKJE8xmwYQJZrQL193BrPdfDsm1fwumXT0DBdMu4TcHM7UjzebgXkvUaM0B6REii5DwCFlDQ3qErFWyOUK3rt/94JLp88G322vHnbbmOn2VaH0VqHBaZ0VROIOLx6l2T7e2h64PrA1z0ciT9WyuGnlr8KiKfK5H5Jv/t8hbN+iqkbcu0/TIR+fvbkQXmF9mb1UTWYT2RmjiDTGyhhRQMK13tTuY826IkXWugIJpfavNweT6/mT9JeERStYHkh4h69dIj5D1VTZHaOrtsGTNEqhwkoVTTzhn3ulI1oa5auStZ3PVyFuDR1Xk593jStYNumrkrct0QuTb8fazD/9ag2frMkmPkHWZ9kZoZhGUrSEFFExrRwEFkyyYOMG0/tLuYM67iMjWMgIKpnWB/iqYie5ex5SYx+Tmbs2UrVuzOUITH5HM1oDBCWaxXg1QMK2tszuY8553LdbWAQqmtXU2B5N7rK+QRUh4hKwBIz1C1lWRHiFrlWyO0NSnXYv1VaDCaZ0VReGceXOpWhvmqpG3ns1VI28NHlWRn3fDslo36KqRJ4v87MjP3ZqpWpdpc4Qm3hCr1pACCqb1rnYHc94NsWqdK6BgWt9qczC5vn+z/pL0CFkfSHqErF8jPULWV9kcoam3wxpZOJHCaZ0VReGceaejWRvmqpG3ns1VI28NHlWRn3ePq1k36JqRr866TCdEfuLGP9VZl0l6hKzLtDdCE4ug6qwhBRRMsmDiBNOaUUDBtP7S7mBOvIiwlhFQMJd3gcgfzlMNWoIZ3d3rGD11rgqanccZ59E7O49TzqO38zjlPAY7j3+1D2E89IuodM5jtPM45TySncfZ+2JO3Uqx+mQR2huhea80VJ8tmDjBLBZMnGDahevuYE57P6V6u3rGCWawS/jNwWQew6/BmgPSI2RtB+kRsoaG9AiRRWhvhGa+nVKD9VWgwmmdFUXhnPkwSLA2zFUjbz2bq0beGjyqIj/vAaNo3aCrRt66TNMjP3UrxRqty7Q5QhNviEVrSAEFkyyYm4M574ZYtM4VUDCtb7U5mFzfP1p/SXqErA8kPULWrxEeIbK+yuYITb0dRtYsgQqndVYUhXPmnQ6yNsxVI08W+YtG3ho8qiI/7x4XWTfoqpG3LtMJkZ+5UR9Zl0l6hKzLtDdCM4ugZA0poGBaOwoomNaMAgqm9Zd2B3PeRUQiCyZOMK0L9FfBPO+j8dzzrsm6NZsjNPERyWQNGKBgWq8GKJjW1tkdzHnPu2Zr6wAF09o6m4PJPdaXrVcjPULWgJEeIbIICY+QtUo2R2jq067Z+ipQ4bTOiqJwzry5lK0Nc9XIW8/mopEv1uBRFfl5NyyLdYOuGnnrMk2P/NytmYp1mTZHaOINsUIWTJxgWu9qdzDn3RAr1rkCCqb1rTYHk+v7F+svSY+Q9YGER6hav0Z6hKyvsjlCU2+HVWuWQIXTOiuKwjnzTkcli/xFI289m6tG3ho8qiI/7x5XtW7QVSNvXaYTIj9z459qXSbhEWrWZdoboZlFULOGFFAwrR0FFExrRgEFkyyYm4M57yKiWcsIKJjLu0DZH0fn2L4F849LRZ5Ly6+bU22HS+R6LjVpLjW3/MqoxHj0UUrXJS/PpSDPpSjPJVrsUjkeO2++cRLj4uH/7W96Su6/Ogavx9d89BRqfeDGniJ57w798k911+3gP6dmtf56F/LhUQ69aGV5Lq1WEZ+P91t8cZGZQhQPP9KTglPvlxvdZ09L6duxf1DrdVDbZVC9w0HNdzda6aL666CG66BGHNR6oLbWQ6XroKbroGYgsXFHvepcjxWnXLoRHgW0e+6lPGBxCqa/gMUpmXjYAFQ0PS3Z0NPXILxqavd2UWqJYy3+uPouOTKX0/FoRFFkLqbD7eL8AMzclXdsBx/5/I+X6UF4pSciPKUcL4yUWpkzPrWLEoRXp1cPD10iPH9g19fU6Tj9JSYGttC911aedwjw/u5+1u1+0e1+1e1+U+1+dLrd97rdD7rdj7rdJ93u61bdqFt1o27VjbpVN+pWXdKtuqRbdUm36pJu1SXdqku6VZd0qy7pVl3SrbqkW3WTbtVNulU36VbdpFt1l3+PerL7ulU36VbdpFt1k27VTbpVN+tW3axbdbNu1c26VXf59wonu69bdbNu1c26VTfrVt2sW3WLbtUtulW36Fbdolt1l3+UZbL7ulW36Fbdolt1i27VLbpVt+pW3apbdatu1a26VXf5HtyT3detulW26tZ8P7iW1nNftuqy7stW3Vsn5H7wt7cnfc8RysdOIlTc00tq3bcxEN/dqLKLEIvmj6LZZNdkFs2fRVN2iWrR/Fk0ZVfsFs2fRVP2BYxF82fRJIsmUDRlX95aNH8WTdlX+xbNn0VTdvPDovmzaFovCCma1guCiWZxznpBSNG0XhBSNK0XhBRN6wUhRZMsmkDRtF4QUjStF4QUTesFIUXTekFI0bReEFA0vfWCkKJpvSCkaFovCCma1gtCiiZZNIGiab0gpGhaLwgpmtYLQoqm9YKQomm9IKBoBusFIUXTekFI0bReEFI0rReEFE2yaAJF03pBSNG0XhBSNK0XhBRN6wUhRdN6QUDRFP5FXIvmz6JpvSCkaFovCCma1gtCiiZZNIGiab0gpGhaLwgpmtYLQoqm9YKQomm9IKBokvWCkKJpvSCkaFovCCma1gtCiiZZNIGiab0gpGhaLwgpmtYLQoqm9YKQomm9IKBoJusFIUXTekFI0bReEFI0rReEFE2yaAJF03pBSNG0XhBSNK0XhBRN6wUhRdN6QUDRzNYLQoqm9YKQomm9IKRoWi8IKZpk0QSKpvWCkKJpvSCkaFovCCma1gtCiqb1goCiWawXhBRN6wUhRdN6QUjRtF4QUjTJogkUTesFIUXTekFI0bReEFI0rReEFE3rBQFFs1ovCCma1gtCiqb1gpCiab0gpGiSRRMomtYLQoqm9YKQomm9IKRoWi8IKZrWCwKKZrNeEFI0rReEFE3rBSFF03pBSNEkiyZQNK0XhBRN6wUhRdN6QUjRtF4QUjStF4QTzds5smgCRdN6QUjRtF4QUjStF4QUTbJoAkXTekFI0bReEFI0rReEFE3rBSFF03pBQNH01gtCiqb1gpCiab0gpGhaLwgpmmTRBIqm9YKQomm9IKRoWi8IKZrWC0KKpvWCgKIZrBeEFE3rBSFF03pBSNG0XhBSNMmiCRRN6wUhRdN6QUjRtF4QUjStF4QUTesFAUUzWi8IKZrWC0KKpvWCkKJpvSCkaJJFEyia1gtCiqb1gpCiab0gpGhaLwgpmtYLAoomWS8IKZrWC0KKpvWCkKJpvSCkaJJFEyia1gtCiqb1gpCiab0gpGhaLwgpmtYLAopmsl4QUjStF4QUTesFIUXTekFI0SSLJlA0rReEFE3rBSFF03pBSNG0XhBSNK0XBBTNbL0gpGhaLwgpmtYLQoqm9YKQokkWTaBoWi8IKZrWC0KKpvWCkKJpvSCkaFovCCiaxXpBSNG0XhBSNK0XhBRN6wUhRZMsmkDRtF4QUjStF4QUTesFIUXTekFI0bReEFA0q/WCkKJpvSCkaFovCCma1gtCiiZZNIGiab0gpGhaLwgpmtYLQoqm9YKQomm9IKBotuW9oNTqu2j+cWl1QyPEEB5He2aC+RCOUxqeIhuoF4BEOf45OlHNj6Nzb8rkVP4cHHN+nJvQ8yNGdz8hMXp6PvjPeQx2Hqecx2jnccp5JDuPU85jsvP4N+eR4l0nI1HpnMds53HKeSx2Hv/qPB6VaaQnr7sHh1buvxxabczB8ahiQ2yhE6FqEdobIaKjwL9dc3w++MFHz7+b78FsFkyUYAbnLJg4wbQL193BrPdfDsm1fwumXT0DBdMu4TcHM7UjzebgXkrU4MgiJDxC1naQHiFraEiPkLVKNkeohKNVUjJ9Pvh2e+2409Zc6ITT+ipQ4bTOiqJw3or641S7p1vbI9cH3towV4289WyuGnlr8KiKfK5H5Jv/t8hbN+iqkSeL/OzIR+fvbkQXmF/mblUHb12mzRGaeEPMW0MKKJjWu9odzHk3xLx1roCCaX2rzcHk+v7B+kvSI2R9IOkRsn6N9AhZX2VzhKbeDgtk4UQKp3VWFIVz5p2OYG2Yq0beejZXjbw1eFRFft49rmDdoItGPlqX6YTIt+PtZx/+tQaP1mWSHiHrMu2N0MwiKFpDCiiYZMHECaY1o4CCaf2l3cGceBFhLSOgYFoX6K+CmejudUyJeUxu6tZMt/9pEdoboYmPSJI1YICCab0aoGBaW2d3MOc970rW1gEKJlkw9waTe6yPrFcjPULWgJEeIeuqSI+QtUo2R2jq065kfRWkcCbrrCgK58ybS8naMFeNvPVsrhp5a/Coivy8G5aJLPIXjbx1maZHfu7WTMm6TJsjNPGGWLKGFFAwrXe1O5jzbogl61zhBDNb32pzMLm+f7b+kvQIWR9IeoSsXyM9QmQR2huhqbfDsjVLoMJpnRVF4Zx5pyNbG+aqkbeezVUjbw0eVZGfd4+rWDfoqpG3LtMJkZ+58U+xLpP0CFmXaW+EZhZBhSyYOMG0dhRQMK0ZBRRM6y/tDubEiwhrGQEFc3kXiPzhPNWgJZjR3b2O0dPrVUF1dh6nnEdv53HKeQx2Hqecx2jn8a/2IYyHfhGVznkkO49TzmOy8zh7X8y5WynWbBHaG6GJrzTUYsHECWa1YOIE0y5cdwdz3vspza6egYJpl/Cbg8k9ht+sOSA9QtZ2kB4hsggJj5C1SjZHaOrbKc36KlDhtM6KonDOfBikWRvmqpG3ns01Ix+dNXhURX7aA0bRWTfoqpG3LtP0yE/dSjE66zJtjtC8G2LRkQUTJ5jWu9odzGk3xKKzzhVQMK1vtTmYTN8/OusvSY+Q9YGER8hbv0Z6hKyvsjlCM2+HRW/NEqhwWmdFUThn3unwZJG/aOStZ3PVyFuDR1Xk593j8tYNumrkrct0QuQnbtQXvXWZhEcoWJdpb4RmFkHBGlJAwbR2FFAwrRkFFEyyYG4O5ryLiGAtI6BgWhfor4J53kfjueddg3VrNkdo4iOSwRowQMG0Xg1OMKO1dXYHc97zrtHaOkDBtLbO5mByj/VF69VIjxBZhIRHyLoq0iNkrZLNEZr6tGu0vgpUOK2zoiicM28uRWvDXDTyZD2bq0beGjyqIj/vhiVZN+iqkbcu0/TIz92aicgitDdCE2+IkTWkgIJpvavdwZx3Q4yscwUUTOtbbQ4m1/cn6y8Jj1CyPpD0CFm/RnqErK+yOUJTb4cla5ZAhZMsnHrCOfNOR7I2zFUjbz2bq0beGjyqIj/vHleybtBVI29dphMiP3Pjn2xdJukRsi7T3gjNLIKyNaSAgmntKKBgkgUTJ5jWX9odzHkXEdlaRkDBXN4Fyv44Osf2LZh/XKryXFp+3ZxqO1wi13GpOHkuLb8yKjEefZTSdSnIcynKc4nkufSmYij3Z+LIt/jZJe+Svx99+zs+krv3pZuw2yO7PztFXZlxD4bb3/QkHb+6Bq/Hx+PXPfnH0bGnSt67Q8P8U+11O/jP6cl2ej6dnmKn59PpqXZ6Pp2eZqfnw+mpzk7Pp9Pj7fR8Oj1B/ukp7nF6KnGnp+bjhkGt7l9PT7TT8+n00IzT0x4A2advp+ePmRnVZz6u/29/F98zM6OKy/VhpoTCBNu39HR/K7X6OP7XA7uvlfqt+XLcq/71sti34/9gFAyMugGjuOP41nz47tbtX/+P/8///F//63/+v/5v/+v/+H/+3/9///P/+H//f3+Ndr/+4/vfU6zJ33+xpqertta6/tZ85Pbb3/X58NtZ8f0v9022kRfYKAts1Ak2mntIc3P0YqOdb6P/7aHJNvwCG2GBjbjABi2wkRbYyAtslAU2FqzzsGCdxwXrPC5Y53HBOo8L1nlcsM7jgnUeF6zzuGCdxwXrPE5Z5/Rkg15skFtgwy+wERbYiAts0AIbaYGNvMBGWWCjLrCxYJ2nBes8LVjnacE6TwvWeVqwztOCdZ4WrPO0YJ2nBes8LVjneco6r0826qsNv8BGWGAjLrBBC2ykBTbyAhtlgY26wEY730ZZsM7LgnVeFqzzsmCdlwXrvCxY52XBOi8L1nlZsM7LgnVeF6zzOmGde+fvD4De/n7a3uduIyywERfYoAU20gIbeYGNssBGXWCjnW+juQU2FqzztmCdtwXrvC1Y523BOm8L1nlbsM7bgnXezl/nwbkFNvwCG2GBjSnrPLuHjexfbNACG2mBjbzARllgoy6w0c634d0CG36BjbDAxoJ17hesc79gnfsF69wvWOd+wTr3C9Z5WLDOw4J1Hhas87BgnYcpc7c+HjR3Lf3XxoxnWG5N4uPZ3tvf8cVGWWCjLrDRzrcx4xkW1oZfYCMssBEX2KAFNtICGwvWOS1Y57RgndOCdZ4WrPO0YJ2nBes8LVjnacE6TwvWeVqwzmc8w3K7kfmofUp8qX1mPMPC2mjn25jxDAtrwy+wERbYiAts0AIbaYGNvMDGgnWeF6zzvGCdlwXrvCxY52XBOi8L1nlZsM7LgnVeFqzzsmCdlynr/NgO7tff7cVGO99GdQts+AU2wgIbcYENWmAjLbCRF9goC2wsWOd1wTpvC9Z5W7DO24J13has87ZgnbcF67wtWOdtwTpvC9b5lGdYqju2T7n9Hf5jI055hoWz4RfYCAtsxAU2aIGNtMBGXmCjLLBRF9hYsM79gnXuF6xzv2Cd+wXr3C9Y537BOvcL1rlfsM79gnXuF6zzKc9+1MfG+r7G+GJjwrwK/thh//Z3cS828gIbZYGNusBGO9/GjD2EWBt+gY2wwEZcYIMW2PjpOv89KI8MKiOD6sigNjDoxw8l/R7kRwaFkUFxZBCNDBqZETQyI2hkRtDIjKCRGZFGZkQamRFpZEakkRmRRmZEGpkRaWRGpJEZkUZmRBqZEXlkRuSRGZFHZkQemRF5ZEbkkRmRR2ZEHpkReWRG5JEZUUZmRBmZEWVkRpSRGVFGZkQZmRFlZEaUkRlRRmZEGZkRdWRG1JEZUUdmRB2ZEXVkRtSRGVFHZkQdmRF1ZEa8uyvX7tfSNbv/biUd391m+zzIjwwKI4PiyCAaGZRGBuWRQWVkUB0ZNDAjyLmRQX5kUBgZFEcG0cigNDIojwwqI4PqyKCRGeFHZoQfmRF+ZEb4kRnhR2aEH5kRfmRG+JEZ4UdmhB+ZEWFkRoSRGRFGZkQYmRFhZEaEkRkRRmbEm15xLu0YVN3LoDoyqA0MetOeZQb5kUFhZFAcGUQjg9LIoDwyaGRGxJEZEUdmBI3MCBqZETQyI2hkRrzpWZZyf4ymBfr25O1r05tKOr51Wlp+sZBOt5BPt1BOt1BPt9DOtvCmg/sTC7ebMMe3vMvT9/J86X0fLbhyfJiKcvx29G+HvDSHgjSHojSHSJpDSZpDWZpDRZpDVZpDTZhDWVqmztIydZaWqbO0TJ2lZeosLVNnaZk6n5upf5uo55top5soE/JjifUwQeXVhD/fRDjfRJxrItGrCTrfRDrfxIRcUN1hovpOLMr5JurpJuqEdVFjPkx00mAN55uY0PTIx/e8b9VIfTWRzzdRzjdRzzfxU734Nai5kUF+ZFB3Nt6OPAbFkP/3aF+m84zq7e7Xn4Nvfz65Q1/uRFnukCx3ZuTYUo7U0dx/p2ty/1570OMp5NsttPpqwp9vIpxvIp5vgs43kc43kc83Uc43Uc83MaFF7iN9MuHd+Sb8+SbC+SYmrO7gDxMhxlcTdL6JdL6JfL6Jcr6Jer6JdrqJMGF1h+NgCq1jwp9vIpxvIp5vYsbqLv5hgl5NpPNN5PNNlPNN1PNNtNNNRHe+CT/VRHT+1UQ430Q838SE1X1r0N9N3NpOrybS+Sby+SbK+SYmrG6K6WEi/O/P9zl8CI+3bJ82Brz702T5Q06YP16YP0GYP1GYPyTMnyTMnyzMnyLMH2H5mYTl5yQsPydh+TkJy89JWH5OwvJzEpafk7D8nITl5yQsP+fV+Scdd8RSfbwEHMIfd1Yvr+zutwCzy6/uJFnuZFnuFFnunLu0fptop5so7nwTE9b87c7T3cRNo/8tB014dm2uP1GYPyTMnyTMnyzMnyLMnyrMnybLn+qE+SMsP1dh+bkKy89VWH6uwvLzjKdXb8Xm4U+npDn/6dV0/tOrqbbTTTR3vgl/volwvol4vgk630Q630Q+38T5q7udv7rb6as7O3e+CX++iXC+iXi+CTrfRDrfRD7fRDnfRD3fxPmr25+/uv35q9ufv7r9+avbn7+6/fmr25+/uv35q9ufv7r9+as7nL+6w/mrO5y/usP5qzucv7rD+as7nL+6w/mrO5y/usP5qzuev7rj+as7nr+64/mrO56/uuP5qzuev7rj+as7nr+64/mrm85f3XT+6qbzVzedv7rp/NVN569uOn910/mrm85f3XT+6k7nr+50/upO56/udP7qTuev7nT+6k7nr+50/upO56/udP7qzuev7nz+6s7nr+58/urO56/ufP7qzuev7nz+6s7nr+58/uou56/ucv7qLuev7nL+6i7nr+5y/uou56/ucv7qLuev7nL+6q7nr+56/uqu56/uev7qruev7vN3Wszn77SYz39WLZ//rFo+/1m1fP6zavn8Z9Xy+c+q5fOfVcvnP6uWz39WLZ//rFo+/1m1fP6zavn8Z9XK+c+qlfOfVSvnP6tWzn9WrTg630Q630Q+30Q530Q938T5q/v8Z9XK+c+qlfOfVSvnP6tWzn9WrZz/rFo5/1m1cv6zauX8Z9XK+c+qlfOfVSvnP6tWzn9WrZz/rFo5/1m1cv6zauX8Z9XK+c+qlfOfVSvnP6tWzn9WrZz/rFo5/1m1cv6zauX8Z9XK+c+qlfOfVSvnP6tWzn9WrZz/rFo5/1m1cv6zauX8Z9XK+Q+SlfMfJCvnP0hWzn+QrCzftu/jNlVl+a592cc/B+cQX90JstyJstwhWe6s31OsHe7QqztZljtFljtVljtNlDvZyXLHy3JneVb+tD1eyVGWOyTLHVE7PRZZOz0WWTs9llxludNEuVOcLHe8LHdkZeUiKysXWVm5yMrKRVZWLrKy8puHMZMPfwbVlNpnd7y/HfPn6NvfmT4fHkO+dw1iqI/Pq5Yvf7wwf4Iwf+Jyf+Ix225/xSd/OjPT56fvd+b/+k6KfU+Kfc+KfS+Kfa+KfW96fW9Ose9ese9Bse+KdbUp1tWmWFebYl1tinW1KdbVpldXq9Orq9Xp1dXq9OpqdXp1tTq9ulqdXl2tTq+uVqdXV6vTq6vVKdZVr1hXvWJd9Yp11SvWVa9YV71iXfWKddUr1lWvWFe9Yl0NinU1KNbVoFhXg2JdDYp1NSjW1aBYV4NiXQ2KdTUo1tWoWFejYl2NinU1KtbVqFhXo2JdjYp1NSrW1ahYV6NiXSXFukqKdZWm5PfqHr638Hz4bxsz8nA7Xl27/R3Ki428wEZZYKMusNHOt5HcAht+gY2wwEZcYIMW2FiwztOCdZ4WrPM0ZZ03f7cRnGsvNtr5NrJbYMMvsBEW2IgLbNACG2mBjbzARllgY8E6zwvWeVmwzsuEdR5coYeN11q0hAU24gIbtMBGWmAjL7BRFtioC2y0823MeCeWtbFgndcF67wuWOcz3hsNPpXDhi/uxUZaYCMvsFEW2KgLbLTzbcx4T5C14RfYCAtsxAU2FqzztmCdtwVrsC1Yg+38NdicW2BjxjXnrXI/ehk+us+Hf9zDoTkS5k8S5k9e7s+sewltyvsfu3yvin1ven2f8v7HLt+9Yt+DYt+jYt9Jse9Jse+KddUr1lWvWFe9Yl0NinU1KNbVoFhXg2JdnfL+xy7fFetqUKyrQbGuBsW6GhTralSsq1GxrkbFuhoV6+qU9z92+a5YV6NiXY2KdTUq1tWoWFdJsa6SYl0lxbpKinV1yns3u3xXrKukWFdJsa6SYl0lxbqaFOtqUqyrSbGuJsW6OuU9t12+K9bVpFhXk2JdTYp1NSnW1axYV7NiXc2KdTUr1tUp75Xu8l2xrmbFupoV62pWrKtZsa4WxbpaFOtqUayrRbGuzniPe5vvinW1KNbVMiW/U374nl/eG5vybWTOxox8Gfxj77EQ44uNKXmtlIcNV15sxAU2aIGNtMBGXmCjLLBRF9ho59uY8r1YzoZfYGPBOm8L1nlbsM7bgnU+5fug0T30I4b2YmPGOg8lPmy4F/2Y8r1NzkY73YZ3Uz5gyRrxK4yEFUbiCiO0wkhaYSSvMFJWGKkrjKxY8X7Fip/yDjS5hxEK+dXIjBUfy+NCgZx7NRJXGKEVRtIKI3mFkbLCSF1hpC0wMuWlT9aIX2FkxYoPK1Z8WLHiw4oVP+VVP2qPkj759mpkxoqn/Lg2ofYqWlNenmONtAVGpryOxhrxK4yEFUbiCiO0wkhaYSSvMLJixccVKz6uWPG0YsVPeaMllccXTVKrr0ZmrPhE/mGkhFcjcYURWmEkrTCSVxgpK4zUFUbaAiNTHuFnjfgVRlas+LRixacVK37K8+A5PLJwJv9qJK8wUlYYqSuMtAVGpjxczBoJK4zEFUZohZGzF+PtH/7Xwf0vCcTm7skiNv8opnzOHUsh57uhkGs6jv79/Ej/8ZGJBvrPjsw04M82EM42EM82QGcbSGcbyGcbKGcbOHsl17NXcjt7JbezV3I7eyW3s1dyO3slt7NXcjt7JbezV3I7eyW3s1eyd+50C/50C+F0C/F0C3S6hXS6hXy6hXK6hXq6hdPXtD99TfvT17Q/fU3709e0P31N+x+v6d+j8tCoMjSqDo1qI6OCGxrlh0aFoVFxaNSbeVSPl0Gco3+aRyGdbiGfbqGcbqGebqGdbSG60y340y2E0y3E0y2cvqbj6Ws6nr6m4+lrOp6+puPpa5pOX9P04zX9e1QYGhWHRtHQqDQ0Kg+NKkOj6tCoNjKqfx+WXIjHqNAZFYdGdc8h3TT2Psrn9DqqDI2qQ6PayKj+/SBy8RjlKL+OykOjytCoOjSqjYzqb9vAjvJDo8LQqDg0ioZGDc2NMjQ3ytDcKENzowzNjTo0N+qbM1/zMaq9ZpuahkbloVFlaFQdGtVGRjU3NMoPjQpDo+LQqKG50YbmRhuaG21obrShudFG5kZwbmiUHxoVhkbFoVE0NCoNjcpDo8rQqDo0amhu+KG54Yfmhh+aG35obvihueGH5oYfmht+aG74obnhh+ZGGJobYWhuhKG5EYbmRhiaG2FoboShuRGG5kYYmhthaG7EobkRh+ZGHJobcWhuxKG5EYfmRhyaG3FobsShuRGH5gYNzQ0amhs0NDdoaG7Q0NygoblBQ3ODhuYGDc0NGpobaWhupKG5kYbmRhqaG2lobqShuZGG5kYamhtpaG6kobmRh+ZGHpobeWhu5KG5kYfmRh6aG3lobuShuZGH5kYemhtlaG6UoblRhuZGGZobZWhulKG5UYbmRhmaG2VobpShuVGH5kYdmht1aG7Uobkx1BcNQ33RMNQXDUN90TDUFw1DfdEw1BcNQ33RMNQXDUN90TDUFw1DfdEw1BcNQ33RMNQXDe/6osUfo+r3+3qvd8tzC/ctfnOjxyuav++Wx3c91B9ZqPGwUFP+rwV/uoVwuoV4ugU63UI63UI+3UKZYaG5Yz34l/VQT7fQzrbg3ekW/OkWwukW4ukW6HQL6XQL+XQLp69pf/qa9qev6XD6mg6nr+lw+poOp6/pcPqaDqev6XD6mg6nr+lw+poOp6/pePqajqev6Xj6mo6nr+l4+pqOp6/pePqajqev6Xj6mo6nr2k6fU3T6WuaTl/TdPqaptPXNJ2+pun0NU2nr2k6fU3T6Ws6nb6m0+lrOp2+ptPpazqdvqbT6Ws6nb6m0+lrOp2+ptPpazqfvqbz6Ws6n76m8+lrOp++pvPpazqfvqbz6Ws6n76m8+lrupy+psvpa7qcvqbL6Wu6nL6my+lrupy+psvpa7qcvqbL6Wu6nr6m6+lrup6+puvpa7qevqbr6Wu6nr6m6+lrup6+puvpa7qdvqbb6Wu6nb6m2+lrup2+ptvpa7qdvqbb6Wu6nb6m29lrmpw73YI/3UI43UI83QKdbiGdbiGfbqGcbqGebuH0NX36c2R0+nNkdPpzZHT6c2R0+nNkdPpzZHT6c2R0+nNkdPpzZHT6c2R0+nNkdPpzZHT6c2R0+nNkdPpzZHT6c2R0+nNkdPpzZHT6c2R0+nNkdPpzZHT6c2R0+nNkdPpzZHT6c2R0+nNkdPpzZHT6c2R0+nNkdPpzZHT6c2R0+nNkdPpzZHT6c2R0+nNkdPpzZHT6c2R0+nNkdPpzZERnv2tJU54j+2zBn24hnG4hnm6BTreQTreQT7dQTrfw472O/68/Ovq3jfbvNj6+k0pvniSbacGfbiGcbiGeboFOt5BmWPikQW+eJJtpoZxuoZ5uoZ1tobjTLfjTLYTTLcTTLdDpFk5f0+X0NV1OX9Pl9DVdZqzpj9VGdadb8KdbCKdbiKdboNMtpNMt5NMtlNMtjHwzhJobGuWHRv14tv/6An34dWz/1nU5vhtU6uND9yF1rysOI9F/PjS6cv98THTPv9u/Xknp8L7E54P/x6+PCep0O+h0O+p0m3S6nXS6nXW6XXS6Xc9y+9ePtxN/PLgzf/yfdSEfXbsc/vvj4cwfj2f+OJ354/+cr47rnVv9898fz2f+eDnzx/91hSZ/PzT5/N8fbyf+eHRn/rg/88f/dSqmSPcfjy8/ns/88X8NaKb7ZyBzdv/5cXJn/jideFronwN6iGh6ugT68+P5zB8vZ/54PfPH24k/ntyZP+7P/PEw78cL/ffH45k//s8rNB0rtL78+D+v0CO3dH48n/nj5cwf/9cVmv294sq+/PfH24k/nt2ZP+7P/PF/XaHZxePH639/PJ7543Tmj6czfzyf+ePlzB+vZ/54m/fj4b/zvLgzf/yfV6gL9x+PLz/+zxra6P2PxzN/nM788X9eoR/q85LP/PFy5o/XM3/8zAuueuYFV/Vn/ng47cdv/4i/DuzfTcjHBz4KPZqdvnZbo49i1/tvx/6Pd13/eT+fzv35fO7Pl3N/vp778+3Un+93puf9vD/358O//nzyx/VMqsyx3sV7F947ehK09ufDoZKcIUnOJEnO5LXOpHA4k/2LM0WSM1WSM02QM9Gtdabkw5mnx+jvznhJzgRJzkRJztA2Z1p8cSZJciZLcmZtBr4lmrsz3tOLM1WSM02QM+TEOHP7F/2+puumvnaYaeVxZ8+X8Htg+j2wy+JDurd5fcgPm/TrceiXo09/rnCfO0GWO1GWOyTLnSTLnSzLnSLLnfpTd972H5hBwY0MepOH2lGZhyf5vg8KI4PiyCAaGdRfH9Hfn733MbiXQXlkUBkZ1J8RFO4a5ole49QGBvWvoLhBfmRQGBkURwbRyKA0MiiPDCojg0ZmRByZETQyI2hkRtDIjKCRGUEjM4JGZgSNzAgamRE0MiNoZEakkRmRRmZEGpkRaWRGpJEZkUZmRBqZEWlkRqSRGZFGZkR+c8pzPAa91hGZRgb1T0QK9zvYPuX6Mqh/IlI9NDe110FtYFD/8Qefj+eCfaaX4qP/WIPP6THo6Ym/+6AwMiiODKKRQWlkUH9p5HKc8lxfT3kZGVTfDDruSOT2MvdqGJiw9c3SqI9Br+VopZFBaWRQHhlURgbVkUFtYFBz3KDkXkrs/tuttyMficW/BLf/cis3KI4MopFBaWRQHhlURga9mxHh06A2MMg7NzTKD40KQ6Pi0CgaGpWGRr1JFSV9HFWGRtWhUW1k1Js2LzfKD416kzDoaLgkyq+j4tAoGhqVhka9SRrxkXKf7vAfo8rQqDo0qo2MetMg40b5oVFhaFRkR6XXefimSZZi+FBG+zddMm5UHhpVhkbVoVFtZFR0Q6P80KgwcNnj33TLuFE0NCoNjcpDo8rQqDo0qo2MetM040b5H4+6/Sv/Oja/uThxj4sT93RxEv+8ZhBHBtHIoDQyKI8MKiOD6sigNjDozcUJM8iPDBqZEW1kRrSRGdFGZkQbmRFtZEa0kRnRBmZEcW5kkB8ZFEYG9WeEP152u/0VXgbRyKA0MiiPDOrPCJ/dMai+Dqojg9rAoDdXJMwgPzIojAyKI4NoZNCbGdEe96fd66A8MujN7fNwLI0QXpbGuzvh6XiQLeT4MohGBr25a/x4ZC62F6Y3xfDnQW8qzVCO/n94eobyPihyg+JTx+0+KI8MKiOD3pyIxzVtfLqyug9qA4Pe1H3MID8yKIwMiiODaGRQGhn07oGKo6cSY30ZVEYG1ZFBbWDQm5ulzCA/MiiMDIojg2hkUBoZNDIj0siMSCMz4s3N0s8ZNruRQX5kUBgZFEcG0cigPDJoRAnziBLmkeCWHwf39o/y69A3vfzS2r0Eqc7/V9retPK5QXlkUBkZVEcGtYFBbzaLZQb5kUFhZFB/AwB3bO5b3Isevungc4PSyKB+nG7F1H2Q7wxqA4Pe7Mjnj/smtz9fB+WBQW+2igvHAxwluvwyyI8MCiOD4sggGhlUR87em+C2w1LwL4PebObGDPIjg2hkUBoZ1J97IR+vtIT8OqifLAO5x6D4MqiODGoDg97sdMYM8iODwsigODKIRgalkUF5ZNDIjEgjMyKNzIg8MiPySLLMI8kyjyTLPJIs3+xIxQzKI4PqyKA2MKiMKGEZCW75cXBv/6hf5W/3xFc69verVOLfVbLcoDIyqI4MagOD+pUsN8iPDAojg+LIoP5STOEoQRL5v6xkmUF5ZFAZGVRHBrWBQW+2JWcG+ZFBYWRQPzmn44W4W3MlvQx6MyNKOAa1b/2Wzit3je5pJbbnPVG7r9zFY58oivX1ZdYky50sy50iy50qy50myp03173b3PGy3Amy3Imy3JGVlaOsrBx/mpX/x9uH1bhBdWAQvdkf8Xi1+HZD4EW8KY4MGmkg00gDmUYayDTSQE4jZ+9Np6LEo1661U7/++86Fcyg/omoxwMKpcb2v/+uFVDTwVTL6yWmGxn0ZkYcu/ne/qS/vJhtD6aW3F9ezH4Obhlp9JeRRv+bnX6ZQTQyaOSUv9kUlxn0ZhHGxyB6mXtvNrH9POjN5rTMID8yKIwMehPc9BiUX650Ko0MSiOD8sigMjKojgxqA4OaGxnkBxJLCyOD4sggGhmURgblkUFlZFAdGTQgAMG5kUF+ZFAYGRRHBtHIoDQyKI8Maj+vWMKbO/LMoH6cyqGEtz/pZVA/TiWXx6AXpjd35JlBNDIojQzKI4PKyKA6MqgNDHrTx2QG+ZFBIzMijMyIMDIjwsiMeNMT/HgFEN507phBdWRQGxj0plfFDBqoy0OMI4NoZFAaGfTjK+rbP9qvQ0N78w1wR/dmwe3v/HTFVl2v9eFu7ZH78Y5c+3b8//i1M5hbZMcvshMW2YmL7NAiO2mRnbzITllkpy6ysygf+EX5wC/KB35RPvCL8oFflA/8onzgF+UDvygf+EX5wC/KB2FRPgiL8kFYlA/ConwQFuWDsCgfhEX5ICzKB2FRPgiL8kFclA/ionwQF+WDuCgfxEX5IC7KB3FRPoiL8kFclA/ionxAk+Y1Rf+wE8OrHVpkZ1J86Nip9Pb3026Wh51J8cnuYSdHxxwfsrvvhRqeH3wgH397lZxIr7xIr4JIr6JIr0ikV0mkV1mkV0WkV1WkVyJzexaZ27PI3J5F5vYsMrdnkbk9i8ztWWRuzyJzexaZ27PI3F5E5vYiMrcXkbm9iMztRWRuLyJzexGZ24vI3F5E5vYiMrdXkbm9isztVWRuryJzexWZ26vI3F5F5vYqMrdXkbm9isztTWRubyJzexOZ25vI3N5E5va2J1+1dn8APzqXX72qAr2isGW2R3/sCRP9093Rw6stsz2GeL8JHcO3L23G3pmNx75Ugbx/ZSAAhgTAkAEYCgBDBWBo2hjqC0N0AAwegCEAMGzS6ePwGFJiGJ4+ElO+f+2388vu2HYuuvp4Cq2/348/vkdNzz/9td8PzXpCEvLcJDs3b89NtnPz9twUOzdvz021c/P23DQ7N+/ODTnN5+Y3gVdPENQTKKgEw7FPWXD0SkDqCRRUVQyBgtonHB/bDrGzDhRUKAyBgjriM0FSoAf50OScyiuBglxUnvY2za8ECnJRqceOSa2+EijIRQyBglzEECjIRQ+C6jorWcGVR6n3lmAN4YUgK7g+KKV+IlCgBzUes4he10FWcH3AECi4PmAIFGjyE0GnqsgKNLketydq6axkBZpcQ/1EoECTGQIFmswQbNLk/CCo7J23x326EOj1TnRxGhiSPxhKfGXwAAwBgCECMBAAQwJgyMoYqntlKAAMFYBBhU5/ZqjadLrHoE2newzadLrHAKDTe94Gm8wAoNNVm073GLTpdI9Bm073GLTpdIehAVxPN4Dr6QZwPd0AdHrPm30xHjeVYwyvb6u1JNKrLNKrSeqYymNn1lI8c3xOvt2fE/v19/fjf/tVhfrVRPqVZn05Z7pfXqhfQahfUahfJNSvJNSvLNQvmfk+OZn5Pjmh+d4LzfdeaL73QvO9F5rvvdB874Xmey8033uh+d4LzfdeaL4PQvN9EJrvg9B8H4Tm+yA03weh+T4IzfdBaL4PQvN9EJrvo9B8H4Xm+yg030eh+T4KzfdRaL6PQvN9FJrvo9B8H4XmexKa70lovieh+Z6E5nsSmu9JaL4nofmehOZ7EprvSWi+T0LzfRKa75PQfJ825a8QHn6FkF79ykL92rQeQ37spBHqy5d2U960HiPlw69YuKd5mD3NU/YQFAGCIkJQEARFgqDIEBQFgqJCUDQEigKh3QVCuwuEdhcI7Z71tvtmCgjtLhDaXSC0u0Bod4HQ7gqh3RVCuyuEdlcI7Z71BvxmCgjtrhDaXSG0u0Jod4XQ7gah3Q1CuxuEdjcI7Z71VvxmCgjtbhDa3SC0u0Fod0PQ7uwQtDs7BO3ODkG7s0PQ7uwQtDs7BO3ODkG7s0PQ7uwQtDs7CO32ENrtIbTbQ2i3h9DuXXtWTKaA0G4Pod0eQrs9hHZ7CO0OENodILQ76NCL1u6f64rO5VcKHXrBUajIUdGH+2sk0cfwSqEiR8XHV6NiIHYP4FjvO8gG8q+rKKrIaJOZVeS/ycwqrnQmM6u4LprMrEIVJzOr0NDJzCqu0P6Fub4yq7iem8yso7Kaywxfh70yk5I67CdfaPX5/ja5//b1idD7ZVficYVR23H0r48edE5LSsdZefrp28G/z6WS+k7FuVRSN6o4l0rqURXnkuxcTjuXSupnFedSSV2u4lwqqffnnMvfxEqq/YnESmr9ecQJsNIP7r7og6NXYsB6nCEGrJoZYsDaNsS77yF21jFdjhiwTmSIAfU4p8deeuWFWMcedD8jLsdHNEvOr8SAubrU++360uorMWCuZogBczVDDJirH8TVdTIX4JV3qfffriG8EgNeH5dSPxED6nGNx6ymzjoGvD7+TKxjP8CpxIA11xNxp8rUsc/gT4mPXF1eM5eOPQl/SBzqJ2K6HDFgzcUQK6m58oO4sk9qPJ7rCIFen7zSsYviT5mTP5hLfGVWUndNZVZSec1k1rGf42RmJdXXVGYl9ddUZiUV2DBzda/MdEFmJVXYVGbIOoxhRq/DeszodViPGb0O6zDr2Jtzrj7r2MlzMvMF6zAdu4ROZqYLMqPXYT1m9Dqsx3zBfpiOvVAnM1+vH1Z07LM6mVlHHRaPh7piDPmVQkdlxVHoqJU4CpJH8dsvgRXKb78EVhG//RKo9L/92qTGdEz729+xcavEZbqvEpef77vSF0VDoNi1u+lkCg9BESAoIgQFQVAkCIoMQVEgKCC020Nod4DQ7gCh3QFCuwOEdu/aaXYyBYR2BwjtDhDaHSC0O0Bod4TQ7gih3RFCuyOEdu/aD3cyBYR2RwjtjhDaHSG0O0JoN0FoN0FoN0FoN0Fo9649PidTQGg3QWg3QWg3QWg3QWh3gtDuBKHdCUK7E4R279odcTIFhHYnCO1OENqdILQ7QWh3htDuDKHdGUK7M4R279otczIFhHZnCO3OENqdIbQ7Q2h3gdDuAqHdBUK7C4R279p1cTIFhHYXCO0uENpdILS7QGh3hdDuCqHdFUK7K4R279qtbzIFhHZXCO2uENpdIbS7Qmh3g9DuBqHdDUK7G4R279rhbTIFhHY3CO1uENrdILS7IWh3dQjaXR2CdleHoN3VIWh3dQjaXR2CdleHoN3VIWh3hdhXrULsq1Yh9lWrEPuqVYh91aqSvby8d3cKH90rhQ69YCiU7N7w2Dk4hlxeKQSu7t9+CVyvv/0SWD3/9os2+ZXrw68amOPT4zuWKfjOmkoQFFkFRXL3n083om8Ur0eHWO/Mgbx/Ojp+MZcLMtcLMrfrMW/b62Ens78gc7ggc0Rnrq/MdEFmHZXVXGb4OqzDrK8Oy/GlgiYdlRXle4cgUclc5D5/w6eSjspqKnPSUVnNZdZRWc1l1lFZzWXWUVnNZaYLMuuorOYy66is5jLrqKzmMl+wDksXrMPyBeuwfME6LF+wDssXrMO27Qazk/mCdVi+YB2WL1iH5QvWYfmCdVi5YB1WLliHlQvWYeWCddi2nX12Ml+wDisXrMPKBeuwcsE6rFywDqsXrMPqBeuwesE6rF6wDtu2S9NO5gvWYfWCdVi9YB1WL1iH1QvWYe2CdVi7YB3WLliHtQvWYdt23NrJfME6rF2wDmsXrMPaBeuwdr06rLnr1WHNXa8Oa+56dVhz16vDmqMLMl+vDmvuenVYc9erw5q7Xh3W3AXrMH/BOsxfsA7zF6zD/AXrME8XZL5gHeYvWIf5C9Zh/oJ1mL9gHRYuWIeFC9Zh4YJ1WLhgHRbogswXrMPCBeuwcME6LFywDgsXrMPiBeuweME6LF6wDosXrMOU7GI/l/mCdZiSHfLnMl+wDlOyQ/5c5gvWYUp2yJ/LfME6TMkO+XOZL1iHKdkhfy7zBeswJTvkz2W+YB12wf302wX3028X3E+/XXA//XbB/fTbBffTbxfcT79dcD/9dsH99NsF99NvF9xPv11wP/12wf302wX3028X3E+/XXA//XbB/fTbBffTbxfcT79dcD/9dsH99NsF99NvF9xPv11wP/12wf302wX3028X3E+/XXA//XbB/fSbkn3WU7sfnnJM35h/USjZOZ2j0JFbazrmX835lUJgtvztl8CM9tsvgVnnt18Cr9B++yXwKuq3XwIz6S+/du1mXLI//Co1McfH4u+H3/4ML1ll1/7EkykCBEWEoCAIigRBkSEoCgRFhaBoABTeOQTxvmEgqPcNA0G+bxgI+n3DQBDwGwaCgt8wECT8hoGg4TcMBBG/YWCouMdQcY+h4h5DxT2Giu/ajHQ2BoaKewwV9xgq7jFU3GOoeMBQ8YCh4gFDxQOGiu/aynI2BoaKBwwVDxgqHjBUPGCoeNShG9Xf3Yk19jB0LPFK9cBItYMhcIl/OSZw0X45JnAZ/nZs125cLT2ef2mpdRzzUh0LUh2LUh0jqY4lqY5lqY4VqY5VqY41oY4lqZk/Sc38SWrmT1Izf5Ka+ZPUzJ+kZv4kNfMnqZk/Sc38WWrmz1Izf5aa+bPUzJ+lZv4sNfNnqZk/S838WWrmz1Izf5Ga+YvUzF+kZv4iNfMXqZm/SM38RWrmL1Izf5Ga+YvUzL/pXfvsjm0Pfv3tO455qY4FqY5FqY6RVMeSVMeyVMeKVMeqVMeaUMea1MzfpGb+JjXzN6mZv0nN/E1q5m9SM3+Tmvmb1MzfhGZ+74Rmfu+EZn7vhGZ+74Rm/psDUh0Tmvm9E5r5vROa+b0Tmvm9k5r5vdTM76Vmfi8183upmd9Lzfxeaub3UjO/l5r5vdTM76Vm/rArj9X2cKy5jmOb5thjJ+Vff+dXx+ImrUy1HI5lXzuObdLK3B6OFeI2Fo4u05/Db3++bI98wwgYGBEDgzAwEgZGxsAoGBgVA6NBYGx6M3E6BoaKE4aKE4aKb3qjcjoGhooThooThooThooThoonDBVPGCqeMFQ8Yaj4prdjp2NgqHjCUPGEoeIJQ8UThopnDBXPGCqeMVQ8Y6j4pjedp2NgqHjGUPGMoeIZQ8UzhooXDBUvGCpeMFS8YKj4prfWp2NgqHjBUPGCoeIFQ8ULhopXDBWvGCpeMVS8Yqj4rh0IZmNgqHjFUPGKoeIVQ8Urhoo3DBVvGCreMFS8Yaj4rt0kZmNgqHjDUPGGoeINQ8UbhIoHB6HiwUGoeHAQKh6cDt3w/v4qavTRdTB0ZKrH+6Ex5NLBEJipfjvmBeaeL8cEZpMvxzblh1KeHGv/nB927QgxG4MwMBIGRsbAKBgYFQOjQWBs+oT8dAyPgYGh4gFDxTd9Qn46BoaKBwwVDxgqHjBUPGCoeMRQ8Yih4hFDxSOGiu/aFWo2BoaKRwwVjxgqHjFUPGKoOGGoOGGoOGGoOGGo+K5doWZjYKg4Yag4Yag4Yag4Yah4wlDxhKHiCUPFE4aK79oVajYGhoonDBVPGCqeMFQ8Yah4xlDxjKHiGUPFM4aK79oVajYGhopnDBXPGCqeMVQ8Y6h4wVDxgqHiBUPFC4aK79oVajYGhooXDBUvGCpeMFS8YKh4xVDxiqHiFUPFK4aKVx26wb1QW3VkKu6F2iYwU305JjD3fDkmMJt8ObYpP9QQDsdqIu73c4r3n8+1dmYkYWAkDIyMgVEwMCoGRtOAcZP9+8/f/nzVzrhrv5nZGB4DI2BgqFBxHkOFivMYKlScx1Ch4jyGChXnMVSoOI+BoeIeQ8U9hop7DBX3GCq+a1eo2RgYKu4xVNxjqLjHUHGPoeIBQ8UDhooHDBUPGCq+a1eo2RgYKh4wVDxgqHjAUPGAoeIRQ8UjhopHDBWPGCq+a1eo2RgYKh4xVDxiqHjEUPGIoeKEoeKEoeKEoeKEoeK7doWajYGh4oSh4oSh4oSh4oSh4glDxROGiicMFU8YKr5rV6jZGBgqnjBUPGGoeMJQ8YSh4hlDxTOGimcMFc8YKr5rV6jZGBgqnjFUPGOoeMZQ8Yyh4gVDxYsSFW/1wGitg6FExTkMJSrOYejQDToO9xRjB0OHbnAYVccSz/W+mYIv3ncwdCxxFkPHEmcxCANDR6HOYuhIuCyGjoTLYggs1L8cE1h6/3asCSymvxwTqJ1fjglUwy/HBOrbl2O7FCunh2OV2x2sFn9PLrXETm29bROjyRgZA6NgYFQMjIaAQds2MZqMETVgkE/1cKfEDoYK3eAxVGQqCu5+OIXOHp/kVGQqHkNFpmIxvIpMxWN4DIygI1O1YyvC4OgbxuvRIdJdZUJM4eno+Adaicr8DLrQAV1aB1qJJs2FVnHlMxtaxXXST6Fru0PTtwbaHVpHrTIZWkdlMxlaRx00FzroqJomQ+uosSZDQ1ZkHDRkRcZB0xWhISsyDhq+IqsdaPiKrAcNX5H1oOErsg50hK/IetDwFVkPGr4i60HrqMhuDb4Dmtq/6vS2zZm2QuuoyCZD66jIJkMruZ83F1rJ3b+50EruFU6FJiV3FudCK7kPORdaR0U2GRq+IuuUods22toKDV+R9aDhK7IeNHxF1oOGr8h60PAVWQc66euRldcXnmnbPlE/w6DHs17Ue9Yr6ZAVFkOHULAYOlI/i6EjmcfHEqd/f4Aw6UjmP4RmHivLOpL5ZGgdl9eToXVcXv8Qmrm8zjourydD0xWhddRBk6F1VE2ToXXUWJOhISsyDhqyImOgC2RFxkFDVmQcNHxF1ukeFfiKrAdNV4SGr8h60PAVWQ8aviLrQcNXZD1oHRUZxePnb7cr/lWnq46KbDK0jopsMrSOimwytI6KbDI0XRFayb3CudBK7izOhVZyH3IutI6KbDI0fEXWKUMbfEXWg4avyHrQ8BVZDxq+IutB0xWh4SuyHrS+Hlmp36C/MPR1vToYSccmozyGvjtIXQx994S6GPru8nQxIDJVUrLlK4uhb0eKzoPnScleqSwGRqZSsm1odseuzjn0oqEjU+V0RCPn8qNC8rX3kZRsDzkZWkeXazK0jtQ/F1rJ9pCToXXU8ZOhdWjpP0DXDrQS5Z0LTVeE1tHlyscbNJRr+uc1raQimwutpCKbC62kIpsLraQimwqtZHvIydBKKrJx6I5kKdkecjK0kopsLjSpq8hqp4+lZMNHFkNfS6eHIXEDty/HNuW1FuLhWHu6hTx6fiMGBmFgJAyMjIFRMDCqBgwf3f3nb392bszs2iJsMsauTb9mY3gMDBUqzmOoUHEeQ4WK8xgqVJzHUKHiPIYKFecxMFQ8Yah4xlDxjKHiGUPFM4aK79o1bTYGhopnDBXPGCqeMVQ8Y6h4wVDxgqHiBUPFC4aK79ppazYGhooXDBUvGCpeMFS8YKh4xVDxiqHiFUPFK4aK79qdaTYGhopXDBWvGCpeMVS8Yqh4w1DxhqHiDUPFG4aK79rRZzYGhoo3DBVvGCreMFS8Qah4dhAqnh2EimcHoeLZQah4dhAqnh2EimcHoeLZQah4dhAqnh2GinsMFfcYKu4xVNxjqLjHUHGPoeIeQ8U9hop7DBX3GCoelKh4qwdGax0MJSrOYShRcQ5Dh25QuLvjKcYOho5MlWu5Y5RvO8rcMXRkKg4j6shULIaOTMVi6MhULIaO6w0WgzAwBOrGl2MCryC+HBN4TfDlmEDt/HJslxpm93CM3fKoeu//HH77M7wuFXIYGB4DI+jAONypN587GBEDgzAwEgZGxsAoGBhVH0anbUVKVJzBSEpUnMNQouJPGKVz+ZH0qXgXQ5+KdzH0qXgXQ4mKH/v2Vt9qB0OJinMYOlQ8hON6I8TO9UbSoeLB0wOj02BPOlScw8g6VJzF0KHiLIYOFWcxdKh4oHhg5NTB0KHiLIYOFWcxdKg4i6FExTkMJSrOYShR8WeMTmlYlKg4h6FExTkMJSrOYShU8R6GQhXvYShU8R4GhooXDBUvGCpeFKp4B6MqVPEehkIV72EoVPEeBsa1eFWiGy0fGK1zt6npWBvp8cxICp0ebtOxNlgMgZPqy7E95UVx4fgoXHGJO7+B6H747c/cOb8VA6MhYJRNW1dMx/AYGAEDI2JgEAZGwsDIGBgQKl4chIoXh6HiHkPFPYaKewwV9xgqvmnriukYGCruMVTc69CNFO7P5Nz+fG2glSAwU305tiv3lHo4djPwr9MkEAZGwsDIGBgFA6NiYDQIjOgwMDwGRsDAwFDxTZtRTMfAUPGIoeIRQ8UjhopHDBUnDBUnDBUnDBUnHbrB9TpIR6ZK5A4Mah0MgZnqt2NJYO75ckxgNvlybEF++DIUVxmiVYbSKkN5laGyytCkPFjTcbyrJTLH+1ge+/a2p45v+uNVk+jVrBehJ3vlRXoVRHoVRXpF53v1ZSitMpRXGRrIk18D6+jANjhw5AXMr4F+dGAYHYhR4xcdvaGUHxi5U+MXHb0hFkPJFReHoaM3xGFUHb0hFkNHb4jF0NEbYjF03OFhMUgHxlEc3TC+b7HTOTrSfXPyENPzi07xD7QSzf8ZdDkiHUvrQCupEOZCK6kn5kIrqT5+Bn1sBxjo2wcH7tBKapWp0E1JZTMXWkkdNBdaSdU0F1pJjTUXmq4IDVmRcdCQFRkHDVmRcdDwFVntQMNXZK/Q1cFXZD1o+IqsBw1fkfWg4SuyHjRdEVpfRVZe+5vVKamx2vEkYnbUwVBSNXEYSuogDkNJZcNgeCW1So3HEm/E5rXPvf/qldQqP4P+3BGuXkmtMhdaSa0yF5oQoT9fXlevpFaZC62kspkLraQOmgutpGqaC62kxpoKHSArMg4asiLjoCErMg4asiLjoAkdutM9UrJvzmRo+IqsBw1fkfWg4SuyHjR8RdaBVrI70GRodRVZ9p3+ppK9hJ4xQulgqLvnlkPtYBDCLgRVyV5CLIaSWoXDUFJ9cBgQO3RUJXsJcRhK9hJiMZSoOIehRMU5DCUqzmFgqLiWnZ04DAwVJwwVx9hnq0rcZ2sAI+n4FgWzsUNNOr5FwbxnXBNhYOj4FgWLoeNbFCyGji9KsRg6vijFYij5MgiDkXV8UYrF0PFFqakbO9SsRPNnvu5fs5IKYS40XRFaSfUx893JmpXUKnOhlVQ2c6GV1EFzoZVUTVOhi5Iaay40ZEXGQUNWZBw0ZEXGQdMVoeErss7jQQW+IutBw1dkPWj4iqwHDV+RdaArfEXWg4avyHrQ+iqy3sYOVUmNxbyDv23/3ckYSuogDkNJZcNhKKlVpm7sUJXUKlNf969KapWp0E1JrTIXWkmtMvXdyaakVpkLraSymQtNV4RWUjXNhVZSY82FhqzIOGjIioyDhqzIPkM3B1mRcdDwFVntQMNXZD1o+IqsB01XhIavyHrQ8BVZDxq+IutBq6vIehs7NKeuxupt7NC8untuvY0dmldSB31+X6x5JZUNh6GkVuEwCANDST3BYSipEDgMJZrPYShRcQ5DiYozGEGJinMYGCoeMFQ8YKj4tr1PJ2NgqHjAUPFNuxPmlu9+3f6uHEa9+f7n8JqS62CQCozi74/d1BJ70UgYGBkDo0BgbNqBbfYSJyWZqt433qnZ9zACBkbEwNChGyyGDt1gMXToBouhQzdYjIqB0SAwkhIV5zAUqnjsYChU8R6GQhXvYShU8R6GQhXvYShU8R6GQhXvYShU8R6GPhUP/hUj61PxLoY+Fe9i6FPxLoYOFc/HO4c1p9zB0KHiLIYOFc/1gdE6DyJlHSqeq3tgdJqfWYeKsxg6VJzF0KHiHEbRoeIshg4V5+5vFB0qzmLoUHEWQ4eKsxgYd2ILxp3YgnEntuhQcRZDh4pzGFWHirMY+lScQgdDn4p3MfSpeBdDn4p3MfSpeBdDn4p3MfSpeBdDn4p3MfSpeA+j6VPxLgaGijcMFW8YKr5pH6jpGBgq3jCuxRvGtXjDuBZvCNfiwTmEa/EbBkJH/YaB0FG/YSB01G8Y+lS8i4HQUb9hIKj4DQNBxYPzOnQjtPvP3/4sHQwduhGjv2PEFDsYOnSDxdChGyyGDt1gMXToBouhQzdYDB268Q0jdzB0XP2xGDqu/jiMoEPFWQyFKt7DUKjiPQyFKt7DUKjiPQx9Kp6pg6FPxbsY+lS8i6FPxbsYSlS8HhexsaVXjKhExTkMHSpO4e5Opdgp1KMOFSefHhidtRF1qDiLoUPFWQwdKs5i6FBxFkOHihMdry9ScR0MHSrOYuhQcQ5DyW5hLIYSFecwlKg4h6FExZ8xOjWVkt3CWAwlKs5hKFFxDkOhivcwFKp4D0OhincwlOwWxmIoVPEehkIV72FgqLiS3cJYDAwVV7JbGIuBoeJKdgvjrjeU7BbGYSjZLYzFwLgWV7JbGIuhUMV7GApVvIehUMU7GNt2RArxgfH01YD+8Z4O6tufvoMRVWA89m7zxfcwCAMjYWBkDIymY4m3+8MWPvlOpqpKMhWH4TEwAgaGDt1gMXToBouhQzdYDB26wWIUDIyKgaFQxTt9qqZQxXsYClW8h6FQxXsYClW8h6FQxXsYClW8h6FQxXsY+lQ8dB7ubvpUvIuhT8U7GN7pU/Euhg4VT6EdGMl3MHSoOIuhQ8VZDB0qzmLoUHEWQ4eKsxg6VJzF0KHiLIYOFecwvA4VZzEUqjh1MBSqeA9DoYr3MBSqeA9DoYr3MBSqeA9DoYr3MLRci7vPGEquxesjGjm8YgQlKv64Fs8udjB0qHh2x8MWObQOhg4VZzGUPE/FYShR8UemyrG3xJWoOIehRMU5DCUqzmHoUPEc04HRU/GgQ8U5jKhDxVkMJdfiT2sjlQ6GkmtxDkPJtTiHoU/Fuxj6VLyLoU/Fc6c0jPpUvIuhpKPOYSjpqDMYpOVanMFQci3++cUHT0quxTkMiHeb/LY9eCZjQLzb5Ani3SZPOlScxVByLc5hKLkWZzCSkmtxDkOhindaCkmhivcwFKp4D0OhivcwFKp4D0OhivcwFKp4D0OhivcwFKp4ByMrVPEeBoaKZwwVzxgqvm0PnskYGCqeMa7FM8a1eMa4Fs8Y1+JK9qdiMTA66gWjo46xW5jH2C3MY+wW5jF2C/MFQ8ULhorv2p+qHh8pu/399KDXGwxme0a/a0ekH2Kw0SgYGBUDo0Fg7NqD56dL/PP+VL4pyVQcBmFgJAwMHbrBYujQDRZDh26wGDp0g8EIu/bgmY3hMTAUqnjsYChU8R6GQhXvYShU8R6GQhXvYShU8R6GQhXvYShU8Q6G16finZ30gten4l0MfSrexdCn4l0MHSrO7E8VvA4VZzF0qDiLoUPFWQwdKs5i6FBxDiPoUHEWQ4eKsxg6VJzF0KHiLIZCFacOhkIV72EoVPEehkIV72EoVPEehkIV72BEhSrew9ByLe4+Yyi5Fv+8PWOISlT88/aMYdcePD992OLzhoAh6lBxFkPJ81QchhIV/7yTXohKVJzDUKLiDAYpUXEOQ4eKMxsCBtKh4iyGDhVnMXSoOLMFXSAl1+IchpJrcQ5Dn4p3MfSpeBdDn4p3tqALSZ+KdzGUdNQ5DCUddQ5Dy7U4g6FDxZkXH0JSci3OYUC82xQSxLtNIUG82xQSxLtNIetQcRZDybU4h6HkWpzDUHItzmEoVPFOSyErVPEehkIV72EoVPEehkIV72EoVPEORlGo4j0MhSrew1Co4j0MhSrew8BQ8YKh4gVDxQuGihcMFS8Y1+IV41q8YlyLV4xrcSX7U7EYClW8h4HRUcfYLSxg7BYWMHYLCxi7hYWGoeINQ8V37RZWSjkwSgvM8dEfGNG3788avh4dIt2PDjE9Hx3/QCdE6EIHdGkd6HxF6HJF6IoIfbylEuhbIrtDt+tBx107qO2F9leEDleEjleEpitCQ1ZkHDRkRcZBQ1ZkHDR8RVY70PAVWQfaw1dkPWj4iqwHDV+R9aDhK7IeNF0RWklFlv0DOjPQPqRjj4iQn2+Uh95vu3L/Es5NwB99lpB7oD6l47yU+Hzw1+lUUutpOZ1Kqkgtp1NJfarldCqpfJWczqCkptZyOpVU61pOp5LrgFmn8wtayXXAXGi6IjTkdUALB3SLHWjIap2DhqypOWjEyvd2zB36Vjx1oBHrUw46IlaRLDRirUfheKaNqCNZEbEiY6ERKzIWmq4IjViRsdCIFRkLjViRsdCIFRkLjViRcdCEWJGx0FesyOiKFRldsSLbtT/vXugrVmR0xYqMrliR0RUrMrpiRZauWJGlK1Zk6YoVWbpiRbZrr+W90JA6neMB3btVmxGzdwr3l119yrUDjZi909Mn2VoPGjF7Z//49At1btVmxOyd0wM6pw40YvZmoRGvp1loxOtpFhpRp1loxOtpFhrxevr2iwd07eh0QazIcqkHdOuUoQWxImOhdVRk4bhuiqHzzcZYdNRYLAZhYOiog1gMHZUNi6GjVmExdFQfLIaOeoLDqDoqhODdgRE4sQzBHe8Wh2/7Uf95t7jqqBB+CB3zAU2dPUCqkgphLrSSemIuNF0RWkmt8jPo4+WoX5/76EArqWzmQiupg+ZCK6ma5kIrqbGmQjfIioyDhqzIOGjIioyDhqzIOGi6IjR6Rfbr916g0SuyLjR6RdaFRq/IutDoFVkHmpTscj4ZGr0i60KjV2RdaPSKrAtNV4S+YEVGSnY5n1p7k5JdzidDX7BHRkp2OZ8LrWSX88nQF+yRkZJdzidDX7BHRkp2OZ8MfcG7lqRkL/LJ0FesyJTs6z0Z+ooVmZI9skOuB3Qp36C/MJTUWByGkqqJw1BSB3EYpAPjWOI3osIkhE9Hf0ErqWzmQiupbOZCK6lsfgLNPUJMSvZt/iH052csScm+zXOhlezbPBlaSR00F1pJ1TQXWkmNNReaEKGZSzQl+zZPhgasyHhoyIqMg4asyDhoyIqMgVayb/NkaMiKjIOGrMg4aMiKjIMmcOjeo0lK9m2eDI1ekXWh0SuyLjR6RdaFRq/IetBK9m2eDI1ekXWh0SuyLjR6RdaFpitCX7FHlq7YI1OyQ/dk6Cv2yNIVe2RK9mKfDH3FHpmSvdgnQ1+xR6ZkL/bJ0FesyJTsxT4Z+ooVmZK92CdDX7EiU7IXO/e0p5Ld1VkM9VXTF4b6OugLA/Jbnp8/l0VK9vP+IXR9QLfYgYb8licHDfktTwZayc7ik6Ehv+XJQUN+y5ODhvyWJwdN2NDJuQ404tfgknt81tJ3ihMlO4tPhkasyFhoxIqMhUasyDhoJTuLT4aG/D4vB41ZkYXP0JgVGQNNV4RGrMhYaMgeGQeN2SNjoDF7ZAw0Zo/sI3RSsrP4D6FL+gwN2SPjoCErMg4asiLjoOmK0JAVGQcN2SMjf0BT7kBD9sg4aMgeGQcN2SNjoJXsLP5D6Pi4w0GlAw3ZI+OgESsyFhqxImOh6YrQkHctOWjIioyDhqzInqBTp/ZWsrP4T6Ef7aJcO9CQFRkDrWRn8cnQmBUZA41ZkTHQmBUZA01XhMasyBhoyIos0GdoyIqMg4asyDhoyIqMgVayI/pkaMiKjIOGrMg4aMiKjIOmK0Jv0uncnqCJh67lAR0Y6BDpfnSI6fno+Ae6IkIXOqBL60C3C0Lv2id7L7RHhK7H14jI+w50uCJ0vCI0XRE6XRE6XxEasiLjoCErMg4asiJjoBNkRcZBw1dktQMNX5H1oOErsh40XREaviLrQcNXZD1o+IqsB62kIvtRN/SxCZsP/9mPrPPbrtwfwIquPvosIfdAfUrHeXna+/B28NfpVFLrKTmdWUkVqeV0KqlPtZxOJZWvltOppKbWcjrJTufM06nkOmDW6fyCVnIdMBdayXXAXGjI64B2PLIZOps8pgxZrTPQBbKm5qARK9/bMXfoGFwHGrE+ZaERq0gWmgChKdx/3BN1JKsgVmQsNGJFxkIjVmQsNGJFxkIjVmQcdEWsyFhoxIqMhUasyFhoxIqMhaYrQl+xIqtXrMjqFSuyesWKrF6xImtXrMjaFSuydsWKrF2xItv1/YC90FesyNoVK7J2wYosO0id/vw11ewQszfzAnt2iNk7HQ/n+tR60IjZO/tjr/FMsQONmL1zekDn1IFGzN4sNOL1NAuNeD3NQXtEnWahEa+nWWjE6+lcDp3OtaPTHrEiy6Ue0K1Thu7aa3wvtI6KLBzXTTHE7++IfWHoqLFYDB1VE4uhow5iMXRUNhxG0FGrsBg6qg8WQ0c9wWLoqBCCdwdG4MQyBHe8Wxy+fTUs/oHWUSH8EDrmA5p8B1pJhTAXWkk9MRdaSfUxF1pJrfIz6OPlqFsejx1oJZXNVOiopA6aC62kapoLraTGmgsNWZFx0HRFaMiKjIOGrMg4aMiKjINGr8h+/d4LNHpF1oNWssv5ZGj0iqwLjV6RdaHRK7IuNF0RGr0i60KjV2RdaPSKrAt9xYpMyS7nc2tvJbucT4a+Yo9MyS7nk6Gv2CNTssv5ZOgr9siU7HI+GfqKPTIlu5xPhr5iRaZkx/DJ0FesyJTsvj0ZWklFlusBXco36C8MwsBQUjVxGErqIA5DSWVzLPEbUWESwqejv6CVVDZzoZVUNlOhlezb/CNo9hFiJfs2/xCaecZSyb7Nk6GVVDZzoemK0EqqprnQSmqsudCAFRl7iaZk3+bJ0IAVGQutZN/mydCQFRkHDVmRcdCQFRkHTVeEhqzIOGjIioyDRq/Ieo8mKdm3eTI0ekXWg1ayb/NkaPSKrAuNXpF1odErsi40XREavSLrQqNXZF3oK1Zk7Yo9snbBHllRskP3ZOgL9siKu2CPrCjZi30yNF0R+oI9sqJkL/bJ0Be8a1mU7MU+GfqKFZmSvdgnQ1+xIlOyF/tkaPUV2RcGYWCor5q+MNTXQV8YkN/y/Py5rKJkP+8fQtcHdIsdaMhveXLQkN/y5KAhv+XJQetQx8nQkN/y5KAhv+XJQUN+y/MBnZzrQCN+DS65x2ctfa84QazIOGglO4tPhkasyFhoxIqMhYb8Pi8HTVeExqzIwmdozIqMgcasyBhoxIqMhYbskTHQSnYWnwyN2SNjoDF7ZAw0ZI+spM/QdEVoyIqMg4asyDhoyIqMg4asyDhoyB4Z+QOa8iu0kp3FJ0ND9sg4aMgeGQcN2SOLjzscVDrQdEVoxIqMhUasyFhoxIqMhYa8a8lBQ1ZkDLSSncXHoVOn9lays/hPoR/tolw70JAVGQeNWZEx0HRFaMyKjIHGrMgYaMyKjIHGrMgYaMiKLNBHaCU7ok+GhqzIOGjIioyDhqzIOGi6IjRkRcZBQ1ZkHDRkRcZA79on+/E65K+/v//+l2ObtDQe3wS7/R2JOT5EugcvxBSezu+fV5537U79U4xCB0ZpHYyIgUEYGEkHRj0+IETedzAyBkbBwKgYGA0CY9duybMxlKg4h6FExTkMJSrOYShRcQ5DoYrXDoZCFe9hKFTxHoZCFe9hKFTxV4zqFKp4D0OhivcwNql4OHZX+IVRmeN9vkP78n3/iU4zyJX7T0dXH1eKvz5m3gFN6eB8+unbwV+nJ9rp+XR6yE7Pp9OT7PR8Oj3ZTs+n01Ps9Hw6PdVOz6fT03Sfnt8Qu/b+nQvhESBU1InB3Y8OjjoQKqo5DoIQIFRURuF4ii3E3ppQUb9wECqqDA5CRS2Q2l2xc3QdCBWKzUAEFYrNQahQbA5ChWJzECoUm4NQodgchArF5iBUKDYHoUKxOQgExQ4Iih0RFDsiKHZEUOyIoNi7doedC4Gg2BFBsSOCYkcExY4Iik0Iik0Iik0Iik0Iir1r99C5EAiKTQiKTQiKTQiKTQiKnRAUOyEodkJQ7ISg2Lt2l5wLgaDYCUGxE4JiJwTFTgiKnVXoRD6eAcypdCBUZKfi768olJw7ECqyU6n3PQ9Kqx0IFdmJg1CRnTgIFdnpAVFdZ2EXFdcTpd5/vYbQgVBxPVFK/QihQidudyDuENRZE0XF9QQHQQgQKhT7CaJXdhQVin27tXiHKL2FrUKxa6gfIVQoNgehQrEZiF17ikWqD4gameNDcMfrwuHbt43+vC68bQeyH2IcazsE8h2MgIERMTAIAyPpwDh2GQzh25ted4yMgVEwMCoGRoPAaEpUnMNQouIchhIV5zCUqDiHoUTFOQx9Kl5dB0Ofincx9Kl4F0Ofincx9Kl4B6M5fSrexdCn4l0MfSrexdCn4l0MfSrexYBQ8eYgrsWbg7gWbw7iWrw5iGvx5iGuxZuHuBZvHuJavHmIa/G2a4+o2RgQHfXmMVTcY6i4x1Bxj6HiAUPFd+0YldIDI+XvGF+OBamORamOkVTHkgDH/nP8l2O7vmB8PDh++ztQx7Em1LFde+7wjnmpju3KY/XxIcrs2U106/HM2O3P188ttF274/wQox0fmbj9mToYhIGRMDAyBkbRgRHSgUGlg1ExMBoExq69cmZjeAwMHSrOYihRcQ5DiYpzGEpUnMNQouIcBoaKE4aKE4aKJwwVTxgqnjBUPGGo+K59dGZjYKh4wlDxhKHiSZ+KJ+pg6FPxHkbWp+JdDH0q3sXQp+JdDH0q3sXQp+JdDH0qnr+/yts5uhwH14fGpPSHWJ/gdwOnT/C7GBiCnzEEv2AIfsEQ/IIh+AVD8HdtVzUbQ5/gdzEwVLxgXLYXjOZ7wWi+V4zme8VovleM5nvFaL7v2rpqNgZG871iNN8rhopXDBWvGCreMFS8Yah4Eyh/X44JFLQvxwRK1JdjAkXnyzEV++Z+/IRFdE7FTvf5+PVccwdCxU73HISOL6IwECp2uucgCAFCxU73HISKne45CBU73T9BtNSBULHTfW7Hp45c60DoUOzPEF6HYjMQOhSbgdCh2AyEDsVmIHQoNgOhRLHTRwgdip3rRwgdis1A6FBsBkLH1+SOL1cUCq8QQcfX5BgIHV+TYyBUKDYHoUKxy/G9pkKxA6FCsTkIHd9/ZSB0fP+VgdDx/VcGQsf3XxkIHYr9GSLqUOwHROroRNSh2OH4nHDuNM+iDsX+9IntG4QOxWYgdCg2A6H/i+03CB2KzUDoUOzPELt2P/KeDggfXvayvDnmpToWpDoWpTqWpTq2qdLz8bGXpS/u1bFdu5nwjnmpjgWpjm3Sa1/8k2O541iW6liR6liV6tiuPFYe+z77xlUiIdL9QinEb5d78Qtj1+4PP8UodGCU1sHwGBgBAyPqwKh3HQnkfQeDMDASBkbGwCgYGBUDQ4mKMxhFiYpzGEpUnMNQouIchkIVrx0MhSrew1Co4j0MhSrew1Co4j0MhSrew1Co4h2MXVs6BPfo2Qb/8pmfm2NeqmNBqmNRqmMk1bEk1bEs1TEBGtR3bJeqfLgv8Ho881WwG4bAO1UdjM8fcIquCbyvNYIh8C7YCIbAe2YjGFEHxscNH24YhIGRMDAyBkbBwNCh4iyGEhX/jOGdEhXnMJSoOIehRMU5DAgVv7mLgQGh4t5BqLh3ECruHYSKe4eh4h5DxT2GinsMFfcYKr5rN45/wHjd7P2GoU/Fuxj6VLyLoU/Fuxj6VLyLoU/FexhBn4p3MfSp+D99FexGrE/wu4HTJ/hdDAzBDxiCHzAEP2AIfsAQ/IAh+BFD8KM+we9iYKh4xLhs37XBx2wMjOZ7xGi+R4zme8RovkeM5jthNN8Jo/lOGM13wlBxwlBxwlBxwlBxwlBxEqjiX44J3UrJS91KyUvdSsmnPfn3dvixzU0qNTHHx+buu8nE5p93k6E/GAkDI2NgFAyMioHRIDA2bRg1HcNjYAQVGLWlA8PlbxivR3N7lvlN20udDP15Ty2/aTOqzdA66onJ0Dqqjx9Cf95sxmcdtcpkaB2VzWRoHXXQXOiio2qaDK2jxpoMDVmRcdCQFRkHTVeEhqzIOGj4iqx2oOErsh40fEXWg4avyDrQFb4i60HDV2Q9aPiKrAetryILnf7mpu3qftymjfXA+HYL+Y6h5L4Yh6HkvhiHoeS+GIeh5L5YyAdGLGxeY3r/VcldtJ9BMx3hpuSe21xoJXfo5kLrqFV+CM1cXjcdtcpkaLoitJI6aC60kqppLrSSGmsuNGRFxkFDVmSfoYODrMg4aMiKjIOGr8hqBxq+IutB0xWh4SuyHjR8RdaDhq/IetDwFVkPWl9Fll77m8Hrq7GeXu15YOi751Z8B0PJXTQ6muY1VW4l3ZbKfSU9f8nmWEleyV20n0HHfEBTp+LdtBHnZmglzzXNhVbyXNNcaCXPNf0MOvkDusQOtJLnmuZCK3muaSp0UPJc01xoJTXWXGjIioyDhqzIOGi6IjRkRcZBQ1ZkHDR6RVZdBxq9IutCo1dkPeiIXpF1odErsi40ekXWhUavyLrQdEVo9IqsC41ekXWhr1iRxSv2yOIVe2R0xR4ZXbFHRlfskdEVe2SbdjDeDH3FHhldsUdGV7xrSVesyOiKFVm6YkWWrliRpStWZEl9RfaFQRgY6qumLwz1ddAXxia9o1wPDKqBOT7lcj885dZeMXbtiz0bw2NgBAyMiIFBOjByPDDKv+5UEnbtXX0u9Of9K8Kuvav3QpcrQldEaOZl4KykVpkKXZRUNnOhldRBc6GVVE1zoZXUWHOh6YrQkBUZBw1ZkXHQkBUZBw1fkXXedS/wFVkHusJXZD1o+IqsBw1fkfWg4SuyHjRdEVpHRVbifW+MmyH3DfoLQ0eNVTwdGNFxseP2xqg6aqwfQjObB1QdNdZkaB011lzopqPGmgyto8b6ITTzcEbTUWNNhtZRY02GpitCK6mx5kJDVmQcNGRFxkFDVmQcNGRF9hk6OsiKjINGr8iq60CjV2RdaPSKrAtNV4RGr8i60OgVWRcavSLrQqNXZF1o9IqsB+3RK7Iu9BUrMn/BHln0F+yRxV27f++FvmCPLPoL9siiv2CPLPoL9siiv2KPLFyxRxYueNcyhitWZOGKFdmu3b/3Ql+xIgtKKrJ2vO5bw+sb/TEoqbE4DCVVUysHRswdDCV1EIMRdVQ2NT8wSuhg6KhVWAwd1QeLoaOeYDF0VAj1eKU81caKJbO/Qow6KoQfQn9+6z5GHRXCZGgd9cRkaB3Vxw+hP7/CGKOOWmUuNCmpbOZCK6mD5kIrqZrmQiupseZC0xWhISsyDhqyIuOgISsyDhq+IqsdaPiKrAOd4CuyHjR8RdaDhq/IetDwFVkPmq4Ira4ia+51/9iY1NVYfQx1VVMfQ10d1MdQUtkkdySEnJmE8Ono39BKdimfDK2kspkLraSy+Qk0t39FVLJf+mRouiK0ksrmZ9DM80FKdlefDK2kapoLraTGGoaurgMNWJGx0Ep2V58MDViR8dCQFRkHDVmRcdB0RWj0iqwLjV6RdaHRK7Iu9BUrMiW7q8+tvZXsrj4ZGr0i60KjV2RdaPSKrAtNV4S+Yo9MyV7sk6Gv2CNTshf7ZOgrVmRK9mKfDH3FikzJXuyToa9YkSnZi527za5kd3UWQ33V9IWhvg76hUHbdrr27YERG3N89PX+hm70LXAJgXmfl7btdH0q9Oe3PGnbTtdboeMVoQkR+vMrM7Rtp+ut0PmK0OWK0PWK0O2C0B6yIuOgISsyDhqyIuOgISsyDprQoWsHGr4i60HDV2Q9aPiKrAcNX5H1oOErsg50gK/IetBKKrLsH9DcnQL/uFPgQ37+0Hjo/bYr9w/QR1cfnoTcA/UpHefl6SbE7eCv06mk1tNyOpVUkVpOJ9npnHk6lVS+Wk6nkppay+lUUq1rOZ1KrgNmnc4vaCXXAVOho5LrgLnQkNcBLRzQLXagIat1DhqypuagCRA6Hj/uY3AdaMT6lIVGrCJZaMRa71bB3qGJepKFWJGx0IgVGQdNiBUZC41YkbHQiBUZC41YkbHQdEVoxIqMhUasyFjoK1ZkdMWKjK5YkaUrVmTpihVZumJFlq5YkW3bz34r9BUrsnTFiixdsSJLV6zI0hUrsnzFiixD6nSOB3TvVm1GzN4p3F929SnXDjRi9k7Hw7k+tR40YvbO/v6cjc/UuVWbEbN3Tg/onF6hC2L2ZqERr6dZaMTraRYaUadZaLoiNOL1dC6HTufa0emCWJHlUg/o1ilDC2JFxkLrqMjCcd0UQ/z+jtgXho4ai8OoOqomFkNHHcRi6KhsWAwdtQqLQRgYOuoJFkNHhRC8OzACJ5YhuOPd4uCfxfLPu8VVR4XwQ+jPnxGkqqRCmAutpJ6YCt2UVB9zoZXUKj+D/ryzMDUllc1caCV10FxouiK0khprLjRkRcZBQ1ZkHDRkRcZBQ1Zkn6GTkl3OJ0OjV2S/fu8FGr0i60KjV2RdaLoiNHpF1oVGr8i60OgVWRcavSLrQqNXZD1oJbucT4a+YkWmZJfzubW3kl3OJ0PTFaEv2CNLSnY5nwx9wR5ZUrLL+WToK/bIlOxyPhn6gnctk5K9yCdDX7EiU7Kv92ToK1ZkSvbIDsfXa2Mo5Rv0F4aSGovDUFI1cRhK6iAGQ8m+zY8lfiMqTELgPuyclOzbPBlaSWUzF1pJZfMTaO4R4qRk3+YfQn9+xjIp2bd5MrSSymYutJI6aC60kqppLrSSGmsqtJJ9m38IzVyiKdm3eTI0YEXGQ0NWZBw0XREasiLjoCErMg4asiLjoCErMg4asiJjoJXs2zwO3Xs0Scm+zZOh0SuyLjR6RdaFpitCo1dkXWj0iqwLjV6RdaHRK7IuNHpF1oNWsm/zZOgr9sjyFXtkSnbongxNV4S+Yo9MyV7sk6Gv2CNTshf7ZOgr9siU7MU+GfqKFZmSvdgnQ1+xIlOyF/tk6CtWZEr2Yv8A/YWhvsb6wlBfNX1hqK+DfmMo2aF76ueykpL9vH8IXR/QLXagdejdZGjIb3ly0JDf8uSgIb/lyUFDfsuTg4b8licDrWRn8WHo5FwHGvFrcMk9PmvpO8WJkp3FJ0MjVmQsNF0RGrEiY6Ehv8/LQUN+n5eDxqzIwmdozIrsI3RWsrP4ZGjEioyFhuyRcdCYPTIGmq4IjdkjY6Ahe2QlfYaG7JFx0JAVGQcNWZEx0Ep2Fp8MDVmRcdCQPTLyBzTlDjRkj4yDpitCQ/bIOGjIHll83OGg0oGG7JFx0IgVGQuNWJFx0Ep2Fp8MDXnXkoOGrMg4aMiK7Ak6dWpvJTuL/xT60S7KtQMNWZFx0JgVGQONWZEx0JgVGQONWZF9hlayI/pkaMyKjIGGrMgCfYaGrMg4aLoiNGRFxkFDVmQcNGRFxkFDVmQcNGRFxkAr2RF9MvQmnY6UD+hYHAf9+BZJDCk9YcTur6fjtzvNol27ZJ+KfPiSa+eWzq49snci5+shl+sh1+sht8sh79oZeyeyh0ZuqYMcAJHb/eDiWgcZsfpikOl6yIjVF4OMWH0xyIjVF4OMWH0xyIjV12fkjFh9MciI1ReDfL3qK1+v+tq1+/VO5OtVX/l61Ve+XvWVr1d95etVX+V61Ve5XvVVrld9letVX7t2ut6JfL3qq1yv+irXq77K9aqvcr3qq16v+qrXq77q9aqver3qa9e+6zuRr1d91etVX/V61Ve9XvVVr1d9tetVX+161Ve7XvXVrld97dpjfSfy9aqvdr3qq12v+mqQT92nj8iI1VeuH5CLQ6y+GGTE6otBBqy+Srz/dqHQQQasvjhkuh4yYPXFIQNWXyUc6YtiBxmw+uKQAasvDhmw+mKQPWD1xSEDVl8cMmL1xSAjVl8P5NTR5V17p5+LXO7IOXeQEauvY6OWPjJi9cUgI1ZfDDJi9cUgI1Zfn5EDYvXFIKvQ5dDaXXeic/kb8heGDq11mQ6Mp1/vRy5EukOH+K3AuEPrUNsfQhc6oEvrQOvQ28nQOhR3MrQOzf0hdL2n40Ded6B1qO5c6KhDdydD6+h7TIbW0fmYDK2j9zEZmq4IDVmRcdCQFRkHDVmRcdDwFVntQMNXZB1ogq/IetDwFVkPGr4i60HDV2Q9aLoitJKKLD76m4Vr6frs/hzsy/dbrb1fLvH45frosoTcw/THHvr0/NO3g79OppJKT8fJVFJB6jiZSipTHSdTScWr4mQq2cVeyclUUqHrOJlKKv85J/MLWUndPxOZrocMWPMHd1/4wVEHGbAy55AB62cOGbDKDcd3dEPsrWXAWpRBVrLz/lRkwLouteN7hNF1kAGrLw4ZsPrikOl6yIDVF4cMWH1xyIDVF4cMWH1xyIDVF4OsZOf9qcjXq76U7Lw/Ffl61ZeSnfenIl+v+lKy8/5U5OtVX0p23p+KfL3qS8nO+1ORr1d9Kdl5fyry9aovJTvvT0W+XvWlZOf9qcjXq76U7Lw/Ffl61ZeSnfenIl+v+lKy8/5U5OtVX0p23p+KfL3qS8nO+1ORr1d9Kdl5fyry5aqvqmTn/anIl6u+qpKd96ciA+pyPt6tyKl0kAEz9uedBKuS3bp/hlyP7W5bfUVWslv3VGTAjM0hA2bsB3J1nfSlZLfuHyLff7uG0EEmQORSPyID6nI9Dq7UW8uA18scMuD1MocMWH09IfcKTiW7df8Q+cjYpZO+lOzW/TPk45MSfWTA6otDBqy+OGQl1Ve7v4Ud/be3VbsvAD42rQ/Bfz/6C5oQoY8MFgL5DrSSCmwutJIabC60kipsLrSSOuxn0Mkf0N92n7hDK6nEpkJr2cF9LrSSamwutJJ6bC40ZEXGQdMVoSErMg4asiLjoCErMg4avSKrrgONXpH1oLXs4D4XGr0i60KjV2RdaPSKrAtNV4RGr8i60OgVWRcavSLrQl+xItOyw/jU2lvLTuBzoa/YI9Oys/Zc6Cv2yLTsrj0X+oo9Mi07bM+FvmKPTMsu23Ohr1iRadlpey70FSsyLbttz4W+YkWmZMdtH48P+fhYOxg6aiwWQ0fVxGLoqINYDB2VDYuho1bx9MhrVLi8Fun+AHGIKbxCK9mX+ofQhQ7o0jrQOmqVydA6apXJ0DpqlR9CP3+cuPN8rJL9qSdDK6ls5kIrqYPmQiupmuZCK6mx5kJDVmQMtJK9qidDQ1ZkHDRkRcZBw1dknUtLJXtWT4aGr8h60PAVWQ8aviLrQcNXZD1o+IqsA61k/+pn6NTphSjZk9qH9GjTBi523LvCSnal/iE0c7NKyb7Uk6HpitBKaqy50EpqrLnQSmqsudBKaqy50EpqrJnQTcku1ZOhISsyDhq9IquuA41ekXWh6YrQ6BVZFxq9IutCo1dkXWj0iqwLjV6R9aCV7EI/GRq9IutCX7EiU7IX/dzaW8lu9JOhL9gja0p2pJ8MfcEeWVOyK/1k6Cv2yJTsTD8Z+oo9MiW700+GvmJFpmR/+snQV6zIlOxPPxn6ihWZll3L532YsmnZs/xHyIcvueYOMuAXZDhkwO/3ccg69HkqMuJ3dRlkwO/3cciA3+/jkAG/3/eE3FIHGfD7fbkdH4x27RVZyw7lM5ERqy8GGbH6YpARqy8Gma6HjFh9MciQ1Vf6iIxYfeX6ERmx+mKQEauvz8hadiP/0ffuj3fMCoUOMmD1xSEDVl8cMmD1xSETIPLxjexCsYMMWH1xyIDVF4cMWH1xyIDVF4cMWH0xyFp2Hp+JjFh9PZBTR5e17Dr+M+T7wSV3Wvda9hz/EbJvH5HpesiI1ReDjFh9MciI1ReDjFh9fUbetfNyoHYgh/Qd+cuxTSsu5McTVKGGjmNFqmNVqmNNqGO7dvYMNT45VjuORamOkVTHklTHduWx47s6v/5OzPHcByjarr0jf4rx+UMDbddukLMxGgTGrh0bf4rxea/ktmvHxtkYAQMjYmAQBkbCwFCi4hyGEhXnMJSoOIehRMU/YpBzClW8djAUqngPQ6GK9zAUqngPQ6GK9zAUqngPQ6GK9zB2deadf7SpPf3v//Q6bo5VqY41oY5t272NdcxLdSxIdSxKdUyABvUd26UqH+4LvB7v69Hivf3ZScde4J2qDkbz93Dc/kwdDIH3tUYwBN4FG8EQeM9sAGPXXlg/xTg2FvHtPx8i+sLwGBgBAyNiYBAGhg4VZzGUqDiHoUTFOQwlKs5hKFFxBiNiqHjEUPGIoeIRQ8V37Tw1GwNDxSOGikcMFY8YKh4xVJwwVJz0qXiiDoY+Fe9i6FPxLoY+Fe9i6FPxLoY+Fe9i6FPxLoY+Fc/fH1PqHH3s++TrQ2NS+kOsT/B7gUv6BL+LgSH4CUPwE4bg79o0ZzYGhuAnDMFPGIKf9Al+FwNDxTPGZXvGaL5njOZ7xmi+79p8ZTYGRvM9YzTfM0bzPWM03zNG871gqHjBUPGCoeIFQ8ULhooXgSr+5ZjMrZR+/YhUx2RupUSuTsq/2bXDsRwdc3wMx+ExpH/6BuENIShAOOLW+ULVDSHqRyD9CEk/QtaPUPQjVP0ITRXC6zfwyM3aDOpUhE9fSLohaFBnBkGDOjMIGtSZQdCgzgyCBnVmEDSoM4OgQZ0ZBA3qzCBoUOePCN6pV2fv1Kuzd+rV2Tv16nxzVT+CenX2Tr06e6denb1Tr87e6Vdnr1+dvX519vrV2etX51nbXe1E0K/OXr86e/3q7PWrs9evzkG/Ogf96hz0q3PQr86zNr3aiaBfnYN+dQ761TnoV+egX52jfnWO+tU56lfnqF+dZ21mtRNBvzpHFU+FpY8IGtQ5148IGtSZQdCgzp8RSIE6l3h/sK1Q6CAoUGcOQYE6cwgK1JlDUKDOJRzLmWIHQYE6cwgK1JlDUKDOHIICdeYQFKgzg5A0qDODoEGdHwipowtJgzqH+/fFS84dBA3q7NtHBA3qzCBoUGcGQYM6Mwga1JlB0KDOnxHyFl0Ird3zZHQuf0P4cmtPrneZDrcKt7lmiHSHCPGbYN0hogaIQgdEaR0IQoBICBBZA8Tnr2j7XBAgKgJEA4AoDgHCI0CoUGwOQoVicxAqFJuDUKHYHIQ6xa4dCHWK3YNQp9g9CHWK3YGo6hS7B6FOsXsQ6hS7B7FJseOjf1G4FozPx9ejy/fWfO+XSzx+uT6uAkPuue2PPcjo+advB3+dHLKT8/7kJDs5709OtpPz/uQUOznvT061k/P+5DQ7OW9Pzqad0SadnC8Erx8h6EdQUBMGd184wVEHgfQjKKivOAQFVVCId19C7K0FBbUKh6CgouAQFOh+asd+1k+/fEcIToE6cwgK1JlDUKDOHIICdeYQFKgzh6BAnTkEBerMIShQZw5BgTpzCPrV2etXZ69fnb1+dfb61XnTzmhTEfSrs9evzl6/Onv96uz1q3PQr85BvzoH/eoc9Kvzpp3RpiLoV+egX52DfnUO+tU56FfnqF+do351jvrVOepX5007o01F0K/OUb86R/3qHPWrc9SvzqRfnUmBLnz+mnUgBRnp804HgRRkpFKP7WNa7SAoyEgcgoKMxCAkBRnpgVBdZzknBdcLpd53CawhdBAUXC+UUj8iKNCFehxcqbcWSD+CgusFDkGBOj8h9AqMpECd67FvaS295axAneuxxV4fQYE6MwhZgTpzCJvUud3fqoj+29Pw3QeeH5uQ3e4Nfj/6CyJogDhW9O2+lO9ARAQIQoBICBBZA0TyB8S3t6vuEAUBoiJANACIXTt4zYVQodgchArF5iBUKDYHoUKxOQgVis1BaFPs6joQ2hS7C6FNsbsQ2hS7B1G1KXYXQptidyG0KXYXQptidyG0KXYXQptidyEQFLsiXGNXhGvsinCN3RCusRvCNXZDuMZuCNfYu3ZYmguBcI3dELriDUGxG4JiNwDFjg5AsaMDUOy4acclH4+NNX2sHbeiTLdIpltJpltZplt7tMzTY91S4dYt8/G1uGlfoh9CfP7kV9y0M9FciE17E02G8BogPn+PJm7an2gyRESAIASIhACRESBUKDYHoUKxOQgVis1ABBWKzUGoU+xOKR7UKXYPQp1i9yDUKXYPQp1i9yDUKXYPQp1i9yD2K3bqXKtt2pPIh/RoqwTu3DLvCsRNuxL9EIJpnm7al2gyRECAiAgQhACRECAyAkRBgKgIECoUm4EgbYrdefIwkjbF7kJoU+wuhDbF7kJoU+wuhDbF7kJoU+wuhDbF7kJoU+wuhDbF7kEkBMVOCNfYCeEaOyFcY2/a0WsyBMI1dkK4xk4I19gJ4Ro7IVxjZ4SueEZQ7Iyg2BlBsTft7zUZAkGxs4IdID9v9B2zgh0gc7nfOs31daPvWBTsAMkhKNifmUNQsD8zh6Bh334GgfQjKNifmUNQsD/zE0JLHQQF+zPndv/t4loHQYM6Mwga1PkzQtWgzgyCBnVmEDSoM4OgQZ0ZBBXqnD4iaFDnXD8iaFBnBkGDOjMIGr5tdDyzWyh0EDR82+gzQtPwbSMGQcO3jRgEDd82Or5hUSh2EBSoM4egQJ05BAXqzCFo+PIgg6Dhy4MMggZ1ZhA0qPMDIb3qAjkN6hyOjyfm3EHQoM4fPyRKToM6Mwga1JlB0KDODIIGdWYQ1H8XmGbt7EPpgUD5O8KXoUkzlsqToRY7htIqQ3mVobLI0KydL6jRk6HWMeRXGQqrDMVVhiato+T8YSj53mRIqwzlVYbKKkN1laG2yNCs9/F5Q5MyQ/L5YSjUjqGwylBcZYhWGUqrDOVVhsoqQ2dkhq6hdn7N8Hq8r/W+uertz9c9U2jWW8I/dKv5+54ptz9Txy0v060g060o0y3a49bxEK1v/9lU6MutJNOtLNOtItOtKtOtJtKt5GS65WW6FWS6FWW6JTPLJ5lZPsnM8klmlk8ys3ySmeWzzCyfZWb5LDPLZ5lZPsvM8nl/lk/UcWt/lu+6tT/Ld93an+W7bu3P8j23yv4s33Vrf5bvurU/y+fv2+l2jj6eaff1keNS+kOwXxC6J3a/IHTdkikIRaYgFJmCUGQKQpEpCFWmIFSZglD3C0LXLZlZvu7P8r2yv8ps7lSZzZ0qs7lTZTZ3qszmTpPZ3GkymztNZnOnyWzuNJlZvsnM8k1mlm8ys3yTmeXbgiz/y1BybpUhv8rQgtz6P27/+vWh3v///+XNPaDsfDx2DnO+VMZcjMdj9zGG/DIh+rd0Zlvp36GZbsXPsJJSdvfXGn79/fpMW/8Oygl24iI7tMhOWmQnL7JTFtmpi+y0NXaKW2RnUT4oi/JBWZQPyqJ8UBblg7IoH5RF+aAsygdlUT6oi/JBXZQP6qJ8UBflg7ooH9RF+aAuygd1UT6oi/JBXZQP2qJ80BblgzYrH1T/sFPDq524yA4tspMW2cmL7JRFduoiO22JnTetpBPs+EV2wiI7cZEdWmQnLbKTF9kpi+zURXYW5QO/KB/4RfnAL8oHflE+8IvygV+UD/yifOAX5QO/KB/4RfkgLMoHYVE+CJPmdcn5sFPKy3VJipPstHp/H/p2+ePY43P0j+NjKK9+ZaF+FaF+VaF+NZl+kRPqlxfqVxDqVxTqF23xK7Z0fxDh19/x1a8k1K8s1K8i1K8q1K8m06/khPrlhfoVhPoVhfolNN8nofk+Cc33SWi+T0LzfRKa77PQfJ+F5vssNN9nofk+C833WWi+z0Lzfd6Tv8i1o/93+/u1/1f2rMdfHws+/IqdfmGJQv0ioX4loX5loX4VoX5VoX41mX5VJ9QvL9SvBfn+t524yA4tsjMnv2ZX6WGnvfZzJz0vytspi+zURXbaGjuTnhfl7fhFdsIiO3GRHVpkZ1E+aIvyQVuUD9qifNDW5IPs3CI7fpGdsMhOXGSHFtlJi+zkRXbKIjt1kZ1F+cAvygd+UT7wi/KBX5QP/KJ84BflA78oH/hF+cAvygd+UT4Ii/JBWJQPwqJ8EBblg7AoH4RJ68eHR5/CB/9iJ06ab8xzZzn6RXbCIjtxkZ2B+fZ7XBoclwfHlcFxdXBcGxv37vnaWMMx7nZD7nWcHxwXBsfFwXE0OC4NjsuD48rguDo4ro2NS4PzJQ3OlzQ4X9LgfEmD8yUNzpc0OF/S4HxJg/MlDc6XPDhf8uB8yYPzJQ/Olzw4X/LgfMmD8yUPzpc8OF/y4Hwpg/OlDM6XMjhfyuB8KYPzpQzOlzI4X8rgfCmD86UMzpd396+J2jGOSmLqznC7/vhzeMjh+7cwflvxS6yEJVbiEiu0xEpaYiUvsVKWWKlLrLQVVtqStd+WrP22ZO23JWu/LVn7bcnab0vWfluy9tuStd9WrP3i3BIrfomVsMRKXGKFllhJS6zkJVbKEit1iZUla98vWft+ydr3S9a+X7L2/ZK175esfb9k7fsla98vWft+ydoPS9Z+WLL2w5K1H5as/bBk7Yclaz/MWS+t3beajc7lVytthZU0ZSZHf3yqJvoYXq1MmckxxPsmWDFQ/GalQx7r/ccD+dcopijQJxLoUxLoUxboUxHoU93tU331qcnzKTuBPnmBPk3K4+749lNIifHJ5/sTP748+x96v+xKPNSutuPoXx+YejmYfLqLFj3/9O3g36zxQqx0IdZ0IdZ8IdZyIdZ6IdYmifWXR8WJ88iL82hDpRDcfdIFR68eRXEekTiPNmhjiPcneELszKMszqMizaO6IR/lI2fnVF492rDWyvFB2ZLzq0cb1lqp99ZbafXVoyTOoyzOo7LTo+o6M7vu8Oh+CV9DePVoQ31USv3gUduQj2o8okav86h5cR4FcR7FrR51VKTRDo+OtVY6M3tDzq6hfvIoi/OoiPNoUs7OD48q20l99F3DrZX6v//bSW1th0/JHz6V+F+fqnMCffICfQoCfYoCfSKBPqXNPv36vf/6lAX6VAT6VAX6tDuPd3zyu/N4z6fdebznk8A87gXmcS8wj/vdebzn0+483vNpdx7v+bQ7j/d8EliPB4H1eBBYjweBeXzOU7UxHk3tGEN+tUJLrKQlVgay5+9xZXBcHRzXxsZFNzjOD457sypSrse4QlzUcvLtfp/319/+1U5cZIcW2UmL7ORFdsoiO3WRnbbGzrudr6bb8YvsLMoHtCgf0KJ8QIvyAS3KB7QoH9CifECL8kFalA/SonyQFuWDtCgfpEX5IC3KB2lRPkiL8kFalA/SonyQF+WDvCgf5EX5IC/KB3lRPsiL8kFelA/yonyQF+WDvCgflEX5oCzKB2VRPiiL8kFZlA/KonxQFuWDsigflEX5oCzKB3VRPqiL8kFdlA/qonxQF+WDuigf1EX5oC7KB23S+gnhYed21+bVjl9kZ9J8C/nx5kWo4dXOpPkWKR92YnHM8cyeKbVlkV4VkV5VkV41gV4150R65UV6FUR6FUV6RSK9kpjbm5OY25uTmNubk5jbmxOZ273I3O5F5nYvMrd7kbndi8ztXmRu9yJzuxeZ273I3O5F5vYgMrcHkbk9iMztQWRuDyJzexCZ24PI3B5E5vYgMrcHkbk9isztUWRujyJzexSZ26PI3B5F5vYoMrdHkbk9isztUWRuJ5G5nUTmdhKZ20lkbieRuZ1E5nYSmdtJZG4nkbmdROb2JDK3J5G5PYnM7Ulkbk8ic3sSmduTyNye9uSrz98uatmJ9GrLGmS+wNTyljU49Ws2LScAhgzAUAAYKgBD089QHACD18ZQXxkCAEMEYFCn0x2GTTqt4Gs2rWQ7N2/PTbFz8/bcVDs3b89Ns3Pz7txUZ+fm7bnxdm7enpug+dz8JojqCUg9gYJK8OMX0VpVUK8xBAqqKoZAQe3z8QttrSqoUD4TNAV1BEOgQA8+flWvNQW56ONX+FpTkIs+fpGuNQW5iCFQkIs+EnjnFCSjj58RvCEouPb4+N3BG4KCS4SPHyq8ISjQhI9f7bshkH4EBVcJHIICaf74scUbggJt/vh1xhuCAnH++KnCG4ICdWYQvAJ15hA2qfPEL0zeIIIGiI+fUblBRAQIQoBICBAZAaIgQFRlENV1IBoARHAIECoUm4PQpthdCG2K3YXQpthdCATFDgiKHRAUO2hT7C6ENsXuQURtit2F0KbYXQiEa+yIcI29Z3OQ2RAIir1n6xHm87I3t4pMt6pMtxbo5G9DKzYU+TLkVxkKqwxNytt0zIXb37FxU8dluk8dl58b7fTHLZLpVpLpVpbpVpHpVpXpVhPp1qwNPWa75WW6FWS6JTPLJ5lZPsnM8klmlk8ys3ySmeWTzCyfZWb5LDPLZ5lZPsvM8llmls8ys3yWmeWzzCyfZWb5LDPLF5lZvsjM8kVmli8ys3yRmeWLzCxfZGb5IjPLF5lZvsjM8lVmlq8ys3yVmeWrzCxfZWb5KjPLV5lZvsrM8lVmlq8ys3yTmeWbzCzfZGb5JjPLN5lZvsnM8k1mlm8ys3yTmeWbyCzvncgs753ILO+dyCzvncgs753ILO+dyCzvncgs753ILO+dyCzvncws72VmeS8zy3uZWd7LzPJeZpb3MrO8l5nlvcws72VmeS8zyweZWT7IzPJBZpYPMrN8kJnlg8wsH2Rm+SAzyweZWT7IzPJRZpaPMrN8lJnlo8wsH2Vm+Sgzy0eZWT7KzPJRZpaPMrM8yczyJDPLk8wsL/PdVy/z3Vcv891XL/PdVy/z3Ve/6W3OW4f77tatQO645UW6tekVkcfmGDHk0nFrwZT/MlRWGaqrDM0qJx7HJ6qBOT499hVOwXcm2rQXMya75be4ldx904p0c/GbW69HMx/WvUEEBIiIAEEIEAkBIiNAFASIqg2idiAaAER1CBDqFLsHsV+xc3ythuoeDabj65iJSubOLbOxnp/2As9WiIQAkREgCgJERYBoABDNIUB4BIiAAIGg2NNextoKgaDYDUGxG4JiNwTFbgCKHRyAYgcHoNjBASh2cACKHRyAYgcHoNjBASh2cACKHRyAYgeHoNgeQbE9gmJ7BMX2CIo97SXJrRAIiu0RFNsjKLZHUGyPoNgBQbEDgmIHBMUOCIo97YXXrRAIih0QFDsgKHZAUOyAoNgRQbEjgmJHBMWOCIo97eXlrRAIih0RFDsiKHZEUOyIoNiEoNiEoNiEoNiEoNjTXkTfCoGg2ISg2ISg2ISg2ISg2AlBsROCYicExU4Iij3tg9pbIRAUOyEodkJQ7ISg2AlBsTOCYmcExc4Iip0RFHvax9G3QiAodkZQ7Iyg2BlBsTOCYhcExS4Iil0QFLsgKPamXcwmQyAodkFQ7IKg2AVBsQuCYlcExa4Iil0RFBthz7OAsOdZQNjzLCDseRYQ9jwLCHueBYQ9zwLCnmcBYc+zgLDnWUDY8ywg7HkWEPY8Cwh7ngWEPc8Cwp5nAWHPs4iw51lE2PMsIux5FhH2PIsOQLEjwp5nEWHPs4iw51lE2PMsIux5FhH2PIsIe57FTTttpXY/POWYvkF8uZVkurUng9R0hLzm3HFrQU74bWjFzkdfhvwqQ2GVobjKEK0yNGmNluwPQ6Vyx8fi74ff/gyvi2HW/jez3Soy3aoy3Woi3Zq1j8xst7xMt4JMt6JMt0imWzKzfJSZ5aPMLB9lZvkoM8uTzCxPMrM8yczyJDPLk8wsTzKzPMnM8iQzy5PMLE8ys3ySmeWTzCyfZGb5JDPLJ5lZPsnM8klmlk8ys3ySmeWTzCyfZWb5LDPLZ5lZPsvM8llmls978lb14e5WjR23yp4pX6kebqXacWvBlP8yFFcZolWGJpUTLT3uNLXUOobyKkNllaG6ylBbZGjWi468Ib/KUFhlKK4yRKsMrcoMdVVmqKsyQ12VGeqqzNBWZYa2KjO0VZmhrcoMbVVmaKsyQ1uVGdqqzNBWZYa2KDOQc6sM+VWGwipDcZUhWmUorTKUVxkqqwzVVYZWZQa/KjP4VZnBr8oMflVm8Ksyw6SHwbM7npz/9bfvGMqrDJVVhuoqQ22RoUmPoP+FIb/KUFhlKK4yRKsMrcoMYVVmCKsyQ1iVGcKqzBBXZYa4KjPEVZkhrsoMcVVmiKsyQ1yVGeKqzBBXZYa4KjPQqsxAqzIDrcoMtCoz0KrMQKsyA63KDLQqM9CqzECrMkNalRnSqsyQVmWGtCozpFWZIc1aR7U9DDX3amjSY1b58XL/r79zx9CkXJdqOQxlXzuGJuW63B6GCnEvxkeX6c/htz8fv35/uIcmPQo13a0q060m0q1JH72Y7paX6VaQ6VaU6RbJdCvJdEtmli8ys3yRmeWLzCxfZWb5KjPLV5lZvsrM8lVmlq8ys3yVmeWrzCxfZWb5KjPLN5lZvsnM8k1mlm8ys3yTmeWbzCzfZGb5JjPLN5lZvonM8smJzPLJiczyyYnM8smJzPLJiczyyYnM8smJzPLJiczyyYnM8snJzPJeZpb3MrO8l5nlvcws72VmeS8zy3uZWd7LzPJeZpb3MrN8kJnlg8wsH2Rm+SAzyweZWT7IzPJBZpYPMrN8kJnlg8wsH2Vm+Sgzy0eZWT7KzPJRZpaPMrN8lJnlo8wsT3vylvf3R4mjj67j1p6V+HgeOIZcOm4tWIlfhtIqQ3mVoUnzv5QnQ+3f53+V6VYT6dastz1mu+VluhVkuhVlukUy3Uoy3coy3ZKZ5ZPMLJ9kZvksM8tnmVk+y8zyWWaWzzKzfJaZ5bPMLJ9lZvksM8tnmVm+yMzyRWaWLzKzfJGZ5YvMLF9kZvkiM8sXmVm+yMzyRWaWrzKzfJWZ5avMLF9lZvkqM8tXmVm+yszyVWaWrzKzfJWZ5ZvMLN9kZvkmM8s3mVm+yczyTWaWbzKzfJOZ5ZvMLN9EZvnsRGb57ERm+exEZvnsRGb57ERm+exEZvnsRGb57ERm+exEZvnsZGZ5LzPLe5lZ3svM8l5mlvcys7yXmeW9zCzvZWZ5LzPLhz15i3nAOYc9K5F5wDmHBSvxy1BeZaisMjRp/tcQDkM1EXM85RT/HE651k5Em0i3Zr0vNdstL9OtINOtKNMt2uHWLc3nP4ff/uzk1lnvS812K8t0q8h0q8p0q4l0i5xMt7xMt4JMt6JMt2RmeZKZ5UlmlieZWZ5kZnmSmeWTzCyfZGb5JDPLJ5lZPsnM8klmlk8ys3ySmeWTzCyfZGb5LDPLZ5lZPsvM8llmls8ys3yWmeWzzCyfZWb5LDPLZ5lZvsjM8kVmli8ys3yRmeWLzCxfZGb5IjPLF5lZvsjM8kVmlq8ys3yVmeWrzCxfZWb5KjPLV5lZvsrM8lVmlq8ys3yVmeWbzCzfZGb5JjPLN5lZvsnM8k1mlm8ys3yTmeWbzCzfRGb54kRm+eJEZvniRGb54kRm+eJEZvniRGb54jZl+VYPt1rruFVkulVFuuX35C06DvcUY8etINOtPVP+dn16d+sWsI5bRaZbVaZbTaRbwcl0y8t0K8h0a0Fh82WIVhlKqwzlVYbKKkN1laFZGS2nh6HKvV1Zb7rz5/BaYqe2mPbS22S3vEy3gky3oky3SKZbZYdb5NP95+nmQ8etKtIt2rISKbj74RQ6L6sXCjLdijLdIpluJZlu5T0rsR3vEAdH39x6PTpEume5EFN4Ojr+gSgaIAodEKV1ICoCRAOASE4DRG13CPp25XeH8AgQAQEiIkAQAkRCgFCh2ByECsXmIFQoNgehQrEZiKxOsWsHQp1i9yDUKXYPQp1i9yDUKXYPQp1i9yDUKXYPYo9i3y74Dwhq/6wTFQGiAUAUhwDhESACAkREgCAEiIQAkREg1Cl2p+wo6hS7B6FOsTsQVZ1i9yDUKXYPQp1i9yDUKXYPgrZf2ZXOk/B1T+anx71m6t1rrlWmW02kW83JdGtPBo2PKU///sBACxogmNvULSJAEAJE0gDBXC60jABRECAqAkTTD1GdQ4BQodgchArF5iBUKDYHoUKxOQh1il07EOoUuwehTrF7EOoUuwehTrE7EF6dYvcg1Cl2D2KPYlPMB0Ry/6oTPiJAEAJEQoDICBAFAaIiQDQAiOAQIDwChDrF7pQdQZ1i9yDUKXYPQp1i9yDUKXYPQp1i9yDUKXYPYv81dnn9ZHON+6+au27t75d23SKZbu3vaXbd2t+l7LolcyWSzJVI+1/r6jzoVGn/i1pdt2SuxE17fWR37LqTQ+9s7VmJOR1nK+fyr9dOm/aMmAzhESACAkREgCAEiKQNonPZsWnPiMkQBQFiz1VsPp5gpFzTP6+JBgCxac+IyRAeASIgQEQECNIG0Umxm/aMmAyRESD2K3btXAdv2gWCc6vsv4TsurUgJ3wZmrRuW4iHofbUsh/lzzLdKjLdqjLdaiLdmvVO9Wy3/A63uA881VnvPc92K8p0i2S6lWS6lWW6VWS6VWW61US61ZxMt2Rm+SYzyzeZWb7JzPJNZpZvMrN8k5nlm8ws30Rm+eZEZvnmRGb55kRm+eZEZvnmRGb55kRm+eZEZvnmRGb55kRm+eZkZnkvM8t7mVney8zyXmaW9zKzvJeZ5b3MLO9lZnkvM8t7mVk+yMzyQWaWDzKzfJCZ5YPMLB9kZvkgM8sHmVk+yMzyQWaWjzKzfJSZ5aPMLB9lZvkoM8tHmVk+yszyUWaWjzKzfJSZ5UlmlieZWZ5kZnmSmeVJZpYnmVmeZGZ5kpnlSWaWJ5lZPsnM8klmlk8ys3zalOVbPdxqreMWyXQryXRrT96iEO5uUYyvbuU9KzHX+5dIfPn2xtXdrSDTrSjTLZLpVpLpVpbpVpHp1oK89WWoLTJU3CpDfpWhWdkyu4ch9hW56r3/c/jtz/A6dWZ9fXa2WyTTrbTHLQqHW5k6bmWZbhWZblWZbjWRbk17z2+yW36/W53LwBpkuhVlukXb3Sqdcqruz/Jdt/Zn+a5b+7N8161NWf7YV6LefOi41US61fZk+RCOeivETr3V9mT54OnhVqch04JMt6JMt0imW0mmW3uyfKB4uJVTx60i060q060m0K3gnJPplpfpVtjvVu24FWW6RTLdSjLdEpDle24JyPI9twRk+Z5bMrO8l5nlvcws7wVk+Z5bArJ8zy0BWb7nloAs33NLYi1/c2tT3mr5cKuVV7fCnrmVHvd8Uggdt5JMtxYE8behSa+alNuJvB9fXOL4A9H98Nuf+ZV/0qsm090KMt2KMt0imW4lmW5lmW4VmW5VmW41kW6RzCxPMrM8yczyJDPLk8wsTzKzPMnM8iQzy5PMLE8ys3zak7dSuN/zuv3ZuSBNe1ZiIne4Ra3j1oKV+GWorDJUVxlqiwzlWXVLOY4v3uV/XWjZy3QryHQrynSLZLqVZLqVZbpVZLpVZbrVRLpVZGb5IjPLF5lZvsjM8kVmli8ys3yRmeWLzCxfZGb5IjPL1z15i7s6rXtWInd1WhesxC9DZZWhusrQwPz/PXDkMfmvgX50YBgdGEcH0ujANDowjw4sowPr6MDBmeOdGx34ZuaUHB4Dq+eySUj3xwlCKM+Pncc/ZsIaM3GNmTzDjK/Hs/q+hsdLiPmPkTbHSGyHkdz+a+Tdw3yfjHwN9KMD36z/6o5W3O3v3BnYX43eHY8j3f5OvYF1dGAbHPhmk+y/GOhHB4bRgXF0II0OTKMD8+jA0ZkTRmdOGJ05cXTmxNGZE0dnThydOXF05sTRmRNHZ04cnTlxdObE0ZlDozOHRmcOjc4cGp05NDpzaHTm0OjModGZQ6Mzh0ZnThqdOWl05qTRmZNGZ04anTlpdOak0Znz5m6tz8fLzL/+Dp2B9d1AegyMbGMgHu9yB/q2G9Sf4vfNvdfZZt7ceZ1uxq8xE9aYiWvM0HwztWMmrTGT15gpPzfzNfDdun7KJDmlfw5qW2KmuDVm/BozYY2ZuMYMzTfTWQklrTGT15j5m3VN3NNiifLdq0T1kQVC7hwcc7rv2Bjz0ytYv24vvB58a2HdDw4tfj641uO1oEbM77rH795a3p89plsh9edg8k8ttfCnD1WqncR/P4nNTuI/n8Tq7CT++0n0dhL//SQGO4n/fhKjncR/P4l0hZP4hZqug5qvg4pUo7dw3+igxbYyCyDV6NtOIlKNvuskNqQafdtJRKrRt51EpBp920lEqtG3nUS6wkn8QkWq0RlUpBqdQb1Ejf6FeolK+gv1EvXuL9TgLlGVfqFeonb8Qr1EhfeFiqSr3j2ernchvsIi5WAfjl/2oYRX2L/Jwk97EN+fPQn+XU5zTwODY85SCPE+78LtJvpx9P0eevB+jpnP720EH9aYiWvM0BozaY2ZvMZMmW6muo6ZusZMW2ImuDVm/BozYY2ZuMbMmiwQ1mSBsCYLhLLGTF1jpi0xE90aM2tqgbimFohraoG4JgvEgSzwNfDNuq65HANraZx/zAOs4d37WrPN1DVm2hIz794cm23GrzET5pupHTNxjRlaYyb93MzXwHfruqbHwKevMYwGtawxU9eYaUvMvHuvb7YZv8ZMmG+msxLevWE42wytMfMX67q5jl6/e3uxPQl94+sJNqhljZm6xkz7CzOx02V7964jP/AvNPW50/sY+FYl82NgZ0PckOPoQBodmEYH5tGB7+JYHouzVXod+O7dNn5g/6yGko7dVEKp3AT1sdzJfGxPYH+6wG9e75ptJS2xkpdYKUus1CVW2s+t/B745o2YvxjoRwf2s9PNk8fAGv0/npA3rwbMtkJLrKQlVvISK2WJlfpzK18D2+DAN0+t/sVAPzowD+rRm2dxwuM2Y/6VgrkQ1Hq/hXn7s1OevnkO5qdmmr9vZXn7M3XMtBVm4pvnP6ab8WvMhDlmji8s+EalYyauMUNrzKQ1ZvIaM2WNmbrGTFtixrs1ZvwaM2uygF+TBfyaLODXZAG/Jgv4NVnAr8kCfk0WCGuyQFiTBcKaLBDmZ4FEHTO0xkxaYyavMVPWmKlrzLQlZuL8LJC/9507Rx/Xdrc7dsexKf3xyK8BD2vMrEkYcU3CiGsSRlyTMOKahBHXJIy4JmGQW2NmTRagNWUDrbl4oDUXD7Tm4oHWXDzQmosHWnPxQGsuHtKai4e05uIhrckCaU0WSGuyQFqTBdKaLPDmMY9fz6wcZij+6/MX8c1jHtPNtCVm3jwUMt2MX2MmrDET15ihNWbSGjN5jZkTskDtmKlrzLQlZopbY8avMRPWmIlrzAxkga+B79Z1fMgu0b8+Ch/fPSM120xZY6auMdOWmHn3UNVsM36NmbDGTFxjhtaYOSELdLJUzWvMlDVm6hozbYmZ5taY8WvMDGSBr4Hv1vWxBcavv2tnII0OTKMD8+jAd+sj5aeBgY0B3c/lr85KJwZ1jplyfLQ6ltYx01aYoXeP1M024+eY+Zzw6d0jdbPNxDVmaI2ZtMZMXmOmrDFT15hpS8x4t8bMCVmgdsyENWbiGjO0xkxaYyavMVPWmPmbLNBeH/8n3wYHhr+pZ1vqDPyr/hN3I+Lan+mgEOwk/vtJjHYS//0kkp3Efz+JyU7iv5/EbCfx309isZP47yexXuEkfqG2y6BGdx1UpBp902c6KCLV6NtOIlKNvu0kkp3Efz+JSDX6tpOIVKNvO4lINfq2k4hUo3/82AdFpBr9Myoh1egM6iVq9C/US1TSX6iXqHe/UOk6qJeoHb9QL1HhfaEi6SrzES1KSDmY+YgWpb/Iwsl1bm6/e2cw+fYYGBNzln59xevP4b++/XQcfdzuf/fO4E/NfP5WF717Z3C2mbLGTF1jps0x8/n7HPTuncHZZvwaM2GNmbjGDK0xk9aYyWvMlDVm6hoz87NAda9miltjxq8xE9aYiWvM0BozaY2ZvMZMWWOmrjGzJgvUNbVAXVML1DW1QF1TC9Q1tUBdUwvUNbVAXVML1DW1QF1zRdDWZIG2Jgu0NVmgrckCbU0WaANZ4Gvgu3X9+HxASPVfv+xF796MnG2mrjHTVphJ796MnG3GrzET1piJa8zQGjNpjZkTskDtmClrzNQ1ZtoSM96tMePXmAlrzAxkga+B79Z1e7z7n1361wX37l3H2WbyGjNljZm6xkxbYubde5Szzfg1ZsIaM3GNmROyQCdLhbTGTF5jpqwxU9eYaUvMRLfGzF+oe3avW9qkd+8yZP/4Ll0O9V8X3Lun/WeboTVm0hozeY2ZssZMXWOmLTHz7nnU2Wb8GjMnZIFOlqK4xgytMZPWmMlrzJQ1ZuoaM3+TBSi/6mH6i6vxTJ0Ly3c78edKj4G1dQaG0YFxdCCNDnw34x+fqr8NjGzwPu9/l949nfZTM593jEvvnk6bbaauMdPmmGGU4t3TabPN+DVmwhozcY0ZWmMmrTGT15gpa8zUNWZOyAIdeS1ujRm/xkxYYyauMUNrzKQ1Zv4iC5TOA/up/MW9qOI6FeDbJ8jKozoqvlMdvX0mjBv49ikvdqAfHRhGB8bRgUhvDzGv1KSK9B43B9uQ3sz1rroDtpVXWKR3c1lYqDfDOFik93NZWIKCLeEBW19hkd7RZWGxdJaBxdJZBhZpXxMWFusN7I+w2WFVUAwsVAXlH19N9cm/wkJVUBwsVAXFwdKVYKEqKA4WqoLiYKEqKA4WqoLyNR6wrb3CQlVQDKy/0B422UPpLAcLpbMcLJT0cLBQ0sPBQkkPBwslPQzsmxcj/A3xDuszBSWwn+/15DevZ4DCZijYj3cE8puXO0Bh65Vg24Vg37xuoxX2cyv1zUs/oLBYOsvAYuksA0tXgk1XgsWqoBhYqAqKaaVGqAqKg4WqoBhYgqqgOFioCoqDhaqgOFioCoqDJSjYz/d6CKqC4mChdJZppRKUzjKwCUpnOVgo6eFgoaSHg4WSHg4WSnoY2Ddversaj52Lbn/TN9ivgfHNwPQ0sITOQBodmEYH5tGB7c3A8jzwdb+lXNzoQD86MIwOfBfHowV/+7v5zkAaHZhGB+bRgWV0YB0d2AYH1nczpx3JxzXXWY/Vjw4MowPj6EAaHZhGB+bRgX8xc/oD689zTid718eFQ62vL07n2qaYaf6439Z8ejXT3Bozfo2ZsMZMnGPm0RVoT1sSPczQGjNpjZm8xkxZY6auMdNWmCnOrTHj15gJa8zENWZojZm0xkxeY6asMVPXmFmTBfyaLODXZAG/Jgv4NVnAz88CiTpm0hozeY2ZssZMXWOmLTET3Boz87NA/r6hWufoY+8o//RtiZT+eBTWgMc1ZtYkjLAmYYQ1CSOsSRhhTcIIaxJGXJMwol9jZk0WiGvKhrjm4iGuuXiIay4e4pqLh7jm4iGuuXigNRcPtObigdZcPNCaLEBrsgCtyQK0JgvQmixAA1nga2AbHJjc6EA/OvDN/Cv52M3fleq5U1kf7/vV8NDU/MdImmOE2mEk5RcjeYWRssJIXWGkLTDy7kGHuUb8CiNhjpF83L6qub4YiSuM0AojaYWRvMJIWWGkrjDSFhgpboURv8LIihVfVqz4smLFlxUrvqxY8WXFii8rVnxZseLrihVfV6z4umLF1zi/WmlPRl6Pvd2j/HPorY/+4s6k3BAf7uT2YiStMJJXGCkrjNQVRtoCI+8e+kq5PoxQYozkcvPkfvztVji3vdGvjxD/OfzXh4KfLuzpj1txj1v54VZuHbdIpltJpltZpltFpltVpltNolv13UN3u93ye9xK4eFW/OZW52jmE5TVBQ0Qnz8JWV1EgCAEiKQB4vO3BavLCBAFAaIiQDQACO8QIFQoNgehQrE5CBWKzUGoUGwOQp1i1w6EOsXuQahT7B6EOsXuQahT7A5EUKfYPQh1it2D2K/YpdO/CJs0uN2f8/r1camOWyTTrSTTrSzTrU1aduwV8OvTr+y6ZXpjoWqAYDoyoQFARIcA4TVAMJcLMSBARAQIQoBICBAZAUKFYnMQKhSbg1Ch2AwEqVBsDkKdYneuPkmdYvcg1Cl2D0KdYvcg1Cl2D0KdYvcg1Cl2D2K7Ymff6V/Qdg3Ooby6lbb3dHOoHbc26SS5YyZSp8GZgky3oky3SKZbSaZbWaZbRaZbVaZbTaRb2cl0S2aWzzKzfJaZ5bPMLJ9lZvksM8vnWXnr2HLj9ncKrFufX+Spxe1xi3lOv3iZbgWZbkWZbpFMt5JMt7JMt4pMt+oet6a+yFOaBgjmFnl1CBAeASJogGDu39SIAEEIEAkBIiNAFAQIFYrNQahQbAaiqVBsDkKFYnMQ6hS7czuwqVPsHoQ6xe5BqFPsHoQ6xe5BqFPsHoQ6xe5B7Ffszos8zW3S4M/vgDTnZboVZLoVZbq1SctmvsjTXNIA8bkj01xGgCgIEFUDxOfLheYaAIR3CBAeASIgQEQECBWKzUGoUGwOQoVicxAqFJuDUKfYtQOhTrE7EEGdYvcg1Cl2D0KdYvcg1Cl2D0KdYvcgtit270WeFrZrcO9Fnha293R7L/K0sEknPz/v2kIT6VZ0Mt3yMt0KMt2KMt0imW4lmW5lmW4VmW7JzPJRZpYnmVmeZGZ5kpnlSWaWn/T2e27HR65uf1fOrZqOz1XVlNyrW5Pe5/6pW8Xfb+PVEjtna9L73NPdijLdIpluFZlTftNKrPefr9n33Goi3Zr0hvJ0t7xMt4JMt6JMt0imW0mmW1mmW0WmWwKyfOy4JSDLd9wqArJ8zy0BWb7nloAs33NLQJbvuSUgy/fcEpDle27tz/LBd9zan+W7bu3P8l239mf5nlt1T5bPxzO7NafcccvLdGtPls/14Vbr3LircZNb7uFW52K/kky3kky3sky3iky3qsj+Vm0i3WpOplsyO81NZqe5yew0N5LpVpLpVpbpVpHp1v4sT6Hj1v4s/+pWdG5/lu+6tT/Ld93an+W7bu3P8l239mf5rlv7s3zXrf1ZvuvW/izfdUtilr+5JTPLe5lZ3svM8l5mlvcSa/mbWxJr+ZtbEmv5m1sSa/mbWxJr+ZtbEjs2N7ckdmyiCxI7Nje3JHZsbm5J7Njc3JKZ5YPMLB/25K3Q8t2t2126jlt78laM/u5WTLHjVhPpVnQy3fIy3Qoy3Yoy3aL9buWOW0mmW1mmW0WmWwKyfM8tAVm+4xYJyPI9twRk+Z5b+7N8po5b+7N81639Wb7r1v4s33VrU5avR9EcW+q4VWS6tSfLU7hvvFApdgob2pPlyaeHW525lZxMt7xMt4JMt6JMt/ZkeaLjcVgqruNWkulWlulWkelWlelWE+nWprc5v7nV0cRNb3OybgWZbkWZbgnI8j23BGT5nlsCsnzPLQFZvueWgCzfc0tAlu+4VWRm+SIzyxeZWb7IzPJFZpYvMmv5IrOWLzJr+SKzli8ya/kqIMv33BKQ5XtuCcjyPbdmrcQQH2497XrUP97TQXH707+6Ne0dsp+59Xj31Rffc8vLdCvIdCvKdCvvmfLtfnPFJ99Zia3IdKvKdKtJdMs7J9MtL9OtINOtKNMtkulWkumWgCwfO24JyPI9twRk+Z5bArJ8xy0vIMv33BKQ5XtuCcjyPbcEZPmeW/uzfEgdt/Zn+a5b+7N81639Wb7r1p4sn0I73Eq+41YT6VZwMt3yMt0KMt2KMt0imW4lmW5lmW4VmW4JyPLUcUtAlu+4FQVk+Z5bArJ8zy0BWb7nloAs33NLQJbvubWrlnef3dpUy9fH2cqh49amLP+o5bPrXCfGPVn+9qOHW6F13Goi3SIn061NWf6xEnPsTHkKMt2KMt0imW7tyfI5psOtXpanLNOtItOtun1updJxq4l0KzmZbu3P8l239mf5rlv7s3zuSHXan+W7biWZbmWZbhWZbm2q5T8/KOVTE+lWFvlsoM8inw30WeSzgT6LfDbQZ5LpVpLpVpbpVpHploAs37nEyAKyfMetIiDL99wSkOV7bgnI8j23BGT5nlsCsnzPLQFZvueWgCzfc0tAlu+5JTPLF5lZvsrM8lVmlq8ys3yVWctXAVm+55bMWr7KrOWrzFq+yuzYVJkdG5lvc3qZb3N6mW9zeplvc/omM8s3kVk+zHo/sR6bTN7+frpx+e4Zm8+ve4dZb9z90C32bJFMt5JMt7JMt9qeKf/5/cTgnUy3vEy3gky3oky3SKZbSaZbWaZbRaZbVaZbArL861O6IQjI8j23BGT5nlsCsnzPLQFZvueWgCzfc0tAlu+5JSDL99zan+U7bwqHsD/Ld93an+V7bsX9Wb7r1p4sz7yfGGKQ6VaU6RbJdCvJdCvLdKvIdKvKdKuJdIucTLcEZHnquCUgy/fcEpDle24JyPI9twRk+Z5bArJ8zy0BWb7n1q5a3n12a1Mt//l175A2ZfnPr3uHtCfLMy8whxRkuhVlurUpy39+UzikJNOtLNOtItOtPVmeeYE5pCbSrexkuuW3z63OK7khB5luRZlu7c/yXbf2Z/muW/uzfOeV3JD3Z/muW1WmW02kW8XJdGtTLc88KFWCTLdkPhtYSKZbMp8NLDKfDSxFpltVpltNpFvVyXRLQJbvXGJUAVm+55aALN9zS0CW77klIMv33BKQ5XtuCcjyPbcEZPmeWwKyfMetJiDL99ySmeWbzCzfZGb5JjPLN5lZvsms5ZvMWr7JrOWbyFo+OpG1fHQiOzbRiezYRJlvc0YnIMv33BLZsYky3+aMTmSWj05klo+z3uYspRxulcZ9dPzXrh1/Dv+1m8E3t16PDpHuR4eYno+OfyCCBohCB0RpHYiIAEEIEEkDxPGUWqBvC/sOkREgCgJERYBoABCz3rXdC6FCsTkIFYrNQahQbA5ChWJzEOoUu3Yg1Cl2D0KdYvcg1Cl2D0KdYncgojrF7kGoU+wexCbFzv4BkRkIH9LxjkzIzzcmQu+3XbnvnHfrzjyuA0PuHEw+3R/MJl/i88Ffpyfa6fl0eshOz6fTk+z0fDo92U7Pp9NT7PR8Oj3VTs+n09N0n57fEOQQIDwChIo6sYUDosUOhIpqjoMgBAgNldHtmDvErcfcgdBQv7AQGqoMFkJDLUDhuGdP1EuxGhSbg0gaFJuF0KDYLIQGxWYhNCg2C6FBsVkIDYrNQmhQbBZCg2KzEAiKnRAUOyModkZQ7Iyg2BlBsWft5LIXAkGxM4JiZwTFzgiKnREUuyAodkFQ7KJCJ3I8IHqt/aIhO6Vwf7jf3/zqQGjITulpC9rWg9CQnbJ/bGVIndZ+1ZCdcnpA5NSB0JCdWAgN1xMshIbrCRZCg06wEBquJ1gIDdcTt188IGpHJ6oGxc6lHhCtU3ZUDYrNQuxR7HDUpb++qvQN4rdbzcl0y8t0K8h0K8p0i2S6lWS6lWW6tUdBgneHW4FLviG4492F8G0/oj/vLrSqASLmA4I677i1ph+CnEOA8AgQQQPE8bDpLU/FDkREgCAEiIQAkREgVCg2B6FCsTkIFYrNQHgVis1BqFBsDkKbYlfXgdCm2F0IbYrdhdCm2F0IbYrdhdCm2F0IbYrdhdCm2D2IoE2xuxDaFLsLgaDYAeEae9MuV5MhEK6xA8I1dkC4xg4I19gB4Ro7IlxjR4Rr7IjQFY8Iir1px6jJEAiKHREUe9MeSeH4+V+fkvwG8eVWlelWE+nWpl1+WLc2Kd8x5X99jJpZIJ+O/oIICBARAYLkQ3CP3NCmfXt+CME8I7Fp357JEAUBoiJANACITfv2TIZQoNhsSZsUKDYPoUCxeQgVis1BqFBsDkKFYnMQKhSbg1Ch2ByECsVmILIKxeYgtCl271Zq1qbYXQhtit2F0KbYXQhtit2F0KbYXQhtit2F0KbYXQhtit2DKNoUuwuBoNgF4Rq7IFxjb9pBaTIEwjV2QbjGLgjX2AXhGrsgXGNXhGvsitAVrwiKXREUe9NeVpMhEBS7Iih2FafYX26J0+Avt8Sp6m+3mjid/HJLxV7kn7dnpU37Lf0Qoj4gOt/7oqZiL3IOQsVe5ByEir3IOQgVe5FzECr2Iv8MkZyKvcg5CBV7kT8gbme9A6Fht9/kHtt4e+pAaFBsFkKDYrMQGhSbhdCg2CyEiv35OQgV+/NzEDoUO3yE8DoUm4HQodgMhIrvfXEQKq6xOQgNis1C6LjGZiB0XGMzECqusUv6DKHiGpuDUKHYDERQodgchArF5iBUKDYHoeIam/wBQbkDoUGxWQgV19gchIprbA5CxTV2fHQAqXQgVFxjcxAaFJuDiBoUm4XQoNgshIquOAehQrE5CBWK/QSROrVTVKHY8XF52vlWaooqFJuD0KHYDIQOxWYgdCj2ZwjSodgMhA7FZiB0KDYDoUKxP39TO23asWoyhArF5iBUKDYHAfCd+UQqFJuDUKHYDERSodgchArF5iAm6URuTxDEQ9TygAgMRIh0PzrcmkxPR8c/EEkDRKEDorQOREaAKAgQVQNEPXb7JO87EA0AYtY+SXshPAJEQICICBAqFJuDUKHYHIQKxeYgVCg2B6FOsWsHQp1idyCKOsXuQahT7B6EOsXuQahT7B6EOsXuQWxS7B91Ox4vlfvwn/exO7/tyv2GcXT1cR3468s2LwfT7Z7yn4PJP+2FcDv46/RkOz2fTk+x0/Pp9FQ7PZ9OT7PT8+H0VGen59Pp8XZ6Pp2eoPv0fEFEBAhCgFBRJ7bjEZDQ21SiqqjmOAgVNRcHoaEyuh1zh4jBdSA01C8cRNNQZbAQGmoBCvcf90SdFNs0KDYLoUGxWQgNis1CaFBsFkKDYrMQGhSbhdCg2CyEBsVmILLToNgsBIBiZweg2NkBKHZ2AIqdHYBiZweg2NkBKHZ2AIqdHYJiewTF9giK7REU2yMo9qz93fZCqNCJz7vZ56AhOzEvvOSgITul42Ecf7ue7kBoyE7ZH3tZZYodCA3ZKacHRE4dCA3ZiYXQcD3BQmi4nmAhNOgEC6HheoKF0HA9kcuhE7l2dCJqUOxc6gHROmVH1KDYLMQexQ5HXRpD/P4M8P/Z3hnsyI4z2fldvPaCZAQZ5MP8i7HhxQDG2LDHBoxBv7tVf96UsjqjFJ1qSjzBq1XXRYsZ36Gkc0RKoh5YhInFmFgZE6tgYgkmVsXEapBYPCZBUgwrVrLMN6WwvruQvq2aS79ERA8iqKwiOCoi0gwiaAYRPIOI7EHE/gdIC5cZRMgMIuoMItoEIrKLxLZEuEhsS4SLxLZEuEhsS4SLxLZEeEvsGhQR3hJbFeEtsVUR3hJbFeEtsTURxVtiqyK8JbYqwltiqyK8JbYqwltiqyJmSOwywxi7zDDGLjOMscsMY2yZYYwtM4yxZYYxtswwxh60ylVnETPMissMiS0zJLbMkNgyQ2IPWiMprT9PSeSbiAdWxMRKmFiEiTUo+dZDfiEU4wTZ2/ohIs8goswgQvBFmI/cDFq350MRxjMSg9bt6Sti0Lo9nUXEGUSkGUTQDCIcJLZ5SdscJLYtwkFi2yJcJLYlwkViWyJcJPa+CAkuEtsS4SKxLREuEtsS4SKxLRHeElu5lSrBW2KrIrwltirCW2KrIrwltirCW2JrIqK3xFZFeEtsVYS3xFZFeEtsVcQMiR0nGGNLnGCMLXGCMbbECcbYEmcYY6cZxthphjF2mmGMnWYYYw9ay6qziBkSO82Q2GmGxE4zJHaaIbEJLrEfWHAZ/MCCS9UHFlxOPrBcrEW+vzyrkIs1ZusmQvnel5CLtcgtES7WIjdEsIu1yC0RLtYit0S4WIvcEuFiLXJLBPsSkUNQRHhY7TeHbRnvqIQde0hsU4SHxDZFeEhsU4SHxLZEZBfr81siXKzPb4nwkdhpX4SPxDZE+EhsQ4SL731ZIlyMsS0RPsbYhggfY2xDhI8x9r6I4mKMLXlfhIsxtiXCRWJbIlwktiXCRWJbIlwktiXCxRib4yqCiyLCxRjbEuFijG2JcDHGNkSIizE2bTOALIoIF2NsS4SHxDZFeEhsU4SHxDZFuJgVt0S4SGxLhIvEfhGRlWsncZHYtA1PlW+lirhIbENE9ZHYhggfiW2I8JHYhggfiW2I8JHYhggfiW2IcJHY+9/UluoisS0RLhLbEuEisQ0RbYLvzEtzkdiWCBeJbYlwkdiWCBeJbYnolBPb49xff5dv2z8KdfJyWtegXf4mNrZPxM/OTZTTi/5frzD0Wp3oUyzhFUvaG1bttd5Qb6yIiZXGYNV1wU2OUcEiTCzGxMqYWAUTSzCxKiZWg8SKARMrYmIBuHxVsABcXsMCcHkNC8DlNSwAl9ewAFxewwJweQ2rk8un9W2dL6xqbB/LU0SU7+8nKYO3IM+fplC3K9mvj2m8bczLbaxfG/PrTy8b/1Nur/VSvMiNv5fc9HvJpd9LLv9ecvPvJbdgyX1ACSJURYQach2RwnPrFN6fXqkUEKEiItSQ5EzrXeVEyjFFhAjFiFBDsiK3p6MXCgpUQYQSRKiKCNUAoTggQkVEqIQIRYhQjAiF6OiM6OiM6OiM6OiM6OgZ0dEzoqNnREfPiI6eER09Izp6RnT0jOjoGdHRM6KjF0RHL4iOXhAdvSA6ekF09ILo6AXR0QuioxdERy+Iji6Iji6Iji6Iji6Iji6Iji6Iji6Iji5DfKqs95BLfn/lvtYhZ5/E5yNWUooCNeTsk/p8h0NaVaAYESojQpWxUDVoB7qMgSpPqJQUqCHXUyJ1F2qITy23GZ9QrBxTLSBCRUSoNBhKi5lGY6DWs0+UA70NcfSa6i5URoQqiFC9nlrnukFVMrZPKayPh6dvayf+ejy82xuoH2Ktx3pKrLzW0u0N1K5YrdsbqJ2xIiZWGoO1/4G21u0N1M5YjImVMbEKJpZgYlVMrAaJFQMmVsTEGu/yNShY411exRrv8irWeJdXsca7vIo13uVVrPEur2KNd3kNK413eRVrvMurWJgunzCv5dN4l1exMK/lE+a1fMK8lk+Y1/IJ81qeMK/lCfNanjBnbAjT5QnT5QnT5QnT5QnT5Xu9MZjzhpXLd6xHoXZRoV5v9tmF4lWF0gmFJCqFeq0gvj7IsvydWClUriokVxWqVxXqdR7VbeHbEs1FG+r2EfVa35d/ar3evvoQq62LWC1/ZgUrYmIlTCzCxOIxWGn9HGD79l2eJ1bGxCqYWIKJVTGxGiRWCZhYERMrYWIRJhamyxdMly+YLl8wXb5gunzBdHnBdHnBdHnBdHnBdHnBdHkZ7/KZFazxLq9ijXd5FWu8y6tY411ew6rjXV7FGu/yKtZ4ly/fH31WtpZ147p5XM6/FIwPBLVjxweCioUZCBUzECpmIFTMQKiYgdAwA6FhBkIbHwgqFqbLt/Eur132N8zJnYY5udMwJ3ca5uROQ5zc4RAQJ3cWLMTJnQULcXJnwUKc3FmwEF1+wUJ0+QUL0eUXLESXX7AQXZ5DvMBOH4XiVYXSVYXoqkJD1mnYXWJqgRqy8k6R56v0pRYFqiJCNUCoMd//s6AiIlRChCJEKB4M1bICNWTlndLWpfBCU6AKIpQgQlVEqAYINeYbbxZURIQa5Oh5F2qMo6+/rkMxIlRGhBqzOua6spRwUqAEEaoiQjVAqDHfeJN1fT5hUqAiIlRChCJEKEaEyohQBRFKBkNlzafGOHpal6suymB0zDfedpdA5zDmG28WVESEwlvBfoEiRChGhOrkUzHyChXT27vlS6F6VaF2UaFe76jZheiqQp2SNNL2bnmUoBSSqwrVqwq1iwr1egskSnwpVJRCdFUhvqpQvqpQr/No/VLE13INltMn4ueFVqJvl3+/biH3epviUyzhFUuaglUxsRokVq+3KT7Fquuy+xyjghUxsRImFmFiMSZWxsQqmFiCiVUxsRokVgNw+apgAbi8hgXg8hoWgMtrWAAur2EBuLyGBeDyGlav+eWwzQm8fk9pHcv0eunBLtSuKRR7vZhgF4pXFUpXFaKrCp3gUXqhXq6zM2/zvr2xyuGCVYZg7S+Qt2AJJlbFxGqQWL3eJPgUa/8Fh9jrvYPeWAkTizCxGBMrY2IVTCzBxKqYWA0SK2G6fMJ0+YTp8gnT5ROmyydMl0+YLp8wXT5hunzCdHnCdHka7/Lvi8Ms/xnv8irWeJdXsca7vIo13uVVrPEur2KNd3kVa7zL/61VDpcW4wNB61geHwgqFmYgMGYgMGYgMGYgMGYgMGYgMGYg8PhAULEwXT5jXvZnzMmdjDm5kzEnd/J4l1exMCd3MubkTsac3MmYkzsZc3KnYLp8wXT5gunyBdPlC6bLlwtc/lGoXFVIrip00atusdPnkbKU9TWqLNXanlp4vt1ELb6+3cS/sBImFmFiMSZWxsQqmFiCiVUxsdoQrNryihXKN6z3ra13OGOn1/9OFrH/DmOscQYRaQYR5EHE/stSsdNri4NF5BlElBlEyAwi6gwiXCS2IaK5SGxLhIvEtkS4SGxLhLvEVl5v6vQK6mAR7hJbE+EusTUR7hJbE+EusTUR7hL7XUQK4xM7vc9fpDBo3pXqivVtyv6JlTCxCBOLMbEGzbumsmKRmOft/txYCsWDiP0ZmRRkBhF1BhHNg4j94UKKYQYRcQYRaQYRNIMInkGEi8S2RLhIbEuEi8S2RLhIbEuEu8RWRp/JXWJrItwltibCXWJrItwltibCXWJrItwltiZifGJnZf4ijc/gl0clN6zxc7oSFaxBs7S8TkLVXK0jcRl/P4/E15X71iORggcR64fjFg9TrlgoziAizSCCZhDBHkTkuIoQUkTkGUSUGUTIDCLqDCJcJLYhgl0ktiXCRWJbIlwktiXCRWJbIrwldg2KCG+JrYrwltiqCG+JrYrwltiqCG+JrYnI3hJbFeEtsVUR3hJbFeEtsVURMyR2nmGMnWcYY+cZxth5hjF2nmGMXWYYY5cZxthlhjF2mWGM3Wmtm8EiZkjsMkNilxkSu8yQ2GWGxBa4xH5gwWXwAwsuVR9YcDn5wOrkt7xtn7kmY/tc1q8u5tKagiWYWBUTq0Fi9VqJqDdWHINVaMWSv/0mW6+1hc4VYbw/1WttobEieAYR2YMI4+H+WmYQITOIqDOIaBOIaGEGES4S2xLhIrEtES4S2xLhIrEtEe4SW3lXpLlLbE2Eu8TWRLhLbE2Eu8R+F0HBXWJrItwltiZiTGILPd/NWib7wh9/nr+gMCaDJfKKRcHqW+PdLArsQcT+yzQU8gwiygwiZAYR1YOI/ZtVFNoEImKYQUScQUSaQYSLxLZEuEhsS4SLxLZEuEhsS4SLxLZEeEts5Ulvit4SWxORvCW2KsJbYqsivCW2KsJbYqsivCW2KsJbYqsivCW2KsJbYqsiZkjsNMMYm2YYY9MMY2yaYYxNM4yxe63ONFbEDGNsmmGMTTOMsWmGWXGaIbF5hsTmGRKbZ0hsHpTYbX09oKb3N2Ko13pLvbEGpWqTFYuKglUwscYkXy0bliQFq2JiNUisHDCxxiRIXV/hyLWZ5mu8P0Q5eRCx/9YKZZpBBM8gInsQsf9INeUygwiZQUSdQUSbQEQJM4hwkdiWCBeJbYlwkdiWCBeJbYlwl9jKE/rFXWJrItwltibCXWJrItwltiJC3CW2JsJdYmsihid2C+/rn5AMz2Ada3iq6ljDc1LHGpR8OawnSCnGCbK39UOEzCCiziCi4Ysw358atN5UZxFxBhHJgwjj/uSg1ak6i+AZRGRnIrSHNquDxLZFOEhsW4SDxLZFuEhsQ0RzkdiWCBeJbYnwltiqCG+JrYrwltiqiBkSu3lLbO3aqXlLbFWEt8RWRXhLbEUEB2+JrYrwltiqiAnG2BwmGGNz8JbYqghvia2KmCCxOUyQ2BwmSGwOMyR2nCGxI1xiP7DgMviBBZeqDyy4nHxg9fLb2DYsasb2FOvzCX2KLVkniPE8P3dbiehUEftPkXO3lYhGiui2EtFQEdGDiP1HHLnbSkRDRdAMIngGEXkGEWUGES4S2xLhIrEtES4S2xBBLhLbEuEusasiwl1iayLcJbYmwl1iayLcJbYmwl1iayLcJbYmYlBir1/8XURYM2lxm0mLqbx+eCNpvx3k+cEUCnUjSUXZmGN+fphkmTOh140f3dPu7tnpHg539+x1T7y7Z6970t09e91Dd/fsdQ/f3bPXPdl39zxElBlEyAwiXFwntrSKaKSIcHE1Z4jILq65LBEeroxo/fFIKSgiPFy/mCI8XGWYIjxcCyxT/E8RixUpIjwktinCQ2KbIjwktinCQ2KbIjwktiWieEhsU4SHxDZFeEhsU4SHxDZFzJDYZYbELjMkdpkhscsMiV1mSGyZIbFlhsSWGRJbZkjsbmuZDRUxQ2LLDIktMyR2dZEThVYR2tR+9eBOOT0f7o8LlyLCgzvl9WGcmJsmwoM7lfi87xgLK1P71YM7lbyJKFkR4cGdTBEexhOmCA/jCUtE85ATpggP4wlThIfxRJE1J0pVcqJ5SOwidRXRlMuObmtCDRUxJrHTel1Kid4/58WtYGIJJlbFxGqIWDkETKyIiZUwscYkSIphxUr2AhphfXchxVfzpV8i2IOI/WWlc8gziCgziJAZRFQPIvZXxsmhTSAihhlExBlEpBlEuEhsS4SLxLZEuEhsS4SLxLZEuEhsS4S3xK5BEeEtsTURyVtiqyK8JbYqwltiqyK8JbYqwltiqyK8JbYqwltiqyK8JbYqYobETjOMsWmGMTbNMMamGcbYNMMYe9AqV51FzDDGphnG2DTDGJtmmBWnGRKbZ0hsniGxeYbEHrRGUlp/npLINxEPLMbEyphYBRNrUPKth/xCKMYJYn0IIg9at6eziDaBiEHr9nwkwnzkZtC6PR+KMJ6RGLRuT2cRNIMInkFEnkFEmUGEg8Q2L2mzg8S2RThIbFNEcZHYlggXiW2JcJHYlggXiW2JcJHYlggXiW2JcJHYlghvia3dSi3eElsV4S2xNRHiLbFVEd4SWxXhLbFVEd4SWxXhLbFVEd4SWxXhLbFVETMktswwxpYZxth1hjF2nWGMXWcYY9cZxtiD1rLqLGKGMXadYYxdZ5gVrzMkdp0hsdsMid1mSOw2Q2I3uMR+YMFl8AMLLlUfWHA5+cBysRb5/vKsJbhYY7ZuIpTvfZXgYi1yS4SLtcgtES7WIrdE8AwiXKxFbolwsRa5JcLFWuSbiByCIsLDar85bMt4Ry3sPCS2JSJ6SGxThIfENkV4SGxThIv1+S0RHhLbFOEjsdO+CB+JbYjwkdiGCBff+7JEuBhjGyKSjzG2IcLHGNsQ4WOMbYhwMcaWvC/CQ2KbIlwktiXCRWJbIlwktiXCRWJbIlyMsTmuIri8iyAXY2xLhIsxtiXCxRjbEuFijE3bDCCLIsJDYpsiPCS2KcJDYpsiPCS2KcLFrLglwkViGyLYRWK/iMjKtRO7SGzahqfKt1ILu0hsS4SPxDZE+EhsQ4SPxDZE+EhsQ4SPxDZE+EhsQ4SLxN7/pnbJLhLbEuEisS0RLhLbEjHBd+bLoBWrOotwkdiWCBeJbYlwkdiGiF7rJBGXVQRJsERsaxVSyvkFi9Rfz+tvK4PTXqsknSpB1t+uyhRmrzWSRkog/xLYv4TsX0LxL0H8S6iuJLSsSGgOJLTnxhLauwTxkM6GBA/pbEjwkM6GBA/pbEjwkM6GBA/pbEjwkM6GBA/pbEjwkM6GBP/pXP2nc/WfztV/Olf/6dxr3aOREvync/WfztV/Olf/6Vz9p3Pzn87Nfzo3/+nc/KdzrxWRRkrwn87Nfzo3/+nc/Kdzc5/OEtynswT36SzBfTpLcJ/OEtynswT36SzBfTpLcJ/OEtynswT/6Rz9p3P0n87RfzpH/+nca/WrkRJcPBWWdyV4SOeVRZfgIZ0NCR7S2ZDgIJ1l/VaycHqXkByksyXBQTpbEhyksyXBQTpLWk9nJkWCg3S2JDhIZ0uCg3S2JDhIZ0uCg3S2JHhI530J5CGdNwlZyQXykM5JnhJKUSR4SOf1xT9dgod0NiR4SGdDgod0NiR4SGdDgod03pfAQ3Ihtfb0SQqhfJPwwBrj9aHwiiXR6NlE/BSR6FtgPUUkDyKEVxHSFBE0gwieQUT2IKI+7SZxjIqIMoMImUFEnUFEm0BEDjOIcJHYlggXiW2JcJHYlggXiW2JcJfYVRHhLrE1Ee4SWxPhLrE1Ee4SWxFR3CW2JsJdYmsiBiU2bfMXYk3BxBJ+bRzl+9S89stC6y/XbRSYirIxx3UNMn796WXjR+fQ3Tk/dw7fnfNz5+S7c37unHJ3zs+dI3fn/Nw59e6cnzunee6cf0oYtDJaVwnRvwQH14QpPE+cFFiR4ODKzZLA/iU4uApK63cDEmnngoNrFUuCgysKS4KD3M9tXc+agiLBQTobEqqDdLYkOEhnS4KDdLYkOEhnS4KDdLYkOEhnS4KDdLYkOEhnS4L/dK7+07n5T+fmP52b/3Ru/tN50MpoXSX4T+fmP52b/3Ru/tO5uU/nGtyncw3u07kG9+lcg/t0rsF9OtfgPp1rcJ/ONbhP5xrcp3MN/tM5+k/n6D+do/90jv7TedDKaF0l+E/n6D+do/90jv7TOfpP5+QgF/a/Zl2TA0faX+mgJgeOtNxNe0poVZHgwJEsCQ4cyZLgwJE2Ccsg810CORgvLDfHnxJSUiQ4GC+I1F0JDnKhrhtXVs4FcjBesCSwfwkO0vlFgnaBQQ7Sua7rllbRTmcH6VzXJfZ0CQ7S2ZLgIJ0NCTwondvzrQqK356GVx943hYhSyl+3/ohInoQsZ7RKXFURKQZRNAMIngGEdmDiBxXEd/ernqKKDOIkBlE1BlEtAlEZBeJbYlwkdiWCBeJbYlwkdiWCBeJbYnwltg1KCK8JbYqwltiqyK8JbYqwltiayKKt8RWRXhLbFWEt8RWRXhLbFWEt8RWRcyQ2GWGMXaZYYxdZhhjlxnG2DLDGFtmGGPLDGNsmWGMPWqNpb4iZpgVlxkSW2ZIbJkhsWWGxK4zJPagFZcirQtrRqoKVsLEIkwsxsTKmFhjsizydt6yWOet8fG1Omhdog9F7H/yqw5amaiziDaBiEGrE30oYv97NHXQ+kSdRaQZRNAMIngGEXkGES4S2xLhIrEtES4S2xLhIrH3RbTgLrGrIsJdYmsi3CW2JsJdYmsi3CW2JsJdYmsi3CW2JmJ8YuemYA3K4JS3aZVk9a3xrkAbtCrRhyL2J0/boHWJOouIM4hIM4igGUTwDCLyDCLKDCJkBhEuEtsS4S2xlScPW/KW2KoIb4mtivCW2KoIb4mtivCW2KoIb4mtivCW2KoIb4mtivCW2KqIGRKbZhhj0wxjbJphjE0zjLEHrenVWcQMY2yaYYxNM4yxaYYxNs0wK84zJDbPkNg8Q2LzDIk9aH2vziIcrAC5v9B3YwcrQBZZf7sWRYKDFSANCdnB+syWBAfrM1sSPKzbb0hwsD6zJYH9S3CwPvOLhJYVCQ7WZy5t/QBEaIoED+lsSPCQzoYED+m8L6F4SGdDgod0NiR4SGdDgot0zrsSPKTzyqJL8JDOhgQP6WxI8PBto/WZXeGkSPDwbSNDgodvG+1LEA/fNjIkePi20foNC2FSJDhIZ0uCg3S2JDhIZ0uChy8PGhI8fHnQkOAhnQ0JHtJ5k5C1XPCQzmn9eKLyFc5WPaTz7odEW/WQzoYED+lsSPCQzoYED+lsSHD/XeDWa2WfxG2VkPJ3CY9CnY7YVLY7uKkmpRBfVShfVahcVahTwqZKL4Xqnwvl0Gt1CrtQvKpQuqpQr/NoXSfy629re2PBuQWLx2DtLly2YGVMrIKJJWOwdteyWbAqJlaDxOq16kBvrIiJlTCxCBOLMbEyJlbBxAJw+apgAbi8hgXg8gpWAnB5DQvA5TUsAJfXsABcXsPq5PIU4jat8fKV9HUs0+2tbLNQuaqQXFWoXlWoXVSo25u8ZqETPEov1Mt1duZt3rePdZ1CWP5UTm+iIVgtPrtr+TMrWIyJlTGxCiaWjMFaX2SK7U8LOz6wKiZWg8Tq9YZmb6yIiZUwsQgTizGxMiZWwcTCdHnGdHnGdPmM6fIZ0+UzpstnTJfPmC6fMV0+Y7p8xnT5PN7lMytY411ewyrjXV7FGu/yKtZ4l1exxru8ijXe5VWs8S5fvt92U7Ze3yuMdfO4nH8pGB8IaseODwQVCzMQCmYgCGYgCGYgCGYgCGYgCGYgyPhAULEwXV4wL/sFc3JHMCd3KubkTsWc3KmYkzsVc3Knjnd5FQtzcqdiTu5UTJevmC5fMV2+Ybp8w3T5doHLPwrRVYX4qkL5qkI/nP+8vV643H20ClEKz80p5e+PqWhYO2vCLkhtANLeioo5/vT63EikiIeU8JAID4nxkDIeUhmK9L4m6YIkA5D2VvRbkCoeUoNDigEPKeIhJTwkwkNiPKSMh1TwkPDcO+K5d8Rz74Tn3gnPvROeeyc890547p3w3DvhuXfCc++E594Jz70Jz70Jz70Jz70Jz70Jz70Jz70Jz70Jz70Jz70Jz70Zz70Zz70Zz70Zz70Zz70Zz70Zz70Zz70Zz70Zz70znntnPPfOeO6dh9y1zLtII9x77xM+C1LGQyp4SAPce/d7MwtSxUNqcEgl4CENcO/dz2wsSAkPifCQGA8p4yEVPCTBQ6pDkbLmSyPce+/DMznKCPfe+/LEghTxkBIeEuEhMR5SxkPq4kupte1bL6F8Q3qU6eM1ofBaRqyX162PQcQaRkDtf9wg1ogIlRChaATU/qrlsTIiVEaEKohQgghVEaEaIFQLiFARESohQg139KpADXd0DWq4o2tQwx1dgxru6BrUcEfXoIY7+jtU6vQO4UffolwmkX9tvIxrvw2ZtF8WWn+5blepqSgbc1zf4eTXn142foiNv5PY9DuJpd9JLP9OYvPvJLb8TmIFSewDqeIhNTikOOCaYXH453VMYAUp4iElPKQBKZkorbOM2rHEeEgZD2lALuS2rodCQUESPKSKh9TgkFLAQ4p4SAkPifCQGA8p4yHhuXfCc++E594Jz70Jz70Jz70Jz70Jz70Jz70Jz70Jz70Jz70Jz70Jz70Zz70Zz70Zz70Zz70Zz70Zz70Zz70Zz70Zz70Zz70znntnPPfOeO6d8dw747l3xnPvjOfeGc+9ywBf2l8tPZUBZ9z+mxipDDjjpK6vY7WqIGU8pIKHJCORatAO7zoC6fkWdE1JQRpwvSRS95BkgC/VdePKyrEkEQ8p4SHRUCQtUIRHIK1nnGiH9wD3rusrxzpSwUMSPKRO7t2eT0lRDGwgpe2l0uV29/v3FlOvNzg/g1qP8OVW7vsLI6nXG5x9oSIiVEKEohFQOa5Q354efEIxIlRGhCqIUIIIVRGhGiBUC4hQEREqIUKNdvQaFKjRjq5CjXZ0FWq0o6tQox1dhRrt6CrUaEdXoCiMdnQVarSjq1CjHV2FAnR0CoDX6BQAr9EpAF6jUwC8RqcAeI1OAfAanSLgNTpFwGt0ioDX6BQBZ10oIjp6RHT0iOjoEdHRI6Kjd3rjLtL6onuk93VTqNNbdGaZeE2ZdE0ZuqZMH6+LvB2XLNZxaSyGSZ3eS/sQan+JR+r0ZlpnKEGEqiOg9tdzo07vp/WF6vSGWmeoiAiVEKEIEYoRoTIiVEGEEkSo4Y6uXLrQcEdXoHi4o2tQwx1dgxru6BrUcEfXoIY7ugbV39Gzci3Z6Z20mPI2DErmuHn/WSHq9Fbah1DGYL7Te2mdoRogVKd30zpDRUSohAhFiFCMCJURoQoi1GhH1+4s59GOrkKNdnQNqox2dBVqtKOrUKMdXYUa7egq1GhHV6FGO7oKNdrRVShERy+I1+gF8RpdEK/RBfEaXRCv0QXxGl1GO7oKhXiNLojX6II46yKIji6Ijl4RHb0iOnpFdPQ64A3u/YVTqA54g7vIc2q41KIgCR5SxUNqcEgt4CFFPKSEh0RDkVpWkHgAUnv+toSmIGU8pIKHJHhIFQ+poSHxiC8zWkhD3DvvIo1w71J3kQgPifGQRqx9tz4DIZwUpIKHJHhIFQ9pxNp36xpTwvSONOIbeRZSxENKeEiEh8R4SBkPqQxFyoovjfhGnqR1MVVlFVwe8Y28/YV5ecQ38gykEd/Is5AiHlLCQ4Jbd5p/enMs0joRHKJUAymXyE+v+fq7fdv+n4V+esfp00JEcS1EJEqhdFUhuqoQX1UoX1WoXFVIrirU6TyiGLZCSYztY63Pl42XP9/fGeCf3tg5Gautmy9/5nesn97ZGY0VMbESJhaNwVpvssb2p5dqHliMiZUxsQomlmBiVUysBomVAyZWxMRKmFiYLp8xXT5junzGdPmM6fIZ0+UzpssXTJcvmC5fMF2+YLp8Ge/ymRWs8S6vYo13eRVrvMurWONdXsUa7/Ialox3eRVrvMuX78tVKFuvzwjFuv1yzr8UjA8EtWPHB4KKhRkIghkIghkIghkIghkIghkIFTMQ6vhAULEwXb5iXvZXzMmdijm5UzEndyrm5E7FnNypmJM7DXNyp2FO7jTMyZ2G6fIN0+Ubpss3TJdvmC7fLnD5R6F2TaEcwlWF4lWFOh3RsW6FlgNDKdRpH6WY10KJlEIxXFUoXlUoXVWok+um9esbX39XpVC5qpBcVaheVahdVCj1Oo94e2ozsWJBKV5VKF1ViK4qxFcVylcVKlcVkqsK1asKtYsK0RnOkINSKF5VKF1ViK4qxFcVylcVKlcVkqsK9XKG/BLluSmF2kWFer1SYBeKVxVKVxWiqwrxVYXyVYXKVYXkqkJnOENRRnzcLiqUw1WF4lWF0lWF6KpCfFWhM64Z1EK9nGFn5kSZGDVeCMy9Hrn+EMt4lyz3euS6N1aDxCoBEyuOwdq/F5BLwsQiTCzGxMqYWAUTSzCxKiZWg8SSgImF6fKC6fKC6fKC6fKC6fKC6fKC6fKC6fKC6fIV0+UrpsvX8S6vPEed63iXV7HGu7yKNd7lVazxLq9ijXd5FWu8y6tY413+770QmNv4QNA6to0PBBULMxAaZiA0zEBomIHQMAOhYQZCwwyENj4QFKwSIF2+BMjL/hIgJ3dKgJzcKWG8y6tYkJM7JUBO7pQAOblTAuTkTgmQkzslQk7ulIjp8hHT5SOmy0dMl4+YLh8vcPlHIbmqUL2q0EWvz5VOL8ksI5HthcAQzO05xvVZruXvpoARKhijgmVUsIIKJqhgFRSMBp2VtH3qZPlbAxNUsIoK1gaB1e0Yo/r+vlnp9FbJCWARFSyhghEqGKOCZVSwQSFOLWxgjRUwQQWrqGANFCwHVLCICpZQwQgVjFHBMioYgPNzIAUMwPl1MADn18EAnF8FKwDOr4MBOL8OBuD8OhjANb8ONsr5JW0G+6fff4BlVLCCCiaoYBUVrIGCSUAFi6hgCRWMUMFQnV9QnV9QnV9QnV9QnV9Qnb8OOitjfrnJlZV74hV1V1bUXdlQQ7yhhnhDPfhbRgUb9RRB5Q2sBQVMUMEqKljDBJMQUMEiKlhCBRv1/FhbV0PjFFgBY1SwjApWUMEEFayigjVQsAjg/DrYIOdPQTawGBWwhApGqGCMCpZRwQoqmKCCVVSwBgqWAioYgvMn5dI6ITi/Cobg/CoYgvOrYAjOr4IhOL8KhuD8KhjAbI8ONuqaf13y5wtSMVgKqGARFSyhghEqGKOCZVSwggomqGAVFQzV+RnV+Ue9Ypa4bSGeSQFLqGCECsYAYCWb25dtZrSWdetUlI2p5OdFKJWXn05Z2zjJ85cpNdrfuK4P79aXVxD03w3b74ba9omXW8nP3l5OPnrd+LGT8r2T8HdSuXcS/k6Seyfh76R67yT8ndTunQS/k0a9qnzvpE92EsJoyv1OenQlwvhvkq5EGLFO0pV8d+Vf7sqWyq9tG7UrXfgeYzvYSfcY28FOusfYDnbSPcZ2sJPuMTb+Tir3GNvBTrrH2B120qMr7zF2t668x9jdupLvruzVlfdIuFtX3uPVbl15jyq7deU99uvWlfcIrVdXyn1d+de7Mob4fJ8hhkTvnXln+AedmdZfjknSe2cipLiyPI8IQiaqYAgJo4Ih+LUGVhFmkVQwhJkTFYxvi+uWF/XOi46deV9ff9KZq8oYmrx35n2F3a8z232vomNn3vcUOnbmPfr7pDPXhTuXzqzvnXnfV+jYmXx3Zr/OvK8zO3bmfXehY2fe9xc6duY9AurYmfcI6IPOXCZzn50Zc/xzZ9Zwj4A6duY9AurYmfcIqGNn3iOgjp3Jd2f268x7BNSxM+8R0CedWWntzNbeO/MeAfXrzHhfZ3Z7AKPG+zqzY2fe15kdO5PvzuzXmfelUcfOvC+NOnbmfWnUrzN7fcpAyvNx4vz1xOG37R+FOl02VFo/+pcrk1IoXVWIrirEVxXKVxUqVxWSqwrVqwq1iwr1WureLtTLGThvhbIohdJVheiqQnxVoXxVoXJVIbmqUL2qULuoUK+l0O1CvZwhpK0QBWv7QnG7MlyuthSwhApGqGCMCpZRwQoqmKCCVVSwBgrWa0naD8Go5XX75W/lmjBHVLCECkaoYIwKllHBCiqYoIJVVLAGClZQnb+gOn9Bdf6C6vwF1fkLqvMXVOcvqM5fUJ2/oDq/oDq/oDq/oDq/jPExDm2d0l/+TgrYmLOSaX154+tv5S6kNFCwGlDBIipYQgUjVDBGBcuoYAUVTFDBLnD+R6F2UaEWrirUyWmlrQ8efb2vqBRKVxWiqwrxVYXyVYXKVYXkqkL1qkLtmkKt1+urdqF4VaF0VSG6qlAnZ2jbrbTcUlIK5asKlasKyVWF6lWF2kWFur1wZBaKVxVKVxWiqwr1cobEWyEqSqF8VaFyVSG5qlC9qlC7qFCv5+3tQvGqQumqQnRVoU7OsH2INH9lj7W9+bhO6/Z8fnewggomqGAVFayBgnV7H6E7WEQFS6hgNATMvKHWiFHBMipYQQUTVLCKCtZAwTiggkVUsIQKhur8jOr8jOr8jOr8jOr8jOr8jOr8GdX5M6rzZ1Tnz6jOn1GdP6M6fx7jY+Zjh62MOSvNp2JaSahghArGqGAZFaygggkqWEUFa6BgElDBLnD+R6F0VSG6qlAvp5WX5xvVfZSvKlSuKiRXFapXFWoXFer2voNZKF5VKF1ViK4qdJUz1KucoV7lDPUqZ6hXOUO9yhnaoLFSjNvoMkYlKBuhgjEqWEYFK6hgggpWIcFKCKNmMLhuQxLWwAQVrKKCjRr2btsvf8s7WAyoYBEVLKGCESoYo4JlVLBRE54tbGCNFTBBBauoYA0ULAVUsIgKllDBCBWMUcEyKhiA83MgBQzA+XUwAOfXwQCcXwUjAOfXwQCcXwcDcH4dDOCaXwcb5fz7t1MXMMyHHBYwzIccFjDMhxwWMMyHHBYwzIccSmDMhxwWMMzH2xYwzMfbFjDMx9sWMFTnZ1TnZ1TnZ1TnZ1TnZ1TnH/QoOMf8cpMrJwUMdVdm1F1ZUEMc9Bn1BQz14B/1xLUNNuopgsobWAsKmKCCVVSwBgo26olrGyyigiVUsFHPj21rJHIKynS6MCpYRgUrqGCCClZRwRooWAVwfh1skPOnIBtYjApYQgUjVDBGBcuoYAUVTFDBKipYAwVrARUMwfmTcmndEJxfBUNwfhUMwflVMATnV8EQnF8FQ3B+FQxgtkcHG3XNL3mbIqjvBhtDQAWLqGAJFYxQwRgVLKOCFVQwQQWrqGCozh9RnX/UK2aJ2xbi76uQLWAJFYxQwRgArGRz+7LNjNbt8wypKBtTyc+LUCovP52ytnGS5y9TarS/8SayvryCoP9u2H53mVXYJ15uJT97ezn56HXjx07K907C30nl3kn4O0nunYS/k+q9k/B3Urt3EvxOGvWq8r2TPtlJCKMp9zvp0ZUI479JuhJhxDpJV/LdlX+5K1sqv7Zt1K504XuM7WAn3WNsBzvpHmM72En3GNvBTrrH2Pg7ie4xtoOddI+xO+ykR1feY+xuXXmPsbt1Jd9d2asr75Fwt668x6vduvIeVXbrynvs160r7xFar67k+7ryr3dlDPH5PkMMid47887wDzozrb+8TF6m985ESHFleZ7ICJmogiEkjAqG4NcaWEaYRVLBEGZOVDC+La5bXuQ7Lzp25n19/Uln1rB2ZpP3zryvsPt1ZrnvVXTszPueQsfOvEd/n3TmunDn0pn1vTPv+wodO5PvzuzXmfd1ZsfOvO8udOzM+/5Cx868R0AdO/MeAX3Qmctk7rMzl7mrt86UewTUsTPvEVDHzrxHQB078x4BdexMvjuzX2feI6COnXmPgD7pzEprZ7b3BzDkHgH168x6X2f2ewCj3teZHTvzvs7s2Jl8d2a/zrwvjTp25n1p1LEz70ujfp3Z7VMGYf16Ya4UzM6J8eXbffF75z/AIipYQgUjVDBGBcuoYAUTLIVBZyVxXcGINbCMClZQwWQQ2Ba7y9+igFVUsAYKFgMqWEQFS6hghAo2KMSphQ2ssQKWUcEKKpigglVUsAYKlgIqWEQFS6hghAoG4PwcSAEDcH4dDMD5dTAA59fBAJxfBwNwfhWMAJxfBwO45tfBRjn/+kTp199VASNUMEYFy6hgBRVMUMEqKlgDBeOAChZRwVCdn1Gdn1Gdn1Gdn1Gdn1GdP4+6kZpfbnLlpICh7soMuytRQzyjhnhBPfgLoYINiqTXj9XHFhSwjApWUMEEFayigjVQMAmoYKOeH2vbY38pKNPpklDBCBWMUcEyKlhBBRNUMADn18EGOX8KsoHF+A5WAypYRAVLqGCECsaoYBkVrKCCCSpYRQVDcP6kXFo3BOdXwRCcXwVDcH4VDMH5VTAE51fBEJxfBQOY7dHBRl3zS96mCKpisK2igjVMMAoBFSyigiVUMEIFY1SwjApWUMFAnZ8CqPPTqFfMvr3bnt8fnqRRr5jZYBEVLAGAeVmmYFuLob68gnD6p4hp1Ot29076ZCfxvZPwd1K+dxL+Tir3TsLfSXLvJPydVO+dhL+TEEZT7nfSP7syIYz/JulKhBHrJF15j7E7fPH7ZBdO9xjbwU7ieyfh76R7jO1gJ91jbAc76R5jO9hJ9xjbwU66x9gddtI/u5LuMXa3rrzH2N268h5jd+vKeyTcrSv57speXXmPKrt15T3269aV9witV1fyfV35yQfA4/N9hhgSvXfmneHdvj5Eo5YZ+9aZyvI8xAiZqIIhJIwKhuDXKhjCLJIKhjBzooHle8TXLy/ynRcdO/O+vv6kM2tYO7PJe2feV9gdO/O+V9GxM+97Cv06s9yjv086c124c+nM+t6Z932Fjp15X2d27Mz7OrNjZ/Ldmf06876/0LEz7xFQx868R0AfdOYymfvszJjje2feI6COnXmPgPp1ptwjoI6deY+AOnbmPQLq2Jn3CKhjZ/LdmR90ZqW1M9v7Axhyj4A6duZ9ndnvAQy5rzP7dWa9rzM7duZ9adSxM+9Lo46dyXdn9uvM+9KoT2cu//haCvM//lPVL92lPh8RlrrdJF5m7b72Q9WvUI025UAbOdCmHmjTPm+jx7fRJh5okw60oQNtDhwH9cBxUA8cB/XAcVAPHAf1wHHQDhwH7cBx0A4cB+3AcdAOHAf6Vw5qe9pPi+29TTnQRg60qQfatI/bNH2x+5c2xO9t1D5oXJ9tXlx7baOyxZTq6vX5vZW+ILPZKh5qlY600te5ihTXVkvivbdivRWvDzmRVqseqqX3POW2tlL2l/6attkqHmqVDrWiH1rlrRW9t+JDrfKhVuVQKznUqh5q1Y604nDk6OV4qFU61IoOtTp0VnI+1KocaiWHWtVDrdqRVvnQsZEPHRv50LGRDx0b+dCxkQ8dG/nzY+NrYJS+No5BBeVlvParMS8TJX+8jO2WilH/6ofVqBxpJEca1SON2oFGP3wBorVn10sI9c87LP7weQarVTrSSl+jVBaGZ6uY4nureKiVflEdab2qjqwQ6nbT6jqsb7W9t2pHWv1wmWK14iO9oV8EWL2hXwSYreRQq3qoVTvSisOhVvFQq3SoFR1qdeiY50PHBh86NvjQscGHjg0+dGzkQ8dGPnRs5M+Pja+wpEdY6rm3uxrYT7lnNJIjjeqRRu1AIz33rEb6CVboOdm7/JnfY48PtdIP31KfgCLh3bL1tdGtVj9ErNUqHmqVDrWiQ634UKt8qFU51Eq3NtmODeH8Fy84llZpbZW/W4Byi6Kt90qovd7PUJcL3L+I1C9lxvHoF0kDeSIYTwLjITAeBuPJYDwFjEfAeMD8mcD8mT/2552hlNUqHWr1wxEudW0l7a8OHmSb4KhB/urgwWoVD7VKh1rlI72Rf7iDHF5qlfdWcqhVPdSqHWlVfriTHLdWKb23iodapUOt6FArPtQqH2pVDrWSI0dvqYdaHTqX5dC5LIfOZTl0LgsdasWHWuVDrcqhVoeODTl0bMihY6MeOjbqoWOjHjo2fnhOyJip+OFJocLrhFRREvaHZ4WsVvVQq3ak1Q9PDFmt4qFW6VArOtSKD7XKh1odOjbaoWOjHTo22pFjI4VwqFU81OrzY+OPr4vRr41/+JRaWS/caLu+WcLrn/Xo8yb8eZP8eZPyeRP5vEn9vEn7uMkPH4XYbfJDEMjq6O9N0udN6PMm/HkT/UHE9YiuOb81KZ83kc+b1M+b6A8hlueSh/XlPsKvJvr4d79J/LxJ+ryJuvfrenO5trddqd8+3G+SP29SPm8i+01aeJdfP2/SPm6ij/dbXBf7Tm/HmD7Y32+SPm9CnzdR937j9V3P8PJcwVeb//zJxl8F8tkFytkF5OwC9ewC7eQC+oxKzwLx7ALp7AJ0doGzz+Ry9plczj6Ty9lncjn7TC5nn8ly9pksZ5/JcvaZLGefyXL2mSx//zzI6+ggv36qcJnz/fr9eu7v179/DJX1FkF5uUPw/P108u/Tyb/PJ//+p0nw1aYcaCOft2l87rHX/n4KlvjcuLwupv/r98vJvy8n/349+ffbub8fQ+hw8rS1AL8XiGcXSGcXoLML8NkF8tkFytkF5FyP/+FR3p4F2skFYji7QDy7QDq7AJ1dgM8ukM8uUM4ucPaZHM8+k+PZZ3I6+0xOZ5/J6dQz+Y+vZ6G+Nv1h+YGc1xfus3xbcPu9TK1xnZPn/U07frH+hxUQHIAnr+DkFZy9gmev4MUruHgFr+eBf/18O/XnUzj35/9+Vvz4ZeZT92pKXsHJKzh7Bc9ewYtXcPEKXs8D/8dPD8d1+3kK5/58PPfn07k/T+f+PJ/78/ncny/n/ryc+vP89w/M/c8yczq7wN/fvfvLEHM9W0E7uUDusQ/2viOb6ewCfHaBfHaBcnYB6VBg74t4uZ5doJ1coISzC8SzC6SzC9DZBTqcyftfJ8pnFyhnF5CzC9SzC7STC0g4u0CHM3n3U0WSzi5w9nWRlLMLyNkF6skFaji7QDy7QDq7AJ1dgE8t8MfjvsSP9zwLry5TSjHq8PqOTOT0ZyE/3HD6rMC2NPi3L5XA352aTWX5LVTKb6Gy/hYq2++gMoXfQmX8LVQmEJX/+PHO5RgWBmK5OO2hbkbOplJ+C5X1t1DZfgeVFH4LlfG3UJlAVP7jx/vlY1gYiAUl7f/x4237MSwoyfmPn1YuGsSCkkL/+GmtpUEsKI7+jx8fvziNxXiUokDRXHz87k+E54TUN5mgaC4/bg48yjGKpkLRNCSaEqBo4tU0B55VGUVDUDQMRZOhaAoUjUDRXO3FRx7zGUQjAYomQtEkKBqComEomqu9eP8hsgJFAzWeqgGKJkLREBQNQ9FkKJoCRSM4NH88HmD6j5+mZ0NbH9aLLxMKscrOPKrRqB1o9MPM5F6jPx5PLf3HD09oFVrv2L+2lK+Wyz//77/8r3/9l//y3//b/16afP3f//Nv//Xf//V//Nuvf/77//ufj/+zbPz/AQ==","brillig_names":["get_notes_internal","get_collapse_hints","decompose_hint","get_key_validation_request","notify_nullified_note","split_60_bits","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","__mul_impl","__compute_quadratic_expression_with_borrow_flags","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","get_public_data_witness","lt_32_hint","lte_16_hint","pack_arguments","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"usdc_token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"title","type":{"kind":"string","length":60},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"835":"attempt to add with overflow","759":"Array index out of bounds","564":"Array index out of bounds","692":"Array index out of bounds","942":"Array index out of bounds","683":"attempt to subtract with overflow","747":"attempt to add with overflow","229":"attempt to add with overflow","741":"attempt to add with overflow","930":"attempt to add with overflow","1009":"attempt to add with overflow","665":"Array index out of bounds","211":"Array index out of bounds","1104":"attempt to add with overflow","909":"Array index out of bounds","775":"Array index out of bounds","708":"attempt to add with overflow","958":"Array index out of bounds","1083":"Array index out of bounds","821":"Array index out of bounds","687":"attempt to subtract with overflow","617":"attempt to add with overflow","803":"Array index out of bounds","995":"Array index out of bounds","218":"Array index out of bounds","596":"attempt to add with overflow","721":"Array index out of bounds","462":"Initializer address is not the contract deployer","526":"SharedImmutable already initialized","456":"Initialization hash does not match","788":"attempt to add with overflow","901":"Array index out of bounds","767":"Array index out of bounds","572":"attempt to add with overflow","889":"attempt to add with overflow","950":"Array index out of bounds","971":"attempt to add with overflow","977":"Array index out of bounds","173":"attempt to add with overflow","1075":"Array index out of bounds","1063":"attempt to add with overflow","676":"attempt to add with overflow","606":"Array index out of bounds","728":"Array index out of bounds","917":"Array index out of bounds","207":"attempt to add with overflow","588":"Array index out of bounds","1091":"Array index out of bounds"}},{"name":"get_title","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIfwAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAA4AAAQDAgQlAAQIQwAFJAAEPAYrAAAECAMrAAAFCAQrAAAGCAUiAAAAzToAAAAIQwAAADweAAAABB4AAAAFMQAAAAAEAAAABQAAAAYkAAIBBQoAAgYFBCEAABUABDsBAAAeAAsABiQABwEFCgAHBgUEIQAAGgAEOwEAACoAAAYkAAQFBAAABAAEACQBBAEGAAAEBgIEKgAEByQABwAIKgIIBwAABAcCByoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBgQAAAQEAgQqAgQGKgAABAAABAACACoCBgQkAAQACCoACAMgADEkAAQEBwwABAMHBiQABAEHIQAAtwAGIAA2KgEEBSQABAIEAAAEBQIJAAAECQQKKgEKAyQABAMJAAAEBQILAAAECwkMKgEMCioAAAkkAAQDBQAABAAFACQBBAEJAAAECQIFKgAFCyoCAwsAAAQLAgsqAgoLKgEJBQAABAUCBSoCBQkqAQkFAAAEBQIFKgIFCSQAAgAFKgAACyQABD0MAAAEAAwAJAEEAQsAAAQLAgwkAAQ8DQAABA0MDSoADA4MAAQODQ8WAA8PIQAAXQAPKgIFDgAABA4CDiAAVyoBCwwAAAQMAgwqAgwLKgAADAAABAACACoCCwwqAAALAAAEAAIAKgIICyoACAYgAGgMAAQGBAUhAABuAAUgAGsqAQwLKgALAyMkAAQCDgwABAYODyEAAHIADzsBAAAAAAQJAg8AAAQPBg4qAQ4NJQAEAQAADyoAAA4kAAQgEAAABAAQACQBBAEOAAAEDgIQJQAEAQAAEUYCAAAADQAAABAAAAARAAAAHwAkAAQfEisAABAIAysAABIIBCIAAADYKgEODQAABA0CDSoCDQ4qAAgFIACGJAAEHw0MAAQFDQ8hAACQAA8gAIoAAAQGBwUOAAQGBQ0hAACOAA07AQAAKgAFBiAAaCoBCw0kAAQ8DwwABA0PECEAAJUAECAAsSoBDA0qAQsPJAAEHxEMAAQFERIhAACbABI7AQAAAAAEDgISAAAEEgURKgERECQABDwRDAAEDxETIQAAogATOwEAACsAAA0IAyUABAA9CAQiAAAA6ysACAUAEgAABBICEwAABBMPESoCEBEqAhIMKgELEgAABBIHDw4ABBIPDSEAAK8ADTsBAAAqAg8LIACxAAAEBQcNDgAEBQ0PIQAAtQAPOwEAACoADQUgAIYqAQQGHAAHAwkAAAcFCQotAAAAAAoAAAAJJAAEBAsMAAQDCwwhAAC/AAw7AQAAKwAABggDJQAEAAUIBCIAAADrKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMHBg4ABAMGCSEAAMoACTsBAAAqAgoEKgAGAyAAMSUABAAACAcNAAQIBwgFCAgXAAgICAghAADXCAgBAAQIAwgHCAkrAQgJCAYBAAQIBAgHCAkrAggGCAkBAAQIBwACCAcgAM4jJQAEAAIIBgcABAgECAYIBSsACAQICCUABAAACAkNAAQICQgFCAoXAAgKCAohAADqCAoDAAQICAACCAgBAAQIAwgJCAsrAQgLCAYBAAQIAwgICAsrAQgLCAcBAAQIAwgJCAsrAggHCAsBAAQIAwgICAsrAggGCAsBAAQICQACCAkgANwjKwEIAwgGCwAECAYAAggHIQAA7wgHIADxKwAIAwgFIAD/KwAAAAgFAQAEAAAIBAAAJQAEAAAICQ0ABAgJCAQIChcACAoICiEAAP0ICgEABAgDCAkICysBCAsICAEABAgFCAkICysCCAgICwEABAgJAAIICSAA9CUBBAABCAUgAP8jKwAYyhjK","debug_symbols":"5d1vT+JAEAbw79LXvtjZmd3Z8atcLhf8GxKCRvGSi/G7X0Fa0JJuTs/6TPrGgA70t6Wdp9SyPDdX1xdPt7+W65u7x+b8x3OzurtcbJZ36/be88tZc/GwXK2Wt7+Of92E7Q+SXf3j/WK9vfu4WTxsmnPSKGfN9fpqe5OlfYab5eq6OVd6ORsUG+u+1pL2pZRP1Uqwsi8WCkfVMZ2ozjnkfXXOMb6p/nnWUPq0nQL1xeGoeAp9/vyaV+7WvNXWPEXpn5hDqNjVyPbVanlo1/9ob1f8W/x2AeWrF2BfvIAYvnoB9OkFJA5dceJY3SaShW6byMTvt4kY/9GzfQx/4DHygcekDzzm5P4pnLpuJ1y00l1yif0CjvsF26lXI5du/SYNVHk1kkj33O3N4auhrvXFtd486zm41pNrfXStZ9d6ca1PrvWus5ZdZy27zlp2nbXiOmvFddaK66wV11krrrNWXGetoHfMbL1ew3t9Qu+Y43r07b6kXm800E+/3efeo5QregvdUxsd7PpKz37p6pde/NINm079mf+j/yy80nPwSye/9OiXzn7p4pcOnqZjdPA0HaODp+kYHTxNx+h+01T9pqn6TVP1m6bqN03Vb5qq3zRVv2mqftNUq2kqIdXomTp6e57leAEnikPszsS0Nw9vN1l2V5uoQXFKwOIQFidicRiLI1ichMXJWBzF4mB15YLVlQ2rKxtWVzasrmxYXdmwurJhdWXD6sqG1ZUNqyvb5F05HS7EzwMOhQDmITDP5K2nHDxFhp6p967Y/xOeosWBh6befij2xcTD9UME5olgHgbzCJgngXkymEe/0SP5jWdYzSbdJUxs+eCI+USxcH8+rj3Vx8fFu5GW2YzU5jLSGGYzUprNSONsRsqzGanMZqRpNiPNsxnpbI6R4myOkSLQMdLWw0BHMjsP0PHGzjN5gmg/HwPpCU8C8xSs80hsWB4JYB4C84DtXzL5/tVPp9S+q7ShJ4N5DMuTAphn8v0rHfavVIaeCOZhMI+AeRKYJ4N5FMwz+fEP95eKRtGhx7A8OYB5CMwTwTwM5hEwTwLzZDCPgnnA+nMG688K1p8V7P2pRjAPg3kEzJPAPGDXWSnY+ToFO19XwM7XFfQ5rkbn+qH652C+l59iP01U4uEU3wV8lqsUdJSPPqWkyYHPlWqL4fBJRs7DwaLPQDk6rxQV9CkoK3z0GdXG+YY+pVqFjz4LZYWPPg1lhY+e0RU+eEbX+OgzUVb46Bld4ftOXfOduuY6dWNwnboxuE7dGByn7kt79/fiYbm4WF3vv9/r5ml9efR1X5s/969/aYv/Ag==","brillig_names":["get_title"],"assert_messages":{"141":"attempt to add with overflow","154":"Array index out of bounds","20":"Not initialized","113":"Array index out of bounds","174":"attempt to add with overflow","161":"Array index out of bounds","180":"attempt to add with overflow","190":"Array index out of bounds","25":"Function get_title can only be called statically","201":"attempt to add with overflow"}},{"name":"give_entitlement","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","unsafe_rand","decompose_hint","notify_created_note","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log","directive_invert","directive_integer_quotient"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000000c0c5aaf"},{"kind":"string","value":"UintNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"body","type":{"kind":"array","length":832,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"body_hash_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"body_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"header","type":{"kind":"array","length":640,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"header_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"pubkey","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"pubkey_redc","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"from_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"subject_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amount_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amount_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"date_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"receipt_id_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"claim_secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseEscrow::redeem_linode_entitlement_parameters"}}],"kind":"struct","path":"ZImburseEscrow::redeem_linode_entitlement_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseEscrow::get_title_parameters"}},{"name":"return_type","type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"ZImburseEscrow::get_title_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"usdc_token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"title","type":{"kind":"string","length":60}}],"kind":"struct","path":"ZImburseEscrow::constructor_parameters"}}],"kind":"struct","path":"ZImburseEscrow::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseEscrow::give_entitlement_parameters"}}],"kind":"struct","path":"ZImburseEscrow::give_entitlement_abi"}]}},"file_map":{"101":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"103":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"105":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"108":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\nuse std::{\n    embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n    utils::point::point_to_bytes, note::note_interface::NoteInterface,\n    encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n},\n    keys::public_keys::{OvpkM, IvpkM}\n};\n\npub fn compute_encrypted_event_log<Event, let N: u32, let OB: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<N> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note,\n    num_public_values: u8 // Number of values to be appended to the log in public (used in partial note flow).\n) -> [u8; M] where Note: NoteInterface<N> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    encrypted_bytes[64] = num_public_values; // TODO(#8558): This can be just a single bit if we store info about partial fields in ABI\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[65 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[97 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[145 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[193 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 337;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[337 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // num_public_values (1 byte)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(unsafe_rand());\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::compute_encrypted_note_log, keys::public_keys::{OvpkM, IvpkM},\n        test::mocks::mock_note::MockNoteBuilder\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_note_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n        let num_public_values: u8 = 0;\n\n        let log: [u8; 449] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note,\n            num_public_values\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38\n        ];\n        assert_eq(encrypted_note_log_from_typescript, log);\n    }\n\n    #[test]\n    unconstrained fn test_encrypted_note_log_of_finalized_partial_note_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note_public_value1 = 0x14172339287e8d281545c177313f02b6aa2fedfd628cfd8b7f11a136fd0d6557;\n        let note_public_value2 = 0x0834d81e3f73c7e2809b08ae38600ffc76a2554473eeab6de7bff4b33a84feac;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n        let num_public_values: u8 = 2;\n\n        // First we compute the encrypted log without the public values\n        let log_without_public_values: [u8; 449] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note,\n            num_public_values\n        );\n\n        // Then we \"append\" the public values to the log by copying both the original log and the current log into a new byte array\n        let mut log: [u8; 513] = [0; 513];\n        for i in 0..449 {\n            log[i] = log_without_public_values[i];\n        }\n        let note_public_value1_bytes: [u8; 32] = note_public_value1.to_be_bytes();\n        let note_public_value2_bytes: [u8; 32] = note_public_value2.to_be_bytes();\n        for i in 0..32 {\n            log[449 + i] = note_public_value1_bytes[i];\n            log[481 + i] = note_public_value2_bytes[i];\n        }\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_of_finalized_partial_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38, 20, 23, 35, 57, 40, 126, 141, 40, 21, 69, 193, 119, 49, 63, 2, 182, 170, 47, 237, 253, 98, 140, 253, 139, 127, 17, 161, 54, 253, 13, 101, 87, 8, 52, 216, 30, 63, 115, 199, 226, 128, 155, 8, 174, 56, 96, 15, 252, 118, 162, 85, 68, 115, 238, 171, 109, 231, 191, 244, 179, 58, 132, 254, 172\n        ];\n        assert_eq(encrypted_note_log_of_finalized_partial_from_typescript, log);\n    }\n}\n"},"109":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::aes128::aes128_encrypt;\n\nuse crate::{keys::public_keys::IvpkM, utils::point::point_to_bytes};\n\npub struct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk: IvpkM) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk }\n    }\n\n    /// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n    /// be able to derive the key with which the incoming log can be decrypted.\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 144] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer = [0 as u8; 128];\n\n        let serialized_eph_sk_high: [u8; 32] = self.eph_sk.hi.to_be_bytes();\n        let serialized_eph_sk_low: [u8; 32] = self.eph_sk.lo.to_be_bytes();\n\n        let address_bytes: [u8; 32] = self.recipient.to_field().to_be_bytes();\n        let serialized_recipient_ivpk = point_to_bytes(self.recipient_ivpk.to_point());\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n        }\n        for i in 0..32 {\n            buffer[i + 96] = serialized_recipient_ivpk[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash_with_separator(\n            [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ).to_be_bytes();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::{encrypted_logs::outgoing_body::EncryptedLogOutgoingBody, keys::public_keys::IvpkM};\n    use dep::protocol_types::{address::AztecAddress, scalar::Scalar};\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n\n    #[test]\n    unconstrained fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n"},"112":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr","source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::IvpkM};\n\npub struct EncryptedLogIncomingBody<let N: u32> {\n    plaintext: [u8; N * 32 + 64]\n}\n\nimpl<let N: u32> EncryptedLogIncomingBody<N> {\n    pub fn from_note<T>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T>(event: T, randomness: Field) -> Self where T: EventInterface<N> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use dep::protocol_types::{\n        address::AztecAddress, scalar::Scalar, point::Point, traits::Serialize,\n        abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n        encrypted_logs::incoming_body::EncryptedLogIncomingBody, event::event_interface::EventInterface,\n        context::PrivateContext, keys::public_keys::IvpkM\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: u32 = 3;\n\n    impl NullifiableNote for AddressNote {\n        fn compute_nullifier(\n            _self: Self,\n            _context: &mut PrivateContext,\n            _note_hash_for_nullify: Field\n        ) -> Field {\n            1\n        }\n\n        unconstrained fn compute_nullifier_without_context(_self: Self) -> Field {\n            1\n        }\n    }\n\n    struct AddressNoteHidingPoint {\n        inner: Point\n    }\n\n    impl NoteInterface<ADDRESS_NOTE_LEN> for AddressNote {\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader {\n            self.header\n        }\n\n        fn set_header(&mut self, header: NoteHeader) {\n            self.header = header;\n        }\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] {\n            [self.address.to_field(), self.owner.to_field(), self.randomness]\n        }\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote {\n                address: AztecAddress::from_field(fields[0]),\n                owner: AztecAddress::from_field(fields[1]),\n                randomness: fields[2],\n                header: NoteHeader::empty()\n            }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_LEN * 32 + 64] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_LEN * 32 + 64] = [0; ADDRESS_NOTE_LEN * 32 + 64];\n\n            let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n            let note_type_id_bytes: [u8; 32] = AddressNote::get_note_type_id().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n\n        fn compute_note_hash(_self: Self) -> Field {\n            crate::generators::Ga1.x\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    unconstrained fn test_encrypted_note_log_incoming_body_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        // 1. `EncryptedLogIncomingBody::from_note` calls `note.to_be_bytes(storage_slot)` function which serializes\n        // the note to bytes - note that in the case of `AddressNote` the `to_be_bytes` function was automatically\n        // implemented by Aztec macros.\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        // 2. `body.compute_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: u32 = 3;\n\n    impl EventInterface<TEST_EVENT_LEN> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            comptime\n            {\n                EventSelector::from_signature(\"TestEvent(Field,Field,Field)\")\n            }\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_LEN * 32 + 64] {\n            let mut buffer: [u8; TEST_EVENT_LEN * 32 + 64] = [0; TEST_EVENT_LEN * 32 + 64];\n\n            let randomness_bytes: [u8; 32] = randomness.to_be_bytes();\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_LEN * 32 + 32] {\n            let mut buffer: [u8; TEST_EVENT_LEN * 32 + 32] = [0; TEST_EVENT_LEN * 32 + 32];\n\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_event_log_incoming_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let event_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 201, 247, 40, 80, 60, 188, 158, 251, 242, 103, 197, 79, 165, 195, 10, 160, 255, 35, 167, 152, 25, 233, 77, 145, 214, 243, 210, 119, 0, 20, 29, 95, 15, 63, 33, 190, 184, 67, 254, 96, 128, 243, 220, 228, 201, 130, 86, 163, 52, 127, 111, 10, 212, 7, 160, 16, 87, 13, 39, 11, 5, 1, 164, 65, 8, 56, 82, 245, 13, 68, 176, 90, 100, 69, 243, 78, 117, 188, 221, 34, 178, 31, 155, 89, 143, 176, 129, 118, 36, 236, 64, 179, 52, 239, 184, 51, 51, 199, 221, 49, 81, 197, 17, 199, 192, 99, 49, 168, 157, 164, 190, 33, 240, 182, 214, 173, 7, 156, 102, 95, 65, 217, 225, 123, 42, 21, 124, 144\n        ];\n\n        assert_eq(event_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..event_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], event_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n"},"113":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::{get_public_keys, get_ovsk_app}, public_keys::{OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    num_public_values: u8 // Number of values to be appended to the log in public (used in partial note flow).\n) -> (u32, [u8; M], Field) where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note,\n        num_public_values\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    num_public_values: u8 // Number of values to be appended to the log in public (used in partial note flow).\n) -> (u32, [u8; M], Field) where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient, num_public_values)\n}\n\npub fn encode_and_encrypt_note<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(AztecAddress, AztecAddress, &mut PrivateContext)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_public_keys(ov).ovpk_m;\n        let ivpk = get_public_keys(iv).ivpk_m;\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        // Number of public values is always 0 here because `encode_and_encrypt_note(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, iv, num_public_values);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(AztecAddress, AztecAddress, &mut PrivateContext)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        // Note: We could save a lot of gates by obtaining the following keys in an unconstrained context but this\n        // function is currently not used anywhere so we are not optimizing it.\n        let ovpk = get_public_keys(ov).ovpk_m;\n        let ivpk = get_public_keys(iv).ivpk_m;\n\n        // Number of public values is always 0 here because `encode_and_encrypt_note_unconstrained(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n\n        // See the comment in `encode_and_encrypt_note_with_keys_unconstrained` for why having note hash counter\n        // and log hash unconstrained here is fine.\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, iv, num_public_values)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        // Number of public values is always 0 here because `encode_and_encrypt_note_unconstrained(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient, num_public_values);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        // Number of public values is always 0 here because `encode_and_encrypt_note_with_keys_unconstrained(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient, num_public_values)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n"},"114":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"117":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"120":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"125":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\nuse crate::hash::ArgsHasher;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"138":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"139":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"144":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"145":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::oracle::logs_traits::ToBytesForUnencryptedLog;\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"155":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"161":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"165":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"},"166":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"170":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"172":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter)\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) -> Field {\n    notify_nullified_note_oracle(nullifier, note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"174":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr","source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n"},"177":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n"},"178":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(_contract_address: AztecAddress, _randomness: Field, _encrypted_event: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<let N: u32>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n"},"182":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"185":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"186":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"187":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call.\n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments\n///   itself.\nunconstrained pub fn pack_arguments_array<let N: u32>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call.\n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments\n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"199":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"201":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"202":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"211":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"219":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"221":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"222":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"224":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"244":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"246":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"249":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"275":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n"},"296":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"319":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"341":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n  value: [Field; N]\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    crate::sha256::digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u64, msg_start: u32) -> ([u8; 64], u64) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr: u64 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    for k in msg_start..msg_end {\n        if k as u64 < message_size {\n            msg_block[msg_byte_ptr] = msg[k];\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n    (msg_block, msg_byte_ptr)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u64,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u64 {\n    let mut msg_byte_ptr: u64 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    let mut extra_bytes = 0;\n    if msg_end > N {\n        msg_end = N;\n        extra_bytes = msg_end - N;\n    }\n\n    for k in msg_start..msg_end {\n        if k as u64 < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start as u64 < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start as u64 < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start as u64 < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if msg_byte_ptr == 64 {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start as u64 < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start as u64 < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start as u64 < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE as u64 {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..64 {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..64 {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(mut msg_block: [u8; 64], mut msg_byte_ptr: u64) -> ([u8; 64], u64) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        if msg_byte_ptr < 64 {\n            for _ in 57..64 {\n                if msg_byte_ptr <= 63 {\n                    msg_block[msg_byte_ptr] = 0;\n                    msg_byte_ptr += 1;\n                }\n            }\n        }\n    }\n    (msg_block, msg_byte_ptr)\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; 64], mut msg_byte_ptr: u64, message_size: u64) -> [u8; 64] {\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for _i in 0..64 {\n        // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n        if msg_byte_ptr < 56 {\n            msg_block[msg_byte_ptr] = 0;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        } else if msg_byte_ptr < 64 {\n            for j in 0..8 {\n                msg_block[msg_byte_ptr + j] = len_bytes[j];\n            }\n            msg_byte_ptr += 8;\n        }\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; 64], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n"},"356":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"357":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app, macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness: unsafe_rand(), header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"368":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/circuits/zimburse_verifiers/src/sha256_var.nr","source":"use std::runtime::is_unconstrained;\nuse std::hash::sha256_compression;\n\n////////\n//////// USE UNTIL AZTEC-NARGO v0.35.0\n////////\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if std::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !std::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !std::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}"},"369":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/circuits/zimburse_verifiers/src/linode.nr","source":"use dep::zkemail::{KEY_LIMBS_2048, dkim::verify_dkim_2048, get_body_hash_by_index, base64::body_hash_base64_decode};\nuse crate::constants::{LinodeBillingParams, MAX_LINODE_EMAIL_BODY_LENGTH, MAX_LINODE_EMAIL_HEADER_LENGTH};\nuse crate::utils::{check_from_linode_billing, check_subject_billing_receipt, extract_billed_amount, extract_datetime};\nuse std::hash::pedersen_hash;\n\n/// USE UNTIL WE HAVE AZTEC-NARGO v0.35.0\nuse crate::sha256_var::sha256_var;\n\npub fn verify_linode_billing_receipt(\n    body: [u8; MAX_LINODE_EMAIL_BODY_LENGTH],\n    body_hash_index: u32,\n    body_length: u32,\n    header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH],\n    header_length: u32,\n    pubkey: [Field; KEY_LIMBS_2048],\n    pubkey_redc: [Field; KEY_LIMBS_2048],\n    signature: [Field; KEY_LIMBS_2048],\n    from_index: u32,\n    subject_index: u32,\n    amount_index: u32,\n    amount_length: u32,\n    date_index: u32,\n    receipt_id_length: u32,\n) -> [Field; 3] {\n\n    // check the body and header lengths are within bounds\n    assert(header_length <= MAX_LINODE_EMAIL_HEADER_LENGTH);\n    assert(body_length <= MAX_LINODE_EMAIL_BODY_LENGTH);\n\n    // verify the dkim signature over the header\n    verify_dkim_2048(header, header_length, pubkey, pubkey_redc, signature);\n\n    // extract body hash and decode from base64\n    let body_hash_encoded = get_body_hash_by_index(header, body_hash_index);\n    let signed_body_hash = body_hash_base64_decode(body_hash_encoded);\n\n    // compute the hash of the asserted body\n    let computed_body_hash = sha256_var(body, body_length as u64);\n\n    // compare the retrieved body hash to the computed body hash\n    assert(\n        signed_body_hash == computed_body_hash, \"SHA256 hash computed over body does not match body hash found in DKIM-signed header\"\n    );\n\n    // assert email is from billing@linode.com\n    check_from_linode_billing(from_index, header);\n\n    // assert this is a billing receipt email from Linode\n    check_subject_billing_receipt(subject_index, header, receipt_id_length);\n\n    // extract billed amount\n    // note: the billed amount has 2 decimals\n    let billed_amount = extract_billed_amount(body, amount_index, amount_length);\n\n    // extract the timestamp header from the email\n    let datetime = extract_datetime(header, date_index);\n    \n    // hash the dkim key used to verify the email\n    let dkim_key_hash = pedersen_hash(pubkey);\n    [dkim_key_hash, datetime as Field, billed_amount as Field]\n    // [dkim_key_hash as Field, 0, 0]\n}\n"},"371":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/circuits/zimburse_verifiers/src/utils.nr","source":"use crate::constants::{\n   LB_FROM_LEN, LB_PAYMENT_TEXT_LEN, LB_SUBJECT_FIXED_END_LEN, LB_SUBJECT_FIXED_START_LEN, LINODE_BILLING_FROM, LINODE_BILLING_PAYMENT_TEXT,\n   LINODE_BILLING_SUBJECT_FIXED_END, LINODE_BILLING_SUBJECT_FIXED_START, MAX_BILLED_AMOUNT, MAX_LINODE_EMAIL_BODY_LENGTH,\n    MAX_LINODE_EMAIL_HEADER_LENGTH, DATE_HEADER_FIELD_MAX_LENGTH, DATE_LENGTH_DETERMINATION_INDEX, DATE_HEADER_FIELD_START\n};\nuse dep::date_parser::{parse_date_string, to_unix_month, DATETIME_LENGTH};\n\n/**\n* Check that email is from linode billing address\n*/\npub fn check_from_linode_billing(index: u32, header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH]) {\n    // check the first char is \"f\" or \"F\"\n    assert((header[index] == 0x66) | (header[index] != 0x46), \"Email sender not found.\");\n\n    // check the remaing chars are the expected Linode billing\n    let from_bytes = LINODE_BILLING_FROM.as_bytes();\n    for i in 0..LB_FROM_LEN {\n        assert(header[i + index + 1] == from_bytes[i], \"Email not from Linode billing.\");\n    }\n\n    // check for CRLF\n    assert(header[LB_FROM_LEN + index + 1] == 0x0D, \"Invalid CRLF sequence\");\n    assert(header[LB_FROM_LEN + index + 2] == 0x0A, \"Invalid CRLF sequence\");\n}\n\n/**\n* Check that email subject is linode billing receipt\n*/\npub fn check_subject_billing_receipt(index: u32, header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH], receipt_id_length: u32) {\n    // check the first char is \"s\" or \"S\"\n    assert((header[index] == 0x73) | (header[index] == 0x53), \"Email subject not found\");\n\n    let fixed_start_bytes = LINODE_BILLING_SUBJECT_FIXED_START.as_bytes();\n    // check chars in fixed section start\n    for i in 0..LB_SUBJECT_FIXED_START_LEN {\n        assert(header[i + index + 1] == fixed_start_bytes[i], \"Email subject is not Linode billing receipt\");\n    }\n\n    let fixed_end_bytes = LINODE_BILLING_SUBJECT_FIXED_END.as_bytes();\n    // check chars in fixed section end\n    for i in 0..LB_SUBJECT_FIXED_END_LEN {\n        let headerIndex = i + index + receipt_id_length + LB_SUBJECT_FIXED_START_LEN;\n        assert(header[headerIndex] == fixed_end_bytes[i], \"Email subject is not Linode billing receipt\");\n    }\n}\n\n/**\n * Constrains a span to be a full header field\n *\n * @param MAX_HEADER_LENGTH: the maximum possible length of the header\n * @param header: the header of the email\n * @param index: the index that the header field begins at\n * @param length: the length of the header field\n */\npub fn constrain_header_field<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH],\n    index: u32,\n    length: u32\n) {\n    // check that the field does not lie outside of the max \n    assert(index + length <= header.len(), \"Header field out of bounds\");\n    // if not the first field in the header, ensure the header field is preceded by a CRLF\n    if (index != 0) {\n        assert(header[index - 2] == 0x0D, \"Missing prefix CR in field constraint\");\n        assert(header[index - 1] == 0x0A, \"Missing prefix LF in field constraint\");\n    }\n    // check that the following two chars are the crlf\n    if (index + length < header.len()) {\n        assert(header[index + length] == 0x0D, \"Missing suffix CR in field constraint\");\n        assert(header[index + length + 1] == 0x0A, \"Missing suffix LF field constraint\");\n    }\n    // check that the field does not contain any CRLF\n    for i in 0..MAX_HEADER_LENGTH {\n        if (i < length) {\n            assert(header[index + i] != 0x0D, \"CR in field constraint Field\");\n        }\n    }\n}\n\n/**\n * Extracts the datetime from the email header\n *\n * @param header: the header of the email\n * @param index: the index that the date header field begins at\n * @return the parsed unix timestamp\n */\npub fn extract_datetime(header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH], index: u32) -> u32 {\n    // determine the index of the selector that chooses the length of the date field\n    let length_decider = index + DATE_LENGTH_DETERMINATION_INDEX;\n    let length = if header[length_decider] == 0x20 {\n        DATE_HEADER_FIELD_MAX_LENGTH - 1\n    } else {\n        DATE_HEADER_FIELD_MAX_LENGTH\n    };\n    // constrain the header field to be a single and full header field\n    constrain_header_field::<DATE_HEADER_FIELD_MAX_LENGTH>(header, index, length);\n    // check the header field starts with \"Date: \"\n    let first_byte = (header[index] == 0x44) as u1 | (header[index] == 0x64) as u1;\n    assert(first_byte as bool, \"Invalid date field: [D/d]\");\n    for i in 0..DATE_HEADER_FIELD_START.len() {\n        assert(header[index + i + 1] == DATE_HEADER_FIELD_START[i], \"Invalid date field\");\n    }\n    // extract the date string\n    let mut datetime_string: [u8; DATETIME_LENGTH] = [0; DATETIME_LENGTH];\n    // todo: make const (and also put all this shit in zkemail.nr)\n    let start_index = index + 10;\n    for i in 0..DATETIME_LENGTH {\n        datetime_string[i] = header[start_index + i];\n    }\n    // parse the datetime into unix\n    let parsed = parse_date_string(datetime_string);\n    to_unix_month(parsed)\n}\n\npub fn serialize_bytes<let LIMBS: u32, let SEQUENCE_LENGTH: u32>(sequence: [u8; SEQUENCE_LENGTH]) -> [Field; LIMBS] {\n    let mut limbs: [Field; LIMBS] = [0; LIMBS];\n    for i in 0..LIMBS {\n        let mut chunk = 0;\n        let mut v = 1;\n        for j in 0..31 {\n            let index = i * 31 + j;\n            if index < SEQUENCE_LENGTH {\n                chunk += sequence[index] as Field * v;\n                v *= 256;\n            }\n        }\n        limbs[i] = chunk;\n    }\n    limbs\n}\n\npub fn is_number_constraint(num: u8) {\n    assert(num >= 0x30);\n    assert(num < 0x3A);\n}\n\n/**\n* Extract the amount billed by Linode as a u32\n*/\npub fn extract_billed_amount(body: [u8; MAX_LINODE_EMAIL_BODY_LENGTH], index: u32, amount_length: u32) -> u32 {\n\n    // ensure billed amount follows valid payment text sequence\n    let payment_text_bytes = LINODE_BILLING_PAYMENT_TEXT.as_bytes();\n    for i in 0..LB_PAYMENT_TEXT_LEN {\n        assert(body[(index - LB_PAYMENT_TEXT_LEN) + i] == payment_text_bytes[i], \"Invalid payment text sequence.\");\n    }\n\n    let mut amount: Field = 0;\n    let fixed_values = 4; // '$', '.', and two decimals\n    let commas: Field = ((amount_length - fixed_values - 1) / 4) as Field; // account for \n    let mut power: Field = amount_length as Field - commas - 3; // 3 represents '$' and '.' and power is equal to numberic len - 1\n\n    // ensure first character is '$'\n    assert(body[index] == 36);\n\n    // if second character is a zero then decrement power\n    if body[index + 1] == 48 {\n        power = power - 1;\n    }\n\n    for i in 1..MAX_BILLED_AMOUNT {\n        if i < amount_length {\n            let byte = body[index + i];\n            // check that byte is not a comma or period\n            if (byte != 44) & (byte != 46) {\n                amount = amount + ((byte as Field - 48) * (10 as Field).pow_32(power));\n                power = power - 1;\n            }\n        }\n    }\n    amount as u32\n}\n\n// #[test]\n// fn value_extraction() {\n//     let index = 0;\n//     let mut body: [u8; MAX_LINODE_EMAIL_BODY_LENGTH] = [0; MAX_LINODE_EMAIL_BODY_LENGTH];\n//     let val = \"$4,123.00\";\n//     let bytes = val.as_bytes();\n//     for i in 0..bytes.len() {\n//         body[i] = bytes[i];\n//     }\n//     let extracted = extract_billed_amount(body, index, bytes.len());\n//     println(extracted);\n// }\n\n// #[test]\n// fn test_payment_string_bytes() {\n//  let bytes = LINODE_BILLING_PAYMENT_TEXT.as_bytes();\n//  println(bytes);\n// }"},"372":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/circuits/date_parser/src/lib.nr","source":"struct Datetime {\n    year: u16,\n    leap_years: u16,\n    add_leap_day: bool,\n    month: u8,\n    day: u8,\n    time: u32,\n    offset: u16,\n    subtract: bool\n}\n\nglobal DATETIME_LENGTH: u32 = 26;\n\n\nglobal months = [\n    \"Jan\".as_bytes(),\n    \"Feb\".as_bytes(),\n    \"Mar\".as_bytes(),\n    \"Apr\".as_bytes(),\n    \"May\".as_bytes(),\n    \"Jun\".as_bytes(),\n    \"Jul\".as_bytes(),\n    \"Aug\".as_bytes(),\n    \"Sep\".as_bytes(),\n    \"Oct\".as_bytes(),\n    \"Nov\".as_bytes(),\n    \"Dec\".as_bytes()\n];\n\nglobal days_in_month = [\n    31,\n    28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31\n];\n\npub fn parse_month(month: [u8; 3]) -> u8 {\n    let mut index = 0;\n    for i in 0..12 {\n        if month == months[i] {\n            index = i + 1;\n        }\n    }\n    index\n}\n\n// todo: is leap year + is past feb 29th\n\npub fn compute_leap_years(year: u16) -> u16 {\n    year / 4 - year / 100 + year / 400\n}\n\npub fn is_number_constraint(num: u8) {\n    assert(num >= 0x30);\n    assert(num < 0x3A);\n}\n\npub fn parse_year(year: [u8; 4]) -> (u16, u16) {\n    // range check year\n    for i in 0..year.len() {\n        is_number_constraint(year[i]);\n    }\n    // compute year\n    let mut year = (year[0] as u16 - 0x30) * 1000\n        + (year[1] as u16 - 0x30) * 100\n        + (year[2] as u16 - 0x30) * 10\n        + year[3] as u16\n        - 0x30;\n    // figure out number of leap years\n    let leap_years_since_0000 = compute_leap_years(year - 1);\n    let start_leap_years = compute_leap_years(1970);\n    let leap_years = leap_years_since_0000 - start_leap_years;\n    (year, leap_years)\n}\n\npub fn parse_time(time: [u8; 8]) -> u32 {\n    // check each char\n    is_number_constraint(time[0]);\n    is_number_constraint(time[1]);\n    assert(time[2] == 0x3A);\n    is_number_constraint(time[3]);\n    is_number_constraint(time[4]);\n    assert(time[5] == 0x3A);\n    is_number_constraint(time[6]);\n    is_number_constraint(time[7]);\n    // compute hours, mins, secs\n    let hours = (time[0] as u32 - 0x30) * 10 + time[1] as u32 - 0x30;\n    let mins = (time[3] as u32 - 0x30) * 10 + time[4] as u32 - 0x30;\n    let secs = (time[6] as u32 - 0x30) * 10 + time[7] as u32 - 0x30;\n    // return seconds since midnight\n    hours * 3600 + mins * 60 + secs\n}\n\npub fn parse_offset(offset: [u8; 5]) -> (u16, bool) {\n    // determine whether to add or subtract\n    let mut subtract = false;\n    if offset[0] == 0x2D {\n        subtract = true;\n    } else {\n        assert(offset[0] == 0x2B);\n    }\n    // check each char\n    for i in 1..offset.len() {\n        is_number_constraint(offset[i]);\n    }\n    // parse hours\n    let hours = (offset[1] as u16 - 0x30) * 10 + offset[2] as u16 - 0x30;\n    // parse mins\n    let mins = (offset[3] as u16 - 0x30) * 10 + offset[4] as u16 - 0x30;\n    // return seconds\n    let offset = hours * 3600 + mins * 60;\n    (offset, subtract)\n}\n\npub fn parse_day(dat: [u8; 2]) -> u8 {\n    // check each char\n    is_number_constraint(dat[0]);\n    is_number_constraint(dat[1]);\n    // compute day\n    (dat[0] as u8 - 0x30) * 10 + dat[1] as u8 - 0x30\n}\n\npub fn add_leap_day(year: u16, month: u8) -> bool {\n    // determine if current year is leap year\n    let div_by_4 = (year % 4 == 0) as u1;\n    let div_by_100 = (year % 100 != 0) as u1;\n    let div_by_400 = (year % 400 == 0) as u1;\n    let leap_year = div_by_4 * (1 - (1 - div_by_100) * (1 - div_by_400));\n    // determine if month is past feb\n    let past_feb = (month > 2) as u1;\n\n    (leap_year * past_feb) as bool\n}\n\npub fn parse_date_string(date_bytes: [u8; DATETIME_LENGTH]) -> Datetime {\n    // check day shift and set day\n    let day_shift = if date_bytes[1] == 0x20 {\n        (0, [0x30, date_bytes[0]])\n    } else {\n        (1, [date_bytes[0], date_bytes[1]])\n    };\n\n    // parse day\n    let day = parse_day(day_shift.1);\n\n    // parse month\n    let month = parse_month([date_bytes[2 + day_shift.0], date_bytes[3 + day_shift.0], date_bytes[4 + day_shift.0]]);\n    assert(month != 0);\n\n    // parse year\n    let year = parse_year(\n        [\n        date_bytes[6 + day_shift.0],\n        date_bytes[7 + day_shift.0],\n        date_bytes[8 + day_shift.0],\n        date_bytes[9 + day_shift.0]\n    ]\n    );\n    // parse time\n    let time = parse_time(\n        [\n        date_bytes[11 + day_shift.0],\n        date_bytes[12 + day_shift.0],\n        date_bytes[13 + day_shift.0],\n        date_bytes[14 + day_shift.0],\n        date_bytes[15 + day_shift.0],\n        date_bytes[16 + day_shift.0],\n        date_bytes[17 + day_shift.0],\n        date_bytes[18 + day_shift.0]\n    ]\n    );\n    // parse offset\n    let offset = parse_offset(\n        [\n        date_bytes[20 + day_shift.0],\n        date_bytes[21 + day_shift.0],\n        date_bytes[22 + day_shift.0],\n        date_bytes[23 + day_shift.0],\n        date_bytes[24 + day_shift.0]\n    ]\n    );\n    // check if leap day needs to be added\n    let add_leap_day = add_leap_day(year.0, month);\n\n    Datetime { year: year.0, leap_years: year.1, add_leap_day, month, day, time, offset: offset.0, subtract: offset.1 }\n}\n\npub fn to_unix_month(datetime: Datetime) -> u32 {\n    // get number of days in complete years\n    let days_in_complete_years = (datetime.year - 1970) as u32 * 365 + datetime.leap_years as u32;\n    // get number of days in current year\n    let mut days_in_current_year = 0;\n    for i in 0..12 {\n        if i + 1 < datetime.month {\n            days_in_current_year += days_in_month[i];\n        }\n    }\n    days_in_current_year += datetime.add_leap_day as u32;\n    // total seconds since epoch\n    let mut seconds_since_epoch = (days_in_complete_years + days_in_current_year) * 86400 + datetime.time as u32;\n    // apply offset\n    if datetime.subtract {\n        seconds_since_epoch -= datetime.offset as u32;\n    } else {\n        seconds_since_epoch += datetime.offset as u32;\n    }\n    // return unix timestamp\n    seconds_since_epoch\n}\n\npub fn to_unix(datetime: Datetime) -> u32 {\n    // get number of days in complete years\n    let days_in_complete_years = (datetime.year - 1970) as u32 * 365 + datetime.leap_years as u32;\n    // get number of days in current year\n    let mut days_in_current_year = 0;\n    for i in 0..12 {\n        if i + 1 < datetime.month {\n            days_in_current_year += days_in_month[i];\n        }\n    }\n    days_in_current_year += (datetime.day + datetime.add_leap_day as u8) as u32;\n    // total seconds since epoch\n    let mut seconds_since_epoch = (days_in_complete_years + days_in_current_year) * 86400 + datetime.time as u32;\n    // apply offset\n    if datetime.subtract {\n        seconds_since_epoch -= datetime.offset as u32;\n    } else {\n        seconds_since_epoch += datetime.offset as u32;\n    }\n    // return unix timestamp\n    seconds_since_epoch\n}\n\n#[test]\nfn test_main() {\n    let date_string = \"1 Sep 2024 23:22:12 +0400 \".as_bytes(); // padded 1\n    // its off a lil bit\n    // should be 1725247332\n    // should be 1725333732\n    let date = parse_date_string(date_string);\n    let unix = to_unix(date);\n    println(unix);\n}\n"},"373":{"path":"/home/jpag/nargo/github.com/zkemail/zkemail.nrv0.3.0/lib/src/base64.nr","source":"use crate::BODY_HASH_BASE64_LENGTH;\n\n// noir_base64 has issues right now, just use this for now\n\n/**\n * Decodes a base64 encoded body hash into a 32 byte sha256 hash of the body\n * @notice from https://github.com/richardliang/noir-rsa/blob/main/crates/rsa-biguint/src/lib.nr\n\n * @param encoded - the base 64 encoded body hash\n * @returns the decoded sha256 hash\n */\npub fn body_hash_base64_decode(encoded: [u8; BODY_HASH_BASE64_LENGTH]) -> [u8; 32] {\n    let mut total_bits = [0 as u1; BODY_HASH_BASE64_LENGTH * 6];\n    for i in 0..BODY_HASH_BASE64_LENGTH {\n        let translate = base64_lookup(encoded[i] as u8);\n        // Store as big endian\n        let translate_bits: [u1; 6] = (translate as Field).to_be_bits();\n        for j in 0..6 {\n            total_bits[i * 6 + j] = translate_bits[j];\n        }\n    }\n\n    // Since we're returning the SHA256 hash, only need first 32 bytes (=256 bits)\n    let mut output = [0 as u8; 32];\n    for i in 0..32 {\n        for j in 0..8 {\n            // Convert from big endian back to little endian\n            output[i] |= (total_bits[i * 8 + j] as u8) << (7 - j) as u8;\n        }\n    }\n\n    output\n}\n\n/**\n * Lookup for the base 64 encoding\n * @todo: replace with noir_lang base64 lib\n *\n * @param input - the base 64 encoded character\n * @returns the decoded value\n */\nfn base64_lookup(input: u8) -> u8 {\n    // A-Z: 65-90\n    if input >= 65 & input <= 90 {\n        input - 65\n    } else if input >= 97 & input <= 122 {\n        // a-z: 97-122\n        input - 71\n    } else if input >= 48 & input <= 57 {\n        // 0-9: 48-57\n        input + 4\n    } else if input == 43 {\n        // +\n        62\n    } else if input == 47 {\n        // /\n        63\n    } else {\n        // =\n        0\n    }\n}"},"374":{"path":"/home/jpag/nargo/github.com/zkemail/zkemail.nrv0.3.0/lib/src/lib.nr","source":"use dep::std::hash::pedersen_hash;\n\nmod dkim;\nmod partial_hash;\nmod base64;\n\nglobal RSA_EXPONENT: u32 = 65537;\nglobal KEY_BYTES_1024: u32 = 128;\nglobal KEY_BYTES_2048: u32 = 256;\nglobal KEY_LIMBS_1024: u32 = 9;\nglobal KEY_LIMBS_2048: u32 = 18;\nglobal BODY_HASH_BASE64_LENGTH: u32 = 44;\n\n/**\n * Get the body hash from the header by allowing circuit input to choose index\n * @notice unsafe, can theoretically make a recipient display name = the bh\n *\n * @param HEADER_LENGTH - The length of the email header\n * @param header - The email header as validated in the DKIM signature\n * @param index - The asserted index to find the body hash at\n * @returns The base 64 encoded body hash\n */\npub fn get_body_hash_by_index<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_HEADER_LENGTH],\n    index: u32\n) -> [u8; BODY_HASH_BASE64_LENGTH] {\n    // check index range\n    assert(index >= 3, \"Index does not leave room for 'bh=' prefix\");\n    assert(index + BODY_HASH_BASE64_LENGTH < MAX_HEADER_LENGTH, \"Index does not leave room for body hash\");\n    // check for 'bh=' prefix\n    let BH_PREFIX: [u8; 3] = [98, 104, 61]; // \"bh=\"\n    for i in 0..3 {\n        assert(header[index - 3 + i] == BH_PREFIX[i], \"No 'bh=' prefix found\");\n    }\n    // check for base64 suffix\n    let BH_SUFFIX: u8 = 59; // \";\"\n    assert(header[index + BODY_HASH_BASE64_LENGTH] == BH_SUFFIX, \"No base64 suffix found\");\n    // retrieve body hash\n    let mut body_hash = [0 as u8; BODY_HASH_BASE64_LENGTH];\n    for i in 0..BODY_HASH_BASE64_LENGTH {\n        body_hash[i] = header[index + i];\n    }\n    body_hash\n}\n\n/**\n * Standard outputs that essentially every email circuit will need to export (alongside app-specific outputs)\n * @notice if you only need the pubkey hash just import pedersen and hash away \n *\n * @param pubkey - the BN limbs of the DKIM RSA pubkey\n * @param signature - the BN limbs of the DKIM RSA signature\n * @returns\n *        0: Pedersen hash of DKIM public key (root of trust)\n *        1: Pedersen hash of DKIM signature (email nullifier)\n */\npub fn standard_outputs<let KEY_BYTE_LENGTH: u32>(\n    pubkey: [Field; KEY_BYTE_LENGTH],\n    signature: [Field; KEY_BYTE_LENGTH]\n) -> [Field; 2] {\n    // create pedersen hash of DKIM signing key to minimize public outputs\n    let pubkey_hash = pedersen_hash(pubkey);\n    // create email nullifier for email\n    let email_nullifier = pedersen_hash(signature);\n    // output the root of trust and email nullifier\n    [pubkey_hash, email_nullifier]\n}\n"},"376":{"path":"/home/jpag/nargo/github.com/zkemail/zkemail.nrv0.3.0/lib/src/dkim.nr","source":"use dep::rsa::bignum::fields::{Params1024, Params2048};\nuse dep::rsa::bignum::runtime_bignum::BigNumInstance;\nuse dep::rsa::types::RSA;\nuse dep::rsa::bignum::BigNum;\nuse dep::std::hash::sha256_var;\nuse crate::{KEY_LIMBS_1024, KEY_LIMBS_2048, KEY_BYTES_1024, KEY_BYTES_2048, RSA_EXPONENT};\n\ntype BN1024 = BigNum<KEY_LIMBS_1024, Params1024>;\ntype RSA1024 = RSA<BN1024, BigNumInstance<KEY_LIMBS_1024, Params1024>, KEY_BYTES_1024>;\ntype BN2048 = BigNum<KEY_LIMBS_2048, Params2048>;\ntype RSA2048 = RSA<BN2048, BigNumInstance<KEY_LIMBS_2048, Params2048>, KEY_BYTES_2048>;\n\n/**\n * Verify a 1024-bit RSA (DKIM) signature over an email header\n * \n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param header - The email header, 0-padded to the maximum possible length for this circuit\n * @param header_length - The actual length of the email header\n * @param pubkey_modulus_limbs - The DKIM RSA Pubkey\n * @param redc_params_limbs - Barrett Reduction Parameter for Pubkey for efficient signature verification\n * @param signature - The DKIM RSA Signature \n */\npub fn verify_dkim_1024<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_HEADER_LENGTH],\n    header_length: u32,\n    pubkey: [Field; KEY_LIMBS_1024],\n    pubkey_redc: [Field; KEY_LIMBS_1024],\n    signature: [Field; KEY_LIMBS_1024]\n) {\n    // check the header length is within bounds\n    assert(header_length <= MAX_HEADER_LENGTH);\n\n    // instantiate the BNInstance for the pubkey\n    let pubkey: BigNumInstance<KEY_LIMBS_1024, Params1024> = BigNumInstance::new(pubkey, pubkey_redc);\n\n    // instantiate BN for the signature\n    let signature: BN1024 = BigNum::from_array(signature);\n\n    // hash the header\n    let header_hash = sha256_var(header, header_length as u64);\n\n    // verify the DKIM signature over the header\n    let rsa: RSA1024 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(pubkey, header_hash, signature, RSA_EXPONENT));\n}\n\n/**\n * Verify a 1024-bit RSA (DKIM) signature over an email header\n * \n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param header - The email header, 0-padded to the maximum possible length for this circuit\n * @param header_length - The actual length of the email header\n * @param pubkey_modulus_limbs - The DKIM RSA Pubkey\n * @param redc_params_limbs - Barrett Reduction Parameter for Pubkey for efficient signature verification\n * @param signature - The DKIM RSA Signature \n */\npub fn verify_dkim_2048<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_HEADER_LENGTH],\n    header_length: u32,\n    pubkey: [Field; KEY_LIMBS_2048],\n    pubkey_redc: [Field; KEY_LIMBS_2048],\n    signature: [Field; KEY_LIMBS_2048]\n) {\n    // check the header length is within bounds\n    assert(header_length <= MAX_HEADER_LENGTH);\n\n    // instantiate the BNInstance for the pubkey\n    let pubkey: BigNumInstance<KEY_LIMBS_2048, Params2048> = BigNumInstance::new(pubkey, pubkey_redc);\n\n    // instantiate BN for the signature\n    let signature: BN2048 = BigNum::from_array(signature);\n\n    // hash the header\n    let header_hash = sha256_var(header, header_length as u64);\n\n    // verify the DKIM signature over the header\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(pubkey, header_hash, signature, RSA_EXPONENT));\n}\n"},"379":{"path":"/home/jpag/nargo/github.com/noir-lang/noir_rsav0.3.0/lib/src/rsa.nr","source":"use dep::bignum::BigNum;\nuse dep::bignum::runtime_bignum::BigNumInstance;\nuse dep::bignum::runtime_bignum::BigNumTrait;\nuse dep::bignum::runtime_bignum::BigNumInstanceTrait;\n\nuse crate::types::{RSA, BN1024, BN2048, BNInst1024, BNInst2048, RSA1024, RSA2048};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] = [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i as u32 < 52 + ps_len as u32 {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i as u32 == 52 + ps_len as u32 {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i as u32 == 53 + ps_len as u32 {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\nimpl<BN, BNInstance, let NumBytes: u32> RSA<BN, BNInstance, NumBytes>  where BN: BigNumTrait, BNInstance: BigNumInstanceTrait<BN> {\n    /**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @details The fourth function parameter is required to define the value of `NBytes`\n *          when converting a BigNum into a byte array, the number of bytes is required and currently cannot be inferred.\n *          Once numeric generics can be derived by applying operations to other numeric generics the need for this will go away.\n *\n * @note The exponent `e` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\n    pub fn verify_sha256_pkcs1v15(_: Self, instance: BNInstance, msg_hash: [u8; 32], sig: BN, exponent: u32) -> bool {\n        assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n        let mut exponentiated = instance.mul(sig, sig); // sig^2\n\n        if exponent == 65537 {\n            // e = 65537 = 1 0000 0000 0000 0001\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^2 * sig^2 = sig^4\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^8\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^16\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^32\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^64\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^128\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^256\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^512\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^1024\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^2048\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^4096\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^8192\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^16384\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^32768\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^65536\n        }\n        // otherwise, e = 3 = 11\n\n        exponentiated = instance.mul(exponentiated, sig); // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n\n        let mut padded_sha256_hash_bytes: [u8; NumBytes] = exponentiated.to_le_bytes();\n        compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n    }\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst1024 = BigNumInstance::new(\n        [\n        0xe908724e0d28a1565511879e00f063, 0x58dea28d5112982c8ab8597d3e611f, 0xb115f9878acc910a47b41ac8d5f763, 0xc71b0a719c2283f710f86024737cee, 0x9ee9eb73e95b84f033af5217337427, 0x8fcab34c99cc2661dd57de15ae2110, 0xa38db8a829eec5550342f6f66334dc, 0xd7c4b32fd351a47d860fda1897330e, 0x98c92a33a0f33fd7\n    ],\n        [\n        0x55582e8ba08822783fbd7d07390be2, 0x1d7d83f9dce3983c66f440dcc2f33e, 0x6072d13c84a4cb304f58fbabe782e7, 0x0cee5e0dd62bc54d15a91a4ea3bc50, 0xc485e6f946c45cf660fba4f49325cb, 0x1f0e45df0464b065c94e84ed1dad8c, 0xe4c7b3976310ea239059d834b545f3, 0xd418145200fa77235f5f8d852b121f, 0x01acf0bd16cad9bd8f\n    ]\n    );\n    let signature: BN1024 = BigNum::from_array(\n        [\n        0x393f230b55a12fb7bb39c7edd2cf48, 0x78f7d0a217d340407cae4f39b8f001, 0x603909ff76a519f3c8e96d695d462e, 0x0640ab230b459bf4b20b4823a5b850, 0x02ba190de61a85074b18e228231984, 0xe1424c0779825707aa433ecb86c388, 0xbed8087d947a9c6c56625ad20c91aa, 0x7da4a0c2eee3a3c0d61e892ab4ada9, 0x6ef98a936c8bf8e5\n    ]\n    );\n\n    let rsa: RSA1024 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0x183b4cadacea64716b6535b25a86ad, 0x129a32e9fbd374949e81b080546c2b, 0x9276332765f54b9b4d6fe23f4983a4, 0x91df05fde1a414c9fbf38808a01032, 0x97ca171c382e082ddd6c81be090902, 0x97161dde47ed979939451704b72648, 0x3b66f0c93f8ddbc62bb99f6b8fad2d, 0xc3a046fcad814d8938da372cd84d2a, 0xfe903cfe3ee4de6de3916023bb87f2, 0x8be5fd99c8b46dce9aab27ce4b3883, 0x0d99dfe50dd2288123804872da8543, 0xbb6d8afef8b2c7e3b86ad96973d4e5, 0x17e08fa3c5391279b844581f67825c, 0x09511f4a436abe495bfbfcc254d9c5, 0xf80d02572d620eab5ad7ecfbe2c20c, 0x2a5307402a05f59ba232ad0c8366d0, 0x7b9169630b317c38d549a86f85fcfc, 0xf2\n    ],\n        [\n        0xf4effa025abe90db41dc5bb5934a5f, 0x2596b25aa09f6a0e290accebbef006, 0x330e9567ec5eca92b7a8ce72ad3d83, 0xccf98d178ec4017e4947cadc02da7c, 0xaed6044ffeeb12de4d1e67aedfda78, 0xb5ae8a5a4637b632800e2f41dfbf0a, 0x8304360d359cf2f0d5d97c039f9b04, 0x53cde0d0633c0e66e1da9a118f6a96, 0xf9a83822351097bb1ed123d10290f5, 0xeb489c7f7227c09ca0117264dcf04f, 0x6a1b3618478a235f438adf84533177, 0x71c03085e38a87f5ec8e51c27dde98, 0xcf3e89d9cf253ef61d65d4431334d9, 0xa5a1a59e98fb7f49c746149324201d, 0x38f46c635f884f24c254eaa37981d6, 0x1c42be15dd95e1ac5bf01972b24ff9, 0x4555dd506d1f89e61279293c03db90, 0x010e\n    ]\n    );\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x5f0937ed1aacbdb83991e21c89ca8a, 0x5a1fa4ef2faf4042401c9121c73874, 0x7379fbb7713fbf807d250f7401afb8, 0x9cc5ce8813f3a83a72b681a4d434b2, 0x11cb49ac2ee1f9bed8a008b8327e1e, 0xf3362524f1224e48827b34a62f6ace, 0x3498a2944e32a3798fe9da684b32ae, 0xc346c33528bcdf7a06805126a29402, 0x6ac93f2fa68f270ec73674eae24380, 0x222c72de080496533ceeb8af827910, 0xc22889b311a53203278b942ca67100, 0x93d75567f7fe9ee7ca9871a0cb09f9, 0x049dabd976a9574847b1614f6b739c, 0xdc66b621dbae623df9b657b52fa1b0, 0xf37e82cc1eced382e11fc32e673f67, 0xe50545eb9027f1144a0ba7bbb0c886, 0xb6193409539c515d3c55a45c5734b1, 0x4b\n    ]\n    );\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0xc6a1c5e80ce354c6b00ccf20cf3a1d, 0x178d135f925a03eceb25f79bab56ee, 0x13ab3d6d8a5c5586752b5a3bc74ec3, 0x3d13b47b152367e3e2fc014d03d19f, 0xe89a7278a2945b4a672011691db30f, 0x5b4c1b061378143629dbb29dea1e4, 0x26a48b6f4e8df1472fd4fc12b17c18, 0xc7c92ead0ce810520cf3a8267254c1, 0x806b8cdba93909e9d9a71ee1bcdac2, 0x703ef80f8eb703b84c201366dff1c7, 0x7361034bb2c4c081aad8b1bcca83de, 0xb23c7e1109e65e6d08fa72cc862008, 0x750bc927874455782cd2d6fd5a51f6, 0xf0b83665fbf8cb5cf31cee9f89848e, 0x20d447b08953c7ce3330197938a8ae, 0x11a08bb5a2241c6a2a69f930d8b28b, 0xef5bca8dd582570a44705cb123d09e, 0xb7\n    ],\n        [\n        0xbc93ee57c1c8adc53f0a995a6221ca, 0x2a9b43587534b20dd85a5233329f10, 0xc587fd488f64eed02adc1f462f7448, 0xf1484d37676bb0e800996757382522, 0xc2126c48221aa61c9f52c6b918bab3, 0x8660c861dd52ed958beaf6c6c2cff0, 0x5edd9dc4f02a000f350948c70bdf94, 0x6f3b9603149272e9b232a379a017bb, 0x950fd85cffbdf4476b1cb66c1f63d6, 0xee459417b1a56b6f7ef3b89e385ac, 0x48daeef6d1a055f3746ab71058e137, 0x3cbc0ba96d541feee92dd27f9d0306, 0x6a2a42384cc388fa113ee80317e0a0, 0x43b4f89c508a42d309f295c0d9f3a5, 0x8d8c28b05f71b962b40ea906ff407f, 0x390a7989eb9cecc5827cb00e1ca693, 0x4cbf158eabf7e96ef7f2586d0ce613, 0x164\n    ]\n    );\n\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x19772b9af8a031170a7844ce4f3d7c, 0x4808e817258f57805a7326f70bcd74, 0xca8f3f98e374d52100115bfa645a7d, 0x49547189edff3b683fee267e717b7f, 0x96f263b47e96925f3b5898a7389ceb, 0x4cc50a893da91d0e085fc6656b30bc, 0x67e84ff92d88c0ad2c17ad2701309e, 0x095326818578173289665fcd9ad788, 0x775c6e85b745065db9411b9d579763, 0xad0f20c8a5265dfca4080ca877a2b8, 0xbfd199372f1680b3bc583a08bd8ba9, 0x663476ca3e5ede3e5976887db2c4e5, 0x531192309d0d49fed47c0216c27f9e, 0x37d26d31c86b951ca1c17b517063b7, 0x3cdb362ed5dfd06568eb9a9bbb6a91, 0x14520b9c23f583314729a9d858bca9, 0x5e0505067ada1026721d45997bf2c4, 0x3e\n    ]\n    );\n\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 3));\n}\n"},"380":{"path":"/home/jpag/nargo/github.com/noir-lang/noir-bignumv0.3.3/src/runtime_bignum.nr","source":"use dep::std;\nuse crate::utils::u60_representation::U60Repr;\nuse crate::utils::arrayX::ArrayX;\nuse crate::utils::split_bits;\nuse crate::BigNum;\n\n/**\n * @brief runtime_bignum::BigNumTrait defines methods available to BigNum *if* the modulus is not known at compile time.\n *        e.g. RSA where the modulus is a witness value as it changes for every RSA signature\n *        tee `lib.nr` for a trait definition where the modulus is known at compile time\n **/\ntrait BigNumTrait {\n    fn new() -> Self;\n    fn one() -> Self;\n    fn from(limbs: [Field]) -> Self;\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> Self;\n    fn to_le_bytes<let NBytes: u32>(val: Self) -> [u8; NBytes];\n    fn get(self) -> [Field];\n    fn get_limb(self, idx: u64) -> Field;\n    fn set_limb(&mut self, idx: u32, value: Field);\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    fn validate_in_range(self);\n    fn validate_quotient_in_range(self);\n    fn __is_zero(self) -> bool;\n    fn __eq(self, rhs: Self) -> bool;\n}\n\n/**\n * @brief BigNumInstanceTrait defines methods available to a runtime BigNumInstance.\n *        BigNumInstance wraps the modulus parameter (as well as a Barret reduction parameter),\n *        which is required for the majority of BigNum operations\n **/\ntrait BigNumInstanceTrait<BN> where BN: BigNumTrait {\n    fn modulus(self) -> BN;\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BN;\n    fn eq(self, lhs: BN, rhs: BN) -> bool;\n    fn __neg(self, val: BN) -> BN;\n    fn __add(self, lhs: BN, rhs: BN) -> BN;\n    fn __sub(self, lhs: BN, rhs: BN) -> BN;\n    fn __mul(self, lhs: BN, rhs: BN) -> BN;\n    fn __div(self, lhs: BN, rhs: BN) -> BN;\n    fn __batch_invert<let M: u32>(self, x: [BN; M]) -> [BN; M];\n    fn __udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn __invmod(self, val: BN) -> BN;\n    fn __pow(self, val: BN, exponent: BN) -> BN;\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BN, BN);\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    );\n\n    fn validate_in_field(self, val: BN);\n    fn validate_gt(self, lhs: BN, rhs: BN);\n    fn assert_is_not_equal(self, lhs: BN, rhs: BN);\n    fn neg(self, val: BN) -> BN;\n    fn add(self, lhs: BN, rhs: BN) -> BN;\n    fn sub(self, lhs: BN, rhs: BN) -> BN;\n    fn mul(self, lhs: BN, rhs: BN) -> BN;\n    fn div(self, lhs: BN, rhs: BN) -> BN;\n    fn udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn udiv(self, numerator: BN, divisor: BN) -> BN;\n    fn umod(self, numerator: BN, divisor: BN) -> BN;\n\n}\n\n/**\n * @brief BigNumParamsTrait defines a \"field\" with which to parametrise BigNum.\n * @description The \"field\" does not need to be prime, any value *should* work (TODO: test!)\n**/\ntrait BigNumParamsTrait<let N: u32> {\n    /**\n     * @brief modulus_bits = log2(modulus) rounded up\n     **/\n    fn modulus_bits() -> u32;\n\n    fn has_multiplicative_inverse() -> bool { true }\n}\n\nstruct  BigNumInstance<let N: u32, Params> {\n    \n    /**\n     * @brief modulus: all BigNum operations are evaluated modulo this value\n     **/\n    modulus: [Field; N],\n\n    /**\n     * @brief modulus but represented in a U60Repr form\n     **/\n    modulus_u60: U60Repr<N, 2>,\n    modulus_u60_x4: U60Repr<N, 4>,\n\n    // /**\n    //  * @brief double_modulus: used when performing negations and subtractions\n    //  **/\n    double_modulus: [Field; N],\n    // /**\n    //  * @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    //  **/\n    redc_param: [Field; N],\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> {\n    // some strange circular dependency problem means we need to define `new` as a member of BigNumTrait as well as a definition outside of the trait\n    // (delete this method to see. BigNumInstance methods that use BigNum::new() error out, and I can't find a way of declaring BigNum to satisfy BigNumTrait as part of the BigNumInstance definition because BigNumInstance has no contextual knowledge of the BigNum type...)\n    fn new() -> Self {\n        BigNum { limbs: [0; N] }\n    }\n    fn one() -> BigNum<N, Params> {\n        let mut result: Self = BigNum { limbs: [0; N] };\n        result.limbs[0] = 1;\n        result\n    }\n}\n\nimpl<let N: u32, Params> BigNumTrait for BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn new() -> Self {\n        BigNum::new()\n    }\n    fn one() -> Self {\n        BigNum::one()\n    }\n\n    fn from(limbs: [Field]) -> Self {\n        BigNum { limbs: limbs.as_array() }\n    }\n\n    /**\n     * @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n     * @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n     *               is precisely large enough to cover Params::modulus_bits()\n     * @param x: input byte array\n     **/\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> BigNum<N, Params> {\n        let num_bits = NBytes * 8;\n        let modulus_bits = Params::modulus_bits();\n        assert(num_bits >= modulus_bits);\n        assert(num_bits - modulus_bits < 8);\n        let mut result = BigNum::new();\n\n        let excess_bytes = N * 15 - NBytes;\n        let final_limb_bytes = 15 - excess_bytes;\n        let mut limb: Field = 0;\n        let mut k = 0;\n        for _j in 0..final_limb_bytes {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result.limbs[N - 1] = limb;\n\n        for i in 1..N {\n            let mut limb: Field = 0;\n            for _j in 0..15 {\n                limb *= 256;\n                limb += x[k] as Field;\n                k += 1;\n            }\n            result.limbs[N - i - 1] = limb;\n        }\n\n        // max_bits_in_most_significant_byte should be known at comptime. if not...messy!\n        let mut max_bits_in_most_significant_byte = 8 - (num_bits - modulus_bits);\n\n        let most_significant_byte: Field = x[0] as Field;\n\n        most_significant_byte.assert_max_bit_size(max_bits_in_most_significant_byte as u32);\n        result\n    }\n\n    fn to_le_bytes<let NBytes: u32>(val: BigNum<N, Params>) -> [u8; NBytes] {\n        let nbytes = (Params::modulus_bits() / 8) + (Params::modulus_bits() % 8 != 0) as u32;\n        assert(nbytes <= NBytes);\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..N - 1 {\n            let limb_bytes: [u8; 15] = val.limbs[i].to_le_bytes();\n            for j in 0..15 {\n                result[i * 15 + j] = limb_bytes[j];\n            }\n        }\n        let last_limb_bytes: [u8; 15] = val.limbs[N - 1].to_le_bytes();\n        let num_last_bytes = (NBytes - (N - 1) * 15);\n        for i in 0..num_last_bytes {\n            result[(N-1) * 15 + i] = last_limb_bytes[i];\n        }\n        result\n    }\n\n    fn get(self) -> [Field] {\n        self.limbs\n    }\n    fn get_limb(self, idx: u64) -> Field {\n        self.limbs[idx]\n    }\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    /**\n     * @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n     * @description should be cheaper than using an IF statement (TODO: check!)\n     **/\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let mut result: Self = lhs;\n        for i in 0..N {\n            result.limbs[i] = (lhs.limbs[i] - rhs.limbs[i]) * predicate as Field + rhs.limbs[i];\n        }\n        result\n    }\n\n    /**\n     * @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n     **/\n    fn validate_in_range(self) {\n        for i in 0..(N - 1) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120);\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    /**\n     * @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n     * @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n     *              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n     *              Why is this?\n     *              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n     *                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n     *                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n     *              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n     *\n     *              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n     *              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n     **/\n    fn validate_quotient_in_range(self) {\n        for i in 0..(N) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        // Note: replace magic number 6 with definition\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120) + 6;\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    fn __is_zero(self) -> bool {\n        self.__is_zero_impl()\n    }\n\n    fn __eq(self, rhs: Self) -> bool {\n        self.__eq_impl(rhs)\n    }\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn from_array(limbs: [Field; N]) -> BigNum<N, Params> {\n        BigNum { limbs }\n    }\n\n    unconstrained fn __is_zero_impl(self) -> bool {\n        let mut result: bool = true;\n        for i in 0..N {\n            result = result & (self.limbs[i] == 0);\n        }\n        result\n    }\n\n    unconstrained fn __eq_impl(lhs: Self, rhs: Self) -> bool {\n        lhs.limbs == rhs.limbs\n    }\n}\n\nimpl<let N: u32, Params> BigNumInstanceTrait<BigNum<N, Params>> for BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn modulus(self) -> BigNum<N, Params> {\n        BigNum { limbs: self.modulus }\n    }\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        self.__derive_from_seed_impl(seed)\n    }\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ### NOTE: these functions call unconstrained internal implementations because trait impl modifiers are not supported \n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn __neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__neg_impl(val)\n    }\n\n    fn __add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add_impl(lhs, rhs)\n    }\n\n    fn __sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__sub_impl(lhs, rhs)\n    }\n\n    fn __mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__mul_impl(lhs, rhs)\n    }\n\n    fn __div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__div_impl(lhs, rhs)\n    }\n\n    fn __batch_invert<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        self.batch_invert_impl(x)\n    }\n\n    fn __invmod(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__invmod_impl(val)\n    }\n\n    fn __pow(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__pow_impl(val, exponent)\n    }\n\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__compute_quadratic_expression_impl(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        )\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    /**\n     * @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n     * @description The expression is of the form (when evaluated as an integer relation):\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * Note: this method requires the remainder term of the expression to be ZERO\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The expensive parts of this algorithm are the following:\n     *      1. evaluating the limb products required to compute `lhs * rhs`\n     *      2. applying range constraints to validate the result is 0\n     *\n     * Range constraints are needed for the following reason:\n     * When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n     * Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n     * Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n     * To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n     * (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n     * To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n     * We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n     * TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n     * I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n     * TODO: explain why we apply a 126-bit range check, this feels like a magic number\n     * (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n     * TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n     * \n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) {\n        // use an unconstrained function to compute the value of the quotient\n        let (quotient, _, borrow_flags): (BigNum<N, Params>, BigNum<N, Params>, ArrayX<Field, N, 2>) = self.__compute_quadratic_expression_with_borrow_flags(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n        // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n        quotient.validate_quotient_in_range();\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        // (should be a compile-time check...unconstrained function?)\n\n        // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n        let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t4: [Field; N] = [0; N];\n\n        // TODO: this is super nasty as it requires a multiplication\n        let double_modulus: [Field; N] = self.double_modulus;\n        for k in 0..NUM_PRODUCTS {\n            for i in 0..N {\n                for j in 0..LHS_N {\n                    // note: if is_negative is not known at comptime this is very expensive\n                    if (lhs_flags[k][j]) {\n                        t0[k][i] -= lhs_terms[k][j].limbs[i];\n                        t0[k][i] += double_modulus[i];\n                    } else {\n                        t0[k][i] += lhs_terms[k][j].limbs[i];\n                    }\n                }\n                for j in 0..RHS_N {\n                    if (rhs_flags[k][j]) {\n                        t1[k][i] -= rhs_terms[k][j].limbs[i];\n                        t1[k][i] += double_modulus[i];\n                    } else {\n                        t1[k][i] += rhs_terms[k][j].limbs[i];\n                    }\n                }\n            }\n        }\n        for i in 0..N {\n            for j in 0..ADD_N {\n                if (linear_flags[j]) {\n                    t4[i] -= linear_terms[j].limbs[i];\n                    t4[i] += double_modulus[i];\n                } else {\n                    t4[i] += linear_terms[j].limbs[i];\n                }\n            }\n        }\n\n        // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n        // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n        // so that we can ensure that no limbs will underflow for an honest Prover\n        let mut product_limbs: ArrayX<Field, N,2> = ArrayX::new();\n        //       let fff: [Field; N] = quotient.limbs;\n        //      let mut borrow_flags: ArrayX<Field, N,2> = BigNum::get_borrow_flags3(t0, t1, t2, t3, t4, fff, self.modulus);\n\n        // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n        // TODO: this is super nasty as it requires a multiplication\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    if k == 0 {\n                        let new_term = t0[k][i] * t1[k][j] - quotient.limbs[i] * self.modulus[j];\n                        std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                        product_limbs.add_assign(i + j, new_term);\n                    } else {\n                        product_limbs.add_assign(i + j, t0[k][i] * t1[k][j]);\n                    }\n                }\n                if (NUM_PRODUCTS == 0) {\n                    product_limbs.sub_assign(i + j, quotient.limbs[i] * self.modulus[j]);\n                }\n            }\n            product_limbs.add_assign(i, t4[i]);\n        }\n\n        // each limb product represents the sum of 120-bit products.\n        // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n        // where no more than 64 limb products are summed together.\n        // TODO: check in unconstrained function that this condition is satisfied\n        // TODO: define trade-offs regarding the value of borrow_shift\n        // (the larger the value, the greater the range check that is required on product_limbs)\n        // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n        // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n\n        // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n        //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n        // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n        borrow_flags.get(0).assert_max_bit_size(1);\n        product_limbs.add_assign(0, borrow_flags.get(0) * borrow_shift);\n        for i in 1..(N + N - 2) {\n            borrow_flags.get(i).assert_max_bit_size(1);\n            product_limbs.add_assign(\n                i,\n                (borrow_flags.get(i) * borrow_shift - borrow_flags.get(i - 1) * borrow_carry)\n            );\n        }\n        product_limbs.sub_assign(N + N - 2, borrow_flags.get(N + N - 3) * borrow_carry);\n\n        // Final step: Validate `product_limbs` represents the integer value `0`\n        // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n        // i.e. we need to do the following for each limb `i`:\n        //      1. validate the limb's low-120 bits equals zero\n        //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n        //      3. add the carry into limb `i+1`\n        // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n        // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n        // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n        //  where k is the number of bits in the prime field)\n        // We then add the result into the next limb and repeat.\n        let hi_shift: Field = 0x1000000000000000000000000000000;\n        let hi_downshift: Field = 1 / hi_shift;\n        for i in 0..N + N - 2 {\n            product_limbs.mul_assign(i, hi_downshift);\n            std::as_witness(product_limbs.get(i));\n            product_limbs.get(i).assert_max_bit_size(126); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n            product_limbs.add_assign(i + 1, product_limbs.get(i));\n        }\n        // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n        assert(product_limbs.get(N + N - 2) == 0);\n    }\n\n    fn validate_in_field(self, val: BigNum<N, Params>) {\n        // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n        let mut p_minus_self: [Field; N] = [0; N];\n        let modulus: [Field; N] = self.modulus;\n        for i in 0..N {\n            p_minus_self[i] = modulus[i] - val.limbs[i];\n        }\n        let borrow_flags = self.__validate_in_field_compute_borrow_flags(val);\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        p_minus_self[0] += borrow_flags[0] as Field * two_pow_120;\n        for i in 1..N - 1 {\n            p_minus_self[i] += (borrow_flags[i] as Field * two_pow_120 - borrow_flags[i-1] as Field);\n        }\n        p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n        let mut compare = val;\n        compare.limbs = p_minus_self;\n        compare.validate_in_range();\n    }\n\n    /**\n     * @brief Validate self != other\n     * @details If A == B, then A == B mod N.\n     *          We can efficiently evaluate A == B mod N where N = circuit modulus\n     *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n     *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n     *          (todo: compute how tiny)\n     **/\n    fn assert_is_not_equal(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        let mut l: Field = 0;\n        let mut r: Field = 0;\n        let mut modulus_mod_n: Field = 0;\n        let mut two_pow_120: Field = 0x1000000000000000000000000000000;\n        let modulus = self.modulus;\n        for i in 0..N {\n            l *= two_pow_120;\n            r *= two_pow_120;\n            modulus_mod_n *= two_pow_120;\n            l += lhs.limbs[N - i - 1];\n            r += rhs.limbs[N - i - 1] ;\n            modulus_mod_n += modulus[N - i - 1];\n        }\n\n        // lhs can be either X mod N or P + X mod N\n        // rhs can be either Y mod N or P + Y mod N\n        // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n        let mut diff = l - r;\n        let mut target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n        assert(target != 0, \"asssert_is_not_equal fail\");\n    }\n\n    fn eq(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> bool {\n        let diff = self.sub(lhs, rhs);\n        // if self == other, possible values of `diff` will be `p` or `0`\n        // (the subtract operator constrains diff to be < ceil(log(p)))\n        // TODO: can do this more efficiently via witngen in unconstrained functions?\n        let mut is_equal_modulus: bool = true;\n        let mut is_equal_zero: bool = true;\n        for i in 0..N {\n            is_equal_modulus = is_equal_modulus & (diff.limbs[i] == self.modulus[i]);\n            is_equal_zero = is_equal_zero & (diff.limbs[i] == 0);\n        }\n        is_equal_modulus | is_equal_zero\n    }\n\n    fn neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = self.__neg_with_flags(val);\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let result_limb = modulus[0] - val.limbs[0] - result.limbs[0] + (borrow_flags[0] as Field * borrow_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val.limbs[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val.limbs[N - 1] - result.limbs[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    fn add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) = self.__add_with_flags(lhs, rhs);\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let result_limb = lhs.limbs[0] + rhs.limbs[0] - subtrahend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] + rhs.limbs[i]\n                - subtrahend[i]\n                - result.limbs[i]\n                - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] + rhs.limbs[N - 1]\n            - subtrahend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    // validate that lhs - rhs does not underflow i.e. lhs > rhs\n    fn validate_gt(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags) = self.__validate_gt_remainder(lhs, rhs);\n\n        result.validate_in_range();\n\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0] - 1\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n    }\n\n    fn sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) = self.__sub_with_flags(lhs, rhs);\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let result = self.__mul(lhs, rhs);\n        self.evaluate_quadratic_expression([[lhs]], [[false]], [[rhs]], [[false]], [result], [true]);\n        result\n    }\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        assert(\n            Params::has_multiplicative_inverse(), \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\"\n        );\n        let result = self.__div(lhs, rhs);\n        self.evaluate_quadratic_expression([[result]], [[false]], [[rhs]], [[false]], [lhs], [true]);\n        result\n    }\n\n    /**\n     * @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn __udiv_mod(\n        self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__udiv_mod_impl(numerator, divisor)\n    }\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn udiv_mod(\n        self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let (quotient, remainder) = BigNumInstance::__udiv_mod_impl(self, numerator, divisor);\n\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        self.evaluate_quadratic_expression(\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false]\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        self.validate_gt(divisor, remainder);\n        (quotient, remainder)\n    }\n\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. return param is floor(numerator / divisor)\n     **/\n    fn udiv(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).0\n    }\n\n    /**\n     * @brief udiv_mod performs integer modular reduction\n     *\n     * i.e. 1. numerator % divisor = return value\n     **/\n    fn umod(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).1\n    }\n}\n\nimpl<let N: u32, Params> BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C  O  N  S  T  R  U  C  T  O  R  S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn new(modulus: [Field; N], redc_param: [Field; N]) -> Self {\n        Self {\n            redc_param,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus)\n        }\n    }\n\n    unconstrained fn __derive_from_seed_impl<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        let mut rolling_seed = seed;\n\n        let mut to_reduce: ArrayX<Field, N, 2> = ArrayX { segments: [[0; N], [0; N]] };\n\n        let mut double_modulus_bits = Params::modulus_bits() * 2;\n        let mut double_modulus_bytes = (double_modulus_bits) / 8 + (double_modulus_bits % 8 != 0) as u32;\n\n        let mut last_limb_bytes = double_modulus_bytes % 15;\n        if (last_limb_bytes == 0) {\n            last_limb_bytes = 15;\n        }\n        let mut last_limb_bits = double_modulus_bits % 8;\n        if (last_limb_bits == 0) {\n            last_limb_bits = 8;\n        }\n\n        for i in 0..(N - 1) {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut lo: Field = 0;\n            let mut hi: Field = 0;\n            for j in 0..15 {\n                hi *= 256;\n                lo *= 256;\n\n                if (i < 2 * N - 2) {\n                    lo += hash[j + 15] as Field;\n                    hi += hash[j] as Field;\n                }\n            }\n            to_reduce.set(2 * i, lo);\n            to_reduce.set(2 * i + 1, hi);\n            rolling_seed[0] += 1;\n        }\n\n        {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut hi: Field = 0;\n            for j in 0..(last_limb_bytes - 1) {\n                hi *= 256;\n                hi += hash[j] as Field;\n            }\n            hi *= 256;\n            let last_byte = hash[last_limb_bytes - 1];\n            let mask = (1 as u64 << (last_limb_bits) as u8) - 1;\n            let last_bits = last_byte as u64 & mask;\n            hi += last_bits as Field;\n            to_reduce.set(2 * N - 2, hi);\n        }\n\n        let (_, remainder) = __barrett_reduction(\n            to_reduce,\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n        let mut result = BigNum::new();\n        result.limbs = remainder;\n        result\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    unconstrained fn __validate_in_field_compute_borrow_flags(self: Self, val: BigNum<N, Params>) -> [bool; N] {\n        let mut flags: [bool; N] = [false; N];\n        let modulus: [Field; N] = self.modulus;\n        flags[0] = modulus[0].lt(val.limbs[0]);\n        for i in 1..N - 1 {\n            flags[i] = modulus[i].lt(val.limbs[i] + flags[i - 1] as Field);\n        }\n        flags\n    }\n\n    unconstrained fn __pow_impl(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x: U60Repr<N, 2> = U60Repr::from(exponent.limbs);\n\n        let num_bits = Params::modulus_bits() + 1;\n\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n\n        for i in 0..num_bits {\n            accumulator = self.__mul(accumulator, accumulator);\n            if x.get_bit(num_bits - i - 1) {\n                accumulator = self.__mul(accumulator, val);\n            }\n        }\n        accumulator\n    }\n\n    unconstrained fn __mul_with_quotient(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut mul: ArrayX<Field, N, 2> = ArrayX::new();\n        for i in 0..N {\n            for j in 0..N {\n                mul.add_assign(i + j, lhs.limbs[i] * rhs.limbs[j]);\n            }\n        }\n        let (q, r) = __barrett_reduction(\n            mul.__normalize_limbs(N + N),\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut quotient = BigNum::from_array(q);\n        let mut remainder = BigNum::from_array(r);\n        (quotient, remainder)\n    }\n\n    unconstrained fn __mul_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let (_, b) = self.__mul_with_quotient(lhs, rhs);\n        b\n    }\n\n    unconstrained fn __add_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let y_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let mut z_u60 = x_u60 + y_u60;\n\n        if z_u60.gte(self.modulus_u60) {\n            z_u60 = z_u60 - self.modulus_u60;\n        }\n        let mut result = BigNum::from_array(U60Repr::into(z_u60));\n        result\n    }\n\n    /**\n     * @brief given an input `x`, compute `2p - x` (unconstrained)\n     *\n     * @description we subtract the input from double the modulus, because all constrained BigNum operations\n     *              only guarantee that the output is in the range [0, ceil(log2(p))].\n     *              I.E. the input may be larger than the modulus `p`.\n     *              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n     *              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n     *              because such a check is expensive and usually unneccesary.\n     */\n    unconstrained fn __neg_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result = BigNum::from_array(U60Repr::into(self.modulus_u60 - x_u60));\n        result\n    }\n\n    unconstrained fn __add_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n        let add_u60 = a_u60 + b_u60;\n\n        let overflow = add_u60.gte(self.modulus_u60);\n\n        let mut subtrahend_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        if overflow {\n            subtrahend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                let mut add_term: u64 = a_u60.limbs.segments[j][i] + b_u60.limbs.segments[j][i] + carry_in;\n                carry = (add_term >= 0x1000000000000000) as u64;\n                add_term -= (carry as u64 * 0x1000000000000000);\n                result_u60.limbs.segments[j][i] = add_term;\n                carry_in = carry as u64;\n                borrow = ((subtrahend_u60.limbs.segments[j][i] + borrow_in) > result_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + result_u60.limbs.segments[j][i]\n                    - subtrahend_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    if (carry & borrow == 1) {\n                        carry = 0;\n                        borrow = 0;\n                    }\n                    carry_flags[idx] = carry as bool;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n\n        (result, carry_flags, borrow_flags, overflow)\n    }\n\n    unconstrained fn __validate_gt_remainder(\n        _: Self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N]) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let mut b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60);\n        b_u60 += U60Repr::one();\n        assert(underflow == false, \"BigNum::validate_gt check fails\");\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                let mut add_term: u64 = a_u60.limbs.segments[j][i] + addend_u60.limbs.segments[j][i] + carry_in;\n                carry = (add_term >= 0x1000000000000000) as u64;\n                add_term -= (carry as u64 * 0x1000000000000000);\n                result_u60.limbs.segments[j][i] = add_term;\n                carry_in = carry as u64;\n                borrow = ((b_u60.limbs.segments[j][i] + borrow_in) > result_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + result_u60.limbs.segments[j][i]\n                    - b_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    if (carry & borrow == 1) {\n                        carry = 0;\n                        borrow = 0;\n                    }\n                    carry_flags[idx] = carry as bool;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags)\n    }\n\n    unconstrained fn __sub_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        if underflow {\n            addend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                let mut add_term: u64 = a_u60.limbs.segments[j][i] + addend_u60.limbs.segments[j][i] + carry_in;\n                carry = (add_term >= 0x1000000000000000) as u64;\n                add_term -= (carry as u64 * 0x1000000000000000);\n                result_u60.limbs.segments[j][i] = add_term;\n                carry_in = carry as u64;\n                borrow = ((b_u60.limbs.segments[j][i] + borrow_in) > result_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + result_u60.limbs.segments[j][i]\n                    - b_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    if (carry & borrow == 1) {\n                        carry = 0;\n                        borrow = 0;\n                    }\n                    carry_flags[idx] = carry as bool;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags, underflow)\n    }\n\n    unconstrained fn __neg_with_flags(self, val: BigNum<N, Params>) -> (BigNum<N, Params>, [bool; N]) {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        let mut borrow_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                borrow = ((x_u60.limbs.segments[j][i] + borrow_in) > self.modulus_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + self.modulus_u60.limbs.segments[j][i]\n                    - x_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, borrow_flags)\n    }\n\n    /**\n     * @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n     * @description see `__neg` for why we use 2p instead of p\n     **/\n    unconstrained fn __sub_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add(lhs, self.__neg(rhs))\n    }\n\n    unconstrained fn __invmod_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let one: BigNum<N, Params> = BigNum::one();\n        let one_u60: U60Repr<N, 2> = U60Repr::from(one.limbs);\n        let exponent = self.modulus_u60.sub(one_u60.add(one_u60));\n        let mut result = BigNum::from_array(U60Repr::into(exponent));\n        self.__pow(val, result)\n    }\n\n    unconstrained fn batch_invert_impl<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>; M] = [BigNum::new(); M];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn batch_invert_slice_impl(self, x: [BigNum<N, Params>]) -> [BigNum<N, Params>] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>] = [BigNum::new()];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n            result = result.push_back(BigNum::new());\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn __div_impl(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        let t0 = self.__invmod(divisor);\n        self.__mul(numerator, t0)\n    }\n\n    /**\n     * @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n     **/\n    // NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n    // To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n    // We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n    // Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n    // Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\n    unconstrained fn __add_linear_expression<let M: u32>(\n        self,\n        x: [BigNum<N, Params>; M],\n        flags: [bool; M]\n    ) -> ([Field; N]) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut sum: [Field; N] = [0; N];\n        // TODO: ugly! Will fail if input array is empty\n        let modulus2: [Field;N] = self.double_modulus;\n        for i in 0..M {\n            if (flags[i]) {\n                for j in 0..N {\n                    sum[j] = sum[j] + modulus2[j] - x[i].limbs[j];\n                    assert(x[i].limbs[j].lt(modulus2[j]));\n                }\n            } else {\n                for j in 0..N {\n                    sum[j] = sum[j] + x[i].limbs[j];\n                }\n            }\n        }\n        // problem if we normalize when used in computing quotient\n        sum\n        //   let result_p: ArrayX<Field, N, 1> = BigNum::__normalize_limbs(ArrayX::from_array(lhs_sum_p), N);\n        //  let result_n: ArrayX<Field, N, 1> = BigNum::__normalize_limbs(ArrayX::from_array(lhs_sum_n), N);\n        //  (result_p.segments[0], result_n.segments[0])\n    }\n\n    /**\n     * @brief computes the limb products of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_product<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> ArrayX<Field, N, 2> {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut add: [Field; N] = [0; N];\n\n        for i in 0..NUM_PRODUCTS {\n            lhs[i] = self.__add_linear_expression(lhs_terms[i], lhs_flags[i]);\n            rhs[i] = self.__add_linear_expression(rhs_terms[i], rhs_flags[i]);\n        }\n\n        let add: [Field; N] = self.__add_linear_expression(linear_terms, linear_flags);\n\n        let mut mulout: ArrayX<Field, N,2> = ArrayX::new();\n\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    mulout.add_assign(i + j, (lhs[k][i] * rhs[k][j]));\n                }\n            }\n            mulout.add_assign(i, add[i]);\n        }\n        mulout\n    }\n\n    /**\n     * @brief computes the quotient/remainder of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_impl<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mulout = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let relation_result: ArrayX<Field, N, 2> = mulout.__normalize_limbs(N + N);\n\n        // TODO: ugly! Will fail if input slice is empty\n        let k  = Params::modulus_bits();\n\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            k,\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r)\n    }\n\n    /**\n     * @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n     * @description The expression is of the form:\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n     * For example, when computing the product a * b - q * p = 0, it is possible that:\n     *      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n     *      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n     * In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n     * In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n     *\n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    unconstrained fn __compute_quadratic_expression_with_borrow_flags<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>, ArrayX<Field, N, 2>) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n\n        let mut mulout_p = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let mut mulout_n: ArrayX<Field, N, 2> = ArrayX::new();\n\n        let relation_result: ArrayX<Field, N, 2> = mulout_p.__normalize_limbs(N + N);\n        let modulus: [Field; N] = self.modulus;\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            Params::modulus_bits(),\n            modulus,\n            self.modulus_u60_x4\n        );\n        assert(remainder == [0; N]);\n\n        for i in 0..N {\n            for j in 0..N {\n                mulout_n.add_assign(i + j, quotient[i] * modulus[j]);\n            }\n        }\n\n        // compute borrow flags from mulout_p and mulout_n\n        let mut borrow_flags: ArrayX<Field, N, 2> = ArrayX::new();\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        let downshift: Field = 1 / two_pow_120;\n\n        // determine whether we need to borrow from more significant limbs.\n        // initial limb is \"simple\" comparison operation\n        // TODO: check how expensive `lt` operator is w.r.t. witness generation\n        borrow_flags.set(0, mulout_p.get(0).lt(mulout_n.get(0)) as Field);\n        // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n        // and there is nothing to borrow against for the final limb.\n        let mut hi_bits = (mulout_p.get(0) - mulout_n.get(0) + (borrow_flags.get(0) * borrow_shift)) * downshift;\n        for i in 1..(N + N - 2) {\n            // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n            // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n            //     * downshift;\n            mulout_p.add_assign(i, hi_bits);\n\n            // determine whether negative limb values are greater than positive limb values\n            let underflow: Field = mulout_p.get(i).lt(mulout_n.get(i) + (borrow_flags.get(i - 1) * borrow_carry)) as Field;\n            borrow_flags.set(i, underflow);\n\n            hi_bits = (mulout_p.get(i) - mulout_n.get(i) + (borrow_flags.get(i) * borrow_shift)\n                - (borrow_flags.get(i - 1) * borrow_carry)) * downshift;\n        }\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r, borrow_flags)\n    }\n\n    unconstrained fn __udiv_mod_impl(\n        _: Self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n        let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator.limbs);\n\n        let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor.limbs);\n        let b = divisor_u60;\n\n        let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n        let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n        divisor_u60 = divisor_u60.shl(bit_difference);\n        accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n        if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n            divisor_u60.shr1();\n            accumulator_u60.shr1();\n        }\n        for _ in 0..(N * 120) {\n            if (remainder_u60.gte(b) == false) {\n                break;\n            }\n\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (remainder_u60.gte(divisor_u60)) {\n                remainder_u60 -= divisor_u60;\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient_u60 = quotient_u60 + accumulator_u60;\n            }\n            divisor_u60.shr1(); // >>= 1;\n            accumulator_u60.shr1(); //  >>= 1;\n        }\n\n        (\n            BigNum::from_array(U60Repr::into(quotient_u60)), BigNum::from_array(U60Repr::into(remainder_u60))\n        )\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n\nunconstrained fn __barrett_reduction<let N: u32>(\n    x: ArrayX<Field, N, 2>,\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>\n) -> ([Field; N], [Field; N]) {\n    let mut mulout: ArrayX<Field, N, 3>  = ArrayX { segments: [[0; N]; 3] };\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout.add_assign(i + j, x.get(i) * redc_param[j]);\n        }\n    }\n    mulout = mulout.__normalize_limbs(3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n    let mut quotient_u60 = mulout_u60.shr((k + k));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient: ArrayX<Field, N, 2> = quotient_u60.into_arrayX();\n\n    // quotient_mul_modulus can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus: ArrayX<Field, N, 2>  = ArrayX { segments: [[0; N]; 2] };\n    let mut quotient_mul_modulus_normalized: ArrayX<Field, N, 2>  = ArrayX { segments: [[0; N]; 2] };\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus.add_assign(i + j, partial_quotient.get(i) * modulus[j]);\n        }\n    }\n\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus.get(i));\n        quotient_mul_modulus_normalized.set(i, lo);\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus.add_assign(i + 1, hi);\n        }\n    }\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n\n    let x_u60 : U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    } else {}\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n"},"412":{"path":"/home/jpag/nargo/github.com/noir-lang/noir-bignumv0.3.3/src/utils/split_bits.nr","source":"\n// Decomposes a single field into two 120 bit fields and a carry\nunconstrained pub fn split_120_bits(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let offsets: [Field; 17] = [\n        1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000, 0x10000000000000000, 0x1000000000000000000, 0x100000000000000000000, 0x10000000000000000000000, 0x1000000000000000000000000, 0x100000000000000000000000000, 0x10000000000000000000000000000, 0x1000000000000000000000000000000, 0x100000000000000000000000000000000\n    ];\n\n    for i in 0..15 {\n        low += (x_bytes[i] as Field) * offsets[i];\n        high += (x_bytes[i + 15] as Field) * offsets[i];\n    }\n    high += (x_bytes[30] as Field) * offsets[15];\n    high += (x_bytes[31] as Field) * offsets[16];\n    // TDOO: investigate why this is triggered in BigCurve crate? it shouldn't be?\n    //   assert(x_bytes[31] == 0);\n    (low, high)\n}\n\n/**\n * @brief Decomposes a single field into two 60 bit fields\n *\n * @description Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\n **/\nunconstrained pub fn split_60_bits(x: Field) -> (u64, u64) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: u64 = 0;\n    let mut high: u64 = 0;\n\n    let offsets: [u64; 8] = [1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000];\n    for i in 0..8 {\n        low += (x_bytes[i] as u64) * offsets[i];\n        high += (x_bytes[i + 8] as u64) * offsets[i];\n    }\n    let t1 = low >> 60;\n    let mask = ((1 as u64) << 60 as u8) - 1;\n    low = low & mask;\n    high = (high << 4) | t1;\n    (low, high)\n}\n"},"413":{"path":"/home/jpag/nargo/github.com/noir-lang/noir-bignumv0.3.3/src/utils/arrayX.nr","source":"use dep::std;\nuse crate::utils::split_bits;\n\n/**\n * @brief Array abstraction, whose size is a known multiplier `SizeMultiplier` of an initial size `N`\n *\n * @note ArrayX is a workaround for the lack of arithmetic over generics.\n *       e.g. [Field; N * 2] is not currently possible\n *       This abstraction can be removed once Noir supports arithmetic on generics.\n**/\nstruct  ArrayX<T, let N: u32, let SizeMultiplier: u32> {\n    segments: [[T; N]; SizeMultiplier]\n}\n\nimpl<T, let N: u32, let SizeMultiplier: u32> std::convert::From<[T; N]> for ArrayX<T, N, SizeMultiplier> where T: std::default::Default {\n    fn from(input: [T; N]) -> Self {\n        assert(N == 1);\n        let mut result = ArrayX::new();\n        result.segments[0] = input;\n        result\n    }\n}\n\nimpl<T, let N: u32, let SizeMultiplier: u32> std::convert::From<[[T; N]; SizeMultiplier]> for ArrayX<T, N, SizeMultiplier> where T: std::default::Default {\n    fn from(input: [[T; N]; SizeMultiplier]) -> Self {\n        ArrayX { segments: input }\n    }\n}\n\nimpl<T, let N: u32, let SizeMultiplier: u32> std::cmp::Eq for ArrayX<T, N, SizeMultiplier> where T: std::cmp::Eq {\n    fn eq(self, other: Self) -> bool {\n        let mut result: bool = true;\n        for i in 0..SizeMultiplier {\n            for j in 0..N {\n                result = result & (self.segments[i][j] == other.segments[i][j]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let SizeMultiplier: u32> ArrayX<T, N, SizeMultiplier> {\n\n    fn new() -> Self where T: std::default::Default {\n        ArrayX { segments: [[T::default(); N]; SizeMultiplier] }\n    }\n\n    fn mul_assign(&mut self, i: u32, rhs: T) where T: std::ops::Mul {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] *= rhs;\n    }\n\n    fn add_assign(&mut self, i: u32, rhs: T) where T: std::ops::Add {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] += rhs;\n    }\n\n    fn sub_assign(&mut self, i: u32, rhs: T) where T: std::ops::Sub {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] -= rhs;\n    }\n\n    fn set(&mut self, i: u32, x: T) {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] = x;\n    }\n\n    fn get(self, i: u32) -> T {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index]\n    }\n}\n\nimpl<let N: u32, let SizeMultiplier: u32> ArrayX<Field, N, SizeMultiplier> {\n\n    unconstrained fn __normalize_limbs(self, range: u32) -> Self {\n        let mut normalized: Self = ArrayX::new();\n        let mut inp = self;\n        // (9 limb mul = 17 product terms)\n\n        // a2 a1 a0\n        // b2 b1 b0\n\n        // a0b0\n        // a1b0 a0b1\n        // a2b0 a1b1 a0b2\n        // a2b1 a1b2\n        // a2b2\n\n        // r0 lo\n        // r0 hi + r1 lo\n        // r1 hi + r2 lo\n        // r2 hi + r3 lo\n        // r3 hi + r4 lo\n        // r4 hi = 6?\n        for i in 0..(range - 1) {\n            let (lo, hi) = split_bits::split_120_bits(inp.get(i));\n\n            normalized.set(i, lo);\n            inp.set(i + 1, inp.get(i + 1) + hi);\n        }\n        {\n            let (lo, hi) = split_bits::split_120_bits(inp.get(range - 1));\n            normalized.set(range - 1, lo);\n            assert(hi == 0);\n        }\n        normalized\n    }\n}\n"},"414":{"path":"/home/jpag/nargo/github.com/noir-lang/noir-bignumv0.3.3/src/utils/u60_representation.nr","source":"use dep::std;\n\nuse crate::utils::arrayX::ArrayX;\nuse crate::utils::split_bits;\nuse crate::utils::msb::get_msb64;\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\nstruct  U60Repr<let N: u32, let NumSegments: u32>\n{\n    limbs: ArrayX<u64, N, NumSegments>\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let mut carry: u64 = 0;\n        for j in 0..NumSegments {\n            for i in 0..N {\n                let mut add: u64 = self.limbs.segments[j][i] + b.limbs.segments[j][i] + carry;\n                carry = add >> 60;\n                add = add - (carry << 60);\n                result.limbs.segments[j][i] = add;\n            }\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for j in 0..NumSegments {\n            for i in 0..N {\n                borrow = ((b.limbs.segments[j][i] + borrow_in) > self.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + self.limbs.segments[j][i] - b.limbs.segments[j][i] - borrow_in;\n                result.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n        for i in 0..(N) {\n            let (lo, hi) = split_bits::split_60_bits(input[i]);\n            result.limbs.set(2 * i, lo);\n            result.limbs.set(2 * i + 1, hi);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs.get(2 * i) as Field + (x.limbs.get(2 * i + 1) as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    unconstrained fn new<let NumFieldSegments: u32>(x: ArrayX<Field, N, NumFieldSegments>) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x.get(i));\n            result.limbs.set(2 * i, lo);\n            result.limbs.set(2 * i + 1, hi);\n        }\n        result\n    }\n\n    unconstrained fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n        result.limbs.set(0, 1);\n        result\n    }\n\n    unconstrained fn into_arrayX<let NumFieldSegments: u32>(x: U60Repr<N, NumSegments>) -> ArrayX<Field, N, NumFieldSegments> {\n        let mut result: ArrayX<Field, N, NumFieldSegments> = ArrayX { segments: [[0; N]; NumFieldSegments] };\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..(N * NumFieldSegments) {\n            result.set(\n                i,\n                x.limbs.get(2 * i) as Field + (x.limbs.get(2 * i + 1) as Field * two_pow_60)\n            );\n        }\n        result\n    }\n\n    unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            if (b.limbs.get((N * NumSegments) - 1 - i) < (self.limbs.get((N * NumSegments) - 1 - i))) {\n                result = true;\n                early_exit = true;\n                break;\n            } else if (b.limbs.get((N * NumSegments) - 1 - i) != (self.limbs.get((N * NumSegments) - 1 - i))) {\n                result = false;\n                early_exit = true;\n                break;\n            }\n        }\n        if (early_exit == false) {\n            result = (self.limbs.get(0) == b.limbs.get(0));\n        }\n        result\n    }\n\n    fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs.get(segment_index);\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = shift % 60;\n        let remainder_shift = 60 - limb_shift;\n        let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        result.limbs.set(\n            0,\n            (self.limbs.get(0 + num_shifted_limbs) >> limb_shift as u8)\n        );\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs.get(i + num_shifted_limbs);\n            result.limbs.set(i, (value >> limb_shift as u8));\n            let remainder: u64 = (value << remainder_shift as u8) & mask;\n            result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr1(&mut self) {\n        let value = self.limbs.segments[NumSegments - 1][N - 1];\n        self.limbs.segments[NumSegments - 1][N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for j in 0..NumSegments {\n            for i in 0..N {\n                let value = self.limbs.segments[NumSegments - 1 - j][N - 1 - i];\n                self.limbs.segments[NumSegments - 1 - j][N - 1 - i] = (value >> 1) + remainder;\n                remainder = (value << 59) & 0x800000000000000;\n            }\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs.get(0);\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs.set(num_shifted_limbs, (value << (limb_shift as u8)) & mask);\n\n        // shift 84. num shifted = 1\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs.get(i);\n            let upshift = ((value << (limb_shift as u8)) + remainder) & mask;\n            result.limbs.set(i + num_shifted_limbs, upshift);\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs.segments[0][0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs.segments[0][0] = add;\n        for i in 1..N {\n            let mut add: u64 = self.limbs.segments[0][i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs.segments[0][i] = add;\n        }\n        for j in 1..NumSegments {\n            for i in 0..N {\n                let mut add: u64 = self.limbs.segments[j][i] + carry;\n                carry = add >> 60;\n                add = add - (carry << 60);\n                self.limbs.segments[j][i] = add;\n            }\n        }\n    }\n\n    unconstrained  fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs.get((N * NumSegments) - 1 - i);\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n"},"55":{"path":"std/ops/arith.nr","source":"// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"6":{"path":"std/cmp.nr","source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(s, quote { Eq }, signature, for_each_field, quote { & }, body)\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"71":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/zimburse_escrow/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod constants;\nmod types;\n\n#[aztec]\ncontract ZImburseEscrow {\n    use dep::aztec::prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map};\n    use dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note;\n    use dep::aztec::macros::{storage::storage, functions::{private, public, view, initializer}};\n    use dep::aztec::keys::getters::get_public_keys;\n    use dep::address_note::address_note::AddressNote;\n    use dep::aztec::note::note_getter_options::NoteGetterOptions;\n    use dep::zimburse_verifiers::{\n        constants::{MAX_LINODE_EMAIL_BODY_LENGTH, MAX_LINODE_EMAIL_HEADER_LENGTH},\n        linode::verify_linode_billing_receipt,\n        zkemail::KEY_LIMBS_2048\n    };\n    \n    use crate::types::definition::{Definition, TITLE_LENGTH};\n    use crate::types::recurring_entitlement_note::RecurringEntitlementNote;\n    // use dep::aztec::macros::{storage::storage, functions::{private, initializer}};\n    use dep::token::Token;\n\n    #[storage]\n    struct Storage<Context> {\n        definition: SharedImmutable<Definition, Context>,\n        entitlements: Map<AztecAddress, PrivateSet<RecurringEntitlementNote, Context>, Context>\n    }\n\n\n    /**\n     * Initialize the Z-Imburse contract by setting the owner and USDC token.\n     *\n     * @param usdc_token The address of the USDC token\n     */\n    #[public]\n    #[initializer]\n    fn constructor(usdc_token: AztecAddress, title: str<TITLE_LENGTH>) {\n        let definition = Definition::new(context.msg_sender(), usdc_token, title);\n        storage.definition.initialize(definition);\n    }\n\n\n    #[private]\n    fn give_entitlement(to: AztecAddress, amount: Field) {\n        let recipient = get_public_keys(to);\n        let mut entitlement: RecurringEntitlementNote = RecurringEntitlementNote::new(to, recipient.npk_m.hash(), U128::from_integer(amount));\n        storage.entitlements.at(to).insert(&mut entitlement).emit(\n            encode_and_encrypt_note(&mut context, context.msg_sender(), to)\n        );\n    }\n\n    #[private]\n    fn redeem_linode_entitlement(\n        // email inputs\n        body: [u8; MAX_LINODE_EMAIL_BODY_LENGTH],\n        body_hash_index: u32,\n        body_length: u32,\n        header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH],\n        header_length: u32,\n        pubkey: [Field; KEY_LIMBS_2048],\n        pubkey_redc: [Field; KEY_LIMBS_2048],\n        signature: [Field; KEY_LIMBS_2048],\n        from_index: u32,\n        subject_index: u32,\n        amount_index: u32,\n        amount_length: u32,\n        date_index: u32,\n        receipt_id_length: u32,\n        // claim hash\n        claim_secret_hash: Field,\n    ) {\n        // read note\n        // todo: filter for linode entitlement\n        let notes = storage.entitlements.at(context.msg_sender()).pop_notes(\n            NoteGetterOptions::new().set_limit(1)\n        );\n        assert(notes.len() == 1, \"No entitlements to redeem\");\n        let note = notes.get_unchecked(0);\n        assert(note.owner == context.msg_sender(), \"Entitlement does not belong to the sender\");\n\n        // verify linode billing receipt and extract amount, date, keyhash\n        let linode_receipt_result = verify_linode_billing_receipt(\n            body, body_hash_index, body_length, header, header_length, pubkey, pubkey_redc, signature, from_index, subject_index, amount_index, amount_length, date_index, receipt_id_length\n        );\n        let dkim_key_hash = linode_receipt_result[0];\n        let datetime = linode_receipt_result[1];\n        // billed amount returns 2 decimals, so multiply billed_amount by 10,000\n        let billed_amount = U128::from_integer(linode_receipt_result[2] * 10000);\n\n        // determine the amount to reimburse\n        let amount_to_reimburse = if note.max_value >= billed_amount {\n            billed_amount\n        } else {\n            note.max_value\n        };\n\n        // release funds from escrow by shielding in public\n        // todo: event should notify how much was reimbursed\n        let token_address = storage.definition.read_private().usdc;\n        Token::at(token_address).shield(context.this_address(), amount_to_reimburse.to_field(), claim_secret_hash, 0).enqueue(&mut context);\n    }\n\n    /**\n     * Get the title of the Z-Imburse escrow\n     */\n    #[public]\n    #[view]\n    pub fn get_title() -> [u8; TITLE_LENGTH]{\n        storage.definition.read_public().title_as_string()\n    }\n\n}\n\n"},"72":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/zimburse_escrow/src/types/recurring_entitlement_note.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator};\nuse dep::aztec::{note::utils::compute_note_hash_for_nullify, oracle::unsafe_rand::unsafe_rand};\nuse dep::compressed_string::CompressedString;\nuse dep::aztec::macros::notes::note;\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, PrivateContext};\nuse dep::aztec::keys::getters::get_nsk_app;\n\n// unique ids for each verifier type\nmod HOSTING_VERIFIER_TYPE {\n    global LINODE: u8 = 1; // supported\n    global HEROKU: u8 = 2; // todo: supported\n    global AWS: u8 = 3; // todo: supported\n    global GCP: u8 = 4; // not supported in mvp\n    global AZURE: u8 = 5; // not supported in mvp\n    global HETZNER: u8 = 6; // not supported in mvp\n    global DIGITAL_OCEAN: u8 = 7; // not supported in mvp\n}\n\n// trait OwnedNote {\n//     fn new(\n//         owner: AztecAddress,\n//         external_nullifier_hash: Field,\n//         npk_m_hash: Field,\n//         max_value: U128,\n//         verifier_type: u8,\n//     ) -> Self;\n// }\n\ntrait OwnedNote {\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self;\n}\n\n#[note]\npub struct RecurringEntitlementNote {\n    // the user that is allowed to use this entitlement\n    owner: AztecAddress,\n    // // the external nullifier that the admin can use to nullify the note\n    // external_nullifier_hash: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // // the type of email verifier that should be used for this entitlement\n    // verifier_type: u8,\n    // random entropy to make the note private\n    randomness: Field,\n}\n\nimpl NullifiableNote for RecurringEntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for RecurringEntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.owner == other.owner)\n            & (self.max_value == other.max_value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for RecurringEntitlementNote {\n    // fn new(\n    //     owner: AztecAddress,\n    //     external_nullifier_hash: Field,\n    //     npk_m_hash: Field,\n    //     max_value: U128,\n    //     verifier_type: u8,\n    //     randomness: Field\n    // ) -> Self {\n    //     Self {\n    //         owner,\n    //         external_nullifier_hash,\n    //         npk_m_hash,\n    //         max_value,\n    //         verifier_type,\n    //         randomness: unsafe_rand()\n    //         header: NoteHeader::empty()\n    //     }\n    // }\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self {\n        Self {\n            owner,\n            npk_m_hash,\n            max_value,\n            randomness: unsafe { unsafe_rand() },\n            header: NoteHeader::empty()\n        }\n    }\n}"},"75":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/zimburse_escrow/src/types/definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\nuse dep::compressed_string::CompressedString;\n\nglobal DEFINITION_LENGTH: u32 = 4;\nglobal TITLE_LENGTH: u32 = 60;\nglobal TITLE_SERIALIZED_LENGTH: u32 = 2;\n\npub struct Definition {\n    admin: AztecAddress,\n    usdc: AztecAddress,\n    title: CompressedString<TITLE_SERIALIZED_LENGTH, TITLE_LENGTH>\n}\n\nimpl Serialize<DEFINITION_LENGTH> for Definition {\n    fn serialize(self: Self) -> [Field; DEFINITION_LENGTH] {\n        [self.admin.to_field(), self.usdc.to_field(), self.title.value[0], self.title.value[1]]\n    }\n}\n\nimpl Deserialize<DEFINITION_LENGTH> for Definition {\n    fn deserialize(fields: [Field; DEFINITION_LENGTH]) -> Self {\n        Definition {\n            admin: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            title: CompressedString { value: [fields[2], fields[3]] }\n        }\n    }\n}\n\nimpl Definition {\n    /**\n     * Create a new definition for a Z-Imburse escrow contract with the uncompressed string\n     *\n     * @param admin The address of the admin of the contract\n     * @param usdc The address of the USDC token\n     * @param title The title of the contract as a string of max length 60\n     * @return The new definition\n     */\n    pub fn new(admin: AztecAddress, usdc: AztecAddress, title: str<TITLE_LENGTH>) -> Self {\n        Definition { admin, usdc, title: CompressedString::from_string(title) }\n    }\n\n    /**\n     * Return the bytes of the title to display as a string\n     *\n     * @return The title as a string\n     */\n    pub fn title_as_string(self) -> [u8; TITLE_LENGTH] {\n        self.title.to_bytes()\n    }\n}\n"},"76":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/zimburse_escrow/src/types/uint_note.nr","source":"use dep::aztec::{\n    prelude::{NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app, macros::notes::note\n};\n\n#[note]\npub struct UintNote {\n    // The integer stored by the note\n    value: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NullifiableNote for UintNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for UintNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}"},"79":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/address-note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"93":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"94":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_getter_options.nr","source":"use std::option::Option;\nuse dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, traits::ToField};\nuse crate::note::note_interface::NoteInterface;\n\npub struct PropertySelector {\n    index: u8, // index of the field in the serialized note array\n    offset: u8, // offset in the byte representation of the field (selected with index above) from which to reading\n    length: u8, // number of bytes to read after the offset\n}\n\npub struct Select {\n    property_selector: PropertySelector,\n    comparator: u8,\n    value: Field,\n}\n\nimpl Select {\n    // The selected property will be the left hand side and value the right hand side of the operation, so e.g. the\n    // object created by new(property, Comparator.GT, value) represents 'property > value'.\n    pub fn new(property_selector: PropertySelector, comparator: u8, value: Field) -> Self {\n        Select { property_selector, comparator, value }\n    }\n}\n\npub struct SortOrderEnum {\n    DESC: u8,\n    ASC: u8,\n}\n\nglobal SortOrder = SortOrderEnum {\n    DESC: 1,\n    ASC: 2,\n};\n\npub struct Sort {\n    property_selector: PropertySelector,\n    order: u8,\n}\n\nimpl Sort {\n    pub fn new(property_selector: PropertySelector, order: u8) -> Self {\n        Sort { property_selector, order }\n    }\n}\n\npub struct NoteStatusEnum {\n    ACTIVE: u8,\n    ACTIVE_OR_NULLIFIED: u8,\n}\n\nglobal NoteStatus = NoteStatusEnum {\n    ACTIVE: 1,\n    ACTIVE_OR_NULLIFIED: 2,\n    // TODO 4217: add 'NULLIFIED'\n};\n\n// This is the default filter and preprocessor, which does nothing\nfn return_all_notes<Note>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    _p: Field\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    notes\n}\n\n// docs:start:NoteGetterOptions\npub struct NoteGetterOptions<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    // Preprocessor and filter functions are used to filter notes. The preprocessor is applied before the filter and\n    // unlike filter it is applied in an unconstrained context.\n    preprocessor: fn ([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n    filter: fn ([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], FILTER_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    filter_args: FILTER_ARGS,\n    status: u8,\n}\n// docs:end:NoteGetterOptions\n\n// When retrieving notes using the NoteGetterOptions, the configurations are applied in a specific sequence to ensure\n// precise and controlled data retrieval.\n// The database-level configurations are applied first:\n// `selects` to specify fields, `sorts` to establish sorting criteria, `offset` to skip items, and `limit` to cap\n// the result size.\n// And finally, a custom preprocessor and filter to refine the outcome further.\nimpl<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS> NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS> {\n    // This method adds a `Select` criterion to the options.\n    // It takes a property_selector indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from `utils::comparison`)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    // This method adds a `Sort` criterion to the options.\n    // It takes a field_index indicating which field to sort by and an order (SortOrder) to determine the sorting direction.\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    // This method lets you set a limit for the maximum number of notes to be retrieved in a single query result.\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        assert_constant(limit);\n\n        self.limit = limit;\n        *self\n    }\n\n    // This method sets the offset value, which determines where to start retrieving notes in the query results.\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n\nimpl<Note, let N: u32> NoteGetterOptions<Note, N, Field, Field> where Note: NoteInterface<N> {\n    // This function initializes a NoteGetterOptions that simply returns the maximum number of notes allowed in a call.\n    pub fn new() -> Self {\n        Self {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            preprocessor: return_all_notes,\n            preprocessor_args: 0,\n            filter: return_all_notes,\n            filter_args: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n}\n\nimpl<Note, let N: u32, PREPROCESSOR_ARGS> NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, Field> where Note: NoteInterface<N> {\n    // This function initializes a NoteGetterOptions with a preprocessor, which takes the notes returned from\n    // the database and preprocessor_args as its parameters.\n    // `preprocessor_args` allows you to provide additional data or context to the custom preprocessor.\n    pub fn with_preprocessor(\n        preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n        preprocessor_args: PREPROCESSOR_ARGS\n    ) -> Self {\n        Self {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            preprocessor,\n            preprocessor_args,\n            filter: return_all_notes,\n            filter_args: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n}\n\nimpl<Note, let N: u32, FILTER_ARGS> NoteGetterOptions<Note, N, Field, FILTER_ARGS> where Note: NoteInterface<N> {\n    // This function initializes a NoteGetterOptions with a filter, which takes\n    // the notes returned from the database and filter_args as its parameters.\n    // `filter_args` allows you to provide additional data or context to the custom filter.\n    pub fn with_filter(\n        filter: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], FILTER_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n        filter_args: FILTER_ARGS\n    ) -> Self {\n        Self {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            preprocessor: return_all_notes,\n            preprocessor_args: 0,\n            filter,\n            filter_args,\n            status: NoteStatus.ACTIVE\n        }\n    }\n}\n"},"95":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"96":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, notification_note_hash, nullifier_counter) == 0);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n\n"},"99":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"}}}