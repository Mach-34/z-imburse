{"noir_version":"0.38.0+e784523a15c0c233a5a794f28498635b7ce86325","hash":12897088647763962241,"abi":{"parameters":[{"name":"params","type":{"kind":"struct","path":"zimburse_verifiers::linode::constants::LinodeBillingParams","fields":[{"name":"header","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":640,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":832,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"pubkey","type":{"kind":"struct","path":"zimburse_verifiers::zkemail::dkim::RSAPubkey","fields":[{"name":"modulus","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"redc","type":{"kind":"array","length":18,"type":{"kind":"field"}}}]}},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"dkim_header_sequence","type":{"kind":"struct","path":"zimburse_verifiers::zkemail::Sequence","fields":[{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"body_hash_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"from_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"subject_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amount_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"date_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"receipt_id_length","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"public"},"error_types":{"5460150517075275239":{"error_kind":"fmtstring","length":129,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32}]},"9464310096042814896":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"integer","sign":"unsigned","width":8},{"kind":"integer","sign":"unsigned","width":32}]},"12201960142877261160":{"error_kind":"fmtstring","length":123,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32}]}}},"bytecode":"","debug_symbols":"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s3OF7eHdsFmiwvbwbtgsUVG7WaLC9vCdK7VERe3ht8xhiWqoJSpqD9+5UktU1B4+vVVLVNBulqgWvxIxw1WrHzX8BZLZucJ28dTG9vCdq7BzNcLO1Qg7V8PsXFG72bminY3ZucL28G7Y7Fxhu3iuYnv4zpXZucL28Ftms3OFsyk8V83OFbaH71yZnStsD5/eqp2rn73UoXauqL3rRw61c0XtZj+S2iMu85f23SxRYXvXZd7NEhW2d/3I/WOeq9Ru/vW/n73U3SxRYXvXj9zNEhW2d13m3SxRYbt5rlJ712XezRLV2mPw3QxXrX7U7untbnausL0rZuxm5wrbu2+Z97BztYedq93sXGF79/R2N0tU2N49vd3NEhW2d09vd7VERe3db4R2tURF7eG5qpaoqL17erurJSpq734jtKslKmr/MwTGboarVj9qV8zYzc4VtnfFjN3sXGF7eGqHnas97FztZucK28O7YbNEhe3h3bBZosL27jdCu1qiovbwW2a1REXt4bmqlqiovfvt7a6WqKg9fHqrlqio/c8QGLsZrlr9qF0xYzc7V9gevnNldq6wPTy1w87VHnaudrNzhe3h3bBZosL28G7YLFFhe/jOlVqiovbwW2a1REXt4bmqlqioPXznSi1RUXv49FYtUVG7+cveta9EzHDV6kcNf4Fkdq6wPXznyuxcYXt4aoedqz3sXO1m5wrbw7ths3OF7eHdsNm5wvbunatpdq6wvfuWeZqdK2zvztX56c7VaXausL1752qanSts757eTrVz9bOXOtXOFbV3/cipdq6o3exHUrt4rmJ7xGX+2t51madZosL2rh85zRIVtZslKvBSp1miwvauHznNEhW2m+cqtZvnKrWb5yq1d13maZao1h6DTzNctfhRzc4VnN5Os3OF7V0xY5qdK2wXT2166xZ2rmbYuZpm5wrbu6e30yxRUbtZosL28OmtWaLC9u43QlMtUVF791bUDEtUUy1RUXv49FYtUUG7WqKi9u5t42mWqBa/EjHDVasfVTy1aSdvdq6wvStmTLNzhe3hqR12rmbYuZpm5wrbw7ths0SF7eK5iu3h3bBZosL27jdCUy1RUXv4LXNYoppqiYrau9/eTrVERe3muUrt4dNbs0S1+JWIGa5a/ahdMWOanStqNztX2B6+cxV2rmbYuZph52qanStsD++GzRIVtod3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ovbuW+b56c7VqZaoqL377e1US1TU3j29nWqJCtrNEtXaVyLTDFetftSumDHNzhW2i6c2tnfvXM2wczXDztUMO1fT7FxRuxmuop2NWaLC9vBu2CxRYbt4rmJ7987VVEtU1N59yzzDEtVUS1TQrpaoqL1752qqJSpq757eTrNEtfiViBmuWv2o3S+Qptm5wvbunatpdq6oPexczbBzNcPO1TQ7V9guntq0szE7V9ge3g2bnSts7965mmbnitrNzhW2h98ym50rmk1m5wrbzXOV2sN3rszOFbaHT2/VztXPXupUO1fQrnaufjYYp9q5onazH0ntEZf5a7t4rmJ712WeZokK27t+5DRLVNhu/vW/n73UaZaosL3rR06zRIXtXZd5miUqbDfPVWrvuszTLFEtPgY3w1WrHzV8emt2rrC9K2ZMs3OF7eG3zGHnaoadq2l2rrA9fHprlqiwPXx6a5aosD18equWqKg9/I2QWqKi9vBcVUtU1B4+vVVLVNTe/UboUEtU1P5nCIzDDFetftSumHF8xFMb27tixmF2rrC9O7WPsHN1hJ2rw+xcYXt3N3yYJSps7+6GD7NEhe3db4QOtURF7d23zIdaoqL28FxVS1TU3v329lBLVNTePb091BIVtf8ZAuMww1WrH7UrZhxm5wrbu3euDrNzhe3hqR12ro6wc3WYnStsD++GzRIVtod3w2aJCtu7d64OtURF7eG3zGqJitrDc1UtUVF7987VoZaoqD18equWqKjd/GXv2lciZrhq9aN2v0A6zM4VtofvXJmdK2wPT+2wc3WEnavD7Fxhe3g3bHausD28GzY7V9gevnNldq6wPfyW2excYXt4rpqdK2wP37kyO1fYHj69NTtX2B7xI8e3dvFcxfauH3monStqN/uR1B5xmb+2R1zmb+1miQrbuy7zYZaowNM7zBIVtovnKniph1miwvauH3mYJSps77rMh1mionazRIXtXZf5MEtUi4/BzXDV6kcVT206vTU7V9geFjPMzhW2h98yh52rM+xcnWbnCtu7p7enWaLCdvFcxfbu6e1plqiwvfuN0KmWqKi9eyvqDEtUp1qiovbu6e2plqio3TxXqb172/g0S1RrX4mcZrhq9aN2xYzT7FxRu9m5wvbuN0Jn2Lk6w87VGXauTrNzhe3h3bBZosL28G7YLFFRu1miwvbuN0KnWqKi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u6e30+xcYXvEjxzf2iN+5Nf2rh851c4VtZv9SGqPuMxf2yMu89f2rss8zRIVtZslKvD0plmiwnbzr//97KVOs0SF7ea5Sn9mui7zNEtU2G6eq9RunqvU3nWZp1miWnwMboarVj9q+PTW7Fxhu3hqY3v3G6EZdq5m2LmaYedqmp0rajfDVXSaZZaosD18emuWqLBdPFexvfuN0FRLVNQevhUVlqimWqKCdrVERe3hb4TUEhW1h28bmyWqxa9EzHDV6kftihnT7Fxhe1fMmGbnitrDztUMO1cz7FxNs3OF7eKpTTsbs0SF7eHdsFmiwvbwN0JqiQra1RIVtYffMoclqqmWqKjdPFepPfyNkFqiovbw6a1Zolr8SsQMV6191MPsXMFO/jA7V9jevXN1mJ0rbO9O7SPsXB1h5+owO1fY3t0NH2aJitrNEhW2d3fDh1miwvbunatDLVFRe/ct8xGWqA61REXt3TtXh1qigna1REXt3dPbwyxRLX4lYoarVj+qeGrTTt7sXGF7987VYXausD08tcPO1RF2rg6zc4Xt4d2w2bnCdvFcxfbwbtjsXGF7987VYXausD38ltnsXNFsMjtX2N69c3WYnStsN89Vag+f3qqdq5+91EPtXFF714881M4VtJudK2yPuMxf2yMu89f2rst8mCUqbO/6kYdZosJ286///eylHmaJCtu7fuRhlqiwvesyH2aJCtvNc5XazXOV2v8MgXGY4arVjxo+vTU7V9jeFTMOs3OF7eG3zGHn6gg7V4fZucL28OmtWaLC9vDprVmiwvbw6a1aoqL28DdCaomK2sNzVS1RUXv49FYtUVF7+BshtURF7X+HwDDDVasfNSxmmJ0rbA+LGWbnCtvDUzvsXB1h5+owO1fY3t0Nn2aJCtu7u+HTLFFhe/cbofMjnqvY3n3LfKolKmrvztVTLVFRe/fb21MtUVF79/T2VEtU1P5nCIzTDFetftSumHGanSts7965Os3OFbaHp3bYuTrDztVpdq6wPbwbNktU2B7eDZslKmzv3rk61RIVtYffMqslKmoPz1W1REXt3TtXp1qiovbu6e2plqio3fxl79pXIma4avWjdr9AOs3OFbZ371ydZucK28NTO+xcnWHn6jQ7V9ge3g2bnStsD++Gzc4VtofvXJmdK2wPv2U2O1fYHp6rZucK28N3rszOFbaHT2/N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+z5q9wukzexcYXv3ztVmdq6wPTy1w87VFnautrBztamdK9jZqJ0rag/vhs3OFbZ371xtZucK27tvmTezc4Xt4blqdq6wvXvnajM7V9jePb3dzM4Vtnf9yE3tXFF714/c1M4VtXf9yM0MV2F714/czBIVtkdc5q/t4rkKnt5mlqiw3fzj9j+7nZtZosL2rh+5mSUqajdLVNhunqvUbp6r1G6eq9QunquLj8HNcNXqRw2f3pqdK2zvihmb2bmi9rBztYWdqy3sXG1m5wrbxVObTrPMEhW2h09vzRIVtodPb9USFbSrJSpqD9+KCktUm1qionbzXKX28DdCaomK2sO3jc0S1eJXIma4avGjmp0r2smbnSts74oZm9m5wvbw1A47V1vYudrMzhW2h3fDZomK2s0SFbaHd8NmiQrbw98IqSUqag+/ZQ5LVJtaoqL28Le3aonq5/ahlqiovXt6O8wS1dpXIsMMV61+VPHUhp38MDtX2N69czXMzhW2d6f2CDtXI+xcDbNzhe3d3fAwS1TYLp6r2N7dDQ+zRIXt3TtXQy1RUXv3LfMIS1RDLVFRe/fO1VBLVNRunqvU3j29HWaJavErETNctfpRu18gDbNzRe1m5wrbu3euRti5GmHnaoSdq2F2rrA9vBs2O1fYHt4Nm50rajc7V9jevXM1zM4VtoffMpudK5pNZucK27t3robZucL28Omt2bmidrVz9bOXOtTOFbV3/cihdq6oXTxXsT3iMn9tj7jMX9u7LvMwS1TY3vUjh1miwnbzr//97KUOs0SF7V0/cpglKmzvuszDLFFhu3muUnvXZR5miWrxMbgZrlr9qOHTW7Nzhe1dMWOYnStsD79lDjtXI+xcDbNzhe3h01uzRIXt4dNbs0SF7eHTW7VERe3hb4TUEhW1h+eqWqKi9vDprVqiovbwN0JqiYra/w6BYYarVj9qWMwwO1fYHhYzzM4Vtnen9h52rvawc7WbnSts7+6G9494DGN7dze8myUqbO9+I7SrJSpq775l3tUSFbWH56paoqL27re3u1qiovbu6e2ulqio/c8QGLsZrlr9qF0xYzc7V9jevXO1m50rbA9P7bBztYedq93sXGF7eDdslqiwPbwbNktU2N69c7WrJSpqD79lVktU1B6eq2qJitq7d652tURF7eHTW7VERe3mL3vXvhIxw1WrH7X7BdJu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","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"25":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"28":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"34":{"source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE = 16;\n\n// A `u32` integer consists of 4 bytes.\nglobal INT_SIZE = 4;\n\n// Index of the integer in the `INT_BLOCK` where the length is written.\nglobal INT_SIZE_PTR = MSG_SIZE_PTR / INT_SIZE;\n\n// Magic numbers for bit shifting.\n// Works with actual bit shifting as well as the compiler turns them into * and /\n// but circuit execution appears to be 10% faster this way.\nglobal TWO_POW_8 = 256;\nglobal TWO_POW_16 = TWO_POW_8 * 256;\nglobal TWO_POW_24 = TWO_POW_16 * 256;\nglobal TWO_POW_32 = TWO_POW_24 as u64 * 256;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeros, with neighbouring 4 bytes packed into integers.\ntype MSG_BLOCK = INT_BLOCK;\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ];\n    // Pointer into msg_block on a 64 byte scale\n    let mut msg_byte_ptr = 0;\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_block, h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block = update_block_item(\n        msg_block,\n        msg_byte_ptr,\n        |msg_item| set_item_byte_then_zeros(msg_item, msg_byte_ptr, 1 << 7),\n    );\n    msg_byte_ptr = msg_byte_ptr + 1;\n    let last_block = msg_block;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_block, h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Apply a function on the block item which the pointer indicates.\nfn update_block_item<Env>(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    f: fn[Env](u32) -> u32,\n) -> MSG_BLOCK {\n    let i = msg_byte_ptr / INT_SIZE;\n    msg_block[i] = f(msg_block[i]);\n    msg_block\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        if item == 0 {\n            0\n        } else {\n            // Brillig wouldn't shift 0<<4 without overflow.\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::{\n        attach_len_to_msg_block, build_msg_block, byte_into_item, get_item_byte, make_item,\n        set_item_byte_then_zeros, set_item_zeros,\n    };\n    use super::INT_BLOCK;\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n\n    #[test]\n    fn test_get_item_byte() {\n        let fld = make_item(10, 20, 30, 40);\n        assert_eq(fld, 0x0a141e28);\n        assert_eq(get_item_byte(fld, 0), 10);\n        assert_eq(get_item_byte(fld, 4), 10);\n        assert_eq(get_item_byte(fld, 6), 30);\n    }\n\n    #[test]\n    fn test_byte_into_item() {\n        let fld = make_item(0, 20, 0, 0);\n        assert_eq(byte_into_item(20, 1), fld);\n        assert_eq(byte_into_item(20, 5), fld);\n    }\n\n    #[test]\n    fn test_set_item_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 0, 0, 0);\n        assert_eq(set_item_zeros(fld0, 3), fld1);\n        assert_eq(set_item_zeros(fld0, 4), 0);\n        assert_eq(set_item_zeros(0, 4), 0);\n    }\n\n    #[test]\n    fn test_set_item_byte_then_zeros() {\n        let fld0 = make_item(10, 20, 30, 40);\n        let fld1 = make_item(10, 50, 0, 0);\n        assert_eq(set_item_byte_then_zeros(fld0, 1, 50), fld1);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_0() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48,\n        ];\n        assert_eq(input.len(), 22);\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 0) };\n        assert_eq(msg_byte_ptr, input.len());\n        assert_eq(msg_block[0], make_item(input[0], input[1], input[2], input[3]));\n        assert_eq(msg_block[1], make_item(input[4], input[5], input[6], input[7]));\n        assert_eq(msg_block[5], make_item(input[20], input[21], 0, 0));\n        assert_eq(msg_block[6], 0);\n    }\n\n    #[test]\n    fn test_build_msg_block_start_1() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        assert_eq(input.len(), 68);\n        let (msg_block, msg_byte_ptr) = unsafe { build_msg_block(input, input.len(), 64) };\n        assert_eq(msg_byte_ptr, 4);\n        assert_eq(msg_block[0], make_item(input[64], input[65], input[66], input[67]));\n        assert_eq(msg_block[1], 0);\n    }\n\n    #[test]\n    fn test_attach_len_to_msg_block() {\n        let input: INT_BLOCK = [\n            2152555847, 1397309779, 1936618851, 1262052426, 1936876331, 1985297723, 543702374,\n            1919905082, 1131376244, 1701737517, 1417244773, 978151789, 1697470053, 1920166255,\n            1849316213, 1651139939,\n        ];\n        let msg_block = unsafe { attach_len_to_msg_block(input, 1, 448) };\n        assert_eq(msg_block[0], ((1 << 7) as u32) * 256 * 256 * 256);\n        assert_eq(msg_block[1], 0);\n        assert_eq(msg_block[15], 3584);\n    }\n}\n","path":"std/hash/sha256.nr"},"69":{"source":"use dep::zimburse_verifiers::{linode::{constants::LinodeBillingParams, main::verify_linode_billing_receipt}};\n\nfn main(params: LinodeBillingParams) -> pub [Field; 3] {\n    let LinodeBillingParams { \n        header,\n        body,\n        pubkey,\n        signature,\n        dkim_header_sequence,\n        body_hash_index,\n        from_index,\n        subject_index,\n        amount_index,\n        date_index,\n        receipt_id_length\n    } = params;\n\n    verify_linode_billing_receipt(\n        header,\n        pubkey,\n        signature,\n        dkim_header_sequence,\n        body,\n        body_hash_index,\n        from_index,\n        subject_index,\n        amount_index,\n        date_index,\n        receipt_id_length\n    )\n}\n","path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/circuits/library_testers/linode_email_verifier/src/main.nr"},"80":{"source":"use crate::linode::{\n    constants::{\n        LB_FROM_LEN, LB_PAYMENT_TEXT_LEN, LB_SUBJECT_FIXED_END_LEN, LB_SUBJECT_FIXED_START_LEN,\n        LINODE_BILLING_FROM, LINODE_BILLING_SUBJECT_FIXED_END, LINODE_BILLING_SUBJECT_FIXED_START,\n        LINODE_BILLING_PAYMENT_TEXT, MAX_BILLED_AMOUNT, MAX_LINODE_EMAIL_BODY_LENGTH,\n        MAX_LINODE_EMAIL_HEADER_LENGTH\n    }\n};\nuse date_parser::{parse_month, from_month_and_year, to_unix_month, MONTH_LONG_OFFSET};\nuse zkemail::Sequence;\n\n/**\n* Check that email is from linode billing address\n*/\npub fn check_from_linode_billing(index: u32, header: BoundedVec<u8, MAX_LINODE_EMAIL_HEADER_LENGTH>) {\n    // check the first char is \"f\" or \"F\"\n    assert(\n        (header.get_unchecked(index) == 0x66) | (header.get_unchecked(index) != 0x46), \"Email sender not found.\"\n    );\n\n    // check the remaing chars are the expected Linode billing\n    let from_bytes = LINODE_BILLING_FROM.as_bytes();\n    for i in 0..LB_FROM_LEN {\n        assert(header.get_unchecked(index + 1 + i) == from_bytes[i], \"Email not from Linode billing.\");\n    }\n\n    // check for CRLF\n    assert(header.get_unchecked(LB_FROM_LEN + index + 1) == 0x0D, \"Invalid CRLF sequence\");\n    assert(header.get_unchecked(LB_FROM_LEN + index + 2) == 0x0A, \"Invalid CRLF sequence\");\n}\n\n/**\n* Check that email subject is linode billing receipt\n*/\npub fn check_subject_linode_billing_receipt(\n    index: u32,\n    header: BoundedVec<u8, MAX_LINODE_EMAIL_HEADER_LENGTH>,\n    receipt_id_length: u32\n) {\n    // check the first char is \"s\" or \"S\"\n    assert(\n        (header.get_unchecked(index) == 0x73) | (header.get_unchecked(index) == 0x53), \"Email subject not found\"\n    );\n\n    let fixed_start_bytes = LINODE_BILLING_SUBJECT_FIXED_START.as_bytes();\n    // check chars in fixed section start\n    for i in 0..LB_SUBJECT_FIXED_START_LEN {\n        assert(\n            header.get_unchecked(i + index + 1) == fixed_start_bytes[i], \"Email subject is not Linode billing receipt\"\n        );\n    }\n\n    let fixed_end_bytes = LINODE_BILLING_SUBJECT_FIXED_END.as_bytes();\n    // check chars in fixed section end\n    for i in 0..LB_SUBJECT_FIXED_END_LEN {\n        let header_index = i + index + receipt_id_length + LB_SUBJECT_FIXED_START_LEN;\n        assert(\n            header.get_unchecked(header_index) == fixed_end_bytes[i], \"Email subject is not Linode billing receipt\"\n        );\n    }\n}\n\n/**\n* Extract the amount billed by Linode as a u32\n*/\npub fn extract_billed_amount(\n    body: BoundedVec<u8, MAX_LINODE_EMAIL_BODY_LENGTH>,\n    amount_index: u32\n) -> u32 {\n    // ensure billed amount follows valid payment text sequence\n    let payment_text_bytes = LINODE_BILLING_PAYMENT_TEXT.as_bytes();\n    for i in 0..LB_PAYMENT_TEXT_LEN {\n        assert(\n            body.get_unchecked(amount_index - LB_PAYMENT_TEXT_LEN + i) == payment_text_bytes[i], \"Invalid payment text sequence.\"\n        );\n    }\n\n    let mut amount: Field = 0;\n    let mut power: Field = 0;\n\n    // ensure first character is '$'\n    assert(body.get(amount_index) == 36);\n\n    for i in 1..MAX_BILLED_AMOUNT {\n        let byte = body.get(amount_index + MAX_BILLED_AMOUNT - i);\n        // check that byte is numeric \n        if (byte >= 0x30) & (byte <= 0x39) {\n            amount = amount + ((byte as Field - 0x30) * (10 as Field).pow_32(power));\n            power = power + 1;\n        }\n    }\n    amount as u32\n}\n\n/**\n * Parses the month and the year from the email body's \"Payment Date\" field\n *\n * @param body - the signed email body of a linode billing receipt\n * @param date_index - the index of the first character of the \"Payment Date\" field\n * @return - the unix timestamp of the month/ year\n */\npub fn extract_datetime(\n    body: BoundedVec<u8, MAX_LINODE_EMAIL_BODY_LENGTH>,\n    date_index: u32\n) -> u32 {\n    // range check access (TODO)\n    // check the prefix to ensure any other dates in email are not used\n    let prefix: [u8; 16] = comptime { \"\\r\\nPayment Date: \".as_bytes() };\n    for i in 0..16 {\n        let prefix_char = body.get_unchecked(date_index - 16 + i);\n        assert(prefix_char == prefix[i], \"Invalid date prefix\");\n    }\n    \n    // determine month\n    let extracted_month = [\n        body.get_unchecked(date_index),\n        body.get_unchecked(date_index + 1),\n        body.get_unchecked(date_index + 2)\n    ];\n    let month_idx = parse_month(extracted_month);\n    assert(month_idx != 0, \"Invalid month retrieved\");\n    // determine year\n    let offset_to_year = MONTH_LONG_OFFSET[month_idx - 1] + 3 + 5; // (month code), \" xx, \"\n    let extracted_year = [\n        body.get_unchecked(date_index + offset_to_year),\n        body.get_unchecked(date_index + offset_to_year + 1),\n        body.get_unchecked(date_index + offset_to_year + 2),\n        body.get_unchecked(date_index + offset_to_year + 3)\n    ];\n    let datetime = from_month_and_year(month_idx, extracted_year);\n    to_unix_month(datetime)\n}\n\n// fix check for https://veridise.notion.site/Amount-may-be-increased-up-to-maximum-149105edf1db800fa451d9aea3e877e7\n#[test]\nfn test_extract_billed_amount_manipulated_length() {\n    let value = \"$1,000.00.\\r\\n\\r\\nThank you.\".as_bytes();\n    let mut storage: [u8; MAX_LINODE_EMAIL_BODY_LENGTH] = [0; MAX_LINODE_EMAIL_BODY_LENGTH];\n    let sequence_length = value.len();\n    let text_length = LB_PAYMENT_TEXT_LEN + sequence_length;\n    for i in 0..text_length{\n        if i < LB_PAYMENT_TEXT_LEN {\n            storage[i] = LINODE_BILLING_PAYMENT_TEXT.as_bytes()[i];\n        }\n        else {\n            storage[i] = value[i - LB_PAYMENT_TEXT_LEN];\n        }\n    }\n    let body: BoundedVec<u8, MAX_LINODE_EMAIL_BODY_LENGTH> = BoundedVec {\n        storage,\n        len: text_length\n    };\n    let amount_index = LB_PAYMENT_TEXT_LEN;\n    let extracted_amount = extract_billed_amount(body, amount_index);\n    assert(extracted_amount == 100000);\n}\n\n#[test]\nfn test_extract_billed_amount_decimal() {\n    let value = \"$0.67.\\r\\n\\r\\nThank you.\".as_bytes();\n    let mut storage: [u8; MAX_LINODE_EMAIL_BODY_LENGTH] = [0; MAX_LINODE_EMAIL_BODY_LENGTH];\n    let sequence_length = value.len();\n    let text_length = LB_PAYMENT_TEXT_LEN + sequence_length;\n    for i in 0..text_length{\n        if i < LB_PAYMENT_TEXT_LEN {\n            storage[i] = LINODE_BILLING_PAYMENT_TEXT.as_bytes()[i];\n        }\n        else {\n            storage[i] = value[i - LB_PAYMENT_TEXT_LEN];\n        }\n    }\n    let body: BoundedVec<u8, MAX_LINODE_EMAIL_BODY_LENGTH> = BoundedVec {\n        storage,\n        len: text_length\n    };\n    let amount_index = LB_PAYMENT_TEXT_LEN;\n    let extracted_amount = extract_billed_amount(body, amount_index);\n    assert(extracted_amount == 67);\n}\n\n#[test]\nfn test_extract_billed_amount_max() {\n    let value = \"$9,999,999.99.\\r\\n\\r\\nThank you.\".as_bytes();\n    let mut storage: [u8; MAX_LINODE_EMAIL_BODY_LENGTH] = [0; MAX_LINODE_EMAIL_BODY_LENGTH];\n    let text_length = LB_PAYMENT_TEXT_LEN + value.len();\n    for i in 0..text_length{\n        if i < LB_PAYMENT_TEXT_LEN {\n            storage[i] = LINODE_BILLING_PAYMENT_TEXT.as_bytes()[i];\n        }\n        else {\n            storage[i] = value[i - LB_PAYMENT_TEXT_LEN];\n        }\n    }\n    let body: BoundedVec<u8, MAX_LINODE_EMAIL_BODY_LENGTH> = BoundedVec {\n        storage,\n        len: text_length\n    };\n    let amount_index = LB_PAYMENT_TEXT_LEN;\n    let extracted_amount = extract_billed_amount(body, amount_index);\n    assert(extracted_amount == 999999999);\n}\n\n#[test]\nfn test_extract_billed_amount_normal() {\n    let body: BoundedVec<u8, MAX_LINODE_EMAIL_BODY_LENGTH> = BoundedVec {\n        storage: [13, 10, 67, 111, 109, 112, 97, 110, 121, 32, 78, 97, 109, 101, 58, 32, 13, 10, 80, 97, 121, 109, 101, 110, 116, 32, 78, 117, 109, 98, 101, 114, 58, 32, 49, 55, 52, 49, 49, 57, 48, 52, 13, 10, 80, 97, 121, 109, 101, 110, 116, 32, 68, 97, 116, 101, 58, 32, 83, 101, 112, 116, 101, 109, 98, 101, 114, 32, 48, 49, 44, 32, 50, 48, 50, 52, 13, 10, 80, 97, 121, 109, 101, 110, 116, 32, 67, 97, 114, 100, 58, 32, 48, 48, 51, 52, 13, 10, 13, 10, 84, 104, 105, 115, 32, 105, 115, 32, 121, 111, 117, 114, 32, 114, 101, 99, 101, 105, 112, 116, 32, 111, 102, 32, 112, 97, 121, 109, 101, 110, 116, 32, 97, 103, 97, 105, 110, 115, 116, 32, 121, 111, 117, 114, 32, 99, 114, 101, 100, 105, 116, 32, 99, 97, 114, 100, 32, 105, 110, 32, 116, 104, 101, 32, 13, 10, 97, 109, 111, 117, 110, 116, 32, 111, 102, 32, 36, 50, 50, 46, 48, 48, 46, 13, 10, 13, 10, 84, 104, 97, 110, 107, 32, 121, 111, 117, 46, 13, 10, 13, 10, 80, 108, 101, 97, 115, 101, 32, 110, 111, 116, 101, 32, 116, 104, 97, 116, 32, 99, 104, 97, 114, 103, 101, 115, 32, 119, 105, 108, 108, 32, 97, 112, 112, 101, 97, 114, 32, 97, 115, 32, 34, 76, 105, 110, 111, 100, 101, 42, 65, 107, 97, 109, 97, 105, 34, 32, 111, 110, 32, 121, 111, 117, 114, 13, 10, 99, 114, 101, 100, 105, 116, 32, 99, 97, 114, 100, 39, 115, 32, 115, 116, 97, 116, 101, 109, 101, 110, 116, 46, 13, 10, 13, 10, 70, 111, 114, 32, 97, 99, 99, 111, 117, 110, 116, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 97, 110, 100, 32, 99, 117, 114, 114, 101, 110, 116, 32, 98, 97, 108, 97, 110, 99, 101, 44, 32, 112, 108, 101, 97, 115, 101, 32, 118, 105, 115, 105, 116, 32, 116, 104, 101, 13, 10, 76, 105, 110, 111, 100, 101, 32, 77, 97, 110, 97, 103, 101, 114, 32, 97, 116, 32, 104, 116, 116, 112, 115, 58, 47, 47, 99, 108, 111, 117, 100, 46, 108, 105, 110, 111, 100, 101, 46, 99, 111, 109, 47, 13, 10, 13, 10, 73, 102, 32, 121, 111, 117, 32, 104, 97, 118, 101, 32, 97, 110, 121, 32, 113, 117, 101, 115, 116, 105, 111, 110, 115, 32, 111, 114, 32, 99, 111, 110, 99, 101, 114, 110, 115, 44, 32, 112, 108, 101, 97, 115, 101, 32, 111, 112, 101, 110, 32, 97, 32, 115, 117, 112, 112, 111, 114, 116, 32, 116, 105, 99, 107, 101, 116, 46, 32, 13, 10, 13, 10, 83, 105, 110, 99, 101, 114, 101, 108, 121, 44, 13, 10, 13, 10, 84, 104, 101, 32, 76, 105, 110, 111, 100, 101, 32, 84, 101, 97, 109, 13, 10, 13, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 13, 10, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 108, 105, 110, 111, 100, 101, 46, 99, 111, 109, 47, 32, 45, 32, 76, 105, 110, 117, 120, 32, 67, 108, 111, 117, 100, 32, 72, 111, 115, 116, 105, 110, 103, 13, 10, 13, 10, 80, 108, 101, 97, 115, 101, 32, 110, 111, 116, 101, 32, 116, 104, 97, 116, 32, 101, 102, 102, 101, 99, 116, 105, 118, 101, 32, 74, 117, 108, 121, 32, 48, 49, 44, 32, 50, 48, 50, 50, 44, 32, 99, 104, 97, 114, 103, 101, 115, 32, 102, 111, 114, 32, 76, 105, 110, 111, 100, 101, 32, 115, 101, 114, 118, 105, 99, 101, 115, 32, 109, 97, 121, 13, 10, 97, 112, 112, 101, 97, 114, 32, 97, 115, 32, 34, 76, 105, 110, 111, 100, 101, 42, 65, 107, 97, 109, 97, 105, 34, 32, 119, 105, 116, 104, 32, 121, 111, 117, 114, 32, 98, 97, 110, 107, 32, 111, 114, 32, 99, 114, 101, 100, 105, 116, 32, 99, 97, 114, 100, 46, 13, 10, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0],\n        len: 768\n    };\n    let amount_index = 176;\n    let extracted_amount = extract_billed_amount(body, amount_index);\n    assert(extracted_amount == 2200);\n}\n\n#[test]\nfn test_get_date_str() {\n    let mut body: BoundedVec<u8, MAX_LINODE_EMAIL_BODY_LENGTH> = BoundedVec {\n\t\tstorage: [13, 10, 67, 111, 109, 112, 97, 110, 121, 32, 78, 97, 109, 101, 58, 32, 13, 10, 80, 97, 121, 109, 101, 110, 116, 32, 78, 117, 109, 98, 101, 114, 58, 32, 49, 55, 52, 49, 49, 57, 48, 52, 13, 10, 80, 97, 121, 109, 101, 110, 116, 32, 68, 97, 116, 101, 58, 32, 83, 101, 112, 116, 101, 109, 98, 101, 114, 32, 48, 49, 44, 32, 50, 48, 50, 52, 13, 10, 80, 97, 121, 109, 101, 110, 116, 32, 67, 97, 114, 100, 58, 32, 48, 48, 51, 52, 13, 10, 13, 10, 84, 104, 105, 115, 32, 105, 115, 32, 121, 111, 117, 114, 32, 114, 101, 99, 101, 105, 112, 116, 32, 111, 102, 32, 112, 97, 121, 109, 101, 110, 116, 32, 97, 103, 97, 105, 110, 115, 116, 32, 121, 111, 117, 114, 32, 99, 114, 101, 100, 105, 116, 32, 99, 97, 114, 100, 32, 105, 110, 32, 116, 104, 101, 32, 13, 10, 97, 109, 111, 117, 110, 116, 32, 111, 102, 32, 36, 50, 50, 46, 48, 48, 46, 13, 10, 13, 10, 84, 104, 97, 110, 107, 32, 121, 111, 117, 46, 13, 10, 13, 10, 80, 108, 101, 97, 115, 101, 32, 110, 111, 116, 101, 32, 116, 104, 97, 116, 32, 99, 104, 97, 114, 103, 101, 115, 32, 119, 105, 108, 108, 32, 97, 112, 112, 101, 97, 114, 32, 97, 115, 32, 34, 76, 105, 110, 111, 100, 101, 42, 65, 107, 97, 109, 97, 105, 34, 32, 111, 110, 32, 121, 111, 117, 114, 13, 10, 99, 114, 101, 100, 105, 116, 32, 99, 97, 114, 100, 39, 115, 32, 115, 116, 97, 116, 101, 109, 101, 110, 116, 46, 13, 10, 13, 10, 70, 111, 114, 32, 97, 99, 99, 111, 117, 110, 116, 32, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 32, 97, 110, 100, 32, 99, 117, 114, 114, 101, 110, 116, 32, 98, 97, 108, 97, 110, 99, 101, 44, 32, 112, 108, 101, 97, 115, 101, 32, 118, 105, 115, 105, 116, 32, 116, 104, 101, 13, 10, 76, 105, 110, 111, 100, 101, 32, 77, 97, 110, 97, 103, 101, 114, 32, 97, 116, 32, 104, 116, 116, 112, 115, 58, 47, 47, 99, 108, 111, 117, 100, 46, 108, 105, 110, 111, 100, 101, 46, 99, 111, 109, 47, 13, 10, 13, 10, 73, 102, 32, 121, 111, 117, 32, 104, 97, 118, 101, 32, 97, 110, 121, 32, 113, 117, 101, 115, 116, 105, 111, 110, 115, 32, 111, 114, 32, 99, 111, 110, 99, 101, 114, 110, 115, 44, 32, 112, 108, 101, 97, 115, 101, 32, 111, 112, 101, 110, 32, 97, 32, 115, 117, 112, 112, 111, 114, 116, 32, 116, 105, 99, 107, 101, 116, 46, 32, 13, 10, 13, 10, 83, 105, 110, 99, 101, 114, 101, 108, 121, 44, 13, 10, 13, 10, 84, 104, 101, 32, 76, 105, 110, 111, 100, 101, 32, 84, 101, 97, 109, 13, 10, 13, 10, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 13, 10, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 108, 105, 110, 111, 100, 101, 46, 99, 111, 109, 47, 32, 45, 32, 76, 105, 110, 117, 120, 32, 67, 108, 111, 117, 100, 32, 72, 111, 115, 116, 105, 110, 103, 13, 10, 13, 10, 80, 108, 101, 97, 115, 101, 32, 110, 111, 116, 101, 32, 116, 104, 97, 116, 32, 101, 102, 102, 101, 99, 116, 105, 118, 101, 32, 74, 117, 108, 121, 32, 48, 49, 44, 32, 50, 48, 50, 50, 44, 32, 99, 104, 97, 114, 103, 101, 115, 32, 102, 111, 114, 32, 76, 105, 110, 111, 100, 101, 32, 115, 101, 114, 118, 105, 99, 101, 115, 32, 109, 97, 121, 13, 10, 97, 112, 112, 101, 97, 114, 32, 97, 115, 32, 34, 76, 105, 110, 111, 100, 101, 42, 65, 107, 97, 109, 97, 105, 34, 32, 119, 105, 116, 104, 32, 121, 111, 117, 114, 32, 98, 97, 110, 107, 32, 111, 114, 32, 99, 114, 101, 100, 105, 116, 32, 99, 97, 114, 100, 46, 13, 10, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0],\n\t\tlen: 768\n\t};\n    let date_index = 58;\n    let extracted_date = extract_datetime(body, date_index);\n    let expected = 1725148800; // new Date(\"2024-09-01T00:00:00.000Z\").getTime() / 1000\n    assert(extracted_date == expected);\n}","path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/circuits/zimburse_verifiers/src/linode/utils.nr"},"82":{"source":"use crate::linode::{\n    constants::{LinodeBillingParams, MAX_LINODE_EMAIL_BODY_LENGTH, MAX_LINODE_EMAIL_HEADER_LENGTH},\n    utils::{check_from_linode_billing, check_subject_linode_billing_receipt, extract_billed_amount, extract_datetime}\n};\nuse dep::zkemail::{KEY_LIMBS_2048, dkim::RSAPubkey, headers::body_hash::get_body_hash, Sequence};\nuse std::{hash::{sha256_var, pedersen_hash}, collections::bounded_vec::BoundedVec};\n\npub fn verify_linode_billing_receipt(\n    header: BoundedVec<u8, MAX_LINODE_EMAIL_HEADER_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_2048],\n    dkim_header_field_sequence: Sequence,\n    body: BoundedVec<u8, MAX_LINODE_EMAIL_BODY_LENGTH>,\n    body_hash_index: u32,\n    from_index: u32,\n    subject_index: u32,\n    amount_index: u32,\n    date_index: u32,\n    receipt_id_length: u32\n) -> [Field; 3] {\n    // check the body and header lengths are within bounds\n    assert(header.len() <= MAX_LINODE_EMAIL_HEADER_LENGTH);\n    assert(body.len() <= MAX_LINODE_EMAIL_BODY_LENGTH);\n\n    // verify the dkim signature over the header\n    // pubkey.verify_dkim_signature(header, signature);\n\n    // extract body hash and decode from base64\n    let signed_body_hash = get_body_hash(header, dkim_header_field_sequence, body_hash_index);\n\n    // compute the hash of the asserted body\n    let computed_body_hash = sha256_var(body.storage, body.len() as u64);\n\n    // compare the retrieved body hash to the computed body hash\n    assert(\n        signed_body_hash == computed_body_hash, \"SHA256 hash computed over body does not match body hash found in DKIM-signed header\"\n    );\n\n    // assert email is from billing@linode.com\n    check_from_linode_billing(from_index, header);\n\n    // assert this is a billing receipt email from Linode\n    check_subject_linode_billing_receipt(subject_index, header, receipt_id_length);\n\n    // extract billed amount\n    // note: the billed amount has 2 decimals already\n    let billed_amount = extract_billed_amount(body, amount_index);\n\n    // extract the receipt date from the email body\n    let datetime = extract_datetime(body, date_index);\n\n    // hash the dkim key used to verify the email\n    let dkim_key_hash = pedersen_hash(pubkey.modulus);\n    [dkim_key_hash, datetime as Field, billed_amount as Field]\n}\n","path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/circuits/zimburse_verifiers/src/linode/main.nr"},"89":{"source":"struct Datetime {\n    year: u16,\n    leap_years: u16,\n    add_leap_day: bool,\n    month: u8,\n    day: u8,\n    time: u32,\n    offset: u16,\n    subtract: bool\n}\n\nglobal DATETIME_LENGTH: u32 = 26;\n\n\nglobal MONTHS: [[u8; 3]; 12] = [\n    \"Jan\".as_bytes(),\n    \"Feb\".as_bytes(),\n    \"Mar\".as_bytes(),\n    \"Apr\".as_bytes(),\n    \"May\".as_bytes(),\n    \"Jun\".as_bytes(),\n    \"Jul\".as_bytes(),\n    \"Aug\".as_bytes(),\n    \"Sep\".as_bytes(),\n    \"Oct\".as_bytes(),\n    \"Nov\".as_bytes(),\n    \"Dec\".as_bytes()\n];\n\nglobal DAYS_IN_MONTH: [u32; 12] = [\n    31,\n    28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31\n];\n\n// determines how many chars to skip for long form of month from short\n// i.e Sep -> \"tember\" = 6\nglobal MONTH_LONG_OFFSET: [u32; 12] = [\n    4, // jan-uary\n    5, // feb-ruary\n    2, // mar-ch\n    2, // apr-il\n    0, // may\n    1, // jun-e\n    1, // jul-y\n    3, // aug-ust\n    6, // sep-tember\n    4, // oct-ober\n    5, // nov-ember\n    5, // dec-ember\n];\n\npub fn parse_month(month: [u8; 3]) -> u8 {\n    let mut index = 0;\n    for i in 0..12 {\n        if month == MONTHS[i] {\n            index = i + 1;\n        }\n    }\n    index\n}\n\npub fn compute_leap_years(year: u16) -> u16 {\n    year / 4 - year / 100 + year / 400\n}\n\npub fn is_number_constraint(num: u8) {\n    assert(num >= 0x30);\n    assert(num < 0x3A);\n}\n\npub fn parse_year(year: [u8; 4]) -> (u16, u16) {\n    // range check year\n    for i in 0..year.len() {\n        is_number_constraint(year[i]);\n    }\n    // compute year\n    let mut year = (year[0] as u16 - 0x30) * 1000\n        + (year[1] as u16 - 0x30) * 100\n        + (year[2] as u16 - 0x30) * 10\n        + year[3] as u16\n        - 0x30;\n    // figure out number of leap years\n    let leap_years_since_0000 = compute_leap_years(year - 1);\n    let start_leap_years = compute_leap_years(1970);\n    let leap_years = leap_years_since_0000 - start_leap_years;\n    (year, leap_years)\n}\n\npub fn parse_time(time: [u8; 8]) -> u32 {\n    // check each char\n    is_number_constraint(time[0]);\n    is_number_constraint(time[1]);\n    assert(time[2] == 0x3A);\n    is_number_constraint(time[3]);\n    is_number_constraint(time[4]);\n    assert(time[5] == 0x3A);\n    is_number_constraint(time[6]);\n    is_number_constraint(time[7]);\n    // compute hours, mins, secs\n    let hours = (time[0] as u32 - 0x30) * 10 + time[1] as u32 - 0x30;\n    let mins = (time[3] as u32 - 0x30) * 10 + time[4] as u32 - 0x30;\n    let secs = (time[6] as u32 - 0x30) * 10 + time[7] as u32 - 0x30;\n    // return seconds since midnight\n    hours * 3600 + mins * 60 + secs\n}\n\npub fn parse_offset(offset: [u8; 5]) -> (u16, bool) {\n    // determine whether to add or subtract\n    let mut subtract = false;\n    if offset[0] == 0x2D {\n        subtract = true;\n    } else {\n        assert(offset[0] == 0x2B);\n    }\n    // check each char\n    for i in 1..offset.len() {\n        is_number_constraint(offset[i]);\n    }\n    // parse hours\n    let hours = (offset[1] as u16 - 0x30) * 10 + offset[2] as u16 - 0x30;\n    // parse mins\n    let mins = (offset[3] as u16 - 0x30) * 10 + offset[4] as u16 - 0x30;\n    // return seconds\n    let offset = hours * 3600 + mins * 60;\n    (offset, subtract)\n}\n\npub fn parse_day(dat: [u8; 2]) -> u8 {\n    // check each char\n    is_number_constraint(dat[0]);\n    is_number_constraint(dat[1]);\n    // compute day\n    (dat[0] as u8 - 0x30) * 10 + dat[1] as u8 - 0x30\n}\n\npub fn add_leap_day(year: u16, month: u8) -> bool {\n    // determine if current year is leap year\n    let div_by_4 = (year % 4 == 0) as u1;\n    let div_by_100 = (year % 100 != 0) as u1;\n    let div_by_400 = (year % 400 == 0) as u1;\n    let leap_year = div_by_4 * (1 - (1 - div_by_100) * (1 - div_by_400));\n    // determine if month is past feb\n    let past_feb = (month > 2) as u1;\n\n    (leap_year * past_feb) as bool\n}\n\n/**\n * Parse from an existing month IDX and year bytes\n * @dev code smell i know but need quick fix. can refactor for prettiness in later pass\n * @dev assumes parse_month has already been run\n *\n * @param month_idx - the id of the month from parse_month\n * @param year_bytes - the 4 bytes representing the year\n */\npub fn from_month_and_year(month_idx: u8, year_bytes: [u8; 4]) -> Datetime {\n    let year = parse_year(year_bytes);\n    let add_leap_day = add_leap_day(year.0, month_idx);\n    Datetime { \n        year: year.0,\n        leap_years: year.1,\n        add_leap_day,\n        month: month_idx,\n        day: 0,\n        time: 0,\n        offset: 0,\n        subtract: false\n    }\n}\n\npub fn parse_date_string(date_bytes: [u8; DATETIME_LENGTH]) -> Datetime {\n    // check day shift and set day\n    let day_shift = if date_bytes[1] == 0x20 {\n        (0, [0x30, date_bytes[0]])\n    } else {\n        (1, [date_bytes[0], date_bytes[1]])\n    };\n\n    // parse day\n    let day = parse_day(day_shift.1);\n\n    // parse month\n    let month = parse_month([date_bytes[2 + day_shift.0], date_bytes[3 + day_shift.0], date_bytes[4 + day_shift.0]]);\n    assert(month != 0);\n\n    // parse year\n    let year = parse_year(\n        [\n        date_bytes[6 + day_shift.0],\n        date_bytes[7 + day_shift.0],\n        date_bytes[8 + day_shift.0],\n        date_bytes[9 + day_shift.0]\n    ]\n    );\n    // parse time\n    let time = parse_time(\n        [\n        date_bytes[11 + day_shift.0],\n        date_bytes[12 + day_shift.0],\n        date_bytes[13 + day_shift.0],\n        date_bytes[14 + day_shift.0],\n        date_bytes[15 + day_shift.0],\n        date_bytes[16 + day_shift.0],\n        date_bytes[17 + day_shift.0],\n        date_bytes[18 + day_shift.0]\n    ]\n    );\n    // parse offset\n    let offset = parse_offset(\n        [\n        date_bytes[20 + day_shift.0],\n        date_bytes[21 + day_shift.0],\n        date_bytes[22 + day_shift.0],\n        date_bytes[23 + day_shift.0],\n        date_bytes[24 + day_shift.0]\n    ]\n    );\n    // check if leap day needs to be added\n    let add_leap_day = add_leap_day(year.0, month);\n\n    Datetime { year: year.0, leap_years: year.1, add_leap_day, month, day, time, offset: offset.0, subtract: offset.1 }\n}\n\npub fn to_unix_month(datetime: Datetime) -> u32 {\n    // get number of days in complete years\n    let days_in_complete_years = (datetime.year - 1970) as u32 * 365 + datetime.leap_years as u32;\n    // get number of days in current year\n    let mut days_in_current_year = 0;\n    for i in 0..12 {\n        if i + 1 < datetime.month {\n            days_in_current_year += DAYS_IN_MONTH[i];\n        }\n    }\n    days_in_current_year += datetime.add_leap_day as u32;\n    // return total seconds since epoch (don't factor in the localized timestamp)\n    (days_in_complete_years + days_in_current_year) * 86400 + datetime.time as u32\n}\n\npub fn to_unix(datetime: Datetime) -> u32 {\n    // get number of days in complete years\n    let days_in_complete_years = (datetime.year - 1970) as u32 * 365 + datetime.leap_years as u32;\n    // get number of days in current year\n    let mut days_in_current_year = 0;\n    for i in 0..12 {\n        if i + 1 < datetime.month {\n            days_in_current_year += DAYS_IN_MONTH[i];\n        }\n    }\n    days_in_current_year += (datetime.day + datetime.add_leap_day as u8) as u32;\n    // total seconds since epoch\n    let mut seconds_since_epoch = (days_in_complete_years + days_in_current_year) * 86400 + datetime.time as u32;\n    // apply offset\n    if datetime.subtract {\n        seconds_since_epoch -= datetime.offset as u32;\n    } else {\n        seconds_since_epoch += datetime.offset as u32;\n    }\n    // return unix timestamp\n    seconds_since_epoch\n}\n\n#[test]\nfn test_email_timestamp() {\n    let date_string = \"1 Sep 2024 23:22:12 +0400 \".as_bytes(); // padded 1\n    // its off a lil bit\n    // should be 1725247332\n    // should be 1725333732\n    let date = parse_date_string(date_string);\n    let unix = to_unix(date);\n    println(unix);\n}","path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/circuits/date_parser/src/lib.nr"},"90":{"source":"use crate::dkim::RSAPubkey;\nuse std::hash::pedersen_hash;\n\npub mod dkim;\npub mod headers;\npub mod masking;\npub mod partial_hash;\npub mod remove_soft_line_breaks;\n// mod macro;\nmod tests;\n\nglobal RSA_EXPONENT: u32 = 65537;\nglobal KEY_LIMBS_1024: u32 = 9;\nglobal KEY_LIMBS_2048: u32 = 18;\nglobal BODY_HASH_BASE64_LENGTH: u32 = 44;\nglobal CR: u8 = 0x0D;\nglobal LF: u8 = 0x0A;\nglobal MAX_DKIM_HEADER_FIELD_LENGTH: u32 = 300; // kinda arbitrary but gives > 100 chars for selector and domain\nglobal MAX_EMAIL_ADDRESS_LENGTH: u32 = 320; // derived via (https://datatracker.ietf.org/doc/html/rfc5321#section-4.5.3.1.1)\n\npub struct Sequence {\n    index: u32,\n    length: u32,\n}\n\nimpl Sequence {\n    pub fn end_index(self) -> u32 {\n        self.index + self.length\n    }\n}\n// allowable chars in an email address (js/src/utils:makeAllowableEmailCharsTable()\n// \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-@\" = 1\n// \"<: \" = 2\n// \">\\r\\n\" = 3\nglobal EMAIL_ADDRESS_CHAR_TABLE: [u8; 123] = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 3, 0,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0,\n    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\n\n/**\n * Default email verification function\n * @dev use #[zkemail] attribute macro to apply other functionality\n *\n * @param MAX_EMAIL_HEADER_LENGTH - The maximum length of the email header\n * @param KEY_LIMBS - The number of limbs in the RSA pubkey\n * @param header - The email header, 0-padded at end to the MAX_EMAIL_HEADER_LENGTH\n * @param pubkey - The DKIM RSA Public Key modulus and reduction parameter\n * @param signature - The DKIM RSA Signature\n */\npub fn verify_email<let MAX_EMAIL_HEADER_LENGTH: u32, let MAX_EMAIL_BODY_LENGTH: u32, // sometimes unused but needed for macro\nlet KEY_LIMBS: u32>(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_2048],\n) {\n    // ~ 86,553 constraints with 2048-bit RSA & 1024 bit max header length\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n}\n","path":"/Users/ianbrighton/Documents/Mach34/zimburse/zkemail.nr/lib/src/lib.nr"},"95":{"source":"use crate::{\n    BODY_HASH_BASE64_LENGTH, headers::constrain_header_field, MAX_DKIM_HEADER_FIELD_LENGTH,\n    Sequence,\n};\nuse base64::BASE64_DECODER;\n\n/**\n * Constrained access to the body hash in the header\n * \n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param header - The email header as validated in the DKIM signature\n * @param dkim_header_field_sequence - The sequence of the DKIM header field\n * @param body_hash_index - The index of the body hash in the header\n */\npub fn get_body_hash<let MAX_HEADER_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    dkim_header_field_sequence: Sequence,\n    body_hash_index: u32,\n) -> [u8; 32] {\n    // constrain the access of dkim signature field\n    let header_field_name: [u8; 14] = comptime { \"dkim-signature\".as_bytes() };\n    constrain_header_field::<MAX_HEADER_LENGTH, MAX_DKIM_HEADER_FIELD_LENGTH, 14>(\n        header,\n        dkim_header_field_sequence,\n        header_field_name,\n    );\n    // constrain access to the body hash\n    assert(\n        body_hash_index > dkim_header_field_sequence.index\n            & body_hash_index + BODY_HASH_BASE64_LENGTH < dkim_header_field_sequence.end_index() + 1\n            ,\n            \"Body hash index accessed outside of DKIM header field\",\n        );\n        let bh_prefix: [u8; 5] = comptime { \"; bh=\".as_bytes() };\n        for i in 0..5 {\n            let character = header.get_unchecked(body_hash_index - 5 + i);\n            assert(character == bh_prefix[i], \"No 'bh=' prefix found at asserted bh index\");\n        }\n        let bh_suffix: u8 = comptime { \";\".as_bytes()[0] };\n        assert(\n            header.get_unchecked(body_hash_index + BODY_HASH_BASE64_LENGTH) == bh_suffix,\n            \"No ';' suffix found at asserted bh index\",\n        );\n        // get the body hash\n        get_body_hash_unsafe(header, body_hash_index)\n    }\n\n/**\n * Get the body hash from the header without validating the access index. Does not validate body\n * hash is valid base64 sequence (https://github.com/noir-lang/noir_base64/blob/4431d08ac661ada9d8d18b115487ff0190b43856/src/lib.nr#L209-L232)\n *\n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param header - The email header as validated in the DKIM signature\n * @param body_hash_index - The asserted index to find the body hash at\n */\npub fn get_body_hash_unsafe<let MAX_HEADER_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    body_hash_index: u32,\n) -> [u8; 32] {\n    // get the body hash\n    let mut body_hash_encoded: [u8; BODY_HASH_BASE64_LENGTH] = [0; BODY_HASH_BASE64_LENGTH];\n    for i in 0..BODY_HASH_BASE64_LENGTH {\n        body_hash_encoded[i] = header.get_unchecked(body_hash_index + i);\n    }\n    // return the decoded body hash\n    // idk why encode vs decode...\n    BASE64_DECODER.decode(body_hash_encoded)\n}\n","path":"/Users/ianbrighton/Documents/Mach34/zimburse/zkemail.nr/lib/src/headers/body_hash.nr"},"97":{"source":"use crate::{CR, LF, Sequence};\n\npub mod body_hash;\npub mod email_address;\n\n/**\n * Constrain a sequence in a header to be within the correct bounds\n *\n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param MAX_HEADER_FIELD_LENGTH - The maximum length of the header field\n * @param HEADER_FIELD_NAME_LENGTH - The length of the header field name\n * @param header - The email header as validated in the DKIM signature\n * @param header_field_sequence - The sequence of the header field\n * @param header_field_name - The name of the header field\n */\nfn check_header_field_bounds<let MAX_HEADER_LENGTH: u32, let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) {\n    // check the range of the sequence is within the header (so we can use get_unchecked)\n    let end_index = header_field_sequence.end_index();\n    assert(end_index <= header.len(), \"Header field out of bounds of header\");\n\n    // if the sequence is not the start, check for a newline\n    if header_field_sequence.index != 0 {\n        assert(\n            header.get_unchecked(header_field_sequence.index - 2) == CR,\n            \"Header field must start with CRLF\",\n        );\n        assert(\n            header.get_unchecked(header_field_sequence.index - 1) == LF,\n            \"Header field must start with CRLF\",\n        );\n    }\n\n    // if the sequence is not the end, check for a newline\n    if end_index != header.len() {\n        assert(header.get_unchecked(end_index) == CR, \"Header field must end with CRLF\");\n        assert(header.get_unchecked(end_index + 1) == LF, \"Header field must end with CRLF\");\n    }\n\n    // check that the header field name matches the expected name\n    for i in 0..HEADER_FIELD_NAME_LENGTH {\n        assert(\n            header.get_unchecked(header_field_sequence.index + i) == header_field_name[i],\n            \"Header field name does not match\",\n        );\n    }\n    assert(\n        header.get_unchecked(header_field_sequence.index + HEADER_FIELD_NAME_LENGTH) == 0x3a,\n        \"Header field name must be followed by a colon\",\n    );\n}\n\n/**\n * Constrain a sequence in a header to match the specific header field\n *\n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param MAX_HEADER_FIELD_LENGTH - The maximum length of the header field\n * @param HEADER_FIELD_NAME_LENGTH - The length of the header field name\n * @param header - The email header as validated in the DKIM signature\n * @param header_field_sequence - The sequence of the header field\n * @param header_field_name - The name of the header field\n */\npub fn constrain_header_field<let MAX_HEADER_LENGTH: u32, let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) {\n    // constrain beginning of header field\n    check_header_field_bounds::<MAX_HEADER_LENGTH, MAX_HEADER_FIELD_LENGTH, HEADER_FIELD_NAME_LENGTH>(\n        header,\n        header_field_sequence,\n        header_field_name,\n    );\n\n    // check the header field is uninterrupted\n    let start_index = header_field_sequence.index + HEADER_FIELD_NAME_LENGTH + 1;\n    for i in 0..MAX_HEADER_FIELD_LENGTH {\n        // is it safe enough to cut this constraint cost in half by not checking lf? i think so\n        let index = start_index + i;\n        if (index < header_field_sequence.end_index()) {\n            assert(header.get_unchecked(index) != CR, \"Header field must not contain newlines\");\n        }\n    }\n}\n\n/**\n * constrain_header_field with checks for the last occurence of \"<\" inside the loop to save constraints\n */\npub fn constrain_header_field_detect_last_angle_bracket<let MAX_HEADER_LENGTH: u32, let MAX_HEADER_FIELD_LENGTH: u32, let HEADER_FIELD_NAME_LENGTH: u32>(\n    header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n    header_field_sequence: Sequence,\n    header_field_name: [u8; HEADER_FIELD_NAME_LENGTH],\n) -> u32 {\n    // constrain beginning of header field\n    check_header_field_bounds::<MAX_HEADER_LENGTH, MAX_HEADER_FIELD_LENGTH, HEADER_FIELD_NAME_LENGTH>(\n        header,\n        header_field_sequence,\n        header_field_name,\n    );\n\n    // check the header field is uninterrupted\n    let mut last_angle_bracket = 0;\n    let start_index = header_field_sequence.index + HEADER_FIELD_NAME_LENGTH + 1;\n    for i in (HEADER_FIELD_NAME_LENGTH + 1)..MAX_HEADER_FIELD_LENGTH {\n        // is it safe enough to cut this constraint cost in half by not checking lf? i think so\n        let index = start_index + i;\n        if (index < header_field_sequence.end_index()) {\n            let byte = header.get_unchecked(index);\n            assert(byte != CR, \"Header field must not contain newlines\");\n            if byte == 0x3c {\n                last_angle_bracket = index;\n            }\n        }\n    }\n    last_angle_bracket\n}\n","path":"/Users/ianbrighton/Documents/Mach34/zimburse/zkemail.nr/lib/src/headers/mod.nr"},"102":{"source":"use super::defaults::BASE64_PADDING_CHAR;\n\n/// Standard Base64 Alphabet (base64) with padding.\npub global STANDARD: Base64DecodeBE = Base64DecodeBE::new(true);\n\n/// Standard Base64 Alphabet (base64) without padding.\npub global STANDARD_NO_PAD: Base64DecodeBE = Base64DecodeBE::new(false);\n\n/// URL and Filename Safe Alphabet without padding.\npub global URL_SAFE: Base64DecodeBE = Base64DecodeBE::base64url(false);\n\n/// URL and Filename Safe Alphabet with padding.\npub global URL_SAFE_WITH_PAD: Base64DecodeBE = Base64DecodeBE::base64url(true);\n\n/// Invalid value for the lookup table.\nglobal INVALID_VALUE: u8 = 255;\n\n/// Base64 decoder for big-endian byte arrays.\n///\n/// > Note: If the lookup table is not defined in a struct, access costs are expensive and ROM\n/// tables aren't being used.\nstruct Base64DecodeBE {\n    /// The base64 lookup table.\n    table: [u8; 256],\n    /// Whether the input has padding.\n    pad: bool,\n}\n\nimpl Base64DecodeBE {\n    /// Creates a new decoder that uses the standard Base64 Alphabet (base64) specified in RFC 4648\n    /// (https://datatracker.ietf.org/doc/html/rfc4648#section-4).\n    ///\n    /// ## Value Parameters\n    ///\n    /// - `pad`: Whether the input has padding.\n    ///\n    /// ## Returns\n    ///\n    /// The Base64 decoder instance.\n    ///\n    /// ## Usage\n    ///\n    /// ```nr\n    /// let decoder = Base64DecodeBE::new(true);\n    /// ```\n    fn new(pad: bool) -> Self {\n        Base64DecodeBE {\n            table: [\n                // 0-42\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                62, // 43\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE, // 44-46\n                63, // 47\n                52,\n                53,\n                54,\n                55,\n                56,\n                57,\n                58,\n                59,\n                60,\n                61, // 48-57\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE, // 58-64\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12,\n                13,\n                14,\n                15,\n                16,\n                17,\n                18,\n                19,\n                20,\n                21,\n                22,\n                23,\n                24,\n                25, // 65-90 (A-Z)\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE, // 91-96\n                26,\n                27,\n                28,\n                29,\n                30,\n                31,\n                32,\n                33,\n                34,\n                35,\n                36,\n                37,\n                38,\n                39,\n                40,\n                41,\n                42,\n                43,\n                44,\n                45,\n                46,\n                47,\n                48,\n                49,\n                50,\n                51, // 97-122 (a-z)\n                // 123-255\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n            ],\n            pad,\n        }\n    }\n\n    /// Creates a new decoder that uses the URL and Filename Safe Alphabet specified in RFC 4648\n    /// (https://datatracker.ietf.org/doc/html/rfc4648#section-5).\n    ///\n    /// ## Value Parameters\n    ///\n    /// - `pad`: Whether the input has padding.\n    ///\n    /// ## Returns\n    ///\n    /// The Base64 decoder instance.\n    ///\n    /// ## Usage\n    ///\n    /// ```nr\n    /// let decoder = Base64DecodeBE::base64url(true);\n    /// ```\n    fn base64url(pad: bool) -> Self {\n        Base64DecodeBE {\n            table: [\n                // 0-44 (no mapping)\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                62, // 45 (-)\n                INVALID_VALUE,\n                INVALID_VALUE, // 46-47 (no mapping)\n                52,\n                53,\n                54,\n                55,\n                56,\n                57,\n                58,\n                59,\n                60,\n                61, // 48-57 (0-9)\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE, // 58-64 (no mapping)\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12,\n                13,\n                14,\n                15,\n                16,\n                17,\n                18,\n                19,\n                20,\n                21,\n                22,\n                23,\n                24,\n                25, // 65-90 (A-Z)\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE, // 91-94 (no mapping)\n                63, // 95 (_)\n                INVALID_VALUE, // 96 (no mapping)\n                26,\n                27,\n                28,\n                29,\n                30,\n                31,\n                32,\n                33,\n                34,\n                35,\n                36,\n                37,\n                38,\n                39,\n                40,\n                41,\n                42,\n                43,\n                44,\n                45,\n                46,\n                47,\n                48,\n                49,\n                50,\n                51, // 97-122 (a-z)\n                // 123-255\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n                INVALID_VALUE,\n            ],\n            pad,\n        }\n    }\n\n    /// Gets the lookup table value at a given index.\n    ///\n    /// ## Value Parameters\n    ///\n    /// - `idx`: The index to get the value for.\n    ///\n    /// ## Returns\n    ///\n    /// The value from the lookup table.\n    ///\n    /// ## Usage\n    ///\n    /// ```nr\n    /// let value = Base64DecodeBE::new(true).get(65);\n    /// ```\n    fn get(self, idx: Field) -> u8 {\n        self.table[idx]\n    }\n\n    /// Converts an array of ASCII values into a packed byte array of base64 values.\n    ///\n    /// > Note: Each Base64 value is 6 bits. This method will produce a byte array where data is\n    /// > concatenated so that there are no sparse bits (e.g. encoding 4 ASCII values produces 24\n    /// > bits of Base64 data = 3 bytes of output data).\n    ///\n    /// ## Type Parameters\n    ///\n    /// - `InputElements`: The number of input elements.\n    /// - `OutputBytes`: The number of output bytes.\n    ///\n    /// ## Value Parameters\n    ///\n    /// - `self`: The Base64 decoder instance.\n    /// - `input`: The input array.\n    ///\n    /// ## Constraints\n    ///\n    /// - input and output lengths are correct, including padding.\n    ///\n    /// ## Returns\n    ///\n    /// The packed byte array of base64 values.\n    ///\n    /// ## Usage\n    ///\n    /// ```nr\n    /// let result = Decoder::new(false).decode::<4, 3>([65, 66, 67, 68]);\n    /// ```\n    pub fn decode<let InputElements: u32, let OutputBytes: u32>(\n        self,\n        input: [u8; InputElements],\n    ) -> [u8; OutputBytes] {\n        let rem = OutputBytes % 3;\n        // Calculate the number of padding characters and the length of the input without padding\n        let num_padding_chars = if rem == 1 {\n            2\n        } else if rem == 2 {\n            1\n        } else {\n            0\n        };\n\n        // Assert that the output length & input length are correct\n        // Every 3 output chars will be encoded as 4 base64 input chars\n        let encoded_length = (OutputBytes + 2) / 3 * 4; // ceil(input * 4 / 3)\n        if self.pad {\n            assert(\n                encoded_length == InputElements,\n                f\"DecodeError: invalid input length for specified output length. Expected {encoded_length} input elements, but got {InputElements}.\",\n            );\n            // enforce Base64 padding is valid\n            if num_padding_chars == 2 {\n                assert(input[InputElements - 1] == BASE64_PADDING_CHAR);\n                assert(input[InputElements - 2] == BASE64_PADDING_CHAR);\n            } else if num_padding_chars == 1 {\n                assert(input[InputElements - 1] == BASE64_PADDING_CHAR);\n            }\n        } else {\n            let expected = encoded_length - num_padding_chars;\n            assert(\n                encoded_length - num_padding_chars == InputElements,\n                f\"DecodeError: invalid input length for specified output length. Expected {expected} input elements, but got {InputElements}.\",\n            );\n        }\n\n        // 240 bits fits 40 6-bit chunks and 30 8-bit chunks\n        // we pack 40 base64 values into a field element and convert into 30 bytes\n        // TODO: once we support arithmetic ops on generics, derive OutputBytes from InputBytes\n        let mut result: [u8; OutputBytes] = [0; OutputBytes];\n        let BASE64_ELEMENTS_PER_CHUNK: u32 = 40;\n        let BYTES_PER_CHUNK: u32 = 30;\n        let num_chunks = (InputElements / BASE64_ELEMENTS_PER_CHUNK)\n            + (InputElements % BASE64_ELEMENTS_PER_CHUNK != 0) as u32;\n\n        if num_chunks > 0 {\n            let final_chunk = num_chunks - 1;\n\n            for i in 0..final_chunk {\n                let mut slice: Field = 0;\n                for j in 0..BASE64_ELEMENTS_PER_CHUNK {\n                    slice *= 64;\n                    let offset = i * BASE64_ELEMENTS_PER_CHUNK + j;\n                    let input_byte = input[offset];\n                    let decoded = self.get(input_byte as Field);\n                    assert(\n                        decoded != INVALID_VALUE,\n                        f\"DecodeError: invalid symbol {input_byte}, offset {offset}.\",\n                    );\n                    slice += decoded as Field;\n                }\n                let slice_bytes: [u8; 30] = slice.to_be_bytes();\n                for j in 0..BYTES_PER_CHUNK {\n                    result[i * BYTES_PER_CHUNK + j] = slice_bytes[j];\n                }\n            }\n\n            // process the final chunk, which may contain padding\n            let base64_offset: u32 = final_chunk * BASE64_ELEMENTS_PER_CHUNK;\n            let byte_offset = final_chunk * BYTES_PER_CHUNK;\n            let base64_elements_in_final_chunk = if self.pad {\n                InputElements - base64_offset - num_padding_chars\n            } else {\n                InputElements - base64_offset\n            };\n\n            // pack the base64 values into the field element\n            let mut slice: Field = 0;\n            for j in 0..base64_elements_in_final_chunk {\n                slice *= 64;\n                let offset = base64_offset + j;\n                let input_byte = input[offset];\n                let decoded = self.get(input_byte as Field);\n                assert(\n                    decoded != INVALID_VALUE,\n                    f\"DecodeError: invalid symbol {input_byte}, offset {offset}.\",\n                );\n                slice += decoded as Field;\n            }\n            for _ in base64_elements_in_final_chunk..BASE64_ELEMENTS_PER_CHUNK {\n                slice *= 64;\n            }\n\n            // TODO: check is it cheaper to use a constant value in `to_be_bytes` or can we use `bytes_in_final_chunk`?\n            // extract the bytes from the Field element\n            let slice_bytes: [u8; 30] = slice.to_be_bytes();\n            let num_bytes_in_final_chunk = OutputBytes - byte_offset;\n            for i in 0..num_bytes_in_final_chunk {\n                result[byte_offset + i] = slice_bytes[i];\n            }\n        }\n\n        result\n    }\n}\n\n#[test]\nfn test_decode_empty() {\n    let input: [u8; 0] = [];\n    let expected: [u8; 0] = [];\n    let result = STANDARD.decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_padding() {\n    // f\n    let input: [u8; 4] = [90, 103, 61, 61];\n    let expected: [u8; 1] = [102];\n    let result = STANDARD.decode(input);\n\n    assert(result == expected);\n\n    // fo\n    let input: [u8; 4] = [90, 109, 56, 61];\n    let expected: [u8; 2] = [102, 111];\n    let result = STANDARD.decode(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: [u8; 4] = [90, 109, 57, 118];\n    let expected: [u8; 3] = [102, 111, 111];\n    let result = STANDARD.decode(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_standard_no_pad() {\n    // f\n    let input: [u8; 2] = [90, 103];\n    let expected: [u8; 1] = [102];\n    let result = STANDARD_NO_PAD.decode(input);\n\n    assert(result == expected);\n\n    // fo\n    let input: [u8; 3] = [90, 109, 56];\n    let expected: [u8; 2] = [102, 111];\n    let result = STANDARD_NO_PAD.decode(input);\n\n    assert(result == expected);\n\n    // foo\n    let input: [u8; 4] = [90, 109, 57, 118];\n    let expected: [u8; 3] = [102, 111, 111];\n    let result = STANDARD_NO_PAD.decode(input);\n\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_max_byte() {\n    let expected: [u8; 1] = [255];\n\n    let input: [u8; 4] = [47, 119, 61, 61]; // \"/w==\"\n    let result: [u8; 1] = STANDARD.decode(input);\n    assert(result == expected);\n\n    let input: [u8; 2] = [47, 119]; // \"/w\"\n    let result: [u8; 1] = STANDARD_NO_PAD.decode(input);\n    assert(result == expected);\n\n    let input: [u8; 4] = [95, 119, 61, 61]; // \"_w==\"\n    let result: [u8; 1] = URL_SAFE_WITH_PAD.decode(input);\n    assert(result == expected);\n\n    let input: [u8; 2] = [95, 119]; // \"_w\"\n    let result: [u8; 1] = URL_SAFE.decode(input);\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 255, offset 0\")]\nfn test_decode_invalid() {\n    let input: [u8; 2] = [255, 255];\n    let _: [u8; 1] = STANDARD_NO_PAD.decode(input);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid input length for specified output length. Expected 3 input elements, but got 4.\")]\nfn test_decode_standard_no_pad_fail_with_padding() {\n    // test decoding / and +\n    let input: [u8; 4] = [47, 43, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = STANDARD_NO_PAD.decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_standard() {\n    // test decoding / and +\n    let input: [u8; 4] = [47, 43, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = STANDARD.decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 95, offset 0\")]\nfn test_decode_underscore_with_standard() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let _: [u8; 2] = STANDARD.decode(input);\n}\n\n#[test]\nfn test_decode_url_safe_with_pad() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = URL_SAFE_WITH_PAD.decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid symbol 47, offset 0\")]\nfn test_decode_slash_with_url_safe() {\n    // test decoding / and +\n    let input: [u8; 3] = [47, 43, 65];\n    let _: [u8; 2] = URL_SAFE.decode(input);\n}\n\n#[test]\nfn test_decode_url_safe() {\n    // test decoding _ and -\n    let input: [u8; 3] = [95, 45, 65];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = URL_SAFE.decode(input);\n\n    assert(result == expected);\n}\n\n#[test(should_fail_with = \"DecodeError: invalid input length for specified output length. Expected 3 input elements, but got 4.\")]\nfn test_decode_url_safe_no_pad_fail_with_padding() {\n    // test decoding _ and -\n    let input: [u8; 4] = [95, 45, 65, 61];\n    let expected: [u8; 2] = [255, 224];\n    let result: [u8; 2] = URL_SAFE.decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_ascii() {\n    // base64: SGVsbG8gV29ybGQh\n    let input: [u8; 16] = [83, 71, 86, 115, 98, 71, 56, 103, 86, 50, 57, 121, 98, 71, 81, 104];\n    // \"Hello World!\"\n    let expected: [u8; 12] = [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33];\n\n    // all configurations should decode the same way\n    let result: [u8; 12] = STANDARD.decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = STANDARD_NO_PAD.decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = URL_SAFE_WITH_PAD.decode(input);\n    assert(result == expected);\n    let result: [u8; 12] = URL_SAFE.decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_utf8() {\n    // base64: 44GT44KT44Gr44Gh44Gv44CB5LiW55WM77yB\n    let input: [u8; 36] = [\n        52, 52, 71, 84, 52, 52, 75, 84, 52, 52, 71, 114, 52, 52, 71, 104, 52, 52, 71, 118, 52, 52,\n        67, 66, 53, 76, 105, 87, 53, 53, 87, 77, 55, 55, 121, 66,\n    ];\n    // non-ascii utf-8: \"Hello, World!\" in Japanese\n    let expected: [u8; 27] = [\n        227, 129, 147, 227, 130, 147, 227, 129, 171, 227, 129, 161, 227, 129, 175, 227, 128, 129,\n        228, 184, 150, 231, 149, 140, 239, 188, 129,\n    ];\n\n    // all configurations should decode the same way\n    let result: [u8; 27] = STANDARD.decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = STANDARD_NO_PAD.decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = URL_SAFE_WITH_PAD.decode(input);\n    assert(result == expected);\n    let result: [u8; 27] = URL_SAFE.decode(input);\n    assert(result == expected);\n}\n\n#[test]\nfn test_decode_multi_chunks() {\n    let expected = \"The quick brown fox jumps over the lazy dog, while 42 ravens perch atop a rusty mailbox. Zany quilters fabricate 9 cozy blankets, as 3 jovial wizards expertly mix 5 potent elixirs. Bright neon signs flash \\\"OPEN 24/7\\\" in the misty night air, illuminating 8 vintage cars parked along Main Street. A gentle breeze carries the aroma of fresh coffee and warm cinnamon rolls from Joe's Diner, enticing 6 sleepy truckers to stop for a late-night snack. Meanwhile, 11 mischievous kittens playfully chase a ball of yarn across Mrs. Johnson's porch, their antics observed by 2 wise old owls perched on a nearby oak tree.\";\n\n    let input: [u8; 816] = [\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 119, 103, 100, 50,\n        104, 112, 98, 71, 85, 103, 78, 68, 73, 103, 99, 109, 70, 50, 90, 87, 53, 122, 73, 72, 66,\n        108, 99, 109, 78, 111, 73, 71, 70, 48, 98, 51, 65, 103, 89, 83, 66, 121, 100, 88, 78, 48,\n        101, 83, 66, 116, 89, 87, 108, 115, 89, 109, 57, 52, 76, 105, 66, 97, 89, 87, 53, 53, 73,\n        72, 70, 49, 97, 87, 120, 48, 90, 88, 74, 122, 73, 71, 90, 104, 89, 110, 74, 112, 89, 50, 70,\n        48, 90, 83, 65, 53, 73, 71, 78, 118, 101, 110, 107, 103, 89, 109, 120, 104, 98, 109, 116,\n        108, 100, 72, 77, 115, 73, 71, 70, 122, 73, 68, 77, 103, 97, 109, 57, 50, 97, 87, 70, 115,\n        73, 72, 100, 112, 101, 109, 70, 121, 90, 72, 77, 103, 90, 88, 104, 119, 90, 88, 74, 48, 98,\n        72, 107, 103, 98, 87, 108, 52, 73, 68, 85, 103, 99, 71, 57, 48, 90, 87, 53, 48, 73, 71, 86,\n        115, 97, 88, 104, 112, 99, 110, 77, 117, 73, 69, 74, 121, 97, 87, 100, 111, 100, 67, 66,\n        117, 90, 87, 57, 117, 73, 72, 78, 112, 90, 50, 53, 122, 73, 71, 90, 115, 89, 88, 78, 111,\n        73, 67, 74, 80, 85, 69, 86, 79, 73, 68, 73, 48, 76, 122, 99, 105, 73, 71, 108, 117, 73, 72,\n        82, 111, 90, 83, 66, 116, 97, 88, 78, 48, 101, 83, 66, 117, 97, 87, 100, 111, 100, 67, 66,\n        104, 97, 88, 73, 115, 73, 71, 108, 115, 98, 72, 86, 116, 97, 87, 53, 104, 100, 71, 108, 117,\n        90, 121, 65, 52, 73, 72, 90, 112, 98, 110, 82, 104, 90, 50, 85, 103, 89, 50, 70, 121, 99,\n        121, 66, 119, 89, 88, 74, 114, 90, 87, 81, 103, 89, 87, 120, 118, 98, 109, 99, 103, 84, 87,\n        70, 112, 98, 105, 66, 84, 100, 72, 74, 108, 90, 88, 81, 117, 73, 69, 69, 103, 90, 50, 86,\n        117, 100, 71, 120, 108, 73, 71, 74, 121, 90, 87, 86, 54, 90, 83, 66, 106, 89, 88, 74, 121,\n        97, 87, 86, 122, 73, 72, 82, 111, 90, 83, 66, 104, 99, 109, 57, 116, 89, 83, 66, 118, 90,\n        105, 66, 109, 99, 109, 86, 122, 97, 67, 66, 106, 98, 50, 90, 109, 90, 87, 85, 103, 89, 87,\n        53, 107, 73, 72, 100, 104, 99, 109, 48, 103, 89, 50, 108, 117, 98, 109, 70, 116, 98, 50, 52,\n        103, 99, 109, 57, 115, 98, 72, 77, 103, 90, 110, 74, 118, 98, 83, 66, 75, 98, 50, 85, 110,\n        99, 121, 66, 69, 97, 87, 53, 108, 99, 105, 119, 103, 90, 87, 53, 48, 97, 87, 78, 112, 98,\n        109, 99, 103, 78, 105, 66, 122, 98, 71, 86, 108, 99, 72, 107, 103, 100, 72, 74, 49, 89, 50,\n        116, 108, 99, 110, 77, 103, 100, 71, 56, 103, 99, 51, 82, 118, 99, 67, 66, 109, 98, 51, 73,\n        103, 89, 83, 66, 115, 89, 88, 82, 108, 76, 87, 53, 112, 90, 50, 104, 48, 73, 72, 78, 117,\n        89, 87, 78, 114, 76, 105, 66, 78, 90, 87, 70, 117, 100, 50, 104, 112, 98, 71, 85, 115, 73,\n        68, 69, 120, 73, 71, 49, 112, 99, 50, 78, 111, 97, 87, 86, 50, 98, 51, 86, 122, 73, 71, 116,\n        112, 100, 72, 82, 108, 98, 110, 77, 103, 99, 71, 120, 104, 101, 87, 90, 49, 98, 71, 120, 53,\n        73, 71, 78, 111, 89, 88, 78, 108, 73, 71, 69, 103, 89, 109, 70, 115, 98, 67, 66, 118, 90,\n        105, 66, 53, 89, 88, 74, 117, 73, 71, 70, 106, 99, 109, 57, 122, 99, 121, 66, 78, 99, 110,\n        77, 117, 73, 69, 112, 118, 97, 71, 53, 122, 98, 50, 52, 110, 99, 121, 66, 119, 98, 51, 74,\n        106, 97, 67, 119, 103, 100, 71, 104, 108, 97, 88, 73, 103, 89, 87, 53, 48, 97, 87, 78, 122,\n        73, 71, 57, 105, 99, 50, 86, 121, 100, 109, 86, 107, 73, 71, 74, 53, 73, 68, 73, 103, 100,\n        50, 108, 122, 90, 83, 66, 118, 98, 71, 81, 103, 98, 51, 100, 115, 99, 121, 66, 119, 90, 88,\n        74, 106, 97, 71, 86, 107, 73, 71, 57, 117, 73, 71, 69, 103, 98, 109, 86, 104, 99, 109, 74,\n        53, 73, 71, 57, 104, 97, 121, 66, 48, 99, 109, 86, 108, 76, 103, 61, 61,\n    ];\n    let result: [u8; 610] = STANDARD.decode(input);\n    assert(result == expected.as_bytes());\n\n    let input: [u8; 814] = [\n        86, 71, 104, 108, 73, 72, 70, 49, 97, 87, 78, 114, 73, 71, 74, 121, 98, 51, 100, 117, 73,\n        71, 90, 118, 101, 67, 66, 113, 100, 87, 49, 119, 99, 121, 66, 118, 100, 109, 86, 121, 73,\n        72, 82, 111, 90, 83, 66, 115, 89, 88, 112, 53, 73, 71, 82, 118, 90, 121, 119, 103, 100, 50,\n        104, 112, 98, 71, 85, 103, 78, 68, 73, 103, 99, 109, 70, 50, 90, 87, 53, 122, 73, 72, 66,\n        108, 99, 109, 78, 111, 73, 71, 70, 48, 98, 51, 65, 103, 89, 83, 66, 121, 100, 88, 78, 48,\n        101, 83, 66, 116, 89, 87, 108, 115, 89, 109, 57, 52, 76, 105, 66, 97, 89, 87, 53, 53, 73,\n        72, 70, 49, 97, 87, 120, 48, 90, 88, 74, 122, 73, 71, 90, 104, 89, 110, 74, 112, 89, 50, 70,\n        48, 90, 83, 65, 53, 73, 71, 78, 118, 101, 110, 107, 103, 89, 109, 120, 104, 98, 109, 116,\n        108, 100, 72, 77, 115, 73, 71, 70, 122, 73, 68, 77, 103, 97, 109, 57, 50, 97, 87, 70, 115,\n        73, 72, 100, 112, 101, 109, 70, 121, 90, 72, 77, 103, 90, 88, 104, 119, 90, 88, 74, 48, 98,\n        72, 107, 103, 98, 87, 108, 52, 73, 68, 85, 103, 99, 71, 57, 48, 90, 87, 53, 48, 73, 71, 86,\n        115, 97, 88, 104, 112, 99, 110, 77, 117, 73, 69, 74, 121, 97, 87, 100, 111, 100, 67, 66,\n        117, 90, 87, 57, 117, 73, 72, 78, 112, 90, 50, 53, 122, 73, 71, 90, 115, 89, 88, 78, 111,\n        73, 67, 74, 80, 85, 69, 86, 79, 73, 68, 73, 48, 76, 122, 99, 105, 73, 71, 108, 117, 73, 72,\n        82, 111, 90, 83, 66, 116, 97, 88, 78, 48, 101, 83, 66, 117, 97, 87, 100, 111, 100, 67, 66,\n        104, 97, 88, 73, 115, 73, 71, 108, 115, 98, 72, 86, 116, 97, 87, 53, 104, 100, 71, 108, 117,\n        90, 121, 65, 52, 73, 72, 90, 112, 98, 110, 82, 104, 90, 50, 85, 103, 89, 50, 70, 121, 99,\n        121, 66, 119, 89, 88, 74, 114, 90, 87, 81, 103, 89, 87, 120, 118, 98, 109, 99, 103, 84, 87,\n        70, 112, 98, 105, 66, 84, 100, 72, 74, 108, 90, 88, 81, 117, 73, 69, 69, 103, 90, 50, 86,\n        117, 100, 71, 120, 108, 73, 71, 74, 121, 90, 87, 86, 54, 90, 83, 66, 106, 89, 88, 74, 121,\n        97, 87, 86, 122, 73, 72, 82, 111, 90, 83, 66, 104, 99, 109, 57, 116, 89, 83, 66, 118, 90,\n        105, 66, 109, 99, 109, 86, 122, 97, 67, 66, 106, 98, 50, 90, 109, 90, 87, 85, 103, 89, 87,\n        53, 107, 73, 72, 100, 104, 99, 109, 48, 103, 89, 50, 108, 117, 98, 109, 70, 116, 98, 50, 52,\n        103, 99, 109, 57, 115, 98, 72, 77, 103, 90, 110, 74, 118, 98, 83, 66, 75, 98, 50, 85, 110,\n        99, 121, 66, 69, 97, 87, 53, 108, 99, 105, 119, 103, 90, 87, 53, 48, 97, 87, 78, 112, 98,\n        109, 99, 103, 78, 105, 66, 122, 98, 71, 86, 108, 99, 72, 107, 103, 100, 72, 74, 49, 89, 50,\n        116, 108, 99, 110, 77, 103, 100, 71, 56, 103, 99, 51, 82, 118, 99, 67, 66, 109, 98, 51, 73,\n        103, 89, 83, 66, 115, 89, 88, 82, 108, 76, 87, 53, 112, 90, 50, 104, 48, 73, 72, 78, 117,\n        89, 87, 78, 114, 76, 105, 66, 78, 90, 87, 70, 117, 100, 50, 104, 112, 98, 71, 85, 115, 73,\n        68, 69, 120, 73, 71, 49, 112, 99, 50, 78, 111, 97, 87, 86, 50, 98, 51, 86, 122, 73, 71, 116,\n        112, 100, 72, 82, 108, 98, 110, 77, 103, 99, 71, 120, 104, 101, 87, 90, 49, 98, 71, 120, 53,\n        73, 71, 78, 111, 89, 88, 78, 108, 73, 71, 69, 103, 89, 109, 70, 115, 98, 67, 66, 118, 90,\n        105, 66, 53, 89, 88, 74, 117, 73, 71, 70, 106, 99, 109, 57, 122, 99, 121, 66, 78, 99, 110,\n        77, 117, 73, 69, 112, 118, 97, 71, 53, 122, 98, 50, 52, 110, 99, 121, 66, 119, 98, 51, 74,\n        106, 97, 67, 119, 103, 100, 71, 104, 108, 97, 88, 73, 103, 89, 87, 53, 48, 97, 87, 78, 122,\n        73, 71, 57, 105, 99, 50, 86, 121, 100, 109, 86, 107, 73, 71, 74, 53, 73, 68, 73, 103, 100,\n        50, 108, 122, 90, 83, 66, 118, 98, 71, 81, 103, 98, 51, 100, 115, 99, 121, 66, 119, 90, 88,\n        74, 106, 97, 71, 86, 107, 73, 71, 57, 117, 73, 71, 69, 103, 98, 109, 86, 104, 99, 109, 74,\n        53, 73, 71, 57, 104, 97, 121, 66, 48, 99, 109, 86, 108, 76, 103,\n    ];\n    let result = STANDARD_NO_PAD.decode(input);\n    assert(result == expected.as_bytes());\n}\n\n#[test]\nfn test_decode_with_padding() {\n    // Raw bh: GxMlgwLiypnVrE2C0Sf4yzhcWTkAhSZ5+WERhKhXtlU=\n    // Translated directly to ASCII\n    let input: [u8; 44] = [\n        71, 120, 77, 108, 103, 119, 76, 105, 121, 112, 110, 86, 114, 69, 50, 67, 48, 83, 102, 52,\n        121, 122, 104, 99, 87, 84, 107, 65, 104, 83, 90, 53, 43, 87, 69, 82, 104, 75, 104, 88, 116,\n        108, 85, 61,\n    ];\n\n    let result: [u8; 32] = STANDARD.decode(input);\n    let expected: [u8; 32] = [\n        27, 19, 37, 131, 2, 226, 202, 153, 213, 172, 77, 130, 209, 39, 248, 203, 56, 92, 89, 57, 0,\n        133, 38, 121, 249, 97, 17, 132, 168, 87, 182, 85,\n    ];\n    assert(result == expected);\n}\n","path":"/Users/ianbrighton/nargo/github.com/noir-lang/noir_base64v0.3.1/src/decoder.nr"}},"names":["main"],"brillig_names":["build_msg_block","attach_len_to_msg_block","decompose_hint","directive_integer_quotient","directive_invert"]}