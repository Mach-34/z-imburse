{"transpiled":true,"noir_version":"0.34.0+02fea6abe8637b9fb8f9535d1709b367d5e1da5c","name":"ZImburseContractRegistry","functions":[{"name":"get_escrow_class_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM6AAAACEMAAAABHgAAAAQeAAAABTEAAAAABAAAAAUAAAAGJAACAQUKAAIGBQQhAAAPAAQ7AQAAHgALAAYkAAcBBQoABwYFBCEAABQABDsBAAAqAAAGJAAEAgQAAAQABAAkAQQBBgAABAYCBCoABAckAAcACCoCCAcqAQYEAAAEBAIEKgIEBioAAAQAAAQAAgAqAgYEJAAEAAgqAAgDIAAlCgAEAwgHIQAALgAHIAAoKgEEBwAABAcCBgAABAYIBSoBBQQqAAQDIyoBBAccAAcDBgAABwUGCS0AAAAACQAAAAYkAAQBCgwABAMKCyEAADYACzsBAAArAAAHCAMlAAQAAggEIgAAAEUrAAgFAAkAAAQJAgsAAAQLAwoqAgYKJAAEAQYAAAQDBgcOAAQDBwshAABCAAs7AQAAKgIJBCoABwMgACUrAQgDCAYLAAQIBgACCAchAABJCAcgAEsrAAgDCAUgAFkrAAAACAUBAAQAAAgEAAAlAAQAAAgJDQAECAkIBAgKFwAICggKIQAAVwgKAQAECAMICQgLKwEICwgIAQAECAUICQgLKwIICAgLAQAECAkAAggJIABOJQEEAAEIBSAAWSMrABjKGMo=","debug_symbols":"1ZrbbsIwDIbfJddcJHHs1LzKNE1lg6lSVRCHSRPi3deyNisUpQIGim9QA3/ij5x+J+pefcxnu8+3olosN2r6slfl8j3fFsuqLu0PEzVbF2VZfL71v1a6+ciO8s0qr5rSZpuvt2pqvHUTNa8+mkdwdQOLopyrqdeHyUDM4Fstow9Sg3RB6zRnrdgZ3VPbSy0TaWrVRNaeqF8niu9GN9oEse6JnwBv9P0d76HreB7reGNdaBi0HmH3bLhVe6Yhu/lH9rrjT+GbAPbRAeDRAdyjA+DdARB0J0awo3MCWXdzggwM5gRdydPU8TfUyW6ow9fXsRfXJyF2mx0h48juQpkNAfr7RRNsOBqUdf2LXpuR0UDnurbrx8FoWCOa3oqmB9H0TjQ9iqYn0fReNH0mmp4l04NorwXRXguivRZEey2kvmMSB3qvz+ld6qs2w0DPZkD//FVLgccbGqE3DOH0x653Amd3pLei6UE0fepZWnzVJr7noA07Zn0pMaBPPEtD7WP0qWdp7P7oYUTNVofrRwt0/l9RtDtg6jldnD71nC5On3pOF6d3oulTvz+J06fuzHH61E8DcfrU70/i9Kk7c5SeRHstifZaEu21JNprSbTXkmivJcFee6iLX/m6yGflvH1BZrGr3nvvy2y/V7+/1OIf","brillig_names":["get_escrow_class_id"],"assert_messages":{"53":"Array index out of bounds","65":"attempt to add with overflow","14":"Not initialized","19":"Function get_escrow_class_id can only be called statically"}},{"name":"get_managed_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"boolean"},{"kind":"integer","sign":"unsigned","width":32}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_managed_escrows"]},{"name":"set_contract_registered","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAAQIRAAAJAAEAQQkAAQABR8AAAAABQAAAAQAAAhDKwAIQwADIgAAAAg6AAAACEQAAAAAHgAAAAUeAAAABjEAAAAABQAAAAYAAAAHJAACAQUKAAIHBQYhAAAPAAY7AQAAHgACAAUeAAAABwoABwUHBiEAABQABjsBAAAkAAQABSQABwUHKgAABiQABAMIAAAEAAgAJAEEAQYAAAQGAggqAAgJKgIHCQAABAkCCSoCAwkAAAQGAgkkAAQCCkIEAAAABQAAAAgAAAAJAAAACiQABwAGCgAHCAYHJAABAAMKAAEHAwohAAAoAAo7AQAAJgAHO5rKAAAHAAAHBwgDKgAAByQABAIKAAAEAAoAJAEEAQcAAAQHAgoqAAoJKgIGCSoBBwoAAAQKAgoqAgoHKgAACgAABAACACoCBwoqAAUEIAA5CgAEBAUJJAAEAQchAAB/AAkgAD0qAQoEAAAEBAILAAAECwUMKgEMCgoABwoGBCEAAEQABDsBAAAqAAUJIABGCgAECQUGIQAAZwAGIABJKgAFBiAASwoABAYFBCEAAE8ABCAATiMcAAcGBAAABwgEAyQABwEEKgAACSQABAIKAAAEAAoAJAEEAQkAAAQJAgoqAAoLKgIECyQABAELDAAEBgsMIQAAXQAMOwEAAAAABAkCDAAABAwGCyoBCwouAAAAAAoAAAADAAAEBgcKDgAEBgoDIQAAZQADOwEAACoACgYgAEscAAcJBgAABwMGBCUAB96tAAYqAAAKJAAEAgsAAAQACwAkAQQBCgAABAoCCyoACwwqAgYMJAAEAQwMAAQJDA0hAAB1AA07AQAAAAAECgINAAAEDQkMKgEMCy4AAAAACwAAAAQAAAQJBwsOAAQJCwQhAAB9AAQ7AQAAKgALCSAARioBCgkcAAcECwAABwMLDC0AAAAADAAAAAskAAQBDQwABAQNDiEAAIcADjsBAAArAAAJCAMlAAQAAggEIgAAAJUrAAgFAAwAAAQMAg4AAAQOBA0qAgsNAAAEBAcJDgAEBAkLIQAAkgALOwEAACoCDAoqAAkEIAA5KwEIAwgGCwAECAYAAggHIQAAmQgHIACbKwAIAwgFIACpKwAAAAgFAQAEAAAIBAAAJQAEAAAICQ0ABAgJCAQIChcACAoICiEAAKcICgEABAgDCAkICysBCAsICAEABAgFCAkICysCCAgICwEABAgJAAIICSAAniUBBAABCAUgAKkjKwAYyhjK","debug_symbols":"5ZzhbuIwDMffpZ/5EMexE+9VTqeJbWxCQmza2EknxLtfy9FQKNdoB51s9ctENzf+OW3yTzyHbfW0ePh8uV+un18/qrsf22r1+jjfLF/X9dV2N6se3per1fLlvvvryjU/0t78422+bq4+NvP3TXUH0YdZtVg/NR8x1A08L1eL6i663axnLBgPtkIxmwLxBdvgJB2MA7iOtb/UMrPjgzWz9yfWP2eVXI0ODrKx6xh/Azy46zs+YtvxUup48CE3jM4V2KOAHKyjcJ8dbshed/wpfOPAj+0Ax3YQxnZAVzsInqF9nz1L6X2O1I5zjrH/TvD1PDcdX/GLPM096T/uka/f4y+O/eCA2vBdiIWXw7ePTiIcY0e8NPbJtSySjrZyaZ4QSnlS4dDp1WaGuWB9nD7d0djLPkqYRJR+ElHiJKIMk4iSJhElTyLKOIko0ySilClEiZNY++Ak1j44ibUPTmLtg+HqKMGFdkcG9Za1EKfkzV5NQ8Mts7TkEbr9F/bkZJaczZJHs+TJLLlYJQ9lzY+F9gFShvHdbNjBA4zuwV/vwUfIHpr5vOOhb02cWiGg6Dp9ejEbRiH41joE3J1lwwKapg+m6ck0PZumj6bpk2l6sUxPzjQ9mKY3rbVkWmvJtNaS9vmeJdNHd07P2kdtokwv0KP//lHLmScCF+hBMP8/XU5yJfv1PaNp+mCa/gYrZMRjfUuQ890b8+ge4tge4g1WJATt7AmEqfCM2fl2R8yOSjVDdSqyrQ+pP6bz2SHe4BlTbD0An2QvxqcX5fQpq2KSXi1McsrpOQ7Rg3L6nPoicb0VSfKm6dE0fTBNr33GHKZn0/TRNH0yTa9dawfpRbvWDtOb1loxrbViWmvFtNaKaa0V7VpLeKQPBWvBvEcVpH6s2pX537E29NqVeZheuzIP0oPTLs0FfFSe/xnMQYALyvEHkxDgSDn+oEKAY9v40TZ+so0vpvFBe+K8gA+28b1tfO2qW8DXrroFfNuqC7ZVF2yrLthWXbCtul676t4wKQFeu0YPby29do0u4GvX6AK+do0u4JuuuQOvvMiafE6rEPbzEl55lTW5OISP2susjyJHiCWV8C4fx/TI/WBN13cCai/LLuBrr8su4Afb+NpPQRXwtR+DKuBr1+gCvvaDUAV87SehhvGDdo0u4NtWXfUHjwv4tlVX/dHjAr5t1VV/+HgAf1df/pq/L+cPq8XhW3ifP9ePnS/l3fx++/uX2vgP","brillig_names":["set_contract_registered"],"assert_messages":{"67":"SharedImmutable already initialized","39":"Storage slot 0 not allowed. Storage slots must start from 1.","116":"Array index out of bounds","100":"attempt to add with overflow","14":"Not initialized","145":"attempt to add with overflow","92":"Array index out of bounds","124":"attempt to add with overflow","134":"Array index out of bounds","19":"Function set_contract_registered can only be called internally"}},{"name":"get_contract_registration_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRQAAJAAEAQQkAAQABR8AAAAABQAAAAQAAAhDKwAIQwADIgAAAAkrAAADCEQ6AAAACEQAAAABHgAAAAUeAAAABjEAAAAABQAAAAYAAAAHJAACAQYKAAIHBgUhAAAQAAU7AQAAHgALAAYkAAcBBwoABwYHBSEAABUABTsBAAAkAAcFByoAAAYkAAQDBQAABAAFACQBBAEGAAAEBgIFKgAFCCoCBwgAAAQIAggqAgMIJAAEAAUAAAQGAgkkAAQCCkIEAAAABQAAAAgAAAAJAAAACiQABwAGCgAHCAYHJAABAAMKAAEHAwohAAApAAo7AQAAKgAAByQABAIDAAAEAAMAJAEEAQcAAAQHAgMqAAMKKgIGCioBBwMAAAQDAgMqAgMHKgAAAwAABAACACoCBwMqAAUEIAA4CgAEBAUHIQAAQwAHIAA7KgEDBAAABAQCBgAABAYFByoBBwMcAAEDBBwABwQFHAABBQMjKgEDBxwABwQGAAAHCAYJLQAAAAAJAAAABiQABAEKDAAEBAoLIQAASwALOwEAACsAAAcIAyUABAACCAQiAAAAWisACAUACQAABAkCCwAABAsECioCBgokAAQBBgAABAQGBw4ABAQHCyEAAFcACzsBAAAqAgkDKgAHBCAAOCsBCAMIBgsABAgGAAIIByEAAF4IByAAYCsACAMIBSAAbisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABsCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAGMlAQQAAQgFIABuIysAGMoYyg==","debug_symbols":"5ZvRbuIwEEX/Jc88jO2ZsYdfWa0qaKGKhKACutIK8e+bsMSkm8hRy1J55BeUwLV9xsS+k1Fyql5Wy/fXp3q73h2q+Y9Ttdk9L471btucnc6zarmvN5v69an/dQXth1zkh7fFtj07HBf7YzU33uKsWm1f2kOHTQfrerOq5h7Os4FYnL9qhXyUGuIRLYKEqxgN9NR2rGdm4Kua2doP6p+zysDd7AZMFENP/B305v6Z966beZmaeWMxduwAJti9GLmqvfCQ3f5H9mbiP8K3A7hHD4CPHoAePQDfPQA56MTk7OQ1QQLdNcHGDa4J/0metk34Qhv5fBsLX2gzuj7ZB+oWdTB+4g+0pluf3tzmy7mx9Und5BoJN62MrWWhEBc+Y291trvAiPq2xcFNbOUSpS0iSldElFhElFRElFxElL6IKEMRUUoJUTooIsoich9XRO7jish9HBYR5f25jwHsqhKmua2ciFNiwaOhoXTPLB25N/35wws5qyX3asmDWnLRSo6glnza85EnyDnYWFDp10fb4spATRy6TZQ8mInqEyF2fTeHg+oTWtX0TjU9qqYn1fSsmt6rpg+q6UUzPYFqetVeS6q9llR7LeW+37NEeg8D+tz3nAhCKOZfev7+PYcjjzc8RW+75zDI9bRyye7ZKGa3itmdFnbEATsqZifF7Llnxck9njPPislGfyU3eLKJM3coAp+g97lnxbEA1dC7CbVYiHVz63gQa+45dDKX8Lnn0Gn63HPoND2qps+9XpWmz/3+JU2fuzOn6XOvV6XpVd87htydOU2v2muDaq8Nqr02qPbaoNprg2qvDYq99tyc/lrs68Vys7q+gbV+3z73Xsg6/n77+0sj/gM=","brillig_names":["get_contract_registration_status"],"assert_messages":{"40":"Storage slot 0 not allowed. Storage slots must start from 1.","74":"Array index out of bounds","15":"Not initialized","20":"Function get_contract_registration_status can only be called statically","86":"attempt to add with overflow"}},{"name":"register_participant","is_unconstrained":false,"custom_attributes":["private","interal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","unsafe_rand","decompose_hint","notify_created_note","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log","notify_created_note","compute_raw_note_log_unconstrained","emit_encrypted_note_log","directive_invert","directive_integer_quotient"]},{"name":"get_participants","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"array","length":10,"type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"","brillig_names":["get_participants"]},{"name":"get_participant_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_participant_escrows"]},{"name":"check_and_register_participant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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jKlSgXxNrEjjaCQr0izzKJdIviZGpGnmUUbyNTEiDaSRjEgDaSQj0iwzu5dT+5r0269I12JFurbp4+Prevsc6fOHjZ6GU3ugfB+VM2uv76NyZp32fVTOrOn8qFjVtac2bfk+LKd2ePlGLGeWlt+I5cw69BuxnFm0fiOWAhaFJafENbHk1LgmFkSuELmnNtL5Pio5Ne57KuXUBj3fRwWFKx635dTOP9+IBYUrsRSwKCwoXIkFhSux5FS4JhbyuBILeVyF5dTOQt8mck9tLPR9VHJqXItKTolrUSk8btXjFoUrsaBwJRYUrsSCwpVYULgKy6lthb4RC3lciYU8rsSSNI/7fp5GObWz0DdiSapyLSxJVa6FJanKtbAkVbkWlqQq18Byamehb8SSVOVaWJKqXAsLKldiKWBRWFC5EoutctduRFu2DzBL/cRwmuafa/Svr1EfH17qOos11gFrbP5r/AOOLPYa2/K4+5btT2uIG6T2pX7cIXWrnxpep/rzmqYTXtM8/Jq27XGS2u1P9/nHNS0nvKYy+pra2h7/1ti22+1P1/T8+bYuHx9v66ed7j+vv178+tvFr79f/PrXi1//dvrr3z7ES9um+e+vv94ufv3Txa9/vvj1Lxe//vO/f99f//nfv++v//zv3/fXf/737/vrP//79/31X/z92y7+/m0Xf/+2i79/28Xfv//AHPdzX//F37/t4u/fdvH3b7v4+7dd/P3bL/7+7Rd///aLv3/7xd+//8CM8HNf/8Xfv/3i799+8fdvv/j7t1/8/bte/P27Xvz9u178/bte/P37D8yfPvf1X/z9u178/bte/P27Xvz9u178/btd/P27Xfz9u138/btd/P37D0zHPff1X/z9u138/btd/P27Xfz9u137/Vtv137/1tu137/1du33b71d+/1bb9d+/9bbtd+/9Xbt92+9Xfv9W2/Xfv/W28Xfv9PF37/Txd+/08Xfv9PF37//wGTBc1//xd+/08Xfv9PF37/Txd+/08Xfv/PF37/zxd+/88Xfv/PF37//wMyzc1//xd+/87Hv375a178sjwED7fO1t5/XM/x9avao13k94TVt57um5XbCa5pOeE3nmw1R9bCi+z8vfzxr7v9Scvt8TT++VXZ9q+76Vtv1rb7rW+uub217vqUnqpjfmnZ9a971rV33Rtl1b5Rd90bZdW+UXfdG2XVvlF33Rt11b9Rd90bddW/UXfdG3XVv1F33Rt11b9Rd90bddW/UXfdG23VvtF33Rtt1b7Rd90bbdW+0XfdG23VvtF33Rtt1b7Rd90bfdW/0XfdG33Vv9F33Rt91b/Rd90bfdW/0XfdG33Vv9F33xrrr3lh33Rvrrntj3XVvrLvujXXXvbHuujfWXffGuuveWHfdG9uue2PbdW9su+6Nbde9se26N7Zd98a2697Ydt0b2657Y9tzb7Tbbde3pl3fmnd9a9n1rbLrW3XXt9qub/Vd31p3fWvXvTH99r1x/4///r/+5V//9V/+7//jX//9f/zzf/7Lv//bf/zx1dsf/4/+0T7dHnNc72mOX6Nip/Vvs0n1b3brS9uOL+lf7G+/dP+v6Y/P6n+uauvHON61/zK/m/r0x2r6X4jef2X6/a/Mv/+V5fe/Un7/K/X3v9J+/yv9978i77ftNv/8yvY5zXb/ikjitY8hssv6636Zp+1vf35z/fM6V3vcn598//zs++cX3z9ffu/P//GV+vtfab//FXkKtvpxCrY+G3HP/eOz8/Yc9+r75zfXP6+f+r/z5z/dFL386c8/f3bbHv/Id5tuf79ROvv7Tdcyn+halpHXMpePz86tP90u5TyXUs9zKe08l9LPcynreS5lO82l1KEP3LfP/jqd51Lm81zKkU/bZ5lUi++fr75/vvn++e7751ffP6+fMq/f7b8rBPQ/jh25wOS9wPzlBd4+XfU/zh3494vz36/Of785//3u/PdX57//9SP89uXSb85/f/L8+/f/mv+W79Np4ttHSWZZPrlp3XNM9wvTHRHvv9J//yvr739l++2v6Nzlm6/c/2v545Mv0pHto0KuL588l1p9k458+5Xy+1+pv/+V9vtf6b//lfX3v7L99ld02vD9V+RB64+z09fnr8y//5Xl979Sfv8rcvfXh/HeWuvTV9rvf6X//lfW3/+K3P21lUfKe/n7r+gU2PuvTL//lfn3vyJ3f/2Vvt+etlLnZ95/pf7+V9rvf6W//8p2ew5//f2vbL/9lRe/x6f2SCg/3WMvfje//cr8+19Zfv8rWp2W5fH2/5wdb6qx4s2H//ry1+WBCzTvBbr3Aqv3ApvzAi9+ZR64wOS9wOy9wOK9gPdJbt4nuXmf5OZ9kpv3SW7eJ7l7n+TufZK790nu3ie5e5/k/vVzUB+/DuqnTsd5+tFNufr+/fXr91B7/PRut/b092fnv784//3i/Pd/903wx3faju/03//OVnzvve3rb8E2fXy4zcvT32/Of787//3V+e9vvn9/ut0OODzbY4HyvMDkvcDsvcDivUDxXqB6L9C8F+i+z/jptnovsDkvMN28F5i8F5i9F1i8FyjeC1TvBZr3At4nefI+yZP3SZ69T/LsfZJn15N8/6/yxyf1E2+q9eOfpab6qX5/Vqus6/RIyZf3H11u/TF74/ZZKTfx4XK/ip8fLtOnf7iY249b6KoXPl/1wperXni56oXXq154u+qF96te+Op34X99VcBy2J+fb75//uvvim1+/JPop5lR3rs6z1e98OWqF16ueuH1qhfernrh/aoXvvpd+F9f1cYd9ueXm++fn3z//Oz75xffP198/3z1/fPN98931z9fvn5j3v8hofzKHix/v8DsvcDXt3eaH3000/ypkWZ+U8x3ZASb8wL1iD1Yb48Ftv73CyzeCxTvBar3As17gX7AAn3+tcD69wus3gtszgu0m/cCk/cCs/cCi/cCB5zk+/P648NTnf5+geq9QPNeoHsvsHovsDkv0G/eCxxwkqf18a8q0/b3wqvP3gt466LevBfo3guszgusN+8FJu8FZu8FFu8FiusC9/+of3xU/5NnfzTdfzbikIuU6eOCyjL916isjf4Hz/Nf9nzNy16uednlmpddr3nZ7ZqX3a952avXZf/11T9wHvTH55vnH//ye6F9/MtpaX//Sp5nzz++eP7x4vnHv/y8ejiLle1pQ5vnH++ef/yrJ7ROHx+tU/v7P745/vHl5vnHJ88//tVbsS4f+ei6PP3x5vnHv7qhrXxo/fbJD29+M2/hqD9eHLGUL2/o4yVa/6gK/fMfb55/vHv+8dXzj2+Of7zePP/45PnH5+P+eP/7oqy6eP7xL5/Q+jih69Mf//IJLf31H2+ef7x7/vGvntA2fSiuNj39m9nm+MfbzfOPT55//KsntN0enY3TP/YvTEf98eL5x6vnH2+ef7x7/vHV849vx/3x+e/v837z/ONfPqEPZ4C2PP3xL79DH/6z4o8vnn+8eP7xL5/QN/q8N88/3j3/+Or5xz1/cK2eP7jWyfOPz25//P4f7Y8Pvuiya48psVNr7f0iU3kMZZvK/PcJqRctTr+3QH0McC2r8eFT9UNFi7KliLKniHJNEeWWIcr5liLKKUWU80mi/OvLXrnvuZZyomsZ/LY/VftbtCh7iijXFFFuGaJcbiminFJEOZ8kyr++7ND8nmspJ7qWs7zt//qyUfR7ruUsb86/vvQJ/55rOctb6K8vXc2/51rO8kT/68uGX7drMZp326muZvD9+771os5nYlOXU13N8PtmR/Pwd13Neqqr2c50Ne12qquZRl/Nju7o77qa5VRXU051NfVUV9NOdTX9VFcz+lm8p7H8m66m3051NdOprmY+1dUsp7qacqqrGf0sfj+2oJ3qak71e2q9nepqplNdzXKqqymnupp6qqtpp7qafp6ruf9H/+Oj003nKtY6fSi1tdZfz6o//pFbyLq1PVa6/+/188f/+jfvmTJikTpikTZikX7AItvtl9PCdivPi6wjFtkGLKITFUcvMo1YZB6xyDJikTJikTpikTZikREnvo048W3Eie8jTnwfceL7iBPfR5z4PuLE9xEnvo848X3Eie+HnPhPlk1bEYtsAxZZbyMWmUYsMo9YZBmxSBmxSB2xSBuxSB+xyIgTv4448duIE7+NOPHbiBO/jTjx24gTv4048duIE7+NOPHbiBO/HXLi10+LrE+LvPChPnqRacQi84hFlhGLlBGL1BGLtBGL9BGLrCMWGXHipxEnfhpx4qcRJ34aceKnESd+GnHipxEnfhpx4qcRJ34aceLnA078/R3++Few+6v29rzINGKRecQiy4hFyohF6ohF2ohF+ohF1hGLbAMWWUac+GXEiV9GnPhlxIlfRpz4ZcSJX0ac+GXEiV9GnPhlxIkvI058GXHiyyEnvt1+LdKm50WWEYuUEYvUEYu0EYv0EYusIxbZBixSbyMWmUYsMuLE1xEnvo448XXEia8jTnwdceLriBNfR5z4NuLEtxEnvo048e2QW3gtvxbZ6tMiRxTHTG17tGjd//fyvEgbsUgfscg6YpFtwCJHFMfYi0wjFplHLLKMWKSMWGTEiV9HnPh1xIlfR5z4dcSJ30ac+G3Eid9GnPhtxInfRpz4bcSJP6I4ZurLL0nUl2dJdERxjL3IOmKRzX+R+YjiGHuRacQi84hFlhGLlBGL1BGLtBGL9BGLrCMWGXHipxEnfhpx4qcRJ34aceKnESd+GnHipxEnfjrkxLf11yJte15kHbHINmCRQ4pjzEWmEYvMIxZZRixSRixSRyzSRiwy4sTPI078POLELyNO/DLixC8jTvwy4sQvI078MuLELyNO/DLixB9SHLPepsci621+XmQbsMghxTHmItOIReYRiywjFikjFqkjFmkjFukjFhlx4suIE19HnPg64sTXESe+jjjxdcSJryNOfB1x4uuIE19HnPhDSkrW+Vchxrosz4sccHfds0C/prdN/fa8SB2xSBuxSB+xyDpikW3AIkcMP7IXmUYsMo9YZBmxyO+e+B/fqru+1XZ9q+/61rrrW9ueb/12FdOPb027vjXv+tay61u77o11172x7ro31l33xrrr3lh33Rvbrntj23VvbLvujW3XvbHtuje2XffGtuve2HbdG9uue2Pbc28st9uub027vjXv+tay61tl17fqrm+1Xd/qu7617vrWrntj2nVvTLvujWnXvTHtujemXffGtOvemHbdG9Oue2PadW9Mu+6Nede9Me+6N+Zd98a8696Yd90b8657Y951b8y77o0X/+rX+kcP59rW2/O3tj3fevHvcta3pl3fmnd9a9n1rbLrW3XXt9qub/Vd39p1byy77o2y694ou+6NsuveKLvujbLr3njxzxq9f/yD3nb/16j/evvzuvT68eHSt/a8RPNfovsvsfovsbkv8eIfMw5dYvJfYvZfYvFfovgv4X+6q//prv6nu/qf7up/upv/6W7+p7v5n+7mf7qb/+lu/qe7+Z/u5n+6m//pbv6nu/uf7u5/urv/6e7+p7v7n+7uf7q7/+nu/qe7+5/u7n+6V//Tvfqf7tX/dK/+p3v1P92r/+le/U/36n+6V//Tvfqf7s3/dG/+p3vzP92b/+ne/E/35n+6N//Tvfmf7s3/dG/up7vcbv5LTP5LzP5LLP5LFP8lqv8SzX+J7r/E6r+E/+me/E/35H+6J//TPfmf7sn/dE/+p3vyP92T/+me/E/35H+6Z//TPfuf7tn/dM/+p3v2P92z/+me/U/37H+6Z//TPfuf7sX/dC/+p3vxP92L/+le/E/34n+6F//Tvfif7sX/dC/+p7v4n+7if7qL/+ku/qe7+J9u/1q14l+rVvxr1Yp/rVrxr1Ur/rVqxb9WrfjXqhX/WrXiX6tW/GvVin+tWvGvVSv+tWrFv1at+NeqFf9ateJfq1b8a9WKf61a8a9VK/61asW/Vq3416oV/1q14l+rVvxr1Yp/rVrxr1Ur/rVqxb9WrfjXqhX/WrXiX6tW/GvVin+tWvGvVSv+tWrFv1at+NeqFf9ateJfq1b8a9WKf61a8a9VK/61asW/Vq3416oV/1q14l+rVvxr1Yp/rVrxr1Ur/rVqxb9WrfrXqlX/WrXqX6tW/WvV6q34L1H9l2j+S3T/JVb/JfxPt3+tWvWvVav+tWrVv1at+teqVf9atepfq1b9a9Wqf61a9a9Vq/61atW/Vq3616pV/1q16l+rVv1r1ap/rVr1r1Wr/rVq1b9WrfrXqlX/WrXqX6tW/WvVqn+tWvWvVav+tWrVv1at+teqVf9atepfq1b9a9Wqf61a9a9Vq/61atW/Vq3616pV/1q16l+rVv1r1ap/rVr1r1Wr/rVq1b9WrfrXqlX/WrXqX6tW/WvVqn+tWvWvVav+tWrVv1at+teqVf9atepfq1b9a9Wqf61a9a9Vq/61atW/Vq3616pV/1q16l+rVv1r1ap/rVr1r1Wr/rVq1b9WrfrXqlX/WrXqX6tW/WvVqn+tWvWvVav+tWrVv1at+teqVf9atepfq1b9a9Wqf61a9a9Vq/61atW/Vq3616pV/1q16l+rVv1r1ap/rVr1r1Vr/rVqzb9WrfnXqjX/WrV2K/5LVP8lmv8S3X+J1X8J/9PtX6vW/GvVmn+tWvOvVWv+tWrNv1at+deqNf9ateZfq9b8a9Waf61a869Va/61as2/Vq3516o1/1q15l+r1vxr1Zp/rVrzr1Vr/rVqzb9WrfnXqjX/WrXmX6vW/GvVmn+tWvOvVWv+tWrNv1at+deqNf9ateZfq9b8a9Waf61a869Va/61as2/Vq3516o1/1q15l+r1vxr1Zp/rVrzr1Vr/rVqzb9WrfnXqjX/WrXmX6vW/GvVmn+tWvOvVWv+tWrNv1at+deqNf9ateZfq9b8a9Waf61a869Va/61as2/Vq3516o1/1q15l+r1vxr1Zp/rVrzr1Vr/rVqzb9WrfnXqjX/WrXmX6vW/GvVmn+tWvOvVWv+tWrNv1at+deqNf9ateZfq9b8a9Waf61a869Va/61as2/Vq3516o1/1q15l+r1vxr1bp/rVr3r1Xr/rVq3b9Wrd+K/xLVf4nmv0T3X2L1X8L/dPvXqnX/WrXuX6vW/WvVun+tWvevVev+tWrdv1at+9eqdf9ate5fq9b9a9W6f61a969V6/61at2/Vq3716p1/1q1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f63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a5F+rNvnXqk3+tWqTf63a7F+rNvvXqs3+tWqzf63afCv+S1T/JZr/Et1/idV/Cf/T7V+rNvvXqs3+tWqzf63a7F+rNvvXqs3+tWqzf63a7F+rNvvXqs3+tWqzf63a7F+rNvvXqs3+tWqzf63a7F+rNvvXqs3+tWqzf63a7F+rNvvXqs3+tWqzf63a7F+rNvvXqs3+tWqzf63a7F+rNvvXqs3+tWqzf63a7F+rNvvXqs3+tWqzf63a7F+rNvvXqs3+tWqzf63a7F+rNv9+rdqPr837vrbs+1rZ97W672tt39f6vq+t+7627fraq/qotf/8WrndytfuqFf1UUcuMfsvsfgvUfyXqP5LNP8luv8Sq/8Sm/sS3f90d//T3f1Pd/c/3d3/dHf/0939T3f/7dP942vrvq9tu7623vZ9bdr3tXnf15Z9Xyv7vlb3fU3uW7nNy+Nrs/ratutrul6jTPP68bWpVfG1Zd/Xyr6v1X1fe4FkeXztVtrT1xb9T/X216Z9X5v3fW3Z97Wy72t139favq/1fV9b931t310y7btLpn13ybTvLpn23SXTvrtkerEBa3t8bSvia9uur823fV+b9n1t3ve1Zd/Xyr6v1X1fa/u+1vd9bd9dMu+7S5Z9d8my7y5Z9t0ly767ZNl3lyz77pJl312y7LtLln13ybLvLin77pKy7y4p++6Ssu8uKfvukrLvLin77pKy7y4p++6Ssu8uqfvukrrvLqn77pK67y6p++6Suu8uqfvukrrvLqn77pK67y5p++6Stu8uafvukrbvLmn77pK27y5p++6Stu8uafvukrbvLun77pK+7y7p++6Svu8u6fvukr7vLun77pK+7y7p++6Svu8uWffdJeu+u2Tdd5es++6Sdd9dsu67S9Z9d8m67y5Z990l6767ZNt3l2z77pJt312y7btLtn13ybbvLtn23SXbvrtk23eXbLvuknK77fvatO9r876vLfu+VvZ9re77Wtv3tb7va+u+r+27S6Z9d8m07y6Z9t0l0767ZNp3l0z77pJp310y7btL9uVey77ca9mXey37cq9lX+617Mu9Fjv3Ok3Tn772/C+6bZu3n59uW5kfn+4/l6j+SzT/JV7cqX168F3rF5dYD1hiXR5LrLU9LbG5L/EqB33kEpP/ErP/Eov/EsV/ieq/RPNfovsvccjp3m6PB8j09ABZNvclys1/icl/idl/icV/ieK/RPVfovkv0f2X8D/dxf90V//TXf1Pd/U/3dX/dFf/0139T3f1P93V/3RX/9Nd/U938z/dzf90N//T3fxPd/M/3c3/dDf/0938T3fzP93N/3R3/9Pd/U939z/d3f90d//T3f1Pd/c/3d3/dHf/0939T/fqf7pX/9O9+p/u1f90r/6ne/U/3av/6V79T/fqf7pX/9O9+Z/uzf90b/6ne/M/3Zv/6d78T/fmf7o3/9O9+Z/uzf1019vNf4nJf4nZf4nFf4niv0T1X6L5L9H9l1j9l/A/3ZP/6Z78T/fkf7on/9M9+Z/uyf90T/6ne/I/3ZP/6Z78T/fsf7pn/9M9+5/u2f90z/6ne/Y/3bP/6Z79T/fsf7pn/9O9+J/uxf90L/6ne/E/3Yv/6V78T/fif7oX/9PtX6tW/WvVqn+tWvWvVav+tWrVv1at+teqVf9atepfq1b9a9Wqf61a9a9Vq/61atW/Vq3616pV/1q16l+rVv1r1ap/rVr1r1Wr/rVq1b9WrfrXqlX/WrXqX6tW/WvVqn+tWj2kVu1td1U9pFbNWKL7L7H6L7G5L3FIrZqxxOS/xOy/xOK/hD7db8aN/tNvffrHIvXri7zvr6ovqtUOXaL7L7H6L7G5L/GiWu3QJaYjlnj7Ulpn/yUW/yWK/xLVf4nmv0T3X2L1X2JzX2K7+S/hf7o3/9O9+Z/uzf90b0ec7vcaZGv+S3T/JVb/JTbvJdrt5r/E5L/E7L/E4r/ELiuAdmv7vtb3fe23b/u/3v9r++Oz+p+yptv2Mbdlmubl11fX+Y8V9T9OWV/adnxJ/wPS2y/91/0//7///L/+5Z//+7/+z/+4f+mP/+v/+2//4z//5d//7ed//uf/7//58X+5f/j/Dw==","brillig_names":["pack_arguments","call_private_function_internal","unpack_returns","get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_notes_internal","get_collapse_hints","pack_arguments","directive_invert","directive_integer_quotient"]},{"name":"register_escrow","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_arguments","call_private_function_internal","unpack_returns","get_nullifier_membership_witness","get_contract_instance_internal","get_public_keys_and_partial_address","unsafe_rand","notify_created_note","get_key_validation_request","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log","pack_arguments","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":19,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"contract_class_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"128":"Array index out of bounds","573":"attempt to add with overflow","378":"Initializer address is not the contract deployer","439":"attempt to add with overflow","372":"Initialization hash does not match","497":"Array index out of bounds","829":"Array index out of bounds","747":"attempt to add with overflow","680":"Array index out of bounds","668":"attempt to add with overflow","473":"Array index out of bounds","842":"attempt to add with overflow","135":"Array index out of bounds","455":"Array index out of bounds","513":"Array index out of bounds","647":"Array index out of bounds","696":"Array index out of bounds","821":"Array index out of bounds","431":"Array index out of bounds","559":"Array index out of bounds","541":"Array index out of bounds","90":"attempt to add with overflow","733":"Array index out of bounds","404":"SharedImmutable already initialized","526":"attempt to add with overflow","715":"Array index out of bounds","709":"attempt to add with overflow","639":"Array index out of bounds","124":"attempt to add with overflow","505":"Array index out of bounds","627":"attempt to add with overflow","688":"Array index out of bounds","813":"Array index out of bounds","484":"attempt to add with overflow","801":"attempt to add with overflow","146":"attempt to add with overflow","463":"attempt to add with overflow","655":"Array index out of bounds"}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b3dd3286"},{"kind":"string","value":"ParticipantNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"escrow_contract_id","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"managed_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"participants","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"participant_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"contract_registration","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"contract_class_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseContractRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseContractRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseContractRegistry::register_escrow_parameters"}}],"kind":"struct","path":"ZImburseContractRegistry::register_escrow_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseContractRegistry::set_contract_registered_parameters"}}],"kind":"struct","path":"ZImburseContractRegistry::set_contract_registered_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseContractRegistry::get_escrow_class_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseContractRegistry::get_escrow_class_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseContractRegistry::check_and_register_participant_parameters"}}],"kind":"struct","path":"ZImburseContractRegistry::check_and_register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseContractRegistry::register_participant_parameters"}}],"kind":"struct","path":"ZImburseContractRegistry::register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseContractRegistry::get_contract_registration_status_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseContractRegistry::get_contract_registration_status_abi"}]}},"file_map":{"100":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"103":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\nuse std::{\n    embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n    utils::point::point_to_bytes, note::note_interface::NoteInterface,\n    encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n},\n    keys::public_keys::{OvpkM, IvpkM}\n};\n\npub fn compute_encrypted_event_log<Event, let N: u32, let OB: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<N> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note,\n    num_public_values: u8 // Number of values to be appended to the log in public (used in partial note flow).\n) -> [u8; M] where Note: NoteInterface<N> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    encrypted_bytes[64] = num_public_values; // TODO(#8558): This can be just a single bit if we store info about partial fields in ABI\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[65 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[97 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[145 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[193 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 337;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[337 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // num_public_values (1 byte)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(unsafe_rand());\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::compute_encrypted_note_log, keys::public_keys::{OvpkM, IvpkM},\n        test::mocks::mock_note::MockNoteBuilder\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_note_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n        let num_public_values: u8 = 0;\n\n        let log: [u8; 449] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note,\n            num_public_values\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38\n        ];\n        assert_eq(encrypted_note_log_from_typescript, log);\n    }\n\n    #[test]\n    unconstrained fn test_encrypted_note_log_of_finalized_partial_note_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note_public_value1 = 0x14172339287e8d281545c177313f02b6aa2fedfd628cfd8b7f11a136fd0d6557;\n        let note_public_value2 = 0x0834d81e3f73c7e2809b08ae38600ffc76a2554473eeab6de7bff4b33a84feac;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n        let num_public_values: u8 = 2;\n\n        // First we compute the encrypted log without the public values\n        let log_without_public_values: [u8; 449] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note,\n            num_public_values\n        );\n\n        // Then we \"append\" the public values to the log by copying both the original log and the current log into a new byte array\n        let mut log: [u8; 513] = [0; 513];\n        for i in 0..449 {\n            log[i] = log_without_public_values[i];\n        }\n        let note_public_value1_bytes: [u8; 32] = note_public_value1.to_be_bytes();\n        let note_public_value2_bytes: [u8; 32] = note_public_value2.to_be_bytes();\n        for i in 0..32 {\n            log[449 + i] = note_public_value1_bytes[i];\n            log[481 + i] = note_public_value2_bytes[i];\n        }\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_of_finalized_partial_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38, 20, 23, 35, 57, 40, 126, 141, 40, 21, 69, 193, 119, 49, 63, 2, 182, 170, 47, 237, 253, 98, 140, 253, 139, 127, 17, 161, 54, 253, 13, 101, 87, 8, 52, 216, 30, 63, 115, 199, 226, 128, 155, 8, 174, 56, 96, 15, 252, 118, 162, 85, 68, 115, 238, 171, 109, 231, 191, 244, 179, 58, 132, 254, 172\n        ];\n        assert_eq(encrypted_note_log_of_finalized_partial_from_typescript, log);\n    }\n}\n"},"104":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::aes128::aes128_encrypt;\n\nuse crate::{keys::public_keys::IvpkM, utils::point::point_to_bytes};\n\npub struct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk: IvpkM) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk }\n    }\n\n    /// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n    /// be able to derive the key with which the incoming log can be decrypted.\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 144] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer = [0 as u8; 128];\n\n        let serialized_eph_sk_high: [u8; 32] = self.eph_sk.hi.to_be_bytes();\n        let serialized_eph_sk_low: [u8; 32] = self.eph_sk.lo.to_be_bytes();\n\n        let address_bytes: [u8; 32] = self.recipient.to_field().to_be_bytes();\n        let serialized_recipient_ivpk = point_to_bytes(self.recipient_ivpk.to_point());\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n        }\n        for i in 0..32 {\n            buffer[i + 96] = serialized_recipient_ivpk[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash_with_separator(\n            [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ).to_be_bytes();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::{encrypted_logs::outgoing_body::EncryptedLogOutgoingBody, keys::public_keys::IvpkM};\n    use dep::protocol_types::{address::AztecAddress, scalar::Scalar};\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n\n    #[test]\n    unconstrained fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n"},"107":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr","source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::IvpkM};\n\npub struct EncryptedLogIncomingBody<let N: u32> {\n    plaintext: [u8; N * 32 + 64]\n}\n\nimpl<let N: u32> EncryptedLogIncomingBody<N> {\n    pub fn from_note<T>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T>(event: T, randomness: Field) -> Self where T: EventInterface<N> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use dep::protocol_types::{\n        address::AztecAddress, scalar::Scalar, point::Point, traits::Serialize,\n        abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n        encrypted_logs::incoming_body::EncryptedLogIncomingBody, event::event_interface::EventInterface,\n        context::PrivateContext, keys::public_keys::IvpkM\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: u32 = 3;\n\n    impl NullifiableNote for AddressNote {\n        fn compute_nullifier(\n            _self: Self,\n            _context: &mut PrivateContext,\n            _note_hash_for_nullify: Field\n        ) -> Field {\n            1\n        }\n\n        unconstrained fn compute_nullifier_without_context(_self: Self) -> Field {\n            1\n        }\n    }\n\n    struct AddressNoteHidingPoint {\n        inner: Point\n    }\n\n    impl NoteInterface<ADDRESS_NOTE_LEN> for AddressNote {\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader {\n            self.header\n        }\n\n        fn set_header(&mut self, header: NoteHeader) {\n            self.header = header;\n        }\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] {\n            [self.address.to_field(), self.owner.to_field(), self.randomness]\n        }\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote {\n                address: AztecAddress::from_field(fields[0]),\n                owner: AztecAddress::from_field(fields[1]),\n                randomness: fields[2],\n                header: NoteHeader::empty()\n            }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_LEN * 32 + 64] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_LEN * 32 + 64] = [0; ADDRESS_NOTE_LEN * 32 + 64];\n\n            let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n            let note_type_id_bytes: [u8; 32] = AddressNote::get_note_type_id().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n\n        fn compute_note_hash(_self: Self) -> Field {\n            crate::generators::Ga1.x\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    unconstrained fn test_encrypted_note_log_incoming_body_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        // 1. `EncryptedLogIncomingBody::from_note` calls `note.to_be_bytes(storage_slot)` function which serializes\n        // the note to bytes - note that in the case of `AddressNote` the `to_be_bytes` function was automatically\n        // implemented by Aztec macros.\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        // 2. `body.compute_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: u32 = 3;\n\n    impl EventInterface<TEST_EVENT_LEN> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            comptime\n            {\n                EventSelector::from_signature(\"TestEvent(Field,Field,Field)\")\n            }\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_LEN * 32 + 64] {\n            let mut buffer: [u8; TEST_EVENT_LEN * 32 + 64] = [0; TEST_EVENT_LEN * 32 + 64];\n\n            let randomness_bytes: [u8; 32] = randomness.to_be_bytes();\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_LEN * 32 + 32] {\n            let mut buffer: [u8; TEST_EVENT_LEN * 32 + 32] = [0; TEST_EVENT_LEN * 32 + 32];\n\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_event_log_incoming_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let event_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 201, 247, 40, 80, 60, 188, 158, 251, 242, 103, 197, 79, 165, 195, 10, 160, 255, 35, 167, 152, 25, 233, 77, 145, 214, 243, 210, 119, 0, 20, 29, 95, 15, 63, 33, 190, 184, 67, 254, 96, 128, 243, 220, 228, 201, 130, 86, 163, 52, 127, 111, 10, 212, 7, 160, 16, 87, 13, 39, 11, 5, 1, 164, 65, 8, 56, 82, 245, 13, 68, 176, 90, 100, 69, 243, 78, 117, 188, 221, 34, 178, 31, 155, 89, 143, 176, 129, 118, 36, 236, 64, 179, 52, 239, 184, 51, 51, 199, 221, 49, 81, 197, 17, 199, 192, 99, 49, 168, 157, 164, 190, 33, 240, 182, 214, 173, 7, 156, 102, 95, 65, 217, 225, 123, 42, 21, 124, 144\n        ];\n\n        assert_eq(event_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..event_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], event_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n"},"108":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::{get_public_keys, get_ovsk_app}, public_keys::{OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    num_public_values: u8 // Number of values to be appended to the log in public (used in partial note flow).\n) -> (u32, [u8; M], Field) where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note,\n        num_public_values\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    num_public_values: u8 // Number of values to be appended to the log in public (used in partial note flow).\n) -> (u32, [u8; M], Field) where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient, num_public_values)\n}\n\npub fn encode_and_encrypt_note<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(AztecAddress, AztecAddress, &mut PrivateContext)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_public_keys(ov).ovpk_m;\n        let ivpk = get_public_keys(iv).ivpk_m;\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        // Number of public values is always 0 here because `encode_and_encrypt_note(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, iv, num_public_values);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(AztecAddress, AztecAddress, &mut PrivateContext)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        // Note: We could save a lot of gates by obtaining the following keys in an unconstrained context but this\n        // function is currently not used anywhere so we are not optimizing it.\n        let ovpk = get_public_keys(ov).ovpk_m;\n        let ivpk = get_public_keys(iv).ivpk_m;\n\n        // Number of public values is always 0 here because `encode_and_encrypt_note_unconstrained(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n\n        // See the comment in `encode_and_encrypt_note_with_keys_unconstrained` for why having note hash counter\n        // and log hash unconstrained here is fine.\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, iv, num_public_values)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        // Number of public values is always 0 here because `encode_and_encrypt_note_unconstrained(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient, num_public_values);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        // Number of public values is always 0 here because `encode_and_encrypt_note_with_keys_unconstrained(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient, num_public_values)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n"},"109":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"112":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"113":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"115":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"116":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        let unpacked: [Field; N] = unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"120":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\nuse crate::hash::ArgsHasher;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"133":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"134":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"139":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"140":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::oracle::logs_traits::ToBytesForUnencryptedLog;\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"148":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"150":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"154":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::{NoteInterface, NullifiableNote}}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = unsafe {\n            get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier)\n        };\n\n        // 2) First we prove that the tree leaf in the witness is present in the nullifier tree. This is expected to be\n        // the leaf that contains the nullifier we're proving inclusion for.\n        assert(\n            self.state.partial.nullifier_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n\n        // 3) Then we simply check that the value in the leaf is the expected one. Note that we don't need to perform\n        // any checks on the rest of the values in the leaf preimage (the next index or next nullifier), since all we\n        // care about is showing that the tree contains an entry with the expected nullifier.\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, let N: u32>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N> + NullifiableNote;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, let N: u32>(\n        self,\n        note: Note,\n        context: &mut PrivateContext\n    ) where Note: NoteInterface<N> + NullifiableNote {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"156":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"159":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LTE, rhs), \"Expected lhs to not be less than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n    }\n}\n"},"160":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"},"161":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"165":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"166":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"167":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter)\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) -> Field {\n    notify_nullified_note_oracle(nullifier, note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"169":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr","source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n"},"171":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"172":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n"},"173":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(_contract_address: AztecAddress, _randomness: Field, _encrypted_event: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<let N: u32>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n"},"174":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"177":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"178":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"180":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"181":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"182":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call.\n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments\n///   itself.\nunconstrained pub fn pack_arguments_array<let N: u32>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call.\n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments\n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"194":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"196":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"197":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"206":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"212":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"213":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"214":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"216":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"217":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"219":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"239":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"241":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"244":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"270":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n"},"291":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"295":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"314":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"336":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n  value: [Field; N]\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n"},"339":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/recurring_entitlement_note.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator};\nuse dep::aztec::{note::utils::compute_note_hash_for_nullify, oracle::unsafe_rand::unsafe_rand};\nuse dep::compressed_string::CompressedString;\nuse dep::aztec::macros::notes::note;\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, PrivateContext};\nuse dep::aztec::keys::getters::get_nsk_app;\n\n// unique ids for each verifier type\nmod HOSTING_VERIFIER_TYPE {\n    global LINODE: u8 = 1; // supported\n    global HEROKU: u8 = 2; // todo: supported\n    global AWS: u8 = 3; // todo: supported\n    global GCP: u8 = 4; // not supported in mvp\n    global AZURE: u8 = 5; // not supported in mvp\n    global HETZNER: u8 = 6; // not supported in mvp\n    global DIGITAL_OCEAN: u8 = 7; // not supported in mvp\n}\n\n// trait OwnedNote {\n//     fn new(\n//         owner: AztecAddress,\n//         external_nullifier_hash: Field,\n//         npk_m_hash: Field,\n//         max_value: U128,\n//         verifier_type: u8,\n//     ) -> Self;\n// }\n\ntrait OwnedNote {\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self;\n}\n\n#[note]\npub struct RecurringEntitlementNote {\n    // the user that is allowed to use this entitlement\n    owner: AztecAddress,\n    // // the external nullifier that the admin can use to nullify the note\n    // external_nullifier_hash: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // // the type of email verifier that should be used for this entitlement\n    // verifier_type: u8,\n    // random entropy to make the note private\n    randomness: Field,\n}\n\nimpl NullifiableNote for RecurringEntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for RecurringEntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.owner == other.owner)\n            & (self.max_value == other.max_value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for RecurringEntitlementNote {\n    // fn new(\n    //     owner: AztecAddress,\n    //     external_nullifier_hash: Field,\n    //     npk_m_hash: Field,\n    //     max_value: U128,\n    //     verifier_type: u8,\n    //     randomness: Field\n    // ) -> Self {\n    //     Self {\n    //         owner,\n    //         external_nullifier_hash,\n    //         npk_m_hash,\n    //         max_value,\n    //         verifier_type,\n    //         randomness: unsafe_rand()\n    //         header: NoteHeader::empty()\n    //     }\n    // }\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self {\n        Self {\n            owner,\n            npk_m_hash,\n            max_value,\n            randomness: unsafe { unsafe_rand() },\n            header: NoteHeader::empty()\n        }\n    }\n}"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    crate::sha256::digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u64, msg_start: u32) -> ([u8; 64], u64) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr: u64 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    for k in msg_start..msg_end {\n        if k as u64 < message_size {\n            msg_block[msg_byte_ptr] = msg[k];\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n    (msg_block, msg_byte_ptr)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u64,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u64 {\n    let mut msg_byte_ptr: u64 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    let mut extra_bytes = 0;\n    if msg_end > N {\n        msg_end = N;\n        extra_bytes = msg_end - N;\n    }\n\n    for k in msg_start..msg_end {\n        if k as u64 < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start as u64 < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start as u64 < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start as u64 < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if msg_byte_ptr == 64 {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start as u64 < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start as u64 < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start as u64 < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE as u64 {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..64 {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..64 {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(mut msg_block: [u8; 64], mut msg_byte_ptr: u64) -> ([u8; 64], u64) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        if msg_byte_ptr < 64 {\n            for _ in 57..64 {\n                if msg_byte_ptr <= 63 {\n                    msg_block[msg_byte_ptr] = 0;\n                    msg_byte_ptr += 1;\n                }\n            }\n        }\n    }\n    (msg_block, msg_byte_ptr)\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; 64], mut msg_byte_ptr: u64, message_size: u64) -> [u8; 64] {\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for _i in 0..64 {\n        // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n        if msg_byte_ptr < 56 {\n            msg_block[msg_byte_ptr] = 0;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        } else if msg_byte_ptr < 64 {\n            for j in 0..8 {\n                msg_block[msg_byte_ptr + j] = len_bytes[j];\n            }\n            msg_byte_ptr += 8;\n        }\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; 64], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n"},"359":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"360":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app, macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness: unsafe_rand(), header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"70":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_contract_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod types;\n\n#[aztec]\ncontract ZImburseContractRegistry {\n    use dep::aztec::prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map};\n    use dep::aztec::macros::{storage::storage, functions::{private, public, view, initializer}};\n    use dep::aztec::note::{\n        note_viewer_options::NoteViewerOptions, note_getter_options::NoteGetterOptions,\n        note_getter::{get_notes, view_notes}, constants::MAX_NOTES_PER_PAGE\n    };\n    use dep::aztec::oracle::{get_contract_instance::get_contract_instance, header::get_header_at_oracle};\n    use dep::aztec::keys::getters::get_public_keys;\n    use dep::aztec::utils::comparison::Comparator;\n    use dep::aztec::encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note_unconstrained, encode_and_encrypt_note};\n    use dep::address_note::address_note::AddressNote;\n    use crate::types::participant_note::{ParticipantNote, NAME_LENGTH};\n    use dep::z_imburse_escrow::ZImburseEscrow;\n\n    #[storage]\n    struct Storage<Context> {\n        escrow_contract_id: SharedImmutable<Field, Context>,\n        managed_escrows: PrivateSet<AddressNote, Context>,\n        participants: Map<AztecAddress, PrivateSet<ParticipantNote, Context>, Context>,\n        participant_escrows: PrivateSet<AddressNote, Context>,\n        contract_registration: Map<AztecAddress, SharedImmutable<bool, Context>, Context>\n    }\n\n    /**\n     * Initialize the Z-Imburse registry contract by setting the class ID of the escrow contract\n     *\n     * @param contract_class_id - The class ID of the escrow contract that all escrows must be instances of\n     */\n    #[public]\n    #[initializer]\n    fn constructor(contract_class_id: Field) {\n        storage.escrow_contract_id.initialize(contract_class_id);\n    }\n\n    /**\n     * Check the authenticity and deployment status of an escrow contract and register it in the Z-Imburse registry\n     * @dev the header will not include the contract address and the contract \n     *\n     */\n    #[private]\n    fn register_escrow(escrow_contract: AztecAddress) {\n        // check that the contract has not already been registered\n        let registration_status = storage.contract_registration.at(escrow_contract).read_private();\n        assert(!registration_status, \"Escrow contract has already been registered\");\n\n        // check that the contract admin is the sender of the message\n        let escrow_admin = ZImburseEscrow::at(escrow_contract).get_admin_private().view(&mut context);\n        assert(escrow_admin == context.msg_sender(), \"Escrow contract admin does not match sender of message\");\n\n        // check that the contract has been deployed\n        let header = context.historical_header;\n        header.prove_contract_initialization(escrow_contract);\n\n        // check the contract class ID\n        let contract_class_id = get_contract_instance(escrow_contract).contract_class_id.to_field();\n        let expected_class_id = storage.escrow_contract_id.read_private();\n        assert(\n            contract_class_id == expected_class_id, \"Escrow contract class ID does not match expected class ID\"\n        );\n\n        // privately add the escrow contract to the list of managed escrows\n        let npk_m_hash = get_public_keys(context.msg_sender()).npk_m.hash();\n        let mut escrow_note = AddressNote::new(escrow_contract, npk_m_hash);\n        storage.managed_escrows.insert(&mut escrow_note).emit(encode_and_encrypt_note(&mut context, context.msg_sender(), context.msg_sender()));\n\n        // publicly add the escrow contract to the list of participant escrows\n        ZImburseContractRegistry::at(context.this_address()).set_contract_registered(escrow_contract).enqueue(&mut context);\n    }\n\n    /**\n     * Publicly set the contract registration status\n     *\n     * @param escrow_contract - the address of the escrow contract that has privately been constrained to be valid\n     */\n    #[public]\n    #[internal]\n    fn set_contract_registered(escrow_contract: AztecAddress) {\n        storage.contract_registration.at(escrow_contract).initialize(true);\n    }\n\n    #[private]\n    fn check_and_register_participant(participant: AztecAddress, participant_name: str<60>, escrow: AztecAddress) {\n        // check that the sender is the admin\n        let escrow_admin = ZImburseEscrow::at(escrow).get_admin_private().view(&mut context);\n        assert(escrow_admin == context.msg_sender(), \"Sender is not the admin of the escrow contract\");\n        // check that the escrow address is registered\n        let registration_status = storage.contract_registration.at(escrow).read_private();\n        assert(registration_status, \"Escrow contract has not been registered\");\n        // check if the participant has already been registered\n        let options = NoteGetterOptions::new().select(AddressNote::properties().address, Comparator.EQ, participant).set_limit(1);\n        let participant_exists = storage.participants.at(escrow).get_notes(options).len() == 0;\n        // if the participant has not been registered, enqueue a private call to register the participant\n        // do this instead of if statement here to make adding first time expensive but cheap if already registered\n        if participant_exists {\n            ZImburseContractRegistry::at(context.this_address()).register_participant(participant, participant_name, context.msg_sender(), escrow).call(&mut context);\n        }\n    }\n\n    #[private]\n    #[interal]\n    fn register_participant(\n        participant: AztecAddress,\n        participant_name: str<60>,\n        admin: AztecAddress,\n        escrow: AztecAddress\n    ) {\n        // add escrow to the participant's set of escrows\n        let mut escrow_note = AddressNote::new(escrow, get_public_keys(participant).npk_m.hash());\n        storage.participant_escrows.insert(&mut escrow_note).emit(encode_and_encrypt_note(&mut context, admin, participant));\n        // add the participant to the admin set of participants\n        let mut participant_note = ParticipantNote::new(\n            participant,\n            participant_name,\n            get_public_keys(admin).npk_m.hash()\n        );\n        storage.participants.at(escrow).insert(&mut participant_note).emit(encode_and_encrypt_note_unconstrained(&mut context, admin, admin))\n    }\n\n    // todo: add ability to remove participant\n    // todo: add ability to remove participant escrows by looking up nullifications\n\n    /** Get the class ID that all escrow contracts must match */\n    #[public]\n    #[view]\n    fn get_escrow_class_id() -> pub Field {\n        storage.escrow_contract_id.read_public()\n    }\n\n    /** Get the registration status of an escrow contract */\n    #[public]\n    #[view]\n    fn get_contract_registration_status(escrow_contract: AztecAddress) -> pub bool {\n        storage.contract_registration.at(escrow_contract).read_public()\n    }\n\n    /**\n     * Get a page of the list of escrows administrated by a given address (private)\n     *\n     * @param admin - the address of the admin\n     * @param page_index - the index of the page to retrieve\n     * @return managed_escrows - the list of managed escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_managed_escrows(\n        admin: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], bool, u32) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.managed_escrows.view_notes(options);\n        let mut managed_escrows: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                managed_escrows[i] = notes.get_unchecked(i).address;\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (managed_escrows, page_limit_reached, notes.len())\n    }\n\n    /**\n     * Get a page of the list of escrows participated in by a given address (private)\n     *\n     * @param admin - the address of the participant\n     * @param page_index - the index of the page to retrieve\n     * @return participant_escrows - the list of enrolled escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participant_escrows(\n        participant: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.participant_escrows.view_notes(options);\n        let mut participant_escrows: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                participant_escrows[i] = notes.get_unchecked(i).address;\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (participant_escrows, page_limit_reached)\n    }\n\n    /**\n     * Get a page of the list of of participants in an escrow (private)\n     *\n     * @param admin - the address of the escrow\n     * @param page_index - the index of the page to retrieve\n     * @return participants - the list of participating addresses\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participants(\n        escrow: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], [[u8; NAME_LENGTH]; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.participants.at(escrow).view_notes(options);\n        let mut participants: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        let mut participant_names: [[u8; NAME_LENGTH]; MAX_NOTES_PER_PAGE] = [[0; NAME_LENGTH]; MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                let participant_note = notes.get_unchecked(i);\n                participants[i] = participant_note.address;\n                participant_names[i] = participant_note.get_name();\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (participants, participant_names, page_limit_reached)\n    }\n}\n\n"},"72":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_contract_registry/src/types/participant_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator, traits::{Serialize, Deserialize}\n},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\nuse dep::compressed_string::CompressedString;\n\nglobal NAME_LENGTH: u32 = 60;\nglobal NAME_SERIALIZED_LENGTH: u32 = 2;\n\n#[note]\npub struct ParticipantNote {\n    address: AztecAddress,\n    name: [Field; 2],\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n\nimpl NullifiableNote for ParticipantNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for ParticipantNote {\n    // does not check for participant name\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl ParticipantNote {\n    pub fn new(address: AztecAddress, name: str<NAME_LENGTH>, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        let name_serialized: CompressedString<NAME_SERIALIZED_LENGTH, NAME_LENGTH> = CompressedString::from_string(name);\n        ParticipantNote { address, name: name_serialized.value, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_name(self) -> [u8; NAME_LENGTH] {\n        CompressedString::<NAME_SERIALIZED_LENGTH, NAME_LENGTH> { value: self.name }.to_bytes()\n    }\n}\n"},"74":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"88":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"89":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_getter_options.nr","source":"use std::option::Option;\nuse dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, traits::ToField};\nuse crate::note::note_interface::NoteInterface;\n\npub struct PropertySelector {\n    index: u8, // index of the field in the serialized note array\n    offset: u8, // offset in the byte representation of the field (selected with index above) from which to reading\n    length: u8, // number of bytes to read after the offset\n}\n\npub struct Select {\n    property_selector: PropertySelector,\n    comparator: u8,\n    value: Field,\n}\n\nimpl Select {\n    // The selected property will be the left hand side and value the right hand side of the operation, so e.g. the\n    // object created by new(property, Comparator.GT, value) represents 'property > value'.\n    pub fn new(property_selector: PropertySelector, comparator: u8, value: Field) -> Self {\n        Select { property_selector, comparator, value }\n    }\n}\n\npub struct SortOrderEnum {\n    DESC: u8,\n    ASC: u8,\n}\n\nglobal SortOrder = SortOrderEnum {\n    DESC: 1,\n    ASC: 2,\n};\n\npub struct Sort {\n    property_selector: PropertySelector,\n    order: u8,\n}\n\nimpl Sort {\n    pub fn new(property_selector: PropertySelector, order: u8) -> Self {\n        Sort { property_selector, order }\n    }\n}\n\npub struct NoteStatusEnum {\n    ACTIVE: u8,\n    ACTIVE_OR_NULLIFIED: u8,\n}\n\nglobal NoteStatus = NoteStatusEnum {\n    ACTIVE: 1,\n    ACTIVE_OR_NULLIFIED: 2,\n    // TODO 4217: add 'NULLIFIED'\n};\n\n// This is the default filter and preprocessor, which does nothing\nfn return_all_notes<Note>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    _p: Field\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    notes\n}\n\n// docs:start:NoteGetterOptions\npub struct NoteGetterOptions<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    // Preprocessor and filter functions are used to filter notes. The preprocessor is applied before the filter and\n    // unlike filter it is applied in an unconstrained context.\n    preprocessor: fn ([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n    filter: fn ([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], FILTER_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    filter_args: FILTER_ARGS,\n    status: u8,\n}\n// docs:end:NoteGetterOptions\n\n// When retrieving notes using the NoteGetterOptions, the configurations are applied in a specific sequence to ensure\n// precise and controlled data retrieval.\n// The database-level configurations are applied first:\n// `selects` to specify fields, `sorts` to establish sorting criteria, `offset` to skip items, and `limit` to cap\n// the result size.\n// And finally, a custom preprocessor and filter to refine the outcome further.\nimpl<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS> NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS> {\n    // This method adds a `Select` criterion to the options.\n    // It takes a property_selector indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from `utils::comparison`)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    // This method adds a `Sort` criterion to the options.\n    // It takes a field_index indicating which field to sort by and an order (SortOrder) to determine the sorting direction.\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    // This method lets you set a limit for the maximum number of notes to be retrieved in a single query result.\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        assert_constant(limit);\n\n        self.limit = limit;\n        *self\n    }\n\n    // This method sets the offset value, which determines where to start retrieving notes in the query results.\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n\nimpl<Note, let N: u32> NoteGetterOptions<Note, N, Field, Field> where Note: NoteInterface<N> {\n    // This function initializes a NoteGetterOptions that simply returns the maximum number of notes allowed in a call.\n    pub fn new() -> Self {\n        Self {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            preprocessor: return_all_notes,\n            preprocessor_args: 0,\n            filter: return_all_notes,\n            filter_args: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n}\n\nimpl<Note, let N: u32, PREPROCESSOR_ARGS> NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, Field> where Note: NoteInterface<N> {\n    // This function initializes a NoteGetterOptions with a preprocessor, which takes the notes returned from\n    // the database and preprocessor_args as its parameters.\n    // `preprocessor_args` allows you to provide additional data or context to the custom preprocessor.\n    pub fn with_preprocessor(\n        preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n        preprocessor_args: PREPROCESSOR_ARGS\n    ) -> Self {\n        Self {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            preprocessor,\n            preprocessor_args,\n            filter: return_all_notes,\n            filter_args: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n}\n\nimpl<Note, let N: u32, FILTER_ARGS> NoteGetterOptions<Note, N, Field, FILTER_ARGS> where Note: NoteInterface<N> {\n    // This function initializes a NoteGetterOptions with a filter, which takes\n    // the notes returned from the database and filter_args as its parameters.\n    // `filter_args` allows you to provide additional data or context to the custom filter.\n    pub fn with_filter(\n        filter: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], FILTER_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n        filter_args: FILTER_ARGS\n    ) -> Self {\n        Self {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            preprocessor: return_all_notes,\n            preprocessor_args: 0,\n            filter,\n            filter_args,\n            status: NoteStatus.ACTIVE\n        }\n    }\n}\n"},"90":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"91":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, notification_note_hash, nullifier_counter) == 0);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n\n"},"94":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"96":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"98":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"}}}