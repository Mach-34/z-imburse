{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseDkimRegistry","functions":[{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim"],"assert_messages":{"637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","144":"Storage slot 0 not allowed. Storage slots must start from 1.","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","45":"Sender is not the registry contract","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","329":"Array index out of bounds","457":"attempt to add with overflow","713":"attempt to add with overflow"}},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"128":"attempt to add with overflow","503":"Array index out of bounds","689":"Array index out of bounds","110":"Array index out of bounds","366":"SharedImmutable already initialized","488":"attempt to add with overflow","671":"Array index out of bounds","409":"attempt to add with overflow","665":"attempt to add with overflow","467":"Array index out of bounds","595":"Array index out of bounds","583":"attempt to add with overflow","644":"Array index out of bounds","446":"attempt to add with overflow","763":"Array index out of bounds","117":"Array index out of bounds","751":"attempt to add with overflow","425":"attempt to add with overflow","611":"Array index out of bounds","535":"attempt to add with overflow","340":"Initializer address is not the contract deployer","401":"Array index out of bounds","334":"Initialization hash does not match","459":"Array index out of bounds","72":"attempt to add with overflow","779":"Array index out of bounds","703":"attempt to add with overflow","636":"Array index out of bounds","435":"Array index out of bounds","624":"attempt to add with overflow","106":"attempt to add with overflow","417":"Array index out of bounds","475":"Array index out of bounds","603":"Array index out of bounds","792":"attempt to add with overflow","652":"Array index out of bounds","521":"Array index out of bounds","771":"Array index out of bounds"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VYTXPaMBCVg41lUwe3gEnSQ3ttT3IwNNyY6ef/8KTX/IT89bBGOzw2xBkUaSZoxiNb0r59eitpbUdqV/T2iux9Yuuhel54zMbW5m2l9ohlQvKMzoTnxZnwHJwJz9gjz+gIT6pje0/7jvZcqnb78VknGlOgB9Cv+oCk10dbZxYInW08KZcJv96w75o2s9wD8F4Sbh4G21BAfuq99gp8UTD/2j6uI3sVtl+BfaH2Af8FbbxQfkMbn+R/oC1Vh76Ijw4Tr7uA8TIFaKjABxbcJLzecxUszl22GAn/ufDfxdQKrqEttg8jaEvEmqHHL9CvYU7c/13MDbkMBBfCTUJoYWM/DIFtTIMaxkc0TI5oODyi4WR7/RM4xDvVQXh3mUADxxh8Mc8LGKOBRwLP39S+PYOTPgZdGHdMc+d1pF+2i4VdCWOGYJcKuxR4d2O311d7P7J64hng701ltZZntj/sH4tM7feiZ973hP0hCHbTYReA7XP9EvZlGE1WhD0Og93l9jII9m2nyUfA9vjFUFMcP6nDQv4mQeJb1335k33mwClE/pwI/+wL8+dUcCqhDffVVGBNBRZpOYPxHtfcf+Q0O4ET2pWOdiNHu1N4knYVjPd49jbIqXKcy9jRLne0OyVWpN0cxntcdwfazR3n4qrdpaNd5mjnus5d5zcHvngG+/xLhJxii82+OM8kMObB1nQuXqnDQjyvgafHXHHblyuugRPfM7dccErewGmxWJt2tV6umrq9b9tFBNjMiZ/xf8eNGCNzDOn2OYxuBr9dbkAnfv9G7fibgLngt0sG9r459unIPkvBlXm8pj9pfQX3PJcC7DZe5rH7R4DvE+xrFkQ3s+zbE+wzV6He33bvTzPhfyL0J00qwamENoxlJbAqgfUe7PAfGc+V8sIT7yz2rOIYAAA=","debug_symbols":"tdnLaoNAFIDhd5m1C43OufgqpQRNNAiiQU2hiO9e7YUGsv434tEz/+5bzRquTf24nbuhHedQvq2hHy/V0o3DPq1bEuqp6/vudn7+HNLjUZy+9+d7NRzjvFTTEsoiPyWhGa7Hm+7n265vQqnplrys6t+m/i9G396TUORcuuDSkUsLl1YubVzasXRMuXTGpTmNkdMYOY2R0xg5jZHTGDmNkdMonEbhNAqnUTiNwmkUTqNwGoXTKJxG4TQqp1E5jcppVE6jchqV06icRuU0KqdROY3GaTROo3EajdNonEbjNBqn0TiNxmk0TqNzGp3T6JxG5zQ6p9E5jc5pdE6jcxqd05ilKdjOwPYJbOdguwDbEWwL2FawbWAbdJlRLrd9+qimrqr75vfyon0Ml6e7jOXz/vNnX/4C","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"1091":"Storage slot 0 not allowed. Storage slots must start from 1.","189":"attempt to add with overflow","3060":"Array index out of bounds","2481":"Array index out of bounds","3505":"Array index out of bounds","3304":"Array index out of bounds","732":"Sender is not the registry contract","409":"Initializer address is not the contract deployer","1500":"Array index out of bounds","1744":"attempt to add with overflow","2000":"attempt to add with overflow","3024":"attempt to add with overflow","1543":"Array index out of bounds","2311":"Array index out of bounds","3067":"Array index out of bounds","818":"DKIM key has already been registered","428":"SharedImmutable already initialized","1385":"attempt to add with overflow","1641":"Array index out of bounds","2921":"Array index out of bounds","3110":"Array index out of bounds","2641":"attempt to add with overflow","2830":"Array index out of bounds","1416":"attempt to add with overflow","3464":"Array index out of bounds","1282":"Array index out of bounds","1794":"Array index out of bounds","1916":"Array index out of bounds","1593":"Array index out of bounds","1014":"attempt to add with overflow","1715":"Array index out of bounds","2928":"Array index out of bounds","3196":"Array index out of bounds","2538":"Array index out of bounds","1703":"attempt to add with overflow","1246":"attempt to add with overflow","155":"attempt to add with overflow","1947":"Array index out of bounds","2971":"attempt to add with overflow","3160":"Array index out of bounds","1423":"Array index out of bounds","1356":"Array index out of bounds","2124":"Array index out of bounds","1990":"attempt to add with overflow","2502":"attempt to add with overflow","1344":"attempt to add with overflow","2691":"Array index out of bounds","3014":"attempt to add with overflow","1655":"attempt to add with overflow","2423":"attempt to add with overflow","2612":"Array index out of bounds","3337":"Array index out of bounds","2600":"attempt to add with overflow","1765":"attempt to add with overflow","2722":"Array index out of bounds","607":"Not initialized","2399":"attempt to add with overflow","1296":"attempt to add with overflow","2186":"Storage slot 0 not allowed. Storage slots must start from 1.","1028":"Not initialized","193":"Array index out of bounds","1217":"Array index out of bounds","2040":"Array index out of bounds","2552":"attempt to add with overflow","626":"Sender is not the registry contract","1394":"attempt to add with overflow","1193":"Array index out of bounds","2473":"Array index out of bounds","2662":"attempt to add with overflow","3296":"Array index out of bounds","3485":"attempt to add with overflow","90":"attempt to add with overflow","2004":"Array index out of bounds","1937":"attempt to add with overflow","1614":"attempt to add with overflow","2449":"Array index out of bounds","200":"Array index out of bounds","2949":"attempt to add with overflow","3028":"Array index out of bounds","1535":"attempt to add with overflow","3516":"attempt to add with overflow","566":"attempt to add with overflow","2102":"Storage slot 0 not allowed. Storage slots must start from 1.","1968":"attempt to add with overflow","877":"Storage slot 0 not allowed. Storage slots must start from 1.","1834":"Array index out of bounds","1511":"attempt to add with overflow","2212":"SharedImmutable already initialized","2346":"Array index out of bounds","2334":"attempt to add with overflow","2011":"Array index out of bounds","3035":"Array index out of bounds","3102":"attempt to add with overflow","3181":"attempt to add with overflow","3358":"attempt to add with overflow","3382":"Array index out of bounds","2822":"Array index out of bounds","1731":"Array index out of bounds","896":"SharedImmutable already initialized","2365":"attempt to add with overflow","1786":"Array index out of bounds","3078":"attempt to add with overflow","1908":"Array index out of bounds","1585":"Array index out of bounds","2353":"Array index out of bounds","3444":"attempt to add with overflow","1896":"attempt to add with overflow","2341":"attempt to add with overflow","2853":"Array index out of bounds","3456":"Array index out of bounds","1372":"Array index out of bounds","1561":"Array index out of bounds","403":"Initialization hash does not match","2896":"Array index out of bounds","3152":"Array index out of bounds","2439":"attempt to add with overflow","2628":"Array index out of bounds","2305":"attempt to add with overflow","2884":"attempt to add with overflow","2683":"Array index out of bounds","1848":"attempt to add with overflow","2939":"attempt to add with overflow","1458":"Array index out of bounds","2226":"Array index out of bounds","2415":"Array index out of bounds","3128":"Array index out of bounds","1446":"attempt to add with overflow","1958":"attempt to add with overflow","800":"Storage slot 0 not allowed. Storage slots must start from 1.","3317":"attempt to add with overflow","3329":"Array index out of bounds","1623":"Array index out of bounds","3396":"attempt to add with overflow","1233":"Array index out of bounds","2190":"Array index out of bounds","3214":"Array index out of bounds","1032":"Function check_dkim_key_hash_public can only be called statically","1477":"attempt to add with overflow","3494":"attempt to add with overflow","1465":"Array index out of bounds","1398":"Array index out of bounds","2233":"Array index out of bounds","1264":"Array index out of bounds","1453":"attempt to add with overflow","2489":"Array index out of bounds","3056":"attempt to add with overflow","2843":"attempt to add with overflow","2520":"Array index out of bounds","3288":"Array index out of bounds","1551":"attempt to add with overflow","1807":"attempt to add with overflow","2953":"Array index out of bounds","3276":"attempt to add with overflow","515":"attempt to add with overflow","1405":"Array index out of bounds","1527":"Array index out of bounds","1204":"attempt to add with overflow","1972":"Array index out of bounds","2740":"Array index out of bounds","3118":"attempt to add with overflow","2917":"attempt to add with overflow","2460":"attempt to add with overflow","3228":"attempt to add with overflow","3094":"Array index out of bounds","211":"attempt to add with overflow","2704":"attempt to add with overflow","2381":"Array index out of bounds","2960":"Array index out of bounds","3472":"Array index out of bounds","1924":"Array index out of bounds","1601":"Array index out of bounds","2814":"Array index out of bounds","699":"attempt to add with overflow","1723":"Array index out of bounds","1979":"Array index out of bounds","1778":"Array index out of bounds","2802":"attempt to add with overflow","2991":"attempt to add with overflow","3003":"Array index out of bounds","2022":"attempt to add with overflow","675":"attempt to add with overflow","3046":"attempt to add with overflow","3168":"Array index out of bounds","1754":"Array index out of bounds","1364":"Array index out of bounds","2388":"Array index out of bounds","3345":"Array index out of bounds","2120":"DKIM key has already been registered","2754":"attempt to add with overflow","2431":"Array index out of bounds","2620":"Array index out of bounds","2675":"Array index out of bounds","2864":"attempt to add with overflow","2029":"Array index out of bounds","3498":"Array index out of bounds","1572":"attempt to add with overflow","3364":"Array index out of bounds","2651":"Array index out of bounds","1816":"Array index out of bounds","1493":"Array index out of bounds","2907":"attempt to add with overflow","713":"Not initialized","1225":"Array index out of bounds","3139":"attempt to add with overflow"}},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRQAAJAAEAQQkAAQABR8AAAAABQAAAAQAAAhDKwAIQwADIgAAAAkrAAADCEQ5AAAACEQAAAABHgAAAAUeAAAABjAAAAAABQAAAAYAAAAHJAACAQYKAAIHBgUhAAAQAAU6AQAAHgALAAYkAAcBBwoABwYHBSEAABUABToBAAAqAAAHJAAEBAYAAAQABgAkAQQBBwAABAcCBioABgUkAAcACCoCCAUAAAQFAgUqAggFAAAEBQIFKgIIBSoBBwYAAAQGAgYqAgYHKgEHBgAABAYCBioCBgcqAQcGAAAEBgIGKgIGByoBBwYAAAQGAgYqAgYHKgAABgAABAACACoCBwYqAAAHJAAEBQUAAAQABQAkAQQBBwAABAcCBSoABQkqAggJAAAECQIJKgIICQAABAkCCSoCCAkAAAQJAgkoAAcAAAAAAAAAAgAAAAAAAAAAAAoqAgoJKgEHBQAABAUCBSoCBQcqAAAFAAAEAAIAKgIHBSoAAAcAAAQAAgAkAAQACioCCgcqAAAJAAAEAAIAJAABAAsqAgsJJAAEAgwkAAQBDSQABwIOJAAEBA8kAAQDECoACgQgAFMMAAQEDBEhAADJABEgAFYqAQkMCgABDAsEIQAAWgAEOgEAACoACg4gAFwMAAQOEAwhAACgAAwgAF8qAQUMKgAAByQABAUGAAAEAAYAJAEEAQcAAAQMAgYkAAQEBAAABAcCAz4DAAAABgAAAAMqAgcFJAABAQUqAgUJAAAEBwIFAAAEBQoMKgEMCQoABwkIBwoAAQcLBSEAAHIABToBAAAqAAALJAAEAgcAAAQABwAkAQQBCwAABAsCByoABwUqAggFKgELBwAABAcCByoCBwsqAAAHAAAEAAIAKgILByoACg4gAIEKAAQOCgwhAACKAAwgAIQqAQcJAAAECQIIAAAECAoGKgEGByoABwMjKgEHDBwABw4LAAAHCQsILAAAAAAIAAAACyQABAEGDAAEDgYFIQAAkgAFOgEAACsAAAwIAyUABAACCAQiAAABVCsACAUACAAABAgCBQAABAUOBioCCwYAAAQODQwOAAQODAshAACdAAs6AQAAKgIIByoADA4gAIEqAQcMDAAEDgwEIQAApAAEIADDKgEFDCoBBQQkAAQEEQwABA4REiEAAKoAEjoBAAAAAAQEAhIAAAQSDhEqAREDKgEGBCQABAMRDAAEDhETIQAAsgATOgEAAAAABAQCEwAABBMOESoBERIAAAcDEgQkAAQEEgwABA4SEyEAALoAEzoBAAArAAAMCAMlAAQABQgEIgAAAVQrAAgFAAMAAAQDAhMAAAQTDhIqAgQSKgIDBSAAwwAABA4NDA4ABA4MBCEAAMcABDoBAAAqAAwOIABcDAAEBAwRIQAAzAARIAElKgAAESQABAMSAAAEABIAJAEEAREAAAQRAhIqABITKgIOEwAABBMCEyoCAxMkAAQCEwwABAQTFCEAANkAFDoBAAAAAAQRAhQAAAQUBBMqARMSKgEJEQoAARELFCEAAOAAFDoBAAAqAQcRCgAEERAUIQAA/AAUIADkKgEGESoBBxMqAQcUJAAEAxYMAAQUFhchAADrABc6AQAAKwAAEQgDJQAEAAQIBCIAAAFUKwAIBQAVAAAEFQIXAAAEFxQWKgISFioBFREAAAQRAhEqAhEVAAAEEw0RDgAEExESIQAA+QASOgEAACoCFQYqAhEHIAElKgAKESAA/gwABBEQEyEAASsAEyABASoBBhEqAQUTKgAAFCQABAUVAAAEABUAJAEEARQAAAQTAhUkAAQEFgAABBQCFz4DAAAAFQAAABcqARETAgAEEwITKgITESoBERMAAAQTAhMqAhMRKgEUEwAABBMCEyoCExQrAAARCAMlAAQABAgEIgAAAVQrAAgFABMAAAQTAhcAAAQXChYqAhIWKgETEgAABBICEioCEhMqARQSAAAEEgISKgISFCoCEwYqAhQFKgINByABJQAABAQNEQ4ABAQREiEAASkAEjoBAAAqABEEIABTKgEHEwwABBETFCEAAS8AFCABTioBBRMqAQUUJAAEBBYMAAQRFhchAAE1ABc6AQAAAAAEFAIXAAAEFxEWKgEWFSoBBhQkAAQDFgwABBEWGCEAAT0AGDoBAAAAAAQUAhgAAAQYERYqARYXAAAHFRcUJAAEBBUMAAQRFRghAAFFABg6AQAAKwAAEwgDJQAEAAUIBCIAAAFUKwAIBQAXAAAEFwIYAAAEGBEVKgIUFSoCFwUgAU4AAAQRDRMOAAQRExQhAAFSABQ6AQAAKgATESAA/isBCAMIBgsABAgGAAIIByEAAVgIByABWisACAMIBSABaCsAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAAFmCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAV0lAQQAAQgFIAFoIysAGMoYyg==","debug_symbols":"7d3bbts4EAbgd/F1Lng+5FUWiyJp08JA4BRJusAiyLuvnViMTRriWiOPRfC/KZKWtiZfLHF+Voe31Y+H+z+/vq03P59eVrd/va0en77fva6fNtvv3t5vVvfP68fH9a9vh3+9Ers/4sfwl993m913L693z6+rW+mVuVk9bH7svtRm+wY/148Pq1sv3m+KwVH7/dhofRoqrTwx1igZ94ONUuFrtLQnRrsg9X60Cyoejf77ZiUFuXYpZBosDgZzVC/p8n7YQIw1eanMMFiqGCu1B2mHMoI8fO997WrG2rfwx8XvNqAvvQFz6Q3YS2/AkTdgbRy2YJ2ofSZ8UHY/2gcTis+EP7Oe3WvChNfE81+jxITXnNw/dRQDgo4HO/XpX6CSw/7p5ZeX8qf2TzuMPdrf4ukPhrTpjZ0+GH1qz9chHbS0SGN3P28xVCkn9mOV8mF8sFNqOLwpfTh0h6eANx1PA286ngHedDwLvOl4DnjT8TzwpuMF4E3Hi8CbjKcF8KbjIWEQ8JAwCHhIGAQ8A7zpeEgYBDwkjAqedQPewX9F7PGQMAh4SBgEPCSM6XgGCYOAh4RBwEPCyEUQG3IRA5FMBA1+LoKuPRdBK56LoL/ORdA0ZyIWnXAugvY2F0HPmougZ81FDEQyEfSsuQh61lwEPWsugp41F0HPmok49Ky5CHrWXAQ9ay6CnjUXMRDJRNCz5iLoWXMR9Ky5CHrWXAQ9aybi0bPmIuhZcxH0rLkIetZcxEAkE0HPmomEHvcaLZKIljIX6bGL92F4Y+UP7s1x7uAdX48t/zl80tvhjaX3+Tl/ocd8MCNfj2FiPr7YY1d5Fl/ww9UxMkQ5Pjjo4Y2Dzg+TscdO5GLSUugwDBY2n9EjZvQ5rWUqWUpncmtM/3zW6BX4rNFYsFlL0eMC6NWwe1xbvRo2GmxG7B7Xtq6GbYA9FfvDD4GQ5oeQR/NDcKsMFmJYY1BClX4IYzQ/BCySn6Rnpu0c7tIML3RFMKTbuQcrxt/YxeE2114e/mLCZ+Wy2cpVs5XrZis31cqtq1TuQpoJvfBHmyhH2+iGHdrG+FX76XvUW6+HA8v2S3U0+qN823b5ru3yfdvlh7bLj02Xr0Tb5cu2y1dtl6/bLr/tWVe1PeuqtmddtfTjvg2pfFs+Jksv/cjjTSo/iLJ8/iNPenSXE8JWypfRpveO7qDfD5/9vjZtl2/bLn/pHWdl1134kSfIdOAMB0s6Q/lm6R1ndKPlL73jDPqrfFUZHU06xSwaf+KHbXuWMEvvTyvlL70/rZS/9P60Uv7S+9NK+UtfFaqUv/Q5ulL+0tPBePl26XN0pfylz9GV8tuedW3bs+7/uJHfostve9a1bc+6tu1Zt8sbi13lUinZ5R3LLnitVLr6WQpZYhtg82HjpE9GbJwhOiv22CWXsss7f10NG+eeMmLjRFU+7C5vhXY1bPTZjNi4EpARG1cCMmIbYM+JbdNll8KFAhsJkhEbCZIRGwmSERsJkhEbCZIPOyBBMmIjQV6qzz6BjQTJF2q6vE/y1bANsPmwkSAZsZEgGbGRIBmxkSAZsZEg+bAjEiQjNhIkIzYSJCM2EiQjNkINIzZCDSM2Qg0jNkING7bq8kb0Wg1jlS6ufFHC9EiSPlJKB1GQ9DizV0h6nH8rJD3OkhWSHueyCkmPy2jjJLLHxa4KSZd9yThJjwtHFZIuH6Q8TmJAkpOgey1I0L0WJOheCxJ0rwUJutecRHXZvaZ7oG51aktwow9xU6rLVvccP5XW66QyvvDrsi+e0a/LJnpGPwM/kl+X7flZfi6VrEI5f3TZpZ3jZ9Its7dflp+/Llu6+fw0+j+aH/q/ip+Taf5wxhV+6P9ofuj/aH4GfiQ/9H80vy7Xcmf063Lhd0Y/5A+aH/IHyc8gf9D8kD9ofsgfND/kD5qfgR/JD/mj5ufSJQQuhMIP+YPmh/xB80P+oPkhf5D8LPIHzc/Ab9zPiORnlB8fPPZQJ2Ux1cxIXbm00mJeYsTGJDYn9vgZi10+hu9q2FieY8TGWh4jNhb+GLENsPmwsaTIiI31R0ZsJEhGbCRIRmwkSD7sLh8xORP2hx9CIc0POY/mh+hG8zPwI/khYNH8kJlqfkYnP1ucM9TlcxLn9EOyofkhrJD8unxA4Zx+yB80P+QPmh/yB83PwI/kh/xB80P+oPkhf9D8kD9ofsgfNb/Re750+Xi7Of2QP2h+6J8LEgOSnARdbkGCxrUgQS9QOxbPdP2OFmgbZqSWQohhsJAlNuZIRmzMvozYmNdnxR67Mk33+aC4a2FjXYwRG4tojNjosvmw+3wg37WwsZbHiI0TDxixkSBnxbbpkhLhQoFtgM2HjQTJiI0EyYiNBMmIjQTJiI0EyYeNh2JerM8+gY0EyRdq8LhNTmwkSEZsA2w+bCRIRmwkSEZsJEhGbCRIRmwkSD5sPFaXExsJkhEbCZIR2wCbDxuhhhEboYYRG6GGCft9+90/d8/ru/vHh5fta3b/+Gfz/XX9tNl/+/rv789/2Q7+Dw==","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":50,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":50,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAAQIpwAAJAAEZAUkAAQABh8AAAAABgAAAAUAAAhDJQAECEMAAyQABDIFKgAABiQABDMHAAAEAAcAJAEEAQYAAAQGAgcrAAADCAMrAAAHCAQrAAAFCAUiAAAAHyoABgMlAAQIdQAEJAAEMgcqAAAGJAAEMwUAAAQABQAkAQQBBgAABAYCBSsAAAQIAysAAAUIBCsAAAcIBSIAAAAfKgAGBCIAAAAqOQAAAAinAAAAACUABAAACAcNAAQIBwgFCAgXAAgICAghAAApCAgBAAQIAwgHCAkrAQgJCAYBAAQIBAgHCAkrAggGCAkBAAQIBwACCAcgACAjHgAAAAYeAAAABzAAAAAABgAAAAcAAAAIJAACAQcKAAIIBwYhAAAxAAY6AQAAKgAAByQABAIIAAAEAAgAJAEEAQcAAAQHAggqAAgGJAAHAAkqAgkGKgEHCAAABAgCCCoCCAcqAAAIAAAEAAIAKgIHCCQABAAGJAAHAQokAAQBCyoABgUgAEQKAAQFBgwhAAOzAAwgAEcqAQgFAAAEBQIMAAAEDAYNKgENCB4AAgAFCgAHCAUMIQAATwAMOgEAACoAAAUkAAQCCAAABAAIACQBBAEFAAAEBQIIKgAIDCUAB96tAA0qAg0MJgAHwLsaPAAIKAAHAAAAAAAAAAIAAAAAAAAAAAAMJAAEAw4kAAQEDyQABAIQJAABABEqAAASJAAEBBMAAAQAEwAkAQQBEgAABBICEyoAExQqAgkUAAAEFAIUKgIJFAAABBQCFCoCCRQkAAQyEyQAAQEUKgAAFSQABAUWAAAEABYAJAEEARUAAAQVAhYqABYXKgIJFwAABBcCFyoCCRcAAAQXAhcqAgkXAAAEFwIXKgIMFyYABzuaygAAFiQABwIXKgAGCiAAewwABAoTGCEAAH8AGCAAfiMkAAQyGQwABAoZGiEAAIMAGjoBAAAAAAQDAhoAAAQaChkqARkYCgAHGAkaFgAaGCEAAIoAGCABkyQABDIaDAAEChobIQAAjgAbOgEAAAAABAQCGwAABBsKGioBGhkqARIbAAAEGwIbKgIbEioBEhsAAAQbAhsqAhsSKgESGwAABBsCGyoCGxIqARIbAAAEGwIbKgIbEioAABsAAAQAAgAqAhIbKgEVGgAABBoCGioCGhUqAAAaAAAEAAIAKgIVGioAABwAAAQAAgAqAgYcKgAAHQAABAACACoCER0qAAYYIACuDAAEGBAeIQADKAAeIACxKgEdGAoAARgRHiEAALUAHjoBAAAqAAYZIAC3DAAEGQ4YIQAC/wAYIAC6KgEaGyoAABkkAAQFGAAABAAYACQBBAEZAAAEGwIYJAAEBB4AAAQZAh8+AwAAABgAAAAfKgIZGioCFB0AAAQZAhoAAAQaBhsqARsdCgAHHQkZCgABGREaIQAAzAAaOgEAACoBBxkAAAQZAhkqAhkHKgAAGQAABAACACoCBxkqAAYcIADUCgAEHAYbIQAC6QAbIADXKgEZGgAABBoCGwAABBsGHCoBHBkKAAcZCRohAADeABo6AQAAJAAEMhoMAAQKGhshAADiABs6AQAAAAAEBAIbAAAEGwoaKgEaGSoBEhsAAAQbAhsqAhsSKgESGwAABBsCGyoCGxIqARIbAAAEGwIbKgIbEioBEhsAAAQbAhsqAhsSKgAAGwAABAACACoCEhsqARUaAAAEGgIaKgIaFSoAABoAAAQAAgAqAhUaKgAAHAAABAACACoCBhwqAAAdAAAEAAIAKgIRHSoABhggAQIMAAQYEB4hAAJeAB4gAQUqAR0YCgABGBEeIQABCQAeOgEAACoABhkgAQsMAAQZDhghAAI1ABggAQ4qARobKgAAGSQABAUYAAAEABgAJAEEARkAAAQbAhgkAAQEHgAABBkCHz4DAAAAGAAAAB8qAhkaKgIUHQAABBkCGgAABBoGGyoBGx0KAAcdCRkKAAEZERohAAEgABo6AQAAJAAEMhoMAAQKGhshAAEkABs6AQAAAAAEAwIbAAAEGwoaKgEaGQAABxYdGyoBBxoAAAQaAhoqAhoHKgAAGgAABAACACoCBxoqAAYcIAEwCgAEHAYYIQACHwAYIAEzKgEaGAAABBgCHgAABB4GHyoBHxoKAAcaCRghAAE6ABg6AQAAKgAGHCABPAoABBwGGiEAAg8AGiABPyoABhwgAUEKAAQcBhshAAH4ABsgAUQkAAQyGgwABAoaGyEAAUgAGzoBAAAAAAQEAhsAAAQbChoqARoZJAAEMhoMAAQKGhwhAAFPABw6AQAAAAAEAwIcAAAEHAoaKgEaGyoBEhwAAAQcAhwqAhwSKgAAHAAABAACACoCEhwqAAYYIAFaDAAEGBAaIQAB1QAaIAFdKgEcGisAABoIAyUABAAECAQiAAADySsACAUAGQAABBkCGAAABBgQHSoCCB0qAhkcKgEZHAAABBwCHCoCHBkqARIcAAAEHAIcKgIcEioAABwAAAQAAgAqAhIcKgEHGgAABBoCGioCGgcqAAAaAAAEAAIAKgIHGioABhsgAXcMAAQbDhghAAGZABggAXoqARwbKgEZHAIABBwCHCoCHBkkAAQDGgYABBoCGSQABAIdAAAEGh0YKgAAHAAABAAYACQBBAEcAAAEHAIYKgIaGCQABAIdAAAEHB0YAAAEGwIdKwAAHQgDKwAAGAgEKwAAGggFIgAAAB8AAAQcAhgqARgdAAAEGAIbNAEAAAAbAAAAHSABkwAABAoLGA4ABAoYGSEAAZcAGToBAAAqABgKIAB7JAAEAx4MAAQbHh8hAAGdAB86AQAAAAAEGQIfAAAEHxseKgEeHSoAAB8kAAQCHgAABAAeACQBBAEfAAAEHwIeKgAeICoCHSAqAR8eAAAEHgIeKgIeHyoCHxoqAAYYIAGtCgAEGAYdIQABtgAdIAGwAAAEGwsYDgAEGxgdIQABtAAdOgEAACoAGBsgAXcqARwdAAAEGxgeDgAEGx4fIQABuwAfOgEAACoBGh8kAAQBIQwABBghIiEAAcAAIjoBAAAAAAQfAiIAAAQiGCEqASEgJAAEAyIMAAQeIiEhAAHHACE6AQAAKwAAHQgDJQAEAAQIBCIAAAPJKwAIBQAfAAAEHwIhAAAEIR4iKgIgIioCHxwAAAQYCx8OAAQYHx4hAAHTAB46AQAAKgAfGCABrSoBHBoqAAAdJAAEAx4AAAQAHgAkAQQBHQAABB0CHioAHh8qAhkfAAAEHwIfKgIbHyQABAIfDAAEGB8gIQAB4wAgOgEAAAAABB0CIAAABCAYHyoBHx4kAAQDIAwABBggHyEAAeoAHzoBAAArAAAaCAMlAAQABAgEIgAAA8krAAgFAB0AAAQdAh8AAAQfGCAqAh4gAAAEGAseDgAEGB4aIQAB9QAaOgEAACoCHRwqAB4YIAFaHAAHHBsAAAcdGxoqAAAbJAAEAhgAAAQAGAAkAQQBGwAABBsCGCoAGB4qAhkeJAAEAR4MAAQcHh8hAAIFAB86AQAAAAAEGwIfAAAEHxweKgEeGC0AAAAAGAAAABoAAAQcCxoOAAQcGhghAAINABg6AQAAKgAaHCABQRwABxwaAAAHGxoYJAAEAR4MAAQcHh8hAAIVAB86AQAAAAAEBQIfAAAEHxweKgEeGi0AAAAAGgAAABgAAAQcCxgOAAQcGBohAAIdABo6AQAAKgAYHCABPCoBGhgcAAccHgAABxseHywAAAAAHwAAAB4kAAQBIAwABBwgISEAAicAIToBAAArAAAYCAMlAAQAAggEIgAAA8krAAgFAB8AAAQfAiEAAAQhHCAqAh4gAAAEHAsYDgAEHBgeIQACMgAeOgEAACoCHxoqABgcIAEwKgEcGAwABBkYHiEAAjkAHiACWCoBGhgqARoeJAAEBCAMAAQZICEhAAI/ACE6AQAAAAAEHgIhAAAEIRkgKgEgHyoBGx4kAAQDIAwABBkgIiEAAkcAIjoBAAAAAAQeAiIAAAQiGSAqASAhAAAHHyEeJAAEBB8MAAQZHyIhAAJPACI6AQAAKwAAGAgDJQAEAAUIBCIAAAPJKwAIBQAhAAAEIQIiAAAEIhkfKgIeHyoCIRogAlgAAAQZCxgOAAQZGB4hAAJcAB46AQAAKgAYGSABCwwABBgQHiEAAmEAHiACuioAAB4kAAQDHwAABAAfACQBBAEeAAAEHgIfKgAfICoCFyAAAAQgAiAqAhkgJAAEAiAMAAQYICEhAAJuACE6AQAAAAAEHgIhAAAEIRggKgEgHyoBHR4KAAEeESEhAAJ1ACE6AQAAKgEcHgoABB4OISEAApEAISACeSoBGx4qARwgKgEcISQABAMjDAAEISMkIQACgAAkOgEAACsAAB4IAyUABAAECAQiAAADySsACAUAIgAABCICJAAABCQhIyoCHyMqASIfAAAEHwIfKgIfIgAABCALHw4ABCAfISEAAo4AIToBAAAqAiIbKgIfHCACuioABh4gApMMAAQeDiAhAALAACAgApYqARseKgEaICoAACEkAAQFIgAABAAiACQBBAEhAAAEIAIiJAAEBCMAAAQhAiQ+AwAAACIAAAAkKgEeIAIABCACICoCIB4qAR4gAAAEIAIgKgIgHioBISAAAAQgAiAqAiAhKwAAHggDJQAEAAQIBCIAAAPJKwAIBQAgAAAEIAIkAAAEJAYjKgIfIyoBIB4AAAQeAh4qAh4gKgEhHgAABB4CHioCHiEqAiAbKgIhGioCCxwgAroAAAQYCx4OAAQYHh8hAAK+AB86AQAAKgAeGCABAioBHCAMAAQeICEhAALEACEgAuMqARogKgEaISQABAQjDAAEHiMkIQACygAkOgEAAAAABCECJAAABCQeIyoBIyIqARshJAAEAyMMAAQeIyUhAALSACU6AQAAAAAEIQIlAAAEJR4jKgEjJAAAByIkISQABAQkDAAEHiQlIQAC2gAlOgEAACsAACAIAyUABAAFCAQiAAADySsACAUAIgAABCICJQAABCUeJCoCISQqAiIaIALjAAAEHgsgDgAEHiAhIQAC5wAhOgEAACoAIB4gApMqARkbHAAHHBoAAAcdGhgsAAAAABgAAAAaJAAEAR4MAAQcHh8hAALxAB86AQAAKwAAGwgDJQAEAAIIBCIAAAPJKwAIBQAYAAAEGAIfAAAEHxweKgIaHgAABBwLGw4ABBwbGiEAAvwAGjoBAAAqAhgZKgAbHCAA1CoBHBgMAAQZGB4hAAMDAB4gAyIqARoYKgEaHiQABAQgDAAEGSAhIQADCQAhOgEAAAAABB4CIQAABCEZICoBIB8qARseJAAEAyAMAAQZICIhAAMRACI6AQAAAAAEHgIiAAAEIhkgKgEgIQAABx8hHiQABAQhDAAEGSEiIQADGQAiOgEAACsAABgIAyUABAAFCAQiAAADySsACAUAHwAABB8CIgAABCIZISoCHiEqAh8aIAMiAAAEGQsYDgAEGRgeIQADJgAeOgEAACoAGBkgALcMAAQYEB4hAAMrAB4gA4QqAAAeJAAEAx8AAAQAHwAkAQQBHgAABB4CHyoAHyAqAhcgAAAEIAIgKgIZICQABAIgDAAEGCAhIQADOAAhOgEAAAAABB4CIQAABCEYICoBIB8qAR0eCgABHhEhIQADPwAhOgEAACoBHB4KAAQeDiEhAANbACEgA0MqARseKgEcICoBHCEkAAQDIwwABCEjJCEAA0oAJDoBAAArAAAeCAMlAAQABAgEIgAAA8krAAgFACIAAAQiAiQAAAQkISMqAh8jKgEiHgAABB4CHioCHiIAAAQgCx4OAAQgHh8hAANYAB86AQAAKgIiGyoCHhwgA4QqAAYeIANdDAAEHg4gIQADigAgIANgKgEbHioBGiAqAAAhJAAEBSIAAAQAIgAkAQQBIQAABCACIiQABAQjAAAEIQIkPgMAAAAiAAAAJCoBHiACAAQgAiAqAiAeKgEeIAAABCACICoCIB4qASEgAAAEIAIgKgIgISsAAB4IAyUABAAECAQiAAADySsACAUAIAAABCACJAAABCQGIyoCHyMqASAfAAAEHwIfKgIfICoBIR8AAAQfAh8qAh8hKgIgGyoCIRoqAgscIAOEAAAEGAseDgAEGB4fIQADiAAfOgEAACoAHhggAK4qARwgDAAEHiAhIQADjgAhIAOtKgEaICoBGiEkAAQEIwwABB4jJCEAA5QAJDoBAAAAAAQhAiQAAAQkHiMqASMiKgEbISQABAMjDAAEHiMlIQADnAAlOgEAAAAABCECJQAABCUeIyoBIyQAAAciJCEkAAQEIgwABB4iJSEAA6QAJToBAAArAAAgCAMlAAQABQgEIgAAA8krAAgFACQAAAQkAiUAAAQlHiIqAiEiKgIkGiADrQAABB4LIA4ABB4gISEAA7EAIToBAAAqACAeIANdKgEIDBwABwUNAAAHCg0OLAAAAAAOAAAADSQABAEPDAAEBQ8QIQADuwAQOgEAACsAAAwIAyUABAACCAQiAAADySsACAUADgAABA4CEAAABBAFDyoCDQ8AAAQFCwwOAAQFDA0hAAPGAA06AQAAKgIOCCoADAUgAEQrAQgDCAYLAAQIBgACCAchAAPNCAcgA88rAAgDCAUgA90rAAAACAUBAAQAAAgEAAAlAAQAAAgJDQAECAkIBAgKFwAICggKIQAD2wgKAQAECAMICQgLKwEICwgIAQAECAUICQgLKwIICAgLAQAECAkAAggJIAPSJQEEAAEIBSAD3SMrABjKGMo=","debug_symbols":"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","brillig_names":["register_dkim_bulk"],"assert_messages":{"582":"Array index out of bounds","701":"attempt to add with overflow","442":"attempt to add with overflow","823":"Array index out of bounds","500":"attempt to add with overflow","561":"attempt to add with overflow","954":"Array index out of bounds","805":"attempt to add with overflow","482":"Array index out of bounds","287":"Storage slot 0 not allowed. Storage slots must start from 1.","412":"Array index out of bounds","540":"attempt to add with overflow","406":"attempt to add with overflow","729":"Array index out of bounds","784":"Array index out of bounds","141":"Array index out of bounds","653":"attempt to add with overflow","327":"Array index out of bounds","516":"Array index out of bounds","903":"attempt to add with overflow","574":"Array index out of bounds","763":"attempt to add with overflow","915":"Array index out of bounds","489":"Array index out of bounds","550":"Array index out of bounds","291":"Array index out of bounds","742":"attempt to add with overflow","221":"DKIM key has already been registered","931":"Array index out of bounds","855":"attempt to add with overflow","532":"Array index out of bounds","721":"Array index out of bounds","78":"Sender is not the registry contract","203":"Storage slot 0 not allowed. Storage slots must start from 1.","334":"Array index out of bounds","590":"Array index out of bounds","130":"Array index out of bounds","447":"Array index out of bounds","639":"Array index out of bounds","313":"SharedImmutable already initialized","776":"Array index out of bounds","435":"attempt to add with overflow","48":"Not initialized","621":"Array index out of bounds","752":"Array index out of bounds","944":"attempt to add with overflow","965":"attempt to add with overflow","225":"Array index out of bounds","603":"attempt to add with overflow","792":"Array index out of bounds","923":"Array index out of bounds","466":"attempt to add with overflow","524":"attempt to add with overflow","841":"Array index out of bounds","713":"Array index out of bounds","454":"Array index out of bounds"}}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseDkimRegistry"}},{"name":"fields","value":{"fields":[{"name":"contract_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::DKIMKeyRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":50,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":50,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_bulk_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseDkimRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::constructor_abi"}]}},"file_map":{"110":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"115":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"127":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"128":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"134":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"145":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"151":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"160":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"170":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"171":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"188":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"190":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"191":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"200":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"208":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"210":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"211":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"213":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"233":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"238":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"264":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"308":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"70":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_dkim_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\npub global BULK_KEY_LENGTH: u32 = 50;\n\nmod verifier_id {\n    pub global AWS: Field = 1;\n    pub global LINODE: Field = 2;\n    pub global HEROKU: Field = 3;\n    pub global FRONTIER_AIRLINES: Field = 4;\n    pub global UNITED_AIRLINES: Field = 5;\n    pub global AMERICAN_AIRLINES: Field = 6;\n    pub global DELTA_AIRLINES: Field = 7;\n    pub global UBER: Field = 8;\n    pub global LYFT: Field = 9;\n}\n\n#[aztec]\ncontract ZImburseDkimRegistry {\n    use std::meta::derive;\n    use dep::aztec::prelude::{AztecAddress, SharedImmutable, Map};\n    use dep::aztec::macros::{storage::storage, events::event, functions::{private, public, view, initializer}};\n    use dep::aztec::unencrypted_logs::unencrypted_event_emission::emit;\n    use dep::aztec::protocol_types::traits::Serialize;\n    use crate::BULK_KEY_LENGTH;\n\n    #[storage]\n    struct Storage<Context> {\n        contract_registry: SharedImmutable<AztecAddress, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n    }\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    /**\n     * Initialize the Z-Imburse DKIM registry contract\n     *\n     * @param registry - the address of the Z-Imburse registry contract\n     */\n    #[public]\n    #[initializer]\n    fn constructor(registry: AztecAddress) {\n        storage.contract_registry.initialize(registry);\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(verifier_ids: [Field; BULK_KEY_LENGTH], dkim_key_hashes: [Field; BULK_KEY_LENGTH]) {\n        // check that the sender is the registry contract\n        let registry = storage.contract_registry.read_public();\n        assert(registry == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(&mut context, DKIMKeyRegistered {\n                    dkim_key_hash: dkim_key_hashes[i],\n                    verifier_id: verifier_ids[i]\n                });\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the registry contract\n        let registry = storage.contract_registry.read_public();\n        assert(registry == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(&mut context, DKIMKeyRegistered { dkim_key_hash, verifier_id });\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n}\n\n"},"99":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"}}}