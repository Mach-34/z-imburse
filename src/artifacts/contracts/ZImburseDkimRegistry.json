{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-aarch64","name":"ZImburseDkimRegistry","functions":[{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim"],"assert_messages":{"637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","144":"Storage slot 0 not allowed. Storage slots must start from 1.","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","45":"Sender is not the registry contract","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","329":"Array index out of bounds","457":"attempt to add with overflow","713":"attempt to add with overflow"}},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"3505":"Array index out of bounds","299":"Array index out of bounds","1512":"attempt to add with overflow","4261":"Array index out of bounds","1378":"Array index out of bounds","1890":"Array index out of bounds","1110":"attempt to add with overflow","1811":"Array index out of bounds","3024":"Array index out of bounds","4560":"attempt to add with overflow","3591":"attempt to add with overflow","3780":"Array index out of bounds","3457":"attempt to add with overflow","3835":"Array index out of bounds","306":"Array index out of bounds","1519":"Array index out of bounds","2220":"Array index out of bounds","3378":"Array index out of bounds","2086":"attempt to add with overflow","2598":"attempt to add with overflow","1440":"attempt to add with overflow","2787":"Array index out of bounds","3110":"attempt to add with overflow","2519":"attempt to add with overflow","2708":"Array index out of bounds","3567":"Array index out of bounds","4055":"attempt to add with overflow","4457":"Array index out of bounds","2818":"Array index out of bounds","2495":"attempt to add with overflow","4220":"Array index out of bounds","3385":"Array index out of bounds","1392":"attempt to add with overflow","4464":"Array index out of bounds","2282":"Storage slot 0 not allowed. Storage slots must start from 1.","1124":"Not initialized","1313":"Array index out of bounds","722":"Sender is not the registry contract","1289":"Array index out of bounds","4550":"attempt to add with overflow","2100":"Array index out of bounds","3124":"Array index out of bounds","3045":"attempt to add with overflow","3612":"attempt to add with overflow","3856":"attempt to add with overflow","973":"Storage slot 0 not allowed. Storage slots must start from 1.","3533":"Array index out of bounds","2430":"attempt to add with overflow","2107":"Array index out of bounds","3131":"Array index out of bounds","3966":"Array index out of bounds","4076":"Array index out of bounds","169":"attempt to add with overflow","2918":"Array index out of bounds","2461":"attempt to add with overflow","2004":"Array index out of bounds","1681":"Array index out of bounds","3540":"Array index out of bounds","523":"Initialization hash does not match","3272":"DKIM key has already been registered","2437":"attempt to add with overflow","2949":"Array index out of bounds","4485":"attempt to add with overflow","1468":"Array index out of bounds","1657":"Array index out of bounds","4564":"Array index out of bounds","2980":"attempt to add with overflow","3035":"attempt to add with overflow","4571":"Array index out of bounds","1554":"Array index out of bounds","317":"attempt to add with overflow","1719":"Array index out of bounds","3633":"Array index out of bounds","2286":"Array index out of bounds","1128":"Function check_dkim_key_hash_public can only be called statically","1561":"Array index out of bounds","2585":"Array index out of bounds","3152":"attempt to add with overflow","4420":"attempt to add with overflow","4097":"attempt to add with overflow","2939":"attempt to add with overflow","2616":"Array index out of bounds","4475":"attempt to add with overflow","4018":"attempt to add with overflow","1647":"attempt to add with overflow","3049":"Array index out of bounds","1623":"Array index out of bounds","1300":"attempt to add with overflow","2836":"Array index out of bounds","4372":"Array index out of bounds","118":"attempt to add with overflow","3056":"Array index out of bounds","4592":"attempt to add with overflow","795":"attempt to add with overflow","1819":"Array index out of bounds","4245":"Array index out of bounds","1874":"Array index out of bounds","2898":"attempt to add with overflow","3087":"attempt to add with overflow","3276":"Array index out of bounds","2118":"attempt to add with overflow","771":"attempt to add with overflow","3142":"attempt to add with overflow","3654":"attempt to add with overflow","1850":"Array index out of bounds","3575":"attempt to add with overflow","3764":"Array index out of bounds","3843":"Array index out of bounds","4489":"Array index out of bounds","2850":"attempt to add with overflow","2527":"Array index out of bounds","2716":"Array index out of bounds","3551":"attempt to add with overflow","3874":"Array index out of bounds","2771":"Array index out of bounds","2960":"attempt to add with overflow","2125":"Array index out of bounds","3338":"Storage slot 0 not allowed. Storage slots must start from 1.","4496":"Array index out of bounds","1668":"attempt to add with overflow","2747":"Array index out of bounds","1912":"Array index out of bounds","1589":"Array index out of bounds","4527":"attempt to add with overflow","4204":"Array index out of bounds","809":"Not initialized","1321":"Array index out of bounds","1187":"Storage slot 0 not allowed. Storage slots must start from 1.","4582":"attempt to add with overflow","3156":"Array index out of bounds","1596":"Array index out of bounds","1840":"attempt to add with overflow","2407":"Array index out of bounds","3486":"attempt to add with overflow","3163":"Array index out of bounds","1737":"Array index out of bounds","3974":"Array index out of bounds","3517":"attempt to add with overflow","4084":"Array index out of bounds","2737":"attempt to add with overflow","2926":"Array index out of bounds","4596":"Array index out of bounds","3493":"attempt to add with overflow","2012":"Array index out of bounds","1689":"Array index out of bounds","2634":"Array index out of bounds","1799":"attempt to add with overflow","1342":"attempt to add with overflow","2043":"Array index out of bounds","3067":"attempt to add with overflow","4280":"Array index out of bounds","4603":"Array index out of bounds","1452":"Array index out of bounds","1751":"attempt to add with overflow","3342":"Array index out of bounds","2696":"attempt to add with overflow","1861":"attempt to add with overflow","703":"Not initialized","3641":"Array index out of bounds","3995":"attempt to add with overflow","2136":"Array index out of bounds","2648":"attempt to add with overflow","1490":"attempt to add with overflow","3672":"Array index out of bounds","4507":"attempt to add with overflow","2569":"Array index out of bounds","2758":"attempt to add with overflow","4026":"Array index out of bounds","3892":"Array index out of bounds","2033":"attempt to add with overflow","1710":"attempt to add with overflow","2545":"Array index out of bounds","1631":"attempt to add with overflow","4380":"Array index out of bounds","662":"attempt to add with overflow","2198":"Storage slot 0 not allowed. Storage slots must start from 1.","2064":"attempt to add with overflow","4112":"Array index out of bounds","1930":"Array index out of bounds","1607":"attempt to add with overflow","2308":"SharedImmutable already initialized","2442":"Array index out of bounds","3954":"attempt to add with overflow","3174":"attempt to add with overflow","1827":"Array index out of bounds","992":"SharedImmutable already initialized","4253":"Array index out of bounds","1882":"Array index out of bounds","2449":"Array index out of bounds","1992":"attempt to add with overflow","3906":"attempt to add with overflow","3583":"Array index out of bounds","3772":"Array index out of bounds","3827":"Array index out of bounds","2992":"Array index out of bounds","3181":"Array index out of bounds","2535":"attempt to add with overflow","2724":"Array index out of bounds","2401":"attempt to add with overflow","2779":"Array index out of bounds","1944":"attempt to add with overflow","3803":"Array index out of bounds","2322":"Array index out of bounds","2511":"Array index out of bounds","2054":"attempt to add with overflow","1542":"attempt to add with overflow","896":"Storage slot 0 not allowed. Storage slots must start from 1.","4614":"attempt to add with overflow","4212":"Array index out of bounds","1329":"Array index out of bounds","4401":"attempt to add with overflow","549":"SharedImmutable already initialized","1573":"attempt to add with overflow","2329":"Array index out of bounds","1494":"Array index out of bounds","1360":"Array index out of bounds","1549":"attempt to add with overflow","4298":"Array index out of bounds","3463":"Array index out of bounds","4432":"Array index out of bounds","4274":"attempt to add with overflow","1903":"attempt to add with overflow","611":"attempt to add with overflow","1501":"Array index out of bounds","2068":"Array index out of bounds","3793":"attempt to add with overflow","3982":"Array index out of bounds","4360":"attempt to add with overflow","3013":"attempt to add with overflow","2556":"attempt to add with overflow","2800":"attempt to add with overflow","2477":"Array index out of bounds","3690":"Array index out of bounds","295":"attempt to add with overflow","2020":"Array index out of bounds","1697":"Array index out of bounds","2910":"Array index out of bounds","2075":"Array index out of bounds","3099":"Array index out of bounds","4068":"Array index out of bounds","4312":"attempt to add with overflow","4044":"Array index out of bounds","4233":"attempt to add with overflow","1460":"Array index out of bounds","2484":"Array index out of bounds","2216":"DKIM key has already been registered","3752":"attempt to add with overflow","4130":"Array index out of bounds","4453":"attempt to add with overflow","3003":"attempt to add with overflow","3192":"Array index out of bounds","3704":"attempt to add with overflow","4539":"Array index out of bounds","3625":"Array index out of bounds","3814":"attempt to add with overflow","4192":"attempt to add with overflow","529":"Initializer address is not the contract deployer","2577":"Array index out of bounds","3601":"Array index out of bounds","261":"attempt to add with overflow","4034":"attempt to add with overflow","828":"Sender is not the registry contract","3254":"Storage slot 0 not allowed. Storage slots must start from 1.","2096":"attempt to add with overflow","3120":"attempt to add with overflow","3498":"Array index out of bounds","1639":"Array index out of bounds","3364":"SharedImmutable already initialized","4010":"Array index out of bounds","4144":"attempt to add with overflow","4388":"Array index out of bounds","4443":"attempt to add with overflow","914":"DKIM key has already been registered","1481":"attempt to add with overflow","3017":"Array index out of bounds"}},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim_bulk"],"assert_messages":{"326":"Array index out of bounds","573":"Array index out of bounds","762":"attempt to add with overflow","515":"Array index out of bounds","488":"Array index out of bounds","549":"Array index out of bounds","290":"Array index out of bounds","741":"attempt to add with overflow","220":"DKIM key has already been registered","930":"Array index out of bounds","854":"attempt to add with overflow","531":"Array index out of bounds","720":"Array index out of bounds","333":"Array index out of bounds","202":"Storage slot 0 not allowed. Storage slots must start from 1.","589":"Array index out of bounds","775":"Array index out of bounds","129":"Array index out of bounds","446":"Array index out of bounds","638":"Array index out of bounds","312":"SharedImmutable already initialized","964":"attempt to add with overflow","434":"attempt to add with overflow","751":"Array index out of bounds","620":"Array index out of bounds","943":"attempt to add with overflow","224":"Array index out of bounds","602":"attempt to add with overflow","791":"Array index out of bounds","922":"Array index out of bounds","465":"attempt to add with overflow","78":"Sender is not the registry contract","523":"attempt to add with overflow","712":"Array index out of bounds","453":"Array index out of bounds","581":"Array index out of bounds","840":"Array index out of bounds","700":"attempt to add with overflow","441":"attempt to add with overflow","822":"Array index out of bounds","499":"attempt to add with overflow","48":"Not initialized","560":"attempt to add with overflow","953":"Array index out of bounds","804":"attempt to add with overflow","481":"Array index out of bounds","286":"Storage slot 0 not allowed. Storage slots must start from 1.","539":"attempt to add with overflow","411":"Array index out of bounds","405":"attempt to add with overflow","914":"Array index out of bounds","728":"Array index out of bounds","783":"Array index out of bounds","140":"Array index out of bounds","902":"attempt to add with overflow","652":"attempt to add with overflow"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VYTXPaMBCVg41lUwe3gEnSQ3ttT3IwNNyY6ef/8KTX/IT89bBGOzw2xBkUaSZoxiNb0r59eitpbUdqV/T2iux9Yuuhel54zMbW5m2l9ohlQvKMzoTnxZnwHJwJz9gjz+gIT6pje0/7jvZcqnb78VknGlOgB9Cv+oCk10dbZxYInW08KZcJv96w75o2s9wD8F4Sbh4G21BAfuq99gp8UTD/2j6uI3sVtl+BfaH2Af8FbbxQfkMbn+R/oC1Vh76Ijw4Tr7uA8TIFaKjABxbcJLzecxUszl22GAn/ufDfxdQKrqEttg8jaEvEmqHHL9CvYU7c/13MDbkMBBfCTUJoYWM/DIFtTIMaxkc0TI5oODyi4WR7/RM4xDvVQXh3mUADxxh8Mc8LGKOBRwLP39S+PYOTPgZdGHdMc+d1pF+2i4VdCWOGYJcKuxR4d2O311d7P7J64hng701ltZZntj/sH4tM7feiZ973hP0hCHbTYReA7XP9EvZlGE1WhD0Og93l9jII9m2nyUfA9vjFUFMcP6nDQv4mQeJb1335k33mwClE/pwI/+wL8+dUcCqhDffVVGBNBRZpOYPxHtfcf+Q0O4ET2pWOdiNHu1N4knYVjPd49jbIqXKcy9jRLne0OyVWpN0cxntcdwfazR3n4qrdpaNd5mjnus5d5zcHvngG+/xLhJxii82+OM8kMObB1nQuXqnDQjyvgafHXHHblyuugRPfM7dccErewGmxWJt2tV6umrq9b9tFBNjMiZ/xf8eNGCNzDOn2OYxuBr9dbkAnfv9G7fibgLngt0sG9r459unIPkvBlXm8pj9pfQX3PJcC7DZe5rH7R4DvE+xrFkQ3s+zbE+wzV6He33bvTzPhfyL0J00qwamENoxlJbAqgfUe7PAfGc+V8sIT7yz2rOIYAAA=","debug_symbols":"tdnPaoNAEIDxd9mzB//s7sz4KqUETTQsiAY1hSK+e00bSiDn7yKOzn6332k3d+na+/WUxn5aXP2xuWE6N2uaxmPa9sy1cxqGdD29fnb54+HL3/3l1oyPcVmbeXW1ryxz3Xg53rw/zvdp6Fwt+Z69rUr53BT5Xwy2f2bOV1zac+nApSOXFi6tXNqwdMi5dMGlOY2B0xg4jYHTGDiNgdMYOI2B0xg5jZHTGDmNkdMYOY2R0xg5jZHTGDmNkdMonEbhNAqnUTiNwmkUTqNwGoXTKJxG4TQqp1E5jcppVE6jchqV06icRuU0KqdROY3GaTROo3EajdNonEbjNBqn0TiNxmk0TmOR52C7ANsl2K7AtgfbAWxHsC1gW8E26LKgXO7H9NXMqWmH7nl50d/H88tdxvp9+/tzLP8A","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"1335":"attempt to add with overflow","1652":"Array index out of bounds","1073":"attempt to add with overflow","622":"Array index out of bounds","1262":"Array index out of bounds","1640":"attempt to add with overflow","1500":"Array index out of bounds","665":"Array index out of bounds","921":"Array index out of bounds","970":"Array index out of bounds","1348":"Array index out of bounds","1275":"attempt to add with overflow","952":"Array index out of bounds","1525":"Array index out of bounds","1592":"attempt to add with overflow","556":"Array index out of bounds","1324":"Array index out of bounds","934":"attempt to add with overflow","1123":"Array index out of bounds","1513":"attempt to add with overflow","1306":"Array index out of bounds","855":"attempt to add with overflow","1044":"Array index out of bounds","1172":"Array index out of bounds","1032":"attempt to add with overflow","1154":"Array index out of bounds","831":"attempt to add with overflow","892":"attempt to add with overflow","1410":"Array index out of bounds","1660":"Array index out of bounds","1136":"attempt to add with overflow","813":"Array index out of bounds","106":"attempt to add with overflow","618":"Storage slot 0 not allowed. Storage slots must start from 1.","1392":"Array index out of bounds","1246":"Array index out of bounds","472":"Array index out of bounds","984":"attempt to add with overflow","1234":"attempt to add with overflow","1356":"Array index out of bounds","905":"Array index out of bounds","1094":"attempt to add with overflow","1484":"Array index out of bounds","1472":"attempt to add with overflow","1533":"Array index out of bounds","375":"Initializer address is not the contract deployer","820":"Array index out of bounds","369":"Initialization hash does not match","881":"Array index out of bounds","552":"DKIM key has already been registered","162":"attempt to add with overflow","863":"Array index out of bounds","1052":"Array index out of bounds","1186":"attempt to add with overflow","534":"Storage slot 0 not allowed. Storage slots must start from 1.","1107":"Array index out of bounds","144":"Array index out of bounds","461":"Array index out of bounds","778":"Array index out of bounds","1290":"Array index out of bounds","644":"SharedImmutable already initialized","1314":"attempt to add with overflow","766":"attempt to add with overflow","1083":"Array index out of bounds","1424":"attempt to add with overflow","1668":"Array index out of bounds","1254":"Array index out of bounds","797":"attempt to add with overflow","151":"Array index out of bounds","1364":"Array index out of bounds","785":"Array index out of bounds","913":"Array index out of bounds","1492":"Array index out of bounds","1681":"attempt to add with overflow","773":"attempt to add with overflow","1541":"Array index out of bounds","1578":"Array index out of bounds","743":"Array index out of bounds","871":"attempt to add with overflow","737":"attempt to add with overflow","1060":"Array index out of bounds","1115":"Array index out of bounds","1377":"attempt to add with overflow","1560":"Array index out of bounds","402":"SharedImmutable already initialized","658":"Array index out of bounds","140":"attempt to add with overflow","847":"Array index out of bounds","1298":"attempt to add with overflow","1554":"attempt to add with overflow"}}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseDkimRegistry"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::DKIMKeyRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_bulk_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseDkimRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_private_abi"}]}},"file_map":{"110":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"},"118":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"126":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"127":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"148":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"153":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"154":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"167":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"168":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"230":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"263":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"276":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"296":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"298":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"299":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"302":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"305":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"306":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"314":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"318":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"70":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_dkim_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\nmod receipt_verifier_id {\n    pub global AWS: Field = 1;\n    pub global LINODE: Field = 2;\n    pub global HEROKU: Field = 3;\n    pub global FRONTIER_AIRLINES: Field = 4;\n    pub global UNITED_AIRLINES: Field = 5;\n    pub global AMERICAN_AIRLINES: Field = 6;\n    pub global DELTA_AIRLINES: Field = 7;\n    pub global UBER: Field = 8;\n    pub global LYFT: Field = 9;\n}\n\n#[aztec]\ncontract ZImburseDkimRegistry {\n    use std::meta::derive;\n    use dep::aztec::prelude::{AztecAddress, SharedImmutable, Map};\n    use dep::aztec::macros::{storage::storage, events::event, functions::{private, public, view, initializer}};\n    use dep::aztec::unencrypted_logs::unencrypted_event_emission::emit;\n    use dep::aztec::protocol_types::traits::Serialize;\n    use crate::BULK_KEY_LENGTH;\n\n    #[storage]\n    struct Storage<Context> {\n        admin: SharedImmutable<AztecAddress, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n    }\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    /**\n     * Initialize the Z-Imburse DKIM registry contract\n     *\n     * @param registry - the address of the Z-Imburse registry contract\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        storage.admin.initialize(context.msg_sender());\n        // bulk insert up to 8 dkim key hashes at initialization (max unencrypted logs per tx)\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(&mut context, DKIMKeyRegistered {\n                    dkim_key_hash: dkim_key_hashes[i],\n                    verifier_id: verifier_ids[i]\n                });\n            }\n        }\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(verifier_ids: [Field; BULK_KEY_LENGTH], dkim_key_hashes: [Field; BULK_KEY_LENGTH]) {\n        // check that the sender is the admin\n        let admin = storage.admin.read_public();\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(&mut context, DKIMKeyRegistered {\n                    dkim_key_hash: dkim_key_hashes[i],\n                    verifier_id: verifier_ids[i]\n                });\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.admin.read_public();\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(&mut context, DKIMKeyRegistered { dkim_key_hash, verifier_id });\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n}\n\n"},"92":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"93":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"}}}