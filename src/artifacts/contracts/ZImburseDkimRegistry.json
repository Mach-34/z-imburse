{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseDkimRegistry","functions":[{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VYTXPaMBCVg41lUwe3gEnSQ3ttT3IwNNyY6ef/8KTX/IT89bBGOzw2xBkUaSZoxiNb0r59eitpbUdqV/T2iux9Yuuhel54zMbW5m2l9ohlQvKMzoTnxZnwHJwJz9gjz+gIT6pje0/7jvZcqnb78VknGlOgB9Cv+oCk10dbZxYInW08KZcJv96w75o2s9wD8F4Sbh4G21BAfuq99gp8UTD/2j6uI3sVtl+BfaH2Af8FbbxQfkMbn+R/oC1Vh76Ijw4Tr7uA8TIFaKjABxbcJLzecxUszl22GAn/ufDfxdQKrqEttg8jaEvEmqHHL9CvYU7c/13MDbkMBBfCTUJoYWM/DIFtTIMaxkc0TI5oODyi4WR7/RM4xDvVQXh3mUADxxh8Mc8LGKOBRwLP39S+PYOTPgZdGHdMc+d1pF+2i4VdCWOGYJcKuxR4d2O311d7P7J64hng701ltZZntj/sH4tM7feiZ973hP0hCHbTYReA7XP9EvZlGE1WhD0Og93l9jII9m2nyUfA9vjFUFMcP6nDQv4mQeJb1335k33mwClE/pwI/+wL8+dUcCqhDffVVGBNBRZpOYPxHtfcf+Q0O4ET2pWOdiNHu1N4knYVjPd49jbIqXKcy9jRLne0OyVWpN0cxntcdwfazR3n4qrdpaNd5mjnus5d5zcHvngG+/xLhJxii82+OM8kMObB1nQuXqnDQjyvgafHXHHblyuugRPfM7dccErewGmxWJt2tV6umrq9b9tFBNjMiZ/xf8eNGCNzDOn2OYxuBr9dbkAnfv9G7fibgLngt0sG9r459unIPkvBlXm8pj9pfQX3PJcC7DZe5rH7R4DvE+xrFkQ3s+zbE+wzV6He33bvTzPhfyL0J00qwamENoxlJbAqgfUe7PAfGc+V8sIT7yz2rOIYAAA=","debug_symbols":"tdnLaoNAFIDhd5m1CzXOufgqpQRNNAiiQU2hiO9e7YUGsv434tEz/+5bzRquTf24nbuhHedQvq2hHy/V0o3DPq1bEuqp6/vudn7+HNLjUeTf+/O9Go5xXqppCWWR5Ulohuvxpvv5tuubUGq6JS+r+rep/4vRt/ckFCcuXXDpyKWFSyuXNi7tWDqmXDrj0pzGyGmMnMbIaYycxshpjJzGyGkUTqNwGoXTKJxG4TQKp1E4jcJpFE6jcBqV06icRuU0KqdROY3KaVROo3IaldOonEbjNBqn0TiNxmk0TqNxGo3TaJxG4zQap9E5jc5pdE6jcxqd0+icRuc0OqfROY3OaczSFGxnYDsH2yewXYDtCLYFbCvYNrANuswol9s+fVRTV9V983t50T6Gy9NdxvJ5//mzL38B","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAAQIRQAAJAAEAgUkAAQABh8AAAAABgAAAAUAAAhDKwAIQwADKwAIRAAEIgAAAAk5AAAACEUAAAAAHgAAAAYeAAAABzAAAAAABgAAAAcAAAAIJAACAQYKAAIIBgchAAAQAAc6AQAAKgAABiQABAIIAAAEAAgAJAEEAQYAAAQGAggqAAgHJAAHAAkqAgkHKgEGCAAABAgCCCoCCAYqAAAIAAAEAAIAKgIGCCQABAAHJAAHAQokAAQBCyoABwUgACMKAAQFBwwhAANOAAwgACYqAQgFAAAEBQIMAAAEDAcNKgENCB4AAgAFCgAHCAUMIQAALgAMOgEAACoAAAUkAAQECAAABAAIACQBBAEFAAAEBQIIKgAIDCoCCQwAAAQMAgwqAgkMAAAEDAIMKgIJDCoBBQgAAAQIAggqAggFKgEFCAAABAgCCCoCCAUqAQUIAAAECAIIKgIIBSoBBQgAAAQIAggqAggFKgAACAAABAACACoCBQgqAAAMJAAEBQ0AAAQADQAkAQQBDAAABAwCDSoADQ4qAgkOAAAEDgIOKgIJDgAABA4CDioCCQ4AAAQOAg4oAAcAAAAAAAAAAgAAAAAAAAAAAA8qAg8OKgEMDQAABA0CDSoCDQwqAAANAAAEAAIAKgIMDSoAAA4AAAQAAgAqAgcOKgAAEAAABAACACQAAQARKgIRECQABAQSJAAEAhMkAAcCFCQABAMVKgAHCiAAaQwABAoTFioAABckAAQDGAAABAAYACQBBAEXAAAEFwIYKgAYGSoCFBkAAAQZAhkqAgQZIQACzAAWIAB1KgEQCgoAAQoRGCEAAHkAGDoBAAAqAAcWIAB7DAAEFhUKIQACowAKIAB+KgENDioAAAokAAQFCAAABAAIACQBBAEKAAAEDgIIJAAEBBgAAAQKAhk+AwAAAAgAAAAZKgIKDSQAAQENKgINEAAABAoCDgAABA4HGSoBGRAKAAcQCQoKAAEKEQ4hAACRAA46AQAAKgEGCgAABAoCCioCCgYqAAAKAAAEAAIAKgIGCioABxYgAJkKAAQWBw4hAAKNAA4gAJwqAQoQAAAEEAIOAAAEDgcIKgEICgoABwoJECEAAKMAEDoBAAAqAQUKAAAECgIKKgIKBSoBBQoAAAQKAgoqAgoFKgEFCgAABAoCCioCCgUqAQUKAAAECgIKKgIKBSoAAAoAAAQAAgAqAgUKKgEMEAAABBACECoCEAwqAAAQAAAEAAIAKgIMECoAAAwAAAQAAgAqAgcMKgAADwAABAACACoCEQ8qAAcWIADADAAEFhMOIQACCwAOIADDKgEPDgoAAQ4RCCEAAMcACDoBAAAqAAcUIADJDAAEFBUOIQAB4gAOIADMKgEQDioAAAwkAAQFCgAABAAKACQBBAEMAAAEDgIKJAAEBAgAAAQMAhY+AwAAAAoAAAAWKgIMECoCDQ8AAAQMAg0AAAQNBxAqARAPCgAHDwkMCgABDBENIQAA3gANOgEAACYABzuaygAAEQAABxEPDCoBBhEAAAQRAhEqAhEGKgAAEQAABAACACoCBhEqAAcUIADoCgAEFAcSIQABzAASIADrKgEREgAABBICEAAABBAHDioBDhEKAAcRCRIhAADyABI6AQAAJQAH3q0AESoAABIkAAQCEAAABAAQACQBBAESAAAEEgIQKgAQDioCEQ4qAAcUIAD8CgAEFAcQIQABvAAQIAD/KgAHFCABAQoABBQHEiEAAaUAEiABBCoBBRIAAAQSAhIqAhIFKgAAEgAABAACACoCBRIqAAcUIAEMDAAEFBMRIQABggARIAEPKgESESYAB8C7GjwAECsAABEIAyUABAAECAQiAAADZCsACAUADwAABA8CDgAABA4TDSoCEA0qAg8SKgEPEgAABBICEioCEg8qAQUSAAAEEgISKgISBSoAABIAAAQAAgAqAgUSKgEGBQAABAUCBSoCBQYqAAAFAAAEAAIAKgIGBSoABxQgASoMAAQUFRMhAAFGABMgAS0qARIUKgEPEgIABBICEioCEg8kAAQDEwYABBMCDyQABAIQAAAEExARKgAAEgAABAARACQBBAESAAAEEgIRKgITESQABAIQAAAEEhARAAAEFAIQKwAAEAgDKwAAEQgEKwAAEwgFIgAAA3kAAAQSAhEqAREQAAAEEQIUNAEAAAAUAAAAECMkAAQDEAwABBQQDiEAAUoADjoBAAAAAAQPAg4AAAQOFBAqARARKgAADiQABAIQAAAEABAAJAEEAQ4AAAQOAhAqABANKgIRDSoBDhAAAAQQAhAqAhAOKgIOBSoABxMgAVoKAAQTBxEhAAFjABEgAV0AAAQUCxMOAAQUExEhAAFhABE6AQAAKgATFCABKioBEhEAAAQUExAOAAQUEA4hAAFoAA46AQAAKgEFDiQABAEMDAAEEwwKIQABbQAKOgEAAAAABA4CCgAABAoTDCoBDA0kAAQDCgwABBAKDCEAAXQADDoBAAArAAARCAMlAAQABAgEIgAAA2QrAAgFAA4AAAQOAgwAAAQMEAoqAg0KKgIOEgAABBMLDg4ABBMOECEAAYAAEDoBAAAqAA4TIAFaKgESESoAABAkAAQDDwAABAAPACQBBAEQAAAEEAIPKgAPDioCBA4AAAQOAg4qAgMOJAAEAg4MAAQUDg0hAAGQAA06AQAAAAAEEAINAAAEDRQOKgEODyQABAMNDAAEFA0OIQABlwAOOgEAACsAABEIAyUABAAECAQiAAADZCsACAUAEAAABBACDgAABA4UDSoCDw0AAAQUCw8OAAQUDxEhAAGiABE6AQAAKgIQEioADxQgAQwcAAcUEgAABw8SESoAABIkAAQCEAAABAAQACQBBAESAAAEEgIQKgAQDioCAw4kAAQBDgwABBQODSEAAbIADToBAAAAAAQSAg0AAAQNFA4qAQ4QLQAAAAAQAAAAEQAABBQLEA4ABBQQESEAAboAEToBAAAqABAUIAEBHAAHFBAAAAcMEA4kAAQBDQwABBQNCiEAAcIACjoBAAAAAAQSAgoAAAQKFA0qAQ0QLQAAAAAQAAAADgAABBQLEA4ABBQQDiEAAcoADjoBAAAqABAUIAD8KgEREhwABxQQAAAHDBAOLAAAAAAOAAAAECQABAENDAAEFA0KIQAB1AAKOgEAACsAABIIAyUABAACCAQiAAADZCsACAUADgAABA4CCgAABAoUDSoCEA0AAAQUCxIOAAQUEhAhAAHfABA6AQAAKgIOESoAEhQgAOgqAQwODAAEFA4IIQAB5gAIIAIFKgEQDioBEAgkAAQEFwwABBQXGCEAAewAGDoBAAAAAAQIAhgAAAQYFBcqARcWKgEKCCQABAMXDAAEFBcZIQAB9AAZOgEAAAAABAgCGQAABBkUFyoBFxgAAAcWGAgkAAQEGAwABBQYGSEAAfwAGToBAAArAAAOCAMlAAQABQgEIgAAA2QrAAgFABYAAAQWAhkAAAQZFBgqAggYKgIWECACBQAABBQLDg4ABBQOCCEAAgkACDoBAAAqAA4UIADJDAAEFhMOIQACDgAOIAJeJAAEAggMAAQWCBghAAISABg6AQAAAAAEFwIYAAAEGBYIKgEIDioBDxgKAAEYEQghAAIZAAg6AQAAKgEMGAoABBgVCCEAAjUACCACHSoBCggqAQwYKgEMGSQABAMbDAAEGRscIQACJAAcOgEAACsAAAgIAyUABAAECAQiAAADZCsACAUAGgAABBoCHAAABBwZGyoCDhsqARoZAAAEGQIZKgIZGgAABBgLGQ4ABBgZCCEAAjIACDoBAAAqAhoKKgIZDCACXioABwggAjcMAAQIFRghAAJkABggAjoqAQoIKgEQGCoAABkkAAQFGgAABAAaACQBBAEZAAAEGAIaJAAEBBsAAAQZAhw+AwAAABoAAAAcKgEIGAIABBgCGCoCGAgqAQgYAAAEGAIYKgIYCCoBGRgAAAQYAhgqAhgZKwAACAgDJQAEAAQIBCIAAANkKwAIBQAYAAAEGAIcAAAEHAcbKgIOGyoBGA4AAAQOAg4qAg4YKgEZDgAABA4CDioCDhkqAhgKKgIZECoCCwwgAl4AAAQWCw4OAAQWDgghAAJiAAg6AQAAKgAOFiAAwCoBDBgMAAQIGBkhAAJoABkgAocqARAYKgEQGSQABAQbDAAECBscIQACbgAcOgEAAAAABBkCHAAABBwIGyoBGxoqAQoZJAAEAxsMAAQIGx0hAAJ2AB06AQAAAAAEGQIdAAAEHQgbKgEbHAAABxocGSQABAQaDAAECBodIQACfgAdOgEAACsAABgIAyUABAAFCAQiAAADZCsACAUAHAAABBwCHQAABB0IGioCGRoqAhwQIAKHAAAECAsYDgAECBgZIQACiwAZOgEAACoAGAggAjcqAQoOHAAHFggAAAcQCBgsAAAAABgAAAAIJAAEARkMAAQWGRohAAKVABo6AQAAKwAADggDJQAEAAIIBCIAAANkKwAIBQAYAAAEGAIaAAAEGhYZKgIIGQAABBYLCA4ABBYIDiEAAqAADjoBAAAqAhgKKgAIFiAAmSoBDgoMAAQWChghAAKnABggAsYqAQ0KKgENGCQABAQaDAAEFhobIQACrQAbOgEAAAAABBgCGwAABBsWGioBGhkqAQgYJAAEAxoMAAQWGhwhAAK1ABw6AQAAAAAEGAIcAAAEHBYaKgEaGwAABxkbGCQABAQZDAAEFhkcIQACvQAcOgEAACsAAAoIAyUABAAFCAQiAAADZCsACAUAGwAABBsCHAAABBwWGSoCGBkqAhsNIALGAAAEFgsKDgAEFgoYIQACygAYOgEAACoAChYgAHsMAAQKExYhAALPABYgAx8kAAQCGAwABAoYGSEAAtMAGToBAAAAAAQXAhkAAAQZChgqARgWKgEQFwoAARcRGSEAAtoAGToBAAAqAQ4XCgAEFxUZIQAC9gAZIALeKgEIFyoBDhgqAQ4ZJAAEAxsMAAQZGxwhAALlABw6AQAAKwAAFwgDJQAEAAQIBCIAAANkKwAIBQAaAAAEGgIcAAAEHBkbKgIWGyoBGhYAAAQWAhYqAhYaAAAEGAsWDgAEGBYZIQAC8wAZOgEAACoCGggqAhYOIAMfKgAHFyAC+AwABBcVGCEAAyUAGCAC+yoBCBcqAQ0YKgAAGSQABAUaAAAEABoAJAEEARkAAAQYAhokAAQEGwAABBkCHD4DAAAAGgAAABwqARcYAgAEGAIYKgIYFyoBFxgAAAQYAhgqAhgXKgEZGAAABBgCGCoCGBkrAAAXCAMlAAQABAgEIgAAA2QrAAgFABgAAAQYAhwAAAQcBxsqAhYbKgEYFwAABBcCFyoCFxgqARkXAAAEFwIXKgIXGSoCGAgqAhkNKgILDiADHwAABAoLFg4ABAoWFyEAAyMAFzoBAAAqABYKIABpKgEOGAwABBcYGSEAAykAGSADSCoBDRgqAQ0ZJAAEBBsMAAQXGxwhAAMvABw6AQAAAAAEGQIcAAAEHBcbKgEbGioBCBkkAAQDGwwABBcbHSEAAzcAHToBAAAAAAQZAh0AAAQdFxsqARscAAAHGhwZJAAEBBwMAAQXHB0hAAM/AB06AQAAKwAAGAgDJQAEAAUIBCIAAANkKwAIBQAaAAAEGgIdAAAEHRccKgIZHCoCGg0gA0gAAAQXCxgOAAQXGBkhAANMABk6AQAAKgAYFyAC+CoBCAwcAAcFDQAABwoNDiwAAAAADgAAAA0kAAQBDwwABAUPECEAA1YAEDoBAAArAAAMCAMlAAQAAggEIgAAA2QrAAgFAA4AAAQOAhAAAAQQBQ8qAg0PAAAEBQsMDgAEBQwNIQADYQANOgEAACoCDggqAAwFIAAjKwEIAwgGCwAECAYAAggHIQADaAgHIANqKwAIAwgFIAN4KwAAAAgFAQAEAAAIBAAAJQAEAAAICQ0ABAgJCAQIChcACAoICiEAA3YICgEABAgDCAkICysBCAsICAEABAgFCAkICysCCAgICwEABAgJAAIICSADbSUBBAABCAUgA3gjJQAEAAAIBw0ABAgHCAUICBcACAgICCEAA4MICAEABAgDCAcICSsBCAkIBgEABAgECAcICSsCCAYICQEABAgHAAIIByADeiMrABjKGMo=","debug_symbols":"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","brillig_names":["register_dkim"],"assert_messages":{"637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","144":"Storage slot 0 not allowed. Storage slots must start from 1.","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","45":"Sender is not the registry contract","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","329":"Array index out of bounds","457":"attempt to add with overflow","713":"attempt to add with overflow"}},{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim_bulk"],"assert_messages":{"326":"Array index out of bounds","573":"Array index out of bounds","762":"attempt to add with overflow","515":"Array index out of bounds","488":"Array index out of bounds","549":"Array index out of bounds","290":"Array index out of bounds","741":"attempt to add with overflow","220":"DKIM key has already been registered","930":"Array index out of bounds","854":"attempt to add with overflow","531":"Array index out of bounds","720":"Array index out of bounds","333":"Array index out of bounds","202":"Storage slot 0 not allowed. Storage slots must start from 1.","589":"Array index out of bounds","775":"Array index out of bounds","129":"Array index out of bounds","446":"Array index out of bounds","638":"Array index out of bounds","312":"SharedImmutable already initialized","964":"attempt to add with overflow","434":"attempt to add with overflow","751":"Array index out of bounds","620":"Array index out of bounds","943":"attempt to add with overflow","224":"Array index out of bounds","602":"attempt to add with overflow","791":"Array index out of bounds","922":"Array index out of bounds","465":"attempt to add with overflow","78":"Sender is not the registry contract","523":"attempt to add with overflow","712":"Array index out of bounds","453":"Array index out of bounds","581":"Array index out of bounds","840":"Array index out of bounds","700":"attempt to add with overflow","441":"attempt to add with overflow","822":"Array index out of bounds","499":"attempt to add with overflow","48":"Not initialized","560":"attempt to add with overflow","953":"Array index out of bounds","804":"attempt to add with overflow","481":"Array index out of bounds","286":"Storage slot 0 not allowed. Storage slots must start from 1.","539":"attempt to add with overflow","411":"Array index out of bounds","405":"attempt to add with overflow","914":"Array index out of bounds","728":"Array index out of bounds","783":"Array index out of bounds","140":"Array index out of bounds","902":"attempt to add with overflow","652":"attempt to add with overflow"}},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["constructor"],"assert_messages":{"1335":"attempt to add with overflow","1652":"Array index out of bounds","1073":"attempt to add with overflow","622":"Array index out of bounds","1262":"Array index out of bounds","1640":"attempt to add with overflow","1500":"Array index out of bounds","665":"Array index out of bounds","921":"Array index out of bounds","970":"Array index out of bounds","1348":"Array index out of bounds","1275":"attempt to add with overflow","952":"Array index out of bounds","1525":"Array index out of bounds","1592":"attempt to add with overflow","556":"Array index out of bounds","1324":"Array index out of bounds","934":"attempt to add with overflow","1123":"Array index out of bounds","1513":"attempt to add with overflow","1306":"Array index out of bounds","855":"attempt to add with overflow","1044":"Array index out of bounds","1172":"Array index out of bounds","1032":"attempt to add with overflow","1154":"Array index out of bounds","831":"attempt to add with overflow","892":"attempt to add with overflow","1410":"Array index out of bounds","1660":"Array index out of bounds","1136":"attempt to add with overflow","813":"Array index out of bounds","106":"attempt to add with overflow","618":"Storage slot 0 not allowed. Storage slots must start from 1.","1392":"Array index out of bounds","1246":"Array index out of bounds","472":"Array index out of bounds","984":"attempt to add with overflow","1234":"attempt to add with overflow","1356":"Array index out of bounds","905":"Array index out of bounds","1094":"attempt to add with overflow","1484":"Array index out of bounds","1472":"attempt to add with overflow","1533":"Array index out of bounds","375":"Initializer address is not the contract deployer","820":"Array index out of bounds","369":"Initialization hash does not match","881":"Array index out of bounds","552":"DKIM key has already been registered","162":"attempt to add with overflow","863":"Array index out of bounds","1052":"Array index out of bounds","1186":"attempt to add with overflow","534":"Storage slot 0 not allowed. Storage slots must start from 1.","1107":"Array index out of bounds","144":"Array index out of bounds","461":"Array index out of bounds","778":"Array index out of bounds","1290":"Array index out of bounds","644":"SharedImmutable already initialized","1314":"attempt to add with overflow","766":"attempt to add with overflow","1083":"Array index out of bounds","1424":"attempt to add with overflow","1668":"Array index out of bounds","1254":"Array index out of bounds","797":"attempt to add with overflow","151":"Array index out of bounds","1364":"Array index out of bounds","785":"Array index out of bounds","913":"Array index out of bounds","1492":"Array index out of bounds","1681":"attempt to add with overflow","773":"attempt to add with overflow","1541":"Array index out of bounds","1578":"Array index out of bounds","743":"Array index out of bounds","871":"attempt to add with overflow","737":"attempt to add with overflow","1060":"Array index out of bounds","1115":"Array index out of bounds","1377":"attempt to add with overflow","1560":"Array index out of bounds","402":"SharedImmutable already initialized","658":"Array index out of bounds","140":"attempt to add with overflow","847":"Array index out of bounds","1298":"attempt to add with overflow","1554":"attempt to add with overflow"}},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"3505":"Array index out of bounds","299":"Array index out of bounds","1512":"attempt to add with overflow","4261":"Array index out of bounds","1378":"Array index out of bounds","1890":"Array index out of bounds","1110":"attempt to add with overflow","1811":"Array index out of bounds","3024":"Array index out of bounds","4560":"attempt to add with overflow","3591":"attempt to add with overflow","3780":"Array index out of bounds","3457":"attempt to add with overflow","3835":"Array index out of bounds","306":"Array index out of bounds","1519":"Array index out of bounds","2220":"Array index out of bounds","3378":"Array index out of bounds","2086":"attempt to add with overflow","2598":"attempt to add with overflow","1440":"attempt to add with overflow","2787":"Array index out of bounds","3110":"attempt to add with overflow","2519":"attempt to add with overflow","2708":"Array index out of bounds","3567":"Array index out of bounds","4055":"attempt to add with overflow","4457":"Array index out of bounds","2818":"Array index out of bounds","2495":"attempt to add with overflow","4220":"Array index out of bounds","3385":"Array index out of bounds","1392":"attempt to add with overflow","4464":"Array index out of bounds","2282":"Storage slot 0 not allowed. Storage slots must start from 1.","1124":"Not initialized","1313":"Array index out of bounds","722":"Sender is not the registry contract","1289":"Array index out of bounds","4550":"attempt to add with overflow","2100":"Array index out of bounds","3124":"Array index out of bounds","3045":"attempt to add with overflow","3612":"attempt to add with overflow","3856":"attempt to add with overflow","973":"Storage slot 0 not allowed. Storage slots must start from 1.","3533":"Array index out of bounds","2430":"attempt to add with overflow","2107":"Array index out of bounds","3131":"Array index out of bounds","3966":"Array index out of bounds","4076":"Array index out of bounds","169":"attempt to add with overflow","2918":"Array index out of bounds","2461":"attempt to add with overflow","2004":"Array index out of bounds","1681":"Array index out of bounds","3540":"Array index out of bounds","523":"Initialization hash does not match","3272":"DKIM key has already been registered","2437":"attempt to add with overflow","2949":"Array index out of bounds","4485":"attempt to add with overflow","1468":"Array index out of bounds","1657":"Array index out of bounds","4564":"Array index out of bounds","2980":"attempt to add with overflow","3035":"attempt to add with overflow","4571":"Array index out of bounds","1554":"Array index out of bounds","317":"attempt to add with overflow","1719":"Array index out of bounds","3633":"Array index out of bounds","2286":"Array index out of bounds","1128":"Function check_dkim_key_hash_public can only be called statically","1561":"Array index out of bounds","2585":"Array index out of bounds","3152":"attempt to add with overflow","4420":"attempt to add with overflow","4097":"attempt to add with overflow","2939":"attempt to add with overflow","2616":"Array index out of bounds","4475":"attempt to add with overflow","4018":"attempt to add with overflow","1647":"attempt to add with overflow","3049":"Array index out of bounds","1623":"Array index out of bounds","1300":"attempt to add with overflow","2836":"Array index out of bounds","4372":"Array index out of bounds","118":"attempt to add with overflow","3056":"Array index out of bounds","4592":"attempt to add with overflow","795":"attempt to add with overflow","1819":"Array index out of bounds","4245":"Array index out of bounds","1874":"Array index out of bounds","2898":"attempt to add with overflow","3087":"attempt to add with overflow","3276":"Array index out of bounds","2118":"attempt to add with overflow","771":"attempt to add with overflow","3142":"attempt to add with overflow","3654":"attempt to add with overflow","1850":"Array index out of bounds","3575":"attempt to add with overflow","3764":"Array index out of bounds","3843":"Array index out of bounds","4489":"Array index out of bounds","2850":"attempt to add with overflow","2527":"Array index out of bounds","2716":"Array index out of bounds","3551":"attempt to add with overflow","3874":"Array index out of bounds","2771":"Array index out of bounds","2960":"attempt to add with overflow","2125":"Array index out of bounds","3338":"Storage slot 0 not allowed. Storage slots must start from 1.","4496":"Array index out of bounds","1668":"attempt to add with overflow","2747":"Array index out of bounds","1912":"Array index out of bounds","1589":"Array index out of bounds","4527":"attempt to add with overflow","4204":"Array index out of bounds","809":"Not initialized","1321":"Array index out of bounds","1187":"Storage slot 0 not allowed. Storage slots must start from 1.","4582":"attempt to add with overflow","3156":"Array index out of bounds","1596":"Array index out of bounds","1840":"attempt to add with overflow","2407":"Array index out of bounds","3486":"attempt to add with overflow","3163":"Array index out of bounds","1737":"Array index out of bounds","3974":"Array index out of bounds","3517":"attempt to add with overflow","4084":"Array index out of bounds","2737":"attempt to add with overflow","2926":"Array index out of bounds","4596":"Array index out of bounds","3493":"attempt to add with overflow","2012":"Array index out of bounds","1689":"Array index out of bounds","2634":"Array index out of bounds","1799":"attempt to add with overflow","1342":"attempt to add with overflow","2043":"Array index out of bounds","3067":"attempt to add with overflow","4280":"Array index out of bounds","4603":"Array index out of bounds","1452":"Array index out of bounds","1751":"attempt to add with overflow","3342":"Array index out of bounds","2696":"attempt to add with overflow","1861":"attempt to add with overflow","703":"Not initialized","3641":"Array index out of bounds","3995":"attempt to add with overflow","2136":"Array index out of bounds","2648":"attempt to add with overflow","1490":"attempt to add with overflow","3672":"Array index out of bounds","4507":"attempt to add with overflow","2569":"Array index out of bounds","2758":"attempt to add with overflow","4026":"Array index out of bounds","3892":"Array index out of bounds","2033":"attempt to add with overflow","1710":"attempt to add with overflow","2545":"Array index out of bounds","1631":"attempt to add with overflow","4380":"Array index out of bounds","662":"attempt to add with overflow","2198":"Storage slot 0 not allowed. Storage slots must start from 1.","2064":"attempt to add with overflow","4112":"Array index out of bounds","1930":"Array index out of bounds","1607":"attempt to add with overflow","2308":"SharedImmutable already initialized","2442":"Array index out of bounds","3954":"attempt to add with overflow","3174":"attempt to add with overflow","1827":"Array index out of bounds","992":"SharedImmutable already initialized","4253":"Array index out of bounds","1882":"Array index out of bounds","2449":"Array index out of bounds","1992":"attempt to add with overflow","3906":"attempt to add with overflow","3583":"Array index out of bounds","3772":"Array index out of bounds","3827":"Array index out of bounds","2992":"Array index out of bounds","3181":"Array index out of bounds","2535":"attempt to add with overflow","2724":"Array index out of bounds","2401":"attempt to add with overflow","2779":"Array index out of bounds","1944":"attempt to add with overflow","3803":"Array index out of bounds","2322":"Array index out of bounds","2511":"Array index out of bounds","2054":"attempt to add with overflow","1542":"attempt to add with overflow","896":"Storage slot 0 not allowed. Storage slots must start from 1.","4614":"attempt to add with overflow","4212":"Array index out of bounds","1329":"Array index out of bounds","4401":"attempt to add with overflow","549":"SharedImmutable already initialized","1573":"attempt to add with overflow","2329":"Array index out of bounds","1494":"Array index out of bounds","1360":"Array index out of bounds","1549":"attempt to add with overflow","4298":"Array index out of bounds","3463":"Array index out of bounds","4432":"Array index out of bounds","4274":"attempt to add with overflow","1903":"attempt to add with overflow","611":"attempt to add with overflow","1501":"Array index out of bounds","2068":"Array index out of bounds","3793":"attempt to add with overflow","3982":"Array index out of bounds","4360":"attempt to add with overflow","3013":"attempt to add with overflow","2556":"attempt to add with overflow","2800":"attempt to add with overflow","2477":"Array index out of bounds","3690":"Array index out of bounds","295":"attempt to add with overflow","2020":"Array index out of bounds","1697":"Array index out of bounds","2910":"Array index out of bounds","2075":"Array index out of bounds","3099":"Array index out of bounds","4068":"Array index out of bounds","4312":"attempt to add with overflow","4044":"Array index out of bounds","4233":"attempt to add with overflow","1460":"Array index out of bounds","2484":"Array index out of bounds","2216":"DKIM key has already been registered","3752":"attempt to add with overflow","4130":"Array index out of bounds","4453":"attempt to add with overflow","3003":"attempt to add with overflow","3192":"Array index out of bounds","3704":"attempt to add with overflow","4539":"Array index out of bounds","3625":"Array index out of bounds","3814":"attempt to add with overflow","4192":"attempt to add with overflow","529":"Initializer address is not the contract deployer","2577":"Array index out of bounds","3601":"Array index out of bounds","261":"attempt to add with overflow","4034":"attempt to add with overflow","828":"Sender is not the registry contract","3254":"Storage slot 0 not allowed. Storage slots must start from 1.","2096":"attempt to add with overflow","3120":"attempt to add with overflow","3498":"Array index out of bounds","1639":"Array index out of bounds","3364":"SharedImmutable already initialized","4010":"Array index out of bounds","4144":"attempt to add with overflow","4388":"Array index out of bounds","4443":"attempt to add with overflow","914":"DKIM key has already been registered","1481":"attempt to add with overflow","3017":"Array index out of bounds"}}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseDkimRegistry"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::DKIMKeyRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_bulk_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseDkimRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_private_abi"}]}},"file_map":{"110":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"115":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"127":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"128":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"134":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"145":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"151":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"160":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"170":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"171":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"188":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"190":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"191":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"200":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"208":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"211":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"213":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"233":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"238":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"264":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"308":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"70":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_dkim_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\nmod receipt_verifier_id {\n    pub global AWS: u8 = 1;\n    pub global LINODE: u8 = 2;\n    pub global HEROKU: u8 = 3;\n    pub global FRONTIER_AIRLINES: u8 = 4;\n    pub global UNITED_AIRLINES: u8 = 5;\n    pub global AMERICAN_AIRLINES: u8 = 6;\n    pub global DELTA_AIRLINES: u8 = 7;\n    pub global UBER: u8 = 8;\n    pub global LYFT: u8 = 9;\n}\n\n#[aztec]\ncontract ZImburseDkimRegistry {\n    use std::meta::derive;\n    use dep::aztec::prelude::{AztecAddress, SharedImmutable, Map};\n    use dep::aztec::macros::{storage::storage, events::event, functions::{private, public, view, initializer}};\n    use dep::aztec::unencrypted_logs::unencrypted_event_emission::emit;\n    use dep::aztec::protocol_types::traits::Serialize;\n    use crate::BULK_KEY_LENGTH;\n\n    #[storage]\n    struct Storage<Context> {\n        admin: SharedImmutable<AztecAddress, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n    }\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    /**\n     * Initialize the Z-Imburse DKIM registry contract\n     *\n     * @param registry - the address of the Z-Imburse registry contract\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        storage.admin.initialize(context.msg_sender());\n        // bulk insert up to 8 dkim key hashes at initialization (max unencrypted logs per tx)\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(&mut context, DKIMKeyRegistered {\n                    dkim_key_hash: dkim_key_hashes[i],\n                    verifier_id: verifier_ids[i]\n                });\n            }\n        }\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(verifier_ids: [Field; BULK_KEY_LENGTH], dkim_key_hashes: [Field; BULK_KEY_LENGTH]) {\n        // check that the sender is the admin\n        let admin = storage.admin.read_public();\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(&mut context, DKIMKeyRegistered {\n                    dkim_key_hash: dkim_key_hashes[i],\n                    verifier_id: verifier_ids[i]\n                });\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.admin.read_public();\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(&mut context, DKIMKeyRegistered { dkim_key_hash, verifier_id });\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n\n}\n\n"},"99":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"}}}