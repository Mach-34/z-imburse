{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseDkimRegistry","functions":[{"name":"register_bulk_no_emit","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":64,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":64,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_bulk_no_emit"],"assert_messages":{"631":"attempt to add with overflow","366":"attempt to add with overflow","555":"Array index out of bounds","741":"Array index out of bounds","290":"Array index out of bounds","479":"attempt to add with overflow","220":"DKIM key has already been registered","610":"Array index out of bounds","342":"Array index out of bounds","729":"attempt to add with overflow","400":"Array index out of bounds","589":"attempt to add with overflow","202":"Storage slot 0 not allowed. Storage slots must start from 1.","327":"attempt to add with overflow","129":"Array index out of bounds","312":"SharedImmutable already initialized","376":"Array index out of bounds","568":"attempt to add with overflow","757":"Array index out of bounds","681":"attempt to add with overflow","358":"Array index out of bounds","547":"Array index out of bounds","224":"Array index out of bounds","416":"Array index out of bounds","602":"Array index out of bounds","791":"attempt to add with overflow","465":"Array index out of bounds","78":"Sender is not the registry contract","578":"Array index out of bounds","447":"Array index out of bounds","770":"attempt to add with overflow","48":"Not initialized","429":"attempt to add with overflow","618":"Array index out of bounds","749":"Array index out of bounds","286":"Storage slot 0 not allowed. Storage slots must start from 1.","350":"attempt to add with overflow","408":"Array index out of bounds","539":"Array index out of bounds","667":"Array index out of bounds","527":"attempt to add with overflow","140":"Array index out of bounds","649":"Array index out of bounds","780":"Array index out of bounds","387":"attempt to add with overflow"}},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"515":"Array index out of bounds","358":"attempt to add with overflow","105":"attempt to add with overflow","116":"Array index out of bounds","337":"attempt to add with overflow","433":"Array index out of bounds","523":"Array index out of bounds","127":"attempt to add with overflow","415":"Array index out of bounds","313":"Array index out of bounds","278":"SharedImmutable already initialized","371":"Array index out of bounds","400":"attempt to add with overflow","109":"Array index out of bounds","447":"attempt to add with overflow","71":"attempt to add with overflow","321":"attempt to add with overflow","251":"Initializer address is not the contract deployer","536":"attempt to add with overflow","347":"Array index out of bounds","245":"Initialization hash does not match","379":"Array index out of bounds","495":"attempt to add with overflow","507":"Array index out of bounds","329":"Array index out of bounds","387":"Array index out of bounds"}},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim"],"assert_messages":{"637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","144":"Storage slot 0 not allowed. Storage slots must start from 1.","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","45":"Sender is not the registry contract","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","329":"Array index out of bounds","457":"attempt to add with overflow","713":"attempt to add with overflow"}},{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim_bulk"],"assert_messages":{"326":"Array index out of bounds","573":"Array index out of bounds","762":"attempt to add with overflow","515":"Array index out of bounds","488":"Array index out of bounds","549":"Array index out of bounds","290":"Array index out of bounds","741":"attempt to add with overflow","220":"DKIM key has already been registered","930":"Array index out of bounds","854":"attempt to add with overflow","531":"Array index out of bounds","720":"Array index out of bounds","333":"Array index out of bounds","202":"Storage slot 0 not allowed. Storage slots must start from 1.","589":"Array index out of bounds","775":"Array index out of bounds","129":"Array index out of bounds","446":"Array index out of bounds","638":"Array index out of bounds","312":"SharedImmutable already initialized","964":"attempt to add with overflow","434":"attempt to add with overflow","751":"Array index out of bounds","620":"Array index out of bounds","943":"attempt to add with overflow","224":"Array index out of bounds","602":"attempt to add with overflow","791":"Array index out of bounds","922":"Array index out of bounds","465":"attempt to add with overflow","78":"Sender is not the registry contract","523":"attempt to add with overflow","712":"Array index out of bounds","453":"Array index out of bounds","581":"Array index out of bounds","840":"Array index out of bounds","700":"attempt to add with overflow","441":"attempt to add with overflow","822":"Array index out of bounds","499":"attempt to add with overflow","48":"Not initialized","560":"attempt to add with overflow","953":"Array index out of bounds","804":"attempt to add with overflow","481":"Array index out of bounds","286":"Storage slot 0 not allowed. Storage slots must start from 1.","539":"attempt to add with overflow","411":"Array index out of bounds","405":"attempt to add with overflow","914":"Array index out of bounds","728":"Array index out of bounds","783":"Array index out of bounds","140":"Array index out of bounds","902":"attempt to add with overflow","652":"attempt to add with overflow"}},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"756":"attempt to add with overflow","1780":"Array index out of bounds","3694":"attempt to add with overflow","1835":"Array index out of bounds","488":"Not initialized","2859":"attempt to add with overflow","3048":"attempt to add with overflow","2079":"attempt to add with overflow","732":"attempt to add with overflow","3103":"attempt to add with overflow","3237":"Array index out of bounds","1811":"Array index out of bounds","3371":"Array index out of bounds","141":"Array index out of bounds","3560":"Array index out of bounds","3591":"Array index out of bounds","3615":"Array index out of bounds","3804":"attempt to add with overflow","2811":"attempt to add with overflow","2488":"Array index out of bounds","2677":"Array index out of bounds","4079":"attempt to add with overflow","2732":"Array index out of bounds","2921":"attempt to add with overflow","2086":"Array index out of bounds","3299":"Storage slot 0 not allowed. Storage slots must start from 1.","4000":"Array index out of bounds","1629":"attempt to add with overflow","2708":"Array index out of bounds","1873":"Array index out of bounds","1550":"Array index out of bounds","4244":"Array index out of bounds","770":"Not initialized","447":"attempt to add with overflow","1148":"Storage slot 0 not allowed. Storage slots must start from 1.","1282":"Array index out of bounds","3117":"Array index out of bounds","4007":"Array index out of bounds","1557":"Array index out of bounds","1801":"attempt to add with overflow","2368":"Array index out of bounds","3581":"attempt to add with overflow","3770":"Array index out of bounds","3124":"Array index out of bounds","296":"SharedImmutable already initialized","1698":"Array index out of bounds","3478":"Array index out of bounds","2698":"attempt to add with overflow","2887":"Array index out of bounds","3911":"attempt to add with overflow","4100":"Array index out of bounds","1973":"Array index out of bounds","1650":"Array index out of bounds","2595":"Array index out of bounds","1760":"attempt to add with overflow","1303":"attempt to add with overflow","2004":"Array index out of bounds","3028":"attempt to add with overflow","3540":"attempt to add with overflow","1413":"Array index out of bounds","1712":"attempt to add with overflow","3303":"Array index out of bounds","3492":"attempt to add with overflow","2657":"attempt to add with overflow","1822":"attempt to add with overflow","152":"attempt to add with overflow","664":"Not initialized","3413":"Array index out of bounds","3602":"attempt to add with overflow","396":"attempt to add with overflow","3389":"Array index out of bounds","2097":"Array index out of bounds","2609":"attempt to add with overflow","1451":"attempt to add with overflow","2530":"Array index out of bounds","2719":"attempt to add with overflow","4121":"attempt to add with overflow","1994":"attempt to add with overflow","1671":"attempt to add with overflow","2506":"Array index out of bounds","4042":"attempt to add with overflow","1592":"attempt to add with overflow","4018":"attempt to add with overflow","623":"attempt to add with overflow","2159":"Storage slot 0 not allowed. Storage slots must start from 1.","2025":"attempt to add with overflow","1891":"Array index out of bounds","1568":"attempt to add with overflow","2269":"SharedImmutable already initialized","2403":"Array index out of bounds","276":"Initializer address is not the contract deployer","3135":"attempt to add with overflow","1788":"Array index out of bounds","953":"SharedImmutable already initialized","3836":"Array index out of bounds","1843":"Array index out of bounds","3379":"attempt to add with overflow","3568":"Array index out of bounds","2410":"Array index out of bounds","3623":"Array index out of bounds","1953":"attempt to add with overflow","3355":"Array index out of bounds","2953":"Array index out of bounds","3142":"Array index out of bounds","2496":"attempt to add with overflow","2685":"Array index out of bounds","2362":"attempt to add with overflow","2740":"Array index out of bounds","1905":"attempt to add with overflow","2283":"Array index out of bounds","2472":"Array index out of bounds","1503":"attempt to add with overflow","2015":"attempt to add with overflow","857":"Storage slot 0 not allowed. Storage slots must start from 1.","1290":"Array index out of bounds","4228":"Array index out of bounds","1534":"attempt to add with overflow","2290":"Array index out of bounds","1455":"Array index out of bounds","1321":"Array index out of bounds","1510":"attempt to add with overflow","3857":"attempt to add with overflow","1864":"attempt to add with overflow","3400":"attempt to add with overflow","572":"attempt to add with overflow","3644":"attempt to add with overflow","1462":"Array index out of bounds","2029":"Array index out of bounds","3754":"Array index out of bounds","3943":"Array index out of bounds","2974":"attempt to add with overflow","2517":"attempt to add with overflow","4108":"Array index out of bounds","2761":"attempt to add with overflow","2438":"Array index out of bounds","1981":"Array index out of bounds","1658":"Array index out of bounds","2871":"Array index out of bounds","2036":"Array index out of bounds","3060":"Array index out of bounds","1421":"Array index out of bounds","2445":"Array index out of bounds","3847":"attempt to add with overflow","2177":"DKIM key has already been registered","507":"Sender is not the registry contract","3421":"Array index out of bounds","2964":"attempt to add with overflow","3153":"Array index out of bounds","270":"Initialization hash does not match","3964":"attempt to add with overflow","2538":"Array index out of bounds","789":"Sender is not the registry contract","3861":"Array index out of bounds","3215":"Storage slot 0 not allowed. Storage slots must start from 1.","4050":"Array index out of bounds","2057":"attempt to add with overflow","3081":"attempt to add with overflow","1600":"Array index out of bounds","3325":"SharedImmutable already initialized","875":"DKIM key has already been registered","4136":"Array index out of bounds","1442":"attempt to add with overflow","2978":"Array index out of bounds","3868":"Array index out of bounds","1473":"attempt to add with overflow","1339":"Array index out of bounds","1851":"Array index out of bounds","3442":"attempt to add with overflow","1071":"attempt to add with overflow","1772":"Array index out of bounds","2985":"Array index out of bounds","3631":"Array index out of bounds","3363":"attempt to add with overflow","3552":"Array index out of bounds","3954":"attempt to add with overflow","3662":"Array index out of bounds","1480":"Array index out of bounds","2181":"Array index out of bounds","2047":"attempt to add with overflow","2559":"attempt to add with overflow","1401":"attempt to add with overflow","2748":"Array index out of bounds","3071":"attempt to add with overflow","2480":"attempt to add with overflow","2669":"Array index out of bounds","2779":"Array index out of bounds","2456":"attempt to add with overflow","4236":"Array index out of bounds","1353":"attempt to add with overflow","2243":"Storage slot 0 not allowed. Storage slots must start from 1.","3968":"Array index out of bounds","1085":"Not initialized","1274":"Array index out of bounds","3889":"attempt to add with overflow","683":"Sender is not the registry contract","1250":"Array index out of bounds","2061":"Array index out of bounds","3085":"Array index out of bounds","3975":"Array index out of bounds","3006":"attempt to add with overflow","3762":"Array index out of bounds","934":"Storage slot 0 not allowed. Storage slots must start from 1.","2391":"attempt to add with overflow","2068":"Array index out of bounds","3092":"Array index out of bounds","3793":"Array index out of bounds","130":"attempt to add with overflow","2879":"Array index out of bounds","4092":"Array index out of bounds","2422":"attempt to add with overflow","3824":"attempt to add with overflow","1965":"Array index out of bounds","1642":"Array index out of bounds","3879":"attempt to add with overflow","4068":"Array index out of bounds","3233":"DKIM key has already been registered","2398":"attempt to add with overflow","2910":"Array index out of bounds","4257":"attempt to add with overflow","1429":"Array index out of bounds","1618":"Array index out of bounds","2941":"attempt to add with overflow","4154":"Array index out of bounds","2996":"attempt to add with overflow","1515":"Array index out of bounds","3429":"Array index out of bounds","3996":"attempt to add with overflow","1680":"Array index out of bounds","2247":"Array index out of bounds","3460":"Array index out of bounds","1089":"Function check_dkim_key_hash_public can only be called statically","3783":"attempt to add with overflow","4216":"attempt to add with overflow","3893":"Array index out of bounds","1522":"Array index out of bounds","2546":"Array index out of bounds","3113":"attempt to add with overflow","96":"attempt to add with overflow","3680":"Array index out of bounds","4058":"attempt to add with overflow","2900":"attempt to add with overflow","2577":"Array index out of bounds","1608":"attempt to add with overflow","4168":"attempt to add with overflow","3010":"Array index out of bounds","4034":"Array index out of bounds","3900":"Array index out of bounds","1584":"Array index out of bounds","1261":"attempt to add with overflow","2797":"Array index out of bounds","3742":"attempt to add with overflow","3931":"attempt to add with overflow","3986":"attempt to add with overflow","3340":"attempt to add with overflow","3017":"Array index out of bounds","134":"Array index out of bounds"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VYTXPaMBCVg41lUwe3gEnSQ3ttT3IwNNyY6ef/8KTX/IT89bBGOzw2xBkUaSZoxiNb0r59eitpbUdqV/T2iux9Yuuhel54zMbW5m2l9ohlQvKMzoTnxZnwHJwJz9gjz+gIT6pje0/7jvZcqnb78VknGlOgB9Cv+oCk10dbZxYInW08KZcJv96w75o2s9wD8F4Sbh4G21BAfuq99gp8UTD/2j6uI3sVtl+BfaH2Af8FbbxQfkMbn+R/oC1Vh76Ijw4Tr7uA8TIFaKjABxbcJLzecxUszl22GAn/ufDfxdQKrqEttg8jaEvEmqHHL9CvYU7c/13MDbkMBBfCTUJoYWM/DIFtTIMaxkc0TI5oODyi4WR7/RM4xDvVQXh3mUADxxh8Mc8LGKOBRwLP39S+PYOTPgZdGHdMc+d1pF+2i4VdCWOGYJcKuxR4d2O311d7P7J64hng701ltZZntj/sH4tM7feiZ973hP0hCHbTYReA7XP9EvZlGE1WhD0Og93l9jII9m2nyUfA9vjFUFMcP6nDQv4mQeJb1335k33mwClE/pwI/+wL8+dUcCqhDffVVGBNBRZpOYPxHtfcf+Q0O4ET2pWOdiNHu1N4knYVjPd49jbIqXKcy9jRLne0OyVWpN0cxntcdwfazR3n4qrdpaNd5mjnus5d5zcHvngG+/xLhJxii82+OM8kMObB1nQuXqnDQjyvgafHXHHblyuugRPfM7dccErewGmxWJt2tV6umrq9b9tFBNjMiZ/xf8eNGCNzDOn2OYxuBr9dbkAnfv9G7fibgLngt0sG9r459unIPkvBlXm8pj9pfQX3PJcC7DZe5rH7R4DvE+xrFkQ3s+zbE+wzV6He33bvTzPhfyL0J00qwamENoxlJbAqgfUe7PAfGc+V8sIT7yz2rOIYAAA=","debug_symbols":"tdnPaoNAEIDxd9mzB//s7sz4KqUETTQsiAY1hSK+e00bSiDn7yKOzn6332k3d+na+/WUxn5aXP2xuWE6N2uaxmPa9sy1cxqGdD29fnb54+HL3/3l1oyPcVmbeXW1ryxz3Xg53rw/zvdp6Fwt+Z69rUr53BT5Xwy2f2bOV1zac+nApSOXFi6tXNqwdMi5dMGlOY2B0xg4jYHTGDiNgdMYOI2B0xg5jZHTGDmNkdMYOY2R0xg5jZHTGDmNkdMonEbhNAqnUTiNwmkUTqNwGoXTKJxG4TQqp1E5jcppVE6jchqV06icRuU0KqdROY3GaTROo3EajdNonEbjNBqn0TiNxmk0TmOR52C7ANsl2K7AtgfbAWxHsC1gW8E26LKgXO7H9NXMqWmH7nl50d/H88tdxvp9+/tzLP8A","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseDkimRegistry"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::DKIMKeyRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":64,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseDkimRegistry::register_bulk_no_emit_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_bulk_no_emit_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseDkimRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_bulk_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_private_abi"}]}},"file_map":{"110":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"115":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"127":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"128":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"134":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"145":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"151":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"160":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"170":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"171":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"188":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"190":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"191":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"200":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"208":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"210":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"211":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"213":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"233":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"238":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"264":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"308":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"70":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_dkim_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\nmod receipt_verifier_id {\n    pub global AWS: Field = 1;\n    pub global LINODE: Field = 2;\n    pub global HEROKU: Field = 3;\n    pub global FRONTIER_AIRLINES: Field = 4;\n    pub global UNITED_AIRLINES: Field = 5;\n    pub global AMERICAN_AIRLINES: Field = 6;\n    pub global DELTA_AIRLINES: Field = 7;\n    pub global UBER: Field = 8;\n    pub global LYFT: Field = 9;\n}\n\n#[aztec]\ncontract ZImburseDkimRegistry {\n    use std::meta::derive;\n    use dep::aztec::prelude::{AztecAddress, SharedImmutable, Map};\n    use dep::aztec::macros::{storage::storage, events::event, functions::{private, public, view, initializer}};\n    use dep::aztec::unencrypted_logs::unencrypted_event_emission::emit;\n    use dep::aztec::protocol_types::traits::Serialize;\n    use crate::BULK_KEY_LENGTH;\n\n    #[storage]\n    struct Storage<Context> {\n        admin: SharedImmutable<AztecAddress, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n    }\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    /**\n     * Initialize the Z-Imburse DKIM registry contract\n     *\n     * @param registry - the address of the Z-Imburse registry contract\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        // verifier_ids: [Field; BULK_KEY_LENGTH],\n        // dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        storage.admin.initialize(context.msg_sender());\n        // bulk insert up to 8 dkim key hashes at initialization (max unencrypted logs per tx)\n        // for i in 0..BULK_KEY_LENGTH {\n        //     if (verifier_ids[i] != 0) {\n        //         // ensure that the dkim key has not already been registered\n        //         let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n        //         assert(stored_id == 0, \"DKIM key has already been registered\");\n        //         storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n        //         emit(&mut context, DKIMKeyRegistered {\n        //             dkim_key_hash: dkim_key_hashes[i],\n        //             verifier_id: verifier_ids[i]\n        //         });\n        //     }\n        // }\n    }\n\n    /** Add dkim with no emit for testing purposes (more ergonomic) (remove later) */\n    #[public]\n    fn register_bulk_no_emit(verifier_ids: [Field; 64], dkim_key_hashes: [Field; 64]) {\n        // check that the sender is the admin\n        let admin = storage.admin.read_public();\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 8 dkim key hashes at initialization (max unencrypted logs per tx)\n        for i in 0..100 {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n            }\n        }\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(verifier_ids: [Field; BULK_KEY_LENGTH], dkim_key_hashes: [Field; BULK_KEY_LENGTH]) {\n        // check that the sender is the admin\n        let admin = storage.admin.read_public();\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(&mut context, DKIMKeyRegistered {\n                    dkim_key_hash: dkim_key_hashes[i],\n                    verifier_id: verifier_ids[i]\n                });\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.admin.read_public();\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(&mut context, DKIMKeyRegistered { dkim_key_hash, verifier_id });\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n}\n\n"},"99":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"}}}