{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseDkimRegistry","functions":[{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VYTXPaMBCVg41lUwe3gEnSQ3ttT3IwNNyY6ef/8KTX/IT89bBGOzw2xBkUaSZoxiNb0r59eitpbUdqV/T2iux9Yuuhel54zMbW5m2l9ohlQvKMzoTnxZnwHJwJz9gjz+gIT6pje0/7jvZcqnb78VknGlOgB9Cv+oCk10dbZxYInW08KZcJv96w75o2s9wD8F4Sbh4G21BAfuq99gp8UTD/2j6uI3sVtl+BfaH2Af8FbbxQfkMbn+R/oC1Vh76Ijw4Tr7uA8TIFaKjABxbcJLzecxUszl22GAn/ufDfxdQKrqEttg8jaEvEmqHHL9CvYU7c/13MDbkMBBfCTUJoYWM/DIFtTIMaxkc0TI5oODyi4WR7/RM4xDvVQXh3mUADxxh8Mc8LGKOBRwLP39S+PYOTPgZdGHdMc+d1pF+2i4VdCWOGYJcKuxR4d2O311d7P7J64hng701ltZZntj/sH4tM7feiZ973hP0hCHbTYReA7XP9EvZlGE1WhD0Og93l9jII9m2nyUfA9vjFUFMcP6nDQv4mQeJb1335k33mwClE/pwI/+wL8+dUcCqhDffVVGBNBRZpOYPxHtfcf+Q0O4ET2pWOdiNHu1N4knYVjPd49jbIqXKcy9jRLne0OyVWpN0cxntcdwfazR3n4qrdpaNd5mjnus5d5zcHvngG+/xLhJxii82+OM8kMObB1nQuXqnDQjyvgafHXHHblyuugRPfM7dccErewGmxWJt2tV6umrq9b9tFBNjMiZ/xf8eNGCNzDOn2OYxuBr9dbkAnfv9G7fibgLngt0sG9r459unIPkvBlXm8pj9pfQX3PJcC7DZe5rH7R4DvE+xrFkQ3s+zbE+wzV6He33bvTzPhfyL0J00qwamENoxlJbAqgfUe7PAfGc+V8sIT7yz2rOIYAAA=","debug_symbols":"tdnPaoNAEIDxd9mzB//s7sz4KqUETTQsiAY1hSK+e00bSiDn7yKOzn6332k3d+na+/WUxn5aXP2xuWE6N2uaxmPa9sy1cxqGdD29fnb54+HL3/3l1oyPcVmbeXW1ryxz3Xg53rw/zvdp6Fwt+Z69rUr53BT5Xwy2f2bOV1zac+nApSOXFi6tXNqwdMi5dMGlOY2B0xg4jYHTGDiNgdMYOI2B0xg5jZHTGDmNkdMYOY2R0xg5jZHTGDmNkdMonEbhNAqnUTiNwmkUTqNwGoXTKJxG4TQqp1E5jcppVE6jchqV06icRuU0KqdROY3GaTROo3EajdNonEbjNBqn0TiNxmk0TmOR52C7ANsl2K7AtgfbAWxHsC1gW8E26LKgXO7H9NXMqWmH7nl50d/H88tdxvp9+/tzLP8A","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"7Z3djtw2EoXfZa5zwZ8iWcyrLBaBkziBAcMOYmeBRZB3X03H4vQ0NWJapKrJ5blZjDcs9umvJVYdSiT/fPr5/Y9//PrDh0+/fP7y9P2//nz6+Pmnd18/fP60/OvPv757+vH3Dx8/fvj1h+v/+0k9/w+ZS/svv7379PzPL1/f/f716XsdDH339P7Tz89/Wlp6+OXDx/dP3wf113dZ42jDt7bRhdRUO73RloyO3xqTMfzSWruN1p61/dbas4mvWv/7uyey1dq10qmxumosoZ7qyYf1A2IskdeG1sbaxFjQztqtMlhf9/1Nu2uofQH/WvzzB/izPyCc/QF89gfErQ8w3rpvQcZ7Vbj6l+syqVFXn/B8bWetXfTr1e9iVIUryAWr19bBmtsryKmh1euh1Zuh1duh1dPQ6t3Q6v3Q6sPQ6nlo9UPnWj90rvVD51o/dK71vd+1jpN6lzms0PuVEyipZ5Wpl79ykufzSrmCeq2iX/vWV62N4ot6O7R6Glr9G1UarzeLCcrvqyeb1JMtXsk++qQ+hvw+fKPuCvFFD1/reY4JB2L4/hhttm8z1gkWW5sFbX8jdiYF+ZAFhSNBfCQoHgiy6kiQPhJkjgTZYlAwWRAdCdr8naxS62Vklcnl8ZGgeCCI1JEgfSTIHAmyR4K2f6fIlIJe37kbk2VmLWRi0FejbdgaP93a9tXcZtyehNMudeztVeutWVbLaYLYvoyazxN9+bczXq1XoQm839ib9Yr1xl43vdBzoFdBz4NeBb0Aevv03Fqq+aunYys9Br0KehH0jtN74wkM6P0zehr0KugZ0KugZ0HvFgkByS0SuIIMCUr9DAnq9wwJivIMCSrtWyQe5XOGBDVxhgSFboYE1WuGhIDkFgmq1wwJqtcMCarXDAmq1wwJqtdbJAHVa4Zkxrpk+U4rEqt1hmTGjBM4veQVrtZJ3dv4wm/G9HQPPx3c2vECK5voDjPmspb8Zkx8DfnxjO79Ln4c0kuuHPV+Y05vz7LNhkqe0e+dhloru76+qpXL8jojr7eErZNkvUzlZLBRBAjCRsUgCBvlhRzsOKNjfxjsGZ9kPQw2qmxB2DPOcj0MNgH2UdgXfjCFdfzg8wqNl++/NlYm5wfrVscPbqyOX73B0oqulorbAkF26+MgdmG/Yx9XEUFf/zCXFejL9xpWuR5WuRlWebkoJVVQ/rhNUoyiseW7seX7seWHseXz0PK17lz+7gZHRvc+8uzucGS0/Mhz1zY7Me0Tslipq7TFf6ct7ceWH8aW/8aOKz4k+ayv5V+C4oEgo44Ebe+4ov3qDqxmmwWZI0H2SBAdCXJHgvyRoHAkaPuK0KRSkC9tuTztTh5me9Mo0Ptn9LZ3zwK9f0hPg94+vZ39AIw1oFdBz4JeBT0CvQp6DvQq6HnQq6AXQO8WCQxEhgSu4BYJodTPkKB+z5CgKM+QoNLOkBCQ3CJBTZwhQaGbIUH1miFB9ZohQfV6i8Shes2QoHrNkKB6zZCges2QEJDcIpmxLtndRcb4GTNOu11kjJ8xPbXbxcP4GXNZS34zJr6W/GZ07w/ZRcb4Gf3eg3aRMQF5vSXs3aXEJqAIEISNikEQNsoLQdgE2HKwZ3yS9TDYqLIFYc84y/Uw2DM+12u3C4oJMIVV/Bg+r9B4dxcPw7Budfzgxur41RusB+0LwjSscjescj+s8jeK0riKsUZny7SZjwTFA0FRHQnSR4LMkSB7JKh8g0ZXuFg0p0lmY0P2q0ZX/xHL7Gn6iOhffUTeuu0GI9GPLT+MLZ/Hlh9Hlm+VGlu+7Vz+7t5AVvU+8uzuDWSV/MjTcHcaq3hs+XFo+brByGPtKkhbird1idX6/I8w539Eg+rK6fRbOMuF39lbve6a5K2Nhd/Za5NWMF/cw80gYRr8zstAtMr3r8yKgPztDGNV2oHLGnNTc9s3dm4qBLkjQf5IUDgSxEeC4oGgN/bpsS7t5WVDHqSPBJkjQfZIEB0JckeC/JGg7SvC2HST2qj3b1JKlRpdFWrLvNilfz65/3hu/2+sJ2/Xvz65f3Ny/666f+fXFOWYsv7rr5+leknFS8z6r79+PKXiKGT9O3Vy//rk/s3J/duT+6eT+3cn9+9P7r9+/A/pAUew/rr/jaZp+1JWpfpseWSztr16bLJWZ44H1R3H1O1Vr7rNi6Ew2nFmN70eVrkZVrkdVjkNq9wNq9x3q9yotfY1RsdcebfZs6i82/xZVN5tBi0pD/3m0JLyfnNoSXm/47mhF+VkcuX9ji02LfMzi0HMlfc7tpSU9zu2FJRzv2NLSfmjxhbNmcth05EW25EW6kiL60iL70hL6EgLd6Ql9qMlqo60dDTuxo7G3djRuBs7GndjR+Nu7GjcjbLj7puztHlbXp6urI2XYTBXzsMqj4MqJ6WGVX7vGH0JskeC6EiQOxLU8SxYuNrJLty6JlIdz4LtK9cdz4IVlHc8C1ZQ3u+TpJLyfp8klZTTsMr7fZJ0rZw3lHf8JKmgvOMnSQXlY+TQLeVj5NAN5WaMHLqlfIwcuqV8jBy6pXyMHLqlfIwcuqV82BxqOn56p1+eJGmfKbf9ji37z8DI9ju2lJT3O7aUlPc7tpSUd/xmQOEO7XhsIfPCXOfKO34zYF85dfxmQEF5x+N5QXnH43lBecfjuXsZWzznyjsezwvK+60VS8r7nW8pKe84hxaUd5xDC8o7zqH7yt2ob9eRG9YTuWE9kRvWEzVYLfko5R3n0ILyjnNoQfmob6hTv6tHi8pHfUOdOl5BWlI+bA7teAVpSfmwObTjFaQl5cPm0AarGfd2IaEGaw592ojLW33bf4OVgfv965P7Nyf3b0/un07u353cvz+5/3By/3xy/yffv3zy/csn37988v3LJ9+/fPL922DN2d4uVNRgHdl+/+Hk/vnk/uO5/TdYl7Xfvz65f3Ny//bk/unk/k++f+PJ9288+f6NJ9+/8dz71yl1cv8Ndhs/dSvbtJuz1/x6oc9FPnUu3/ld+a5z+WyT/Ghy+X5s+WFs+Ty2/Di0fN37HuAF+Xps+WZs+b1n3YL83rNuQf7YWVePnXX12FlXj511de9ZN73Euci3hdbR0dp3dJxtYOG6P6fj7S97kd97ji7I7z1HF+T3nqML8ltkiTOP2Nk39iZ0Ln/f2BvuXP5+ljBxaPlWjS1fjy3fjC3fji2fxpbf+8lwLetT23uO3i8xbO85uiC/9xxdkN97jt6XTw2yxOOOuXXU+Sm9rNMhwxuH3jiizumn89+35fd+OntKcot8U8oSZNdLLVLY+LJDn6jsqPez3Avyez/LvSC/97Pc9+W73s9yL8jXY8vvPUcX5Heeo0vye8/RBfm95+iC/LGzrhs767qxs64bO+v6sbOuHzvr+vK472lffjSr+nhtKEzYngRYv2m82jMvbvYb0i5YMfgrU//8DmoumVcqZF++pqWNpiZwWgYXYtxvrDmkaQu+evt1szGn9XVsX/V7Qe2Auh1qrdTKTSudw2bAloMdAVsMdlCA3RJ2mg/TyukMtgZsOdgGsOVgW8CWg02ALQcbdbYgbA/YcrADYMvBhoNsCjttDarV1dagK2w4SDnYDAcpCBsOUhA2HKQgbDhIQdgE2HKw4SDPqrM3YMNBypkahoMUhA0HKQgbDlIOdoSDFIQNBykIGw5SEDYcpCBsAmw52HCQgrDhIAVhw0EKwoapEYPtFUyNIGyYGkHYMDWCsGcs/axZ2xqbrXzxasaJUBteTghnlSGZMbPvI9Ez5t8CkhmzZAHJjLmsgGTGabQCEgKSWyRT1iX7SGacOCogmXF6p4AE1WuGBNXrLRKD6jVDguo1Q4LqNUOC6jVDQjMiSXugLnRKU3A6qdDXKFZ+U5a69/Azab5OGwoZvynr4ob8piyiG/KbsuJuyG/K8vwufv5lxzXO8oedskq7hx+lLbOXP7Prz05Z0jXkR+BXxQ/1X4HfMoOzSvbkM36o/+r4of6r44f6r44f6r8qfjTlXG5DflNO/DbkB/9Rxw/+o44fgV8VP/iPOn7wH3X84D/q+MF/1PGD/yjx82kJgefbLXG8g/+o4wf/UccP/qOOH/xHHT8Cvyp+qF8K/EglfmTCfuO9Q528R6ppiLqwtNIjLwnCRhJrCXv/jcUpj+F7GGxMzwnCxlyeIGxM/AnCRpUtCBtTinKwpzxi8mGw4SAFYcNBCsKGgxSETYB9FPaFH0xhHT/4vDp+sG51/ODG6vjBYFXxm/JQxfv4kU38XPbO0JTnJLbkB2dTxw9mpY4fgV8VP/iPOn7wH3X84D/q+MF/1PGD/6jiN+WRfC35wX/U8YP/qOMH/1Hit7vny5TH27XkB/9Rxw/1c4YEJXGGBFXuDZIw5bFrBSSoBUpjcaP1O0ERULdDrZVauWmlc9jIkYKwkX0FYSOvN4W9tzItzHlQ3KNgY15MEDYm0QRho8oWhE2ALQcbc3mCsPHigSBsOMimsF1aUqI8Z7DhIAVhw0HKwZ7zsMZHwYaDFIQNBykIGw5SEDYB9kl19gZsOEg5U4PjNiVhw0EKwoaDFIQNBykH28JBCsKGgxSEDQcpCBsOUhA2AbYcbDhIQdhwkIKwYWoEYcPUyMHGubeSsGFqBGHTFmwTmVbYitQ+bO3ZrJ8Q1BVCwxutXfQrFRfjS9dau63WIXFZ/oyvWl/ku77ls14vLsdG5/J95/TTys5t+aFz+Wxf5JtC60jpRokUNr4sd/5lA6U7hVUuPw4tf/vkx3Hk67Hlm7Hl27Hl956jC/I7z9El+b3n6IL83nN0Qf7YWdeNnXX92FnXj511/dhZ14+ddX153Ff8/zYNEXjt2IQYCzMLHNKPw7EwZ7G714QPQN0OdWFFflCALQdbA7YcbAPYLWHvThwHC9hysAmw5WA7wJaDjSpbEDbqbEHYDNhysCNgi8FmOMimsHdXdzIcpCBsOEhB2HCQgrAJsOVgw0EKwoaDFIQNB3lWnb0BGw5S0NTAQcrBjnCQgrDhIAVhw0EKwoaDFIRNgC0HGw5SEDYcpCBsOEhB2HCQgrDhIMVgs4KpEYQNUyMIG6ZGEDYBthzsGUs/a9a2xmYrX1jPOBFq0yVlLKsMyYyZvYBkxvxbQDJjliwgmTGXFZDMOI1WQDLjZFcByZR1yT6SGSeOCkhmnN7ZR2JQvWZIUL1mSFC9ZkhQvWZICEhukaB6zZBMWb3eszesTir09Ta5K78pS917+Jk0X6cNhYzflHVxQ35TFtHt+NkpK+6G/KYsz+/i55Nkw1n+sFNWaXftzZ62zF7+zK+/KUu6hvxQ/9XxQ/1X4Od1yh+efMYP9V8dP9R/VfwI9V8dP9R/dfymnMttyG/Kid+G/Aj8qvjBf9Txg/+o4wf/UccP/qOOH/xHFT8H/1HHD/6jxM+nJQSeOeMH/1HHD/6jjh+BXxU/+I86fvAfVfw86pcCv3vOlt471Ik9Uk1D1IWllR55SRA2klhL2PtvLE55DN/DYGN6ThA25vIEYWPiTw72lEdMPgw2phQFYWP+URA2HKQgbAJsOdhwkIKw4SAPw77wgyms4wefV8cP1q2K35THNbbkB4NVxw+eqcSPbOLnsneGpjwnsSU/Ar8qfjArdfzgP+r4wX/U8YP/qOMH/1HFb8rD/lryg/+o4wf/UccP/qOOH4FfFT/4jxK/3T1fpjzeriU/+I86fqifb5BEhZI4Q4IqN0OCwjVDglqgNBY3Wr8TFcqGhqi1UmptrHQOGzlSDvach649CjbyelPYeyvT4pwHxT0KNubFBGETYMvBRpUtCBt1tiBszOUJwsaLB4Kw4SCbwnZpSYnyt9vIxDkPPnwUbDhIQdhwkIKw4SAFYRNgy8GGgxSEDQd5Vp29ARsOUs7U4LhNSdhwkHKwcZCnJGw4SEHYcJCCsOEgBWETYMvBhoMUhA0HKQgbDlIQNhykHGycTisJG6ZGEDZMjSBsmBpB2Nuln09LQ4z3ah+29mzWTwjqCqHhjdYu+pWKi/Gla63dVuuQuCx/xletL/JD3/JZrxeXY6Nz+dw5/bSyc1t+7Fw+2xf5ptB6GXfWS225rPIv+8bZl/182UDpTmGVy9djyzdjy7djy6ex5bux5feeowvyO8/RJfm95+iC/N5z9L58P3bW9WNnXT921vVjZ10/dtb1A2fdv5Z//ufd7x/e/fjx/Zcl6Pm//vHpp68fPn/69s+v//3t7/+yNP4f","brillig_names":["register_dkim_bulk"],"assert_messages":{"326":"Array index out of bounds","573":"Array index out of bounds","762":"attempt to add with overflow","515":"Array index out of bounds","488":"Array index out of bounds","549":"Array index out of bounds","290":"Array index out of bounds","741":"attempt to add with overflow","220":"DKIM key has already been registered","930":"Array index out of bounds","854":"attempt to add with overflow","531":"Array index out of bounds","720":"Array index out of bounds","333":"Array index out of bounds","202":"Storage slot 0 not allowed. Storage slots must start from 1.","589":"Array index out of bounds","775":"Array index out of bounds","129":"Array index out of bounds","446":"Array index out of bounds","638":"Array index out of bounds","312":"SharedImmutable already initialized","964":"attempt to add with overflow","434":"attempt to add with overflow","751":"Array index out of bounds","620":"Array index out of bounds","943":"attempt to add with overflow","224":"Array index out of bounds","602":"attempt to add with overflow","791":"Array index out of bounds","922":"Array index out of bounds","465":"attempt to add with overflow","78":"Sender is not the registry contract","523":"attempt to add with overflow","712":"Array index out of bounds","453":"Array index out of bounds","581":"Array index out of bounds","840":"Array index out of bounds","700":"attempt to add with overflow","441":"attempt to add with overflow","822":"Array index out of bounds","499":"attempt to add with overflow","48":"Not initialized","560":"attempt to add with overflow","953":"Array index out of bounds","804":"attempt to add with overflow","481":"Array index out of bounds","286":"Storage slot 0 not allowed. Storage slots must start from 1.","539":"attempt to add with overflow","411":"Array index out of bounds","405":"attempt to add with overflow","914":"Array index out of bounds","728":"Array index out of bounds","783":"Array index out of bounds","140":"Array index out of bounds","902":"attempt to add with overflow","652":"attempt to add with overflow"}},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"3505":"Array index out of bounds","299":"Array index out of bounds","1512":"attempt to add with overflow","4261":"Array index out of bounds","1378":"Array index out of bounds","1890":"Array index out of bounds","1110":"attempt to add with overflow","1811":"Array index out of bounds","3024":"Array index out of bounds","4560":"attempt to add with overflow","3591":"attempt to add with overflow","3780":"Array index out of bounds","3457":"attempt to add with overflow","3835":"Array index out of bounds","306":"Array index out of bounds","1519":"Array index out of bounds","2220":"Array index out of bounds","3378":"Array index out of bounds","2086":"attempt to add with overflow","2598":"attempt to add with overflow","1440":"attempt to add with overflow","2787":"Array index out of bounds","3110":"attempt to add with overflow","2519":"attempt to add with overflow","2708":"Array index out of bounds","3567":"Array index out of bounds","4055":"attempt to add with overflow","4457":"Array index out of bounds","2818":"Array index out of bounds","2495":"attempt to add with overflow","4220":"Array index out of bounds","3385":"Array index out of bounds","1392":"attempt to add with overflow","4464":"Array index out of bounds","2282":"Storage slot 0 not allowed. Storage slots must start from 1.","1124":"Not initialized","1313":"Array index out of bounds","722":"Sender is not the registry contract","1289":"Array index out of bounds","4550":"attempt to add with overflow","2100":"Array index out of bounds","3124":"Array index out of bounds","3045":"attempt to add with overflow","3612":"attempt to add with overflow","3856":"attempt to add with overflow","973":"Storage slot 0 not allowed. Storage slots must start from 1.","3533":"Array index out of bounds","2430":"attempt to add with overflow","2107":"Array index out of bounds","3131":"Array index out of bounds","3966":"Array index out of bounds","4076":"Array index out of bounds","169":"attempt to add with overflow","2918":"Array index out of bounds","2461":"attempt to add with overflow","2004":"Array index out of bounds","1681":"Array index out of bounds","3540":"Array index out of bounds","523":"Initialization hash does not match","3272":"DKIM key has already been registered","2437":"attempt to add with overflow","2949":"Array index out of bounds","4485":"attempt to add with overflow","1468":"Array index out of bounds","1657":"Array index out of bounds","4564":"Array index out of bounds","2980":"attempt to add with overflow","3035":"attempt to add with overflow","4571":"Array index out of bounds","1554":"Array index out of bounds","317":"attempt to add with overflow","1719":"Array index out of bounds","3633":"Array index out of bounds","2286":"Array index out of bounds","1128":"Function check_dkim_key_hash_public can only be called statically","1561":"Array index out of bounds","2585":"Array index out of bounds","3152":"attempt to add with overflow","4420":"attempt to add with overflow","4097":"attempt to add with overflow","2939":"attempt to add with overflow","2616":"Array index out of bounds","4475":"attempt to add with overflow","4018":"attempt to add with overflow","1647":"attempt to add with overflow","3049":"Array index out of bounds","1623":"Array index out of bounds","1300":"attempt to add with overflow","2836":"Array index out of bounds","4372":"Array index out of bounds","118":"attempt to add with overflow","3056":"Array index out of bounds","4592":"attempt to add with overflow","795":"attempt to add with overflow","1819":"Array index out of bounds","4245":"Array index out of bounds","1874":"Array index out of bounds","2898":"attempt to add with overflow","3087":"attempt to add with overflow","3276":"Array index out of bounds","2118":"attempt to add with overflow","771":"attempt to add with overflow","3142":"attempt to add with overflow","3654":"attempt to add with overflow","1850":"Array index out of bounds","3575":"attempt to add with overflow","3764":"Array index out of bounds","3843":"Array index out of bounds","4489":"Array index out of bounds","2850":"attempt to add with overflow","2527":"Array index out of bounds","2716":"Array index out of bounds","3551":"attempt to add with overflow","3874":"Array index out of bounds","2771":"Array index out of bounds","2960":"attempt to add with overflow","2125":"Array index out of bounds","3338":"Storage slot 0 not allowed. Storage slots must start from 1.","4496":"Array index out of bounds","1668":"attempt to add with overflow","2747":"Array index out of bounds","1912":"Array index out of bounds","1589":"Array index out of bounds","4527":"attempt to add with overflow","4204":"Array index out of bounds","809":"Not initialized","1321":"Array index out of bounds","1187":"Storage slot 0 not allowed. Storage slots must start from 1.","4582":"attempt to add with overflow","3156":"Array index out of bounds","1596":"Array index out of bounds","1840":"attempt to add with overflow","2407":"Array index out of bounds","3486":"attempt to add with overflow","3163":"Array index out of bounds","1737":"Array index out of bounds","3974":"Array index out of bounds","3517":"attempt to add with overflow","4084":"Array index out of bounds","2737":"attempt to add with overflow","2926":"Array index out of bounds","4596":"Array index out of bounds","3493":"attempt to add with overflow","2012":"Array index out of bounds","1689":"Array index out of bounds","2634":"Array index out of bounds","1799":"attempt to add with overflow","1342":"attempt to add with overflow","2043":"Array index out of bounds","3067":"attempt to add with overflow","4280":"Array index out of bounds","4603":"Array index out of bounds","1452":"Array index out of bounds","1751":"attempt to add with overflow","3342":"Array index out of bounds","2696":"attempt to add with overflow","1861":"attempt to add with overflow","703":"Not initialized","3641":"Array index out of bounds","3995":"attempt to add with overflow","2136":"Array index out of bounds","2648":"attempt to add with overflow","1490":"attempt to add with overflow","3672":"Array index out of bounds","4507":"attempt to add with overflow","2569":"Array index out of bounds","2758":"attempt to add with overflow","4026":"Array index out of bounds","3892":"Array index out of bounds","2033":"attempt to add with overflow","1710":"attempt to add with overflow","2545":"Array index out of bounds","1631":"attempt to add with overflow","4380":"Array index out of bounds","662":"attempt to add with overflow","2198":"Storage slot 0 not allowed. Storage slots must start from 1.","2064":"attempt to add with overflow","4112":"Array index out of bounds","1930":"Array index out of bounds","1607":"attempt to add with overflow","2308":"SharedImmutable already initialized","2442":"Array index out of bounds","3954":"attempt to add with overflow","3174":"attempt to add with overflow","1827":"Array index out of bounds","992":"SharedImmutable already initialized","4253":"Array index out of bounds","1882":"Array index out of bounds","2449":"Array index out of bounds","1992":"attempt to add with overflow","3906":"attempt to add with overflow","3583":"Array index out of bounds","3772":"Array index out of bounds","3827":"Array index out of bounds","2992":"Array index out of bounds","3181":"Array index out of bounds","2535":"attempt to add with overflow","2724":"Array index out of bounds","2401":"attempt to add with overflow","2779":"Array index out of bounds","1944":"attempt to add with overflow","3803":"Array index out of bounds","2322":"Array index out of bounds","2511":"Array index out of bounds","2054":"attempt to add with overflow","1542":"attempt to add with overflow","896":"Storage slot 0 not allowed. Storage slots must start from 1.","4614":"attempt to add with overflow","4212":"Array index out of bounds","1329":"Array index out of bounds","4401":"attempt to add with overflow","549":"SharedImmutable already initialized","1573":"attempt to add with overflow","2329":"Array index out of bounds","1494":"Array index out of bounds","1360":"Array index out of bounds","1549":"attempt to add with overflow","4298":"Array index out of bounds","3463":"Array index out of bounds","4432":"Array index out of bounds","4274":"attempt to add with overflow","1903":"attempt to add with overflow","611":"attempt to add with overflow","1501":"Array index out of bounds","2068":"Array index out of bounds","3793":"attempt to add with overflow","3982":"Array index out of bounds","4360":"attempt to add with overflow","3013":"attempt to add with overflow","2556":"attempt to add with overflow","2800":"attempt to add with overflow","2477":"Array index out of bounds","3690":"Array index out of bounds","295":"attempt to add with overflow","2020":"Array index out of bounds","1697":"Array index out of bounds","2910":"Array index out of bounds","2075":"Array index out of bounds","3099":"Array index out of bounds","4068":"Array index out of bounds","4312":"attempt to add with overflow","4044":"Array index out of bounds","4233":"attempt to add with overflow","1460":"Array index out of bounds","2484":"Array index out of bounds","2216":"DKIM key has already been registered","3752":"attempt to add with overflow","4130":"Array index out of bounds","4453":"attempt to add with overflow","3003":"attempt to add with overflow","3192":"Array index out of bounds","3704":"attempt to add with overflow","4539":"Array index out of bounds","3625":"Array index out of bounds","3814":"attempt to add with overflow","4192":"attempt to add with overflow","529":"Initializer address is not the contract deployer","2577":"Array index out of bounds","3601":"Array index out of bounds","261":"attempt to add with overflow","4034":"attempt to add with overflow","828":"Sender is not the registry contract","3254":"Storage slot 0 not allowed. Storage slots must start from 1.","2096":"attempt to add with overflow","3120":"attempt to add with overflow","3498":"Array index out of bounds","1639":"Array index out of bounds","3364":"SharedImmutable already initialized","4010":"Array index out of bounds","4144":"attempt to add with overflow","4388":"Array index out of bounds","4443":"attempt to add with overflow","914":"DKIM key has already been registered","1481":"attempt to add with overflow","3017":"Array index out of bounds"}},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["constructor"],"assert_messages":{"1335":"attempt to add with overflow","1652":"Array index out of bounds","1073":"attempt to add with overflow","622":"Array index out of bounds","1262":"Array index out of bounds","1640":"attempt to add with overflow","1500":"Array index out of bounds","665":"Array index out of bounds","921":"Array index out of bounds","970":"Array index out of bounds","1348":"Array index out of bounds","1275":"attempt to add with overflow","952":"Array index out of bounds","1525":"Array index out of bounds","1592":"attempt to add with overflow","556":"Array index out of bounds","1324":"Array index out of bounds","934":"attempt to add with overflow","1123":"Array index out of bounds","1513":"attempt to add with overflow","1306":"Array index out of bounds","855":"attempt to add with overflow","1044":"Array index out of bounds","1172":"Array index out of bounds","1032":"attempt to add with overflow","1154":"Array index out of bounds","831":"attempt to add with overflow","892":"attempt to add with overflow","1410":"Array index out of bounds","1660":"Array index out of bounds","1136":"attempt to add with overflow","813":"Array index out of bounds","106":"attempt to add with overflow","618":"Storage slot 0 not allowed. Storage slots must start from 1.","1392":"Array index out of bounds","1246":"Array index out of bounds","472":"Array index out of bounds","984":"attempt to add with overflow","1234":"attempt to add with overflow","1356":"Array index out of bounds","905":"Array index out of bounds","1094":"attempt to add with overflow","1484":"Array index out of bounds","1472":"attempt to add with overflow","1533":"Array index out of bounds","375":"Initializer address is not the contract deployer","820":"Array index out of bounds","369":"Initialization hash does not match","881":"Array index out of bounds","552":"DKIM key has already been registered","162":"attempt to add with overflow","863":"Array index out of bounds","1052":"Array index out of bounds","1186":"attempt to add with overflow","534":"Storage slot 0 not allowed. Storage slots must start from 1.","1107":"Array index out of bounds","144":"Array index out of bounds","461":"Array index out of bounds","778":"Array index out of bounds","1290":"Array index out of bounds","644":"SharedImmutable already initialized","1314":"attempt to add with overflow","766":"attempt to add with overflow","1083":"Array index out of bounds","1424":"attempt to add with overflow","1668":"Array index out of bounds","1254":"Array index out of bounds","797":"attempt to add with overflow","151":"Array index out of bounds","1364":"Array index out of bounds","785":"Array index out of bounds","913":"Array index out of bounds","1492":"Array index out of bounds","1681":"attempt to add with overflow","773":"attempt to add with overflow","1541":"Array index out of bounds","1578":"Array index out of bounds","743":"Array index out of bounds","871":"attempt to add with overflow","737":"attempt to add with overflow","1060":"Array index out of bounds","1115":"Array index out of bounds","1377":"attempt to add with overflow","1560":"Array index out of bounds","402":"SharedImmutable already initialized","658":"Array index out of bounds","140":"attempt to add with overflow","847":"Array index out of bounds","1298":"attempt to add with overflow","1554":"attempt to add with overflow"}},{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim"],"assert_messages":{"637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","144":"Storage slot 0 not allowed. Storage slots must start from 1.","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","45":"Sender is not the registry contract","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","329":"Array index out of bounds","457":"attempt to add with overflow","713":"attempt to add with overflow"}},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseDkimRegistry"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::DKIMKeyRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseDkimRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_bulk_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::check_dkim_key_hash_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseDkimRegistry::register_dkim_abi"}]}},"file_map":{"110":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"115":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"127":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"128":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"134":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"145":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"151":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"160":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"170":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"171":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"188":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"190":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"191":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"200":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"208":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"211":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"213":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"233":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"238":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"264":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"308":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"70":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_dkim_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\nmod receipt_verifier_id {\n    pub global AWS: Field = 1;\n    pub global LINODE: Field = 2;\n    pub global HEROKU: Field = 3;\n    pub global FRONTIER_AIRLINES: Field = 4;\n    pub global UNITED_AIRLINES: Field = 5;\n    pub global AMERICAN_AIRLINES: Field = 6;\n    pub global DELTA_AIRLINES: Field = 7;\n    pub global UBER: Field = 8;\n    pub global LYFT: Field = 9;\n}\n\n#[aztec]\ncontract ZImburseDkimRegistry {\n    use std::meta::derive;\n    use dep::aztec::prelude::{AztecAddress, SharedImmutable, Map};\n    use dep::aztec::macros::{storage::storage, events::event, functions::{private, public, view, initializer}};\n    use dep::aztec::unencrypted_logs::unencrypted_event_emission::emit;\n    use dep::aztec::protocol_types::traits::Serialize;\n    use crate::BULK_KEY_LENGTH;\n\n    #[storage]\n    struct Storage<Context> {\n        admin: SharedImmutable<AztecAddress, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n    }\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    /**\n     * Initialize the Z-Imburse DKIM registry contract\n     *\n     * @param registry - the address of the Z-Imburse registry contract\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        storage.admin.initialize(context.msg_sender());\n        // bulk insert up to 8 dkim key hashes at initialization (max unencrypted logs per tx)\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(&mut context, DKIMKeyRegistered {\n                    dkim_key_hash: dkim_key_hashes[i],\n                    verifier_id: verifier_ids[i]\n                });\n            }\n        }\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(verifier_ids: [Field; BULK_KEY_LENGTH], dkim_key_hashes: [Field; BULK_KEY_LENGTH]) {\n        // check that the sender is the admin\n        let admin = storage.admin.read_public();\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(&mut context, DKIMKeyRegistered {\n                    dkim_key_hash: dkim_key_hashes[i],\n                    verifier_id: verifier_ids[i]\n                });\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.admin.read_public();\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(&mut context, DKIMKeyRegistered { dkim_key_hash, verifier_id });\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n}\n\n"},"99":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"}}}