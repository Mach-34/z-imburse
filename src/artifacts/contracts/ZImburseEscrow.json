{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseEscrow","functions":[{"name":"redeem_linode_entitlement","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"body","type":{"kind":"array","length":832,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"body_hash_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"body_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"header","type":{"kind":"array","length":640,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"header_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"pubkey","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"pubkey_redc","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"from_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"subject_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"amount_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"amount_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"date_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"receipt_id_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"claim_secret_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","decompose_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","get_public_data_witness","lt_32_hint","lte_16_hint","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","split_60_bits","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","__mul_impl","__compute_quadratic_expression_with_borrow_flags","build_msg_block_iter","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":14,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"dkimRegistry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrowRegistry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"usdc_token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"title","type":{"kind":"string","length":60},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"704":"attempt to add with overflow","893":"Array index out of bounds","698":"attempt to add with overflow","960":"attempt to add with overflow","881":"attempt to add with overflow","555":"attempt to add with overflow","732":"Array index out of bounds","860":"Array index out of bounds","1049":"attempt to add with overflow","592":"attempt to add with overflow","909":"Array index out of bounds","202":"Array index out of bounds","778":"Array index out of bounds","1028":"Array index out of bounds","571":"attempt to add with overflow","635":"attempt to add with overflow","760":"Array index out of bounds","946":"Array index out of bounds","745":"attempt to add with overflow","678":"Array index out of bounds","547":"Array index out of bounds","928":"Array index out of bounds","157":"attempt to add with overflow","666":"attempt to add with overflow","922":"attempt to add with overflow","724":"Array index out of bounds","852":"Array index out of bounds","651":"Array index out of bounds","840":"attempt to add with overflow","581":"Array index out of bounds","642":"attempt to subtract with overflow","191":"attempt to add with overflow","901":"Array index out of bounds","1020":"Array index out of bounds","563":"Array index out of bounds","496":"SharedImmutable already initialized","624":"Array index out of bounds","426":"Initializer address is not the contract deployer","685":"Array index out of bounds","420":"Initialization hash does not match","868":"Array index out of bounds","1008":"attempt to add with overflow","792":"attempt to add with overflow","213":"attempt to add with overflow","716":"Array index out of bounds","1036":"Array index out of bounds","646":"attempt to subtract with overflow","195":"Array index out of bounds"}},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"1536":"Array index out of bounds","1341":"Array index out of bounds","1469":"Array index out of bounds","1079":"attempt to add with overflow","1335":"attempt to add with overflow","305":"attempt to add with overflow","994":"Array index out of bounds","287":"Array index out of bounds","1055":"attempt to subtract with overflow","1433":"Array index out of bounds","1500":"attempt to add with overflow","976":"Array index out of bounds","1037":"Array index out of bounds","1098":"Array index out of bounds","1421":"attempt to add with overflow","1543":"Array index out of bounds","1281":"Array index out of bounds","1586":"attempt to add with overflow","1129":"Array index out of bounds","934":"attempt to add with overflow","294":"Array index out of bounds","1568":"Array index out of bounds","1117":"attempt to add with overflow","1306":"Array index out of bounds","1111":"attempt to add with overflow","1373":"attempt to add with overflow","1294":"attempt to add with overflow","1532":"attempt to add with overflow","819":"Array index out of bounds","624":"Function get_title can only be called statically","807":"attempt to add with overflow","1191":"Array index out of bounds","1441":"Array index out of bounds","1575":"Array index out of bounds","155":"attempt to add with overflow","283":"attempt to add with overflow","1173":"Array index out of bounds","923":"Array index out of bounds","783":"Array index out of bounds","984":"attempt to add with overflow","1490":"attempt to add with overflow","838":"attempt to add with overflow","131":"attempt to add with overflow","576":"SharedImmutable already initialized","960":"Array index out of bounds","826":"Array index out of bounds","887":"Array index out of bounds","1600":"Array index out of bounds","1137":"Array index out of bounds","814":"attempt to add with overflow","107":"attempt to add with overflow","875":"attempt to add with overflow","1064":"Array index out of bounds","1253":"attempt to add with overflow","1265":"Array index out of bounds","1314":"Array index out of bounds","1564":"attempt to add with overflow","1618":"attempt to add with overflow","83":"attempt to add with overflow","1479":"Array index out of bounds","1607":"Array index out of bounds","894":"Array index out of bounds","1205":"attempt to add with overflow","1522":"attempt to add with overflow","620":"Not initialized","1449":"Array index out of bounds","1059":"attempt to subtract with overflow","1504":"Array index out of bounds","913":"attempt to add with overflow","907":"attempt to add with overflow","968":"attempt to add with overflow","517":"Initializer address is not the contract deployer","511":"Initialization hash does not match","1596":"attempt to add with overflow","249":"attempt to add with overflow","1145":"Array index out of bounds","1273":"Array index out of bounds","1462":"attempt to add with overflow","1005":"attempt to add with overflow","1322":"Array index out of bounds","1511":"Array index out of bounds","1048":"attempt to add with overflow","853":"Array index out of bounds","1554":"attempt to add with overflow","1359":"Array index out of bounds","1158":"attempt to add with overflow","1091":"Array index out of bounds"}},{"name":"get_admin_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"get_title","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIfwAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAA4AAAQDAgQlAAQIQwAFJAAEPAYrAAAECAMrAAAFCAQrAAAGCAUiAAAAxzkAAAAIQwAAADweAAAABB4AAAAFMAAAAAAEAAAABQAAAAYkAAIBBQoAAgYFBCEAABUABDoBAAAeAAsABSQABwEGCgAHBQYEIQAAGgAEOgEAACoAAAUkAAQHBAAABAAEACQBBAEFAAAEBQIEKgAEByQABwAIKgIIBwAABAcCByoCCAcAAAQHAgcqAggHAAAEBwIHKgIIBwAABAcCByoCCAcAAAQHAgcqAggHKgEFBAAABAQCBCoCBAUqAAAEAAAEAAIAKgIFBCQABAEIJAAEBgUkAAQAByoABwMgADcMAAQDBQkhAACxAAkgADoqAQQFJAAEBAQAAAQFAgkAAAQJBAoqAQoDJAAEBQQAAAQFAgoAAAQKBAsqAQsJKgAABSQABD0EAAAEAAQAJAEEAQUAAAQFAgQkAAIACiQABDwLAAAECwQLKgAEDAwABAwLDRYADQ0hAABSAA0qAgoMAAAEDAIMIABMKgEFBAAABAQCBCoCBAUqAAAEAAAEAAIAKgIFBCoAAAUAAAQAAgAqAgcFJAAEHwokAAQ8CyUABAEAAAwkAAQCDSoABwYgAGEMAAQGDQ4hAABmAA4gAGQqAQQDIyoAAA8kAAQDEAAABAAQACQBBAEPAAAEDwIQKgAQESoCAxEAAAQRAhEqAgkRJAAEAhEMAAQGERIhAABzABI6AQAAAAAEDwISAAAEEgYRKgERECoAAA8kAAQgEgAABAASACQBBAEPAAAEDwISRQIAAAAQAAAAEgAAAAwAAAAfACQABB8RKwAAEggDKwAAEQgEIgAAANIqAAcOIACCDAAEDgoQIQAAiwAQIACFAAAEBggODgAEBg4PIQAAiQAPOgEAACoADgYgAGEqAQUQDAAEEAsRIQAAjwARIACrKgEEECoBBREkAAQfEwwABA4TFCEAAJUAFDoBAAAAAAQPAhQAAAQUDhMqARMSJAAEPBMMAAQRExUhAACcABU6AQAAKwAAEAgDJQAEAD0IBCIAAADlKwAIBQAUAAAEFAIVAAAEFRETKgISEyoCFAQqAQUUAAAEFAgRDgAEFBEQIQAAqQAQOgEAACoCEQUgAKsAAAQOCBAOAAQOEBEhAACvABE6AQAAKgAQDiAAgioBBAkcAAcDCgAABwYKCywAAAAACwAAAAokAAQGDAwABAMMDSEAALkADToBAAArAAAJCAMlAAQABwgEIgAAAOUrAAgFAAsAAAQLAg0AAAQNAwwqAgoMAAAEAwgJDgAEAwkKIQAAxAAKOgEAACoCCwQqAAkDIAA3JQAEAAAIBw0ABAgHCAUICBcACAgICCEAANEICAEABAgDCAcICSsBCAkIBgEABAgECAcICSsCCAYICQEABAgHAAIIByAAyCMlAAQAAggGBwAECAQIBggFKwAIBAgIJQAEAAAICQ0ABAgJCAUIChcACAoICiEAAOQICgMABAgIAAIICAEABAgDCAkICysBCAsIBgEABAgDCAgICysBCAsIBwEABAgDCAkICysCCAcICwEABAgDCAgICysCCAYICwEABAgJAAIICSAA1iMrAQgDCAYLAAQIBgACCAchAADpCAcgAOsrAAgDCAUgAPkrAAAACAUBAAQAAAgEAAAlAAQAAAgJDQAECAkIBAgKFwAICggKIQAA9wgKAQAECAMICQgLKwEICwgIAQAECAUICQgLKwIICAgLAQAECAkAAggJIADuJQEEAAEIBSAA+SMrABjKGMo=","debug_symbols":"5Z3dbtswDIXfxde9EClKIvsqwzCkvwgQpEWbDhiKvvvsLlbcOoixdvUO4ZsibmjrkyydY8um8txcXV883f5Yb2/uHpvzb8/N5u5ytVvfbdut55ez5uJhvdmsb38M/92E7g/Ja/zj/WrbbT7uVg+75pwKy1lzvb3qPkZpj3Cz3lw354VezkbBFss+1lKpoZTDkVhhsn2wMOshmuVIdFaK++isbG+iv581lD7NToFqcBgEz0GfP9/ypS/AbKrl21L7YGKzCXal1GMoDY+9Zy//kL1t+LfwXQH61QXYFxfA4asLoE8XkJL1JaQcpvpEUU776KKi7/sE81/ydPvED+wjH9gnfWCfo+MzxdyrXYqDgXFcXdpxXwsIgzPYnc3xoS336pLMwsTZSCVSH10ij85GcU2vrunNM30MrunJNT27po+u6cU1fXJN79pro2uvja69Nrr2WnHtteLaa8W114prrxXXXiuuvVZce6249lpx7bXi2msT+qhNWunTaLY4ofecIpVew4h+/p5T569zCGmCvpsQ748dw2Fms3AHn4NnePIMz57hIzZ8pFDhyd7Di2f45Bk+e4afvDoTSqfhWbgPZpE8LODY41uuNIGpBsdorziKhWNQOCVg4RAWDmPhRCwcwcJJWDgZCwdLlQuWKhcsVVYsVVYsVVYsVVYsVVYsVVYsVVYsVVYsVdbZVTkd3m7LYxyDwrGAhTN739EDjsp7HApzNw9r7ctsPOaZ2yaI+6lnonikfSIYj4DxJDCeDMZTwHgUjMeweCiA8RAYD5g+E5g+E5g+E5g+E5g+E5g+0//U50FwxzOOlhj6q0kZPkPgfOzxBHPNUWGhYfBrTW0pNeWwmJrSYmrKi6lpXExNZTE1TYupaV5MTctSahpn99P6ilz7MY+u2WLEmkOLAsaTwHgyGI9h9WeZfXyZ1vYZJLNXngjGI2A8s4+vdOjPScc8GYyngPEoGI9h8aQAxkNgPHPfe3Ksb6WylDFPBOMRMJ4ExpPBeAoYj4LxGBZPDmA8BMYDps8ZTJ8zmD5nsPvTDHZ/OntuyBSPgvEYFs/s+RhTPAzGAzZfN3tKxhQPeqb+yXxrKuAJ10o12V0Hb/NWfPRcfcun8BV9YZz6PmyLzxPRJrHvaiblSGXR19E5mdtPir6QzgQ++ko6E/jiGx99VY4JfPTFdCbw0T16At/1oiik6B59Gt/QPXoC37frmm/XNd+ua75d13y7rjl23Zd28+fqYb262Fzvf53j5ml7Ofixjt2v+z/ftMG/AQ==","brillig_names":["get_title"],"assert_messages":{"20":"Not initialized","148":"Array index out of bounds","174":"attempt to add with overflow","155":"Array index out of bounds","136":"attempt to add with overflow","168":"attempt to add with overflow","114":"Array index out of bounds","184":"Array index out of bounds","25":"Function get_title can only be called statically","195":"attempt to add with overflow"}},{"name":"give_entitlement","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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tkGFt01U7LbhaesuWaTSUAlU7LaJit02UbHbJiq8baLC2wYqq94l26DC2yYqdttExW6bqDRUAhW7baLiM8CCSVj1LtkGFd42UeFtv1O5uksWnrZXd8kiFbttomK3TVQaKoGK3TZR4W0TFd42UeFtExXeNlBxlyxSsdsmKnbbRMVum6g0JuG7SVj1LtkGFd42UeFtExW7bXra2m0DFXfJIhW7baJit01U7LaJSkMlUOFtExXeNlHhbRMVu22iYrcNVNwli1TstomKzwALJmHVu2QbVBoqgQpvm6jYbdPT1m6bqNhtExW7baDiLlmkYrdNVHjbRIW3TVQaKoEKb5uo2G0TFbttomK3TVTstoHKqnfJXpuEVe+SbVDhbRMV3jZRaZ624Wlrt01U7LaJit02UbHbJip220Bl1btkG1R420SFt01UeNtEpaESqNhtExW7baJit01UfAZYMAmr3iV7TWXVu2QbVHjbRMVuG5627pJFKg2VQMVum6jYbRMVu22iwtsmKrxtoLLqXbINKrxtomK3TVTstolKQyVQsdsmKj4DLJiEVe+SbVDhbRMV3jZQcZcsPW3dJYtU7LaJit02UWmoBCp220SFt01UeNtEhbdNVHjb71Ru7pJFKnbbRMVum6jYbROVxiRcv1PxGWCJCm+bqPC2iYrdNj1t7baBirtkkYrdNlGx2yYqdttEpaESqPC2iQpvm6jwtomK3TZRsdsGKu6SRSp220TFZ4AFk7DqXbINKg2VQIW3TVTstulpa7dNVOy2iYrdNlBxlyxSsdsmKrxtosLbJioNlUCFt01U7LaJit02UbHbJip220Bl1btkr03CqnfJNqjwtokKb5uoNE/b8LS12yYqdttExW6bqNhtExW7baCy6l2yDSq8baLC2yYqvG2i0lAJVOy2iYrdNlGx2yYqPgMsmIRV75K9prLqXbINKrxtomK3DU9bd8kilYZKoGK3TVTstomK3TZR4W0TFd42UFn1LtkGFd42UbHbJip220SloRKo2G0TFZ8BFkzCqnfJNqjwtokKbxuouEuWnrbukkUqdttExW6bqDRUAhW7baLC2yYqvG2iwtsmKrxtoOIuWaRit01U7LaJit02UWlMwneTsOpdsg0qvG2iwtsmKnbb9LS1236ncneXLFKx2yYqdttExW6bqDRUAhXeNlHhbRMV3jZRsdsmKnbb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3Wx4gbrZ8AJ1s2myKZsNL1A3G16g7DuCGy9QNxteoG42vEDZbO68QNld4M4L1M2GF6ibDS9QN5smm7LZ8AJ1s+EF6mbDC9TNhheomw0vUDabBy9QNxteoG42vEDdbHiButk02VR9R/DgBepmwwvUzYYXqJsNL1B3F+AFqmZzPPACdbPhBepmwwvUzYYXqJtNk03ZbHiButnwAnWz4QXqZsML1M2GFyibzZEXqJsNL1A3G16g6juCX9+MbMpm02RTNhteoG42vEDdXYAXqJsNL1A3G16gbDYnXqBuNrxA3Wx4gbrZ8AJ1s2myKZsNL1A3G16gbja8QN1seIG62fACZbM58wJl3xGceYG62fACdbPhBepm02RTdhfgBepmwwvUzYYXqJsNL1A3G16gbDaNF6ibDS9QNxteoG42vEDdbJpsymbDC9TNhheomw0vUDcbXqDsO4LGC5TN5sIL1M2GF6ibDS9Qdhe48AJ1s2myKZsNL1A3G16gbja8QN1seIG62fACZbO58gJ1s+EF6mbDC9TNhheom02TTdlseIG62fACZd8RXHmButnwAnWz4QXKZnPjBcruAjdeoG42vEDdbHiButk02ZTNhheomw0vUDcbXqBuNrxA3Wx4gbLZ3HmButnwAnWz4QXqZsML1M2myabqO4I7L1A3G16gbja8QN1seIG6uwAvUDabBy9QNxteoG42vEDdbHiButk02ZTNhheomw0vUDcbXqBuNrxA3Wx4garZnA68QN1seIG62fACVd8RnA68QN1smmzKZsML1M2GF6i7C/ACdbPhBepmwwuUzebIC9TNhheomw0vUDcbXqBuNk02ZbPhBepmwwvUzYYXqJsNL1A3G16gbDYnXqDsO4ITL1A3G16gbja8QN1smmzK7gK8QN1seIG62fACdbPhBepmwwuUzebMC9TNhheomw0vUDcbXqBuNk02ZbPhBepmwwvUzYYXqJsNL1D2HcGZFyibTeMF6mbDC9TNhhcouws0XqBuNk02ZbPhBepmwwvUzYYXqJsNL1A3G16gbDYXXqBuNrxA3Wx4gbrZ8AJ1s2myKZsNL1A3G16g7DuCCy9QNxteoG42vEDZbK68QNld4MoL1M2GF6ibDS9QN5smm7LZ8AJ1s+EF6mbDC9TNhheomw0vUDabGy9QNxteoG42vEDdbHiButk02VR9R3DjBepm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xg2gdRk3gNZl3ABal3EDaF3GDaB0mYMbQOsybgCty7gBtC7jBtC6zLJM6TJuAK3LuAG0LuMG0LqMG0DrMm4ApctsbgCty7gBtC7jBtC6jBtA6zLLMqXLuAG0LuMG0LqMG0DrMm4Arcu4AZQus9wAWpdxA2hdxg2gdRk3gNZllmVKl3EDaF3GDaB1GTeA1mXcAFqXcQMoXeboBpBb5nQ+vZTY7X7+wZf1XO3yXYhvu7gAdO7C/5270H/nLssulbuQf+cu3N+5C/V37sL8nbsQf+UuJ97v3IX3O3fh/c5deL9zl2WXyl14v3MX3u/chfc7d+H9zl14v3KXM+937sL7nbvwfucuvN+5y7JL5S6837kL73fuwvudu/B+5y68X7nLhfc7d+H9zl14v3MX3u/cZdmlchfe79yF9zt34f3OXXi/cxfer9zlyvudu/B+5y6837kL73fusuxSuQvvd+7C+5278H7nLrzfuQvvN+6ydrzfuQvvd+7C+5278H7nLssulbvwfucuvN+5C+937sL7nbvwfuUue97v3IX3O3fh/c5deL9zl2WXyl14v3MX3u/chfc7d+H9zl14v3KXA+937sL7nbvwfucuvN+5y7JL5S6837kL73fuwvudu/B+5y68X7nLxvudu/B+5y6837kL73fusuxSuQvvd+7C+5278H7nLrzfuQvvV+6yeL9zF97v3IX3O3fh/c5dll0qd+H9zl14v3MX3u/chfc7d+H9yl2OvN+5C+937sL7nbvwfucuyy6Vu/B+5y6837kL73fuwvudu/B+5S4n3u/chfc7d+H9zl14v3OXZZfKXXi/cxfe79yF9zt34f3OXXi/cpcz73fuwvudu/B+5y6837nLskvlLrzfuQvvd+7C+5278H7nLrxfucuF9zt34f3OXXi/cxfe79xl2aVyF97v3IX3O3fh/c5deL9zF96v3OXK+5278H7nLrzfuQvvd+6y7FK5C+937sL7nbvwfucuvN+5C+837nLc8X7nLrzfuQvvd+7C+527LLtU7sL7nbvwfucuvN+5C+937sL7lbvseb9zF97v3IX3O3fh/c5dll0qd+H9zl14v3MX3u/chfc7d+H9yl0OvN+5C+937sL7nbvwfucuyy6Vu/B+5y68H9zl+K3Ebr0SG+JjsQ/X3e75016Pu1dik/lgbNyei70x9GBsMB6MTbuD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+ZYn4nzLE3G+5Yk43/JEnG95Ii6HGwB9eQObLz/I7Xw9/HAjuaxbXnS85UWnW150vuVFl1tedL3hRdfdLS/a3/Kiwy0vuuWJuN7yRFxveSKutzwR11ueiOuHn4h/+0///t8U+v//6bS/4c8mnfY3/OGk02F3y4v2t7zocMuLtltetG550fGWF51uedH5lhfd8kQcbnkitlueiO2WJ2K75YnYbnkitlueiO2WJ2K75YnYbnkitlueiO2GP7h2WrtbXrS/5UWHW1603fKi9e6Lfvhzdac3/gDHT/9c3el4wx9cO73xxyreedHxlhedbnjRW/8hyJ/9abfT6YY/M3M63/An+E5v/asUP/uDa6c3/sz6Oy863fKi8y0vuuEPrp3ON/zBtdNld8uL9re86HDLi7ZbXrRuedENf0zpdDnd8qLzLS+63PKiW/4mvO5uedH+lhcdbnnRdsuL1i0vuuWJuN7yRFxveSKutzwR1xueiPPuw0/EH7jZ/wdu3njt9vKP9PPu22ufbi3/oZv9h1/1b0//8//9z//jX/7zf/nX//N/Pr3oj//b/+e//df/9S///b/9+T//1//3f//H/83TB/9v","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"owner","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseDkimRegistry"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrow"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"body","type":{"kind":"array","length":832,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"body_hash_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"body_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"header","type":{"kind":"array","length":640,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"header_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"pubkey","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"pubkey_redc","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"from_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"subject_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amount_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amount_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"date_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"receipt_id_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"claim_secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseEscrow::redeem_linode_entitlement_parameters"}}],"kind":"struct","path":"ZImburseEscrow::redeem_linode_entitlement_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseEscrow::give_entitlement_parameters"}}],"kind":"struct","path":"ZImburseEscrow::give_entitlement_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseEscrow::get_admin_private_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrow::get_admin_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseEscrow::get_title_parameters"}},{"name":"return_type","type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"ZImburseEscrow::get_title_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkimRegistry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrowRegistry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"usdc_token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"title","type":{"kind":"string","length":60}}],"kind":"struct","path":"ZImburseEscrow::constructor_parameters"}}],"kind":"struct","path":"ZImburseEscrow::constructor_abi"}]}},"file_map":{"100":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"102":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"104":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"106":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"109":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"112":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"113":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"116":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"119":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"120":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"124":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"136":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"137":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"142":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"143":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"154":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"160":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"164":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"166":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"169":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"171":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"174":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"175":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"176":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n"},"179":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"180":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"182":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"183":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"184":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"185":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"197":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"199":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"200":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"209":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"217":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"219":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"220":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"222":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"242":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"244":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"247":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"273":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"294":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"317":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"339":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n  value: [Field; N]\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"354":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"355":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"365":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_dkim_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\nmod receipt_verifier_id {\n    pub global AWS: Field = 1;\n    pub global LINODE: Field = 2;\n    pub global HEROKU: Field = 3;\n    pub global FRONTIER_AIRLINES: Field = 4;\n    pub global UNITED_AIRLINES: Field = 5;\n    pub global AMERICAN_AIRLINES: Field = 6;\n    pub global DELTA_AIRLINES: Field = 7;\n    pub global UBER: Field = 8;\n    pub global LYFT: Field = 9;\n}\n\n#[aztec]\ncontract ZImburseDkimRegistry {\n    use std::meta::derive;\n    use dep::aztec::prelude::{AztecAddress, SharedImmutable, Map};\n    use dep::aztec::macros::{storage::storage, events::event, functions::{private, public, view, initializer}};\n    use dep::aztec::unencrypted_logs::unencrypted_event_emission::emit;\n    use dep::aztec::protocol_types::traits::Serialize;\n    use crate::BULK_KEY_LENGTH;\n\n    #[storage]\n    struct Storage<Context> {\n        admin: SharedImmutable<AztecAddress, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n    }\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    /**\n     * Initialize the Z-Imburse DKIM registry contract\n     *\n     * @param registry - the address of the Z-Imburse registry contract\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        storage.admin.initialize(context.msg_sender());\n        // bulk insert up to 8 dkim key hashes at initialization (max unencrypted logs per tx)\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(&mut context, DKIMKeyRegistered {\n                    dkim_key_hash: dkim_key_hashes[i],\n                    verifier_id: verifier_ids[i]\n                });\n            }\n        }\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(verifier_ids: [Field; BULK_KEY_LENGTH], dkim_key_hashes: [Field; BULK_KEY_LENGTH]) {\n        // check that the sender is the admin\n        let admin = storage.admin.read_public();\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(&mut context, DKIMKeyRegistered {\n                    dkim_key_hash: dkim_key_hashes[i],\n                    verifier_id: verifier_ids[i]\n                });\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.admin.read_public();\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(&mut context, DKIMKeyRegistered { dkim_key_hash, verifier_id });\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n}\n\n"},"367":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/circuits/zimburse_verifiers/src/linode.nr","source":"use dep::zkemail::{KEY_LIMBS_2048, dkim::verify_dkim_2048, get_body_hash_by_index, base64::body_hash_base64_decode};\nuse crate::constants::{LinodeBillingParams, MAX_LINODE_EMAIL_BODY_LENGTH, MAX_LINODE_EMAIL_HEADER_LENGTH};\nuse crate::utils::{check_from_linode_billing, check_subject_billing_receipt, extract_billed_amount, extract_datetime};\nuse std::hash::{sha256_var, pedersen_hash};\n\npub fn verify_linode_billing_receipt(\n    body: [u8; MAX_LINODE_EMAIL_BODY_LENGTH],\n    body_hash_index: u32,\n    body_length: u32,\n    header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH],\n    header_length: u32,\n    pubkey: [Field; KEY_LIMBS_2048],\n    pubkey_redc: [Field; KEY_LIMBS_2048],\n    signature: [Field; KEY_LIMBS_2048],\n    from_index: u32,\n    subject_index: u32,\n    amount_index: u32,\n    amount_length: u32,\n    date_index: u32,\n    receipt_id_length: u32,\n) -> [Field; 3] {\n\n    // check the body and header lengths are within bounds\n    assert(header_length <= MAX_LINODE_EMAIL_HEADER_LENGTH);\n    assert(body_length <= MAX_LINODE_EMAIL_BODY_LENGTH);\n\n    // verify the dkim signature over the header\n    verify_dkim_2048(header, header_length, pubkey, pubkey_redc, signature);\n\n    // extract body hash and decode from base64\n    let body_hash_encoded = get_body_hash_by_index(header, body_hash_index);\n    let signed_body_hash = body_hash_base64_decode(body_hash_encoded);\n\n    // compute the hash of the asserted body\n    let computed_body_hash = sha256_var(body, body_length as u64);\n\n    // compare the retrieved body hash to the computed body hash\n    assert(\n        signed_body_hash == computed_body_hash, \"SHA256 hash computed over body does not match body hash found in DKIM-signed header\"\n    );\n\n    // assert email is from billing@linode.com\n    check_from_linode_billing(from_index, header);\n\n    // assert this is a billing receipt email from Linode\n    check_subject_billing_receipt(subject_index, header, receipt_id_length);\n\n    // extract billed amount\n    // note: the billed amount has 2 decimals\n    let billed_amount = extract_billed_amount(body, amount_index, amount_length);\n\n    // extract the timestamp header from the email\n    let datetime = extract_datetime(header, date_index);\n    \n    // hash the dkim key used to verify the email\n    let dkim_key_hash = pedersen_hash(pubkey);\n    [dkim_key_hash, datetime as Field, billed_amount as Field]\n}\n"},"369":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/circuits/zimburse_verifiers/src/utils.nr","source":"use crate::constants::{\n   LB_FROM_LEN, LB_PAYMENT_TEXT_LEN, LB_SUBJECT_FIXED_END_LEN, LB_SUBJECT_FIXED_START_LEN, LINODE_BILLING_FROM, LINODE_BILLING_PAYMENT_TEXT,\n   LINODE_BILLING_SUBJECT_FIXED_END, LINODE_BILLING_SUBJECT_FIXED_START, MAX_BILLED_AMOUNT, MAX_LINODE_EMAIL_BODY_LENGTH,\n    MAX_LINODE_EMAIL_HEADER_LENGTH, DATE_HEADER_FIELD_MAX_LENGTH, DATE_LENGTH_DETERMINATION_INDEX, DATE_HEADER_FIELD_START\n};\nuse dep::date_parser::{parse_date_string, to_unix_month, DATETIME_LENGTH};\n\n/**\n* Check that email is from linode billing address\n*/\npub fn check_from_linode_billing(index: u32, header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH]) {\n    // check the first char is \"f\" or \"F\"\n    assert((header[index] == 0x66) | (header[index] != 0x46), \"Email sender not found.\");\n\n    // check the remaing chars are the expected Linode billing\n    let from_bytes = LINODE_BILLING_FROM.as_bytes();\n    for i in 0..LB_FROM_LEN {\n        assert(header[i + index + 1] == from_bytes[i], \"Email not from Linode billing.\");\n    }\n\n    // check for CRLF\n    assert(header[LB_FROM_LEN + index + 1] == 0x0D, \"Invalid CRLF sequence\");\n    assert(header[LB_FROM_LEN + index + 2] == 0x0A, \"Invalid CRLF sequence\");\n}\n\n/**\n* Check that email subject is linode billing receipt\n*/\npub fn check_subject_billing_receipt(index: u32, header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH], receipt_id_length: u32) {\n    // check the first char is \"s\" or \"S\"\n    assert((header[index] == 0x73) | (header[index] == 0x53), \"Email subject not found\");\n\n    let fixed_start_bytes = LINODE_BILLING_SUBJECT_FIXED_START.as_bytes();\n    // check chars in fixed section start\n    for i in 0..LB_SUBJECT_FIXED_START_LEN {\n        assert(header[i + index + 1] == fixed_start_bytes[i], \"Email subject is not Linode billing receipt\");\n    }\n\n    let fixed_end_bytes = LINODE_BILLING_SUBJECT_FIXED_END.as_bytes();\n    // check chars in fixed section end\n    for i in 0..LB_SUBJECT_FIXED_END_LEN {\n        let headerIndex = i + index + receipt_id_length + LB_SUBJECT_FIXED_START_LEN;\n        assert(header[headerIndex] == fixed_end_bytes[i], \"Email subject is not Linode billing receipt\");\n    }\n}\n\n/**\n * Constrains a span to be a full header field\n *\n * @param MAX_HEADER_LENGTH: the maximum possible length of the header\n * @param header: the header of the email\n * @param index: the index that the header field begins at\n * @param length: the length of the header field\n */\npub fn constrain_header_field<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH],\n    index: u32,\n    length: u32\n) {\n    // check that the field does not lie outside of the max \n    assert(index + length <= header.len(), \"Header field out of bounds\");\n    // if not the first field in the header, ensure the header field is preceded by a CRLF\n    if (index != 0) {\n        assert(header[index - 2] == 0x0D, \"Missing prefix CR in field constraint\");\n        assert(header[index - 1] == 0x0A, \"Missing prefix LF in field constraint\");\n    }\n    // check that the following two chars are the crlf\n    if (index + length < header.len()) {\n        assert(header[index + length] == 0x0D, \"Missing suffix CR in field constraint\");\n        assert(header[index + length + 1] == 0x0A, \"Missing suffix LF field constraint\");\n    }\n    // check that the field does not contain any CRLF\n    for i in 0..MAX_HEADER_LENGTH {\n        if (i < length) {\n            assert(header[index + i] != 0x0D, \"CR in field constraint Field\");\n        }\n    }\n}\n\n/**\n * Extracts the datetime from the email header\n *\n * @param header: the header of the email\n * @param index: the index that the date header field begins at\n * @return the parsed unix timestamp\n */\npub fn extract_datetime(header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH], index: u32) -> u32 {\n    // determine the index of the selector that chooses the length of the date field\n    let length_decider = index + DATE_LENGTH_DETERMINATION_INDEX;\n    let length = if header[length_decider] == 0x20 {\n        DATE_HEADER_FIELD_MAX_LENGTH - 1\n    } else {\n        DATE_HEADER_FIELD_MAX_LENGTH\n    };\n    // constrain the header field to be a single and full header field\n    constrain_header_field::<DATE_HEADER_FIELD_MAX_LENGTH>(header, index, length);\n    // check the header field starts with \"Date: \"\n    let first_byte = (header[index] == 0x44) as u1 | (header[index] == 0x64) as u1;\n    assert(first_byte as bool, \"Invalid date field: [D/d]\");\n    for i in 0..DATE_HEADER_FIELD_START.len() {\n        assert(header[index + i + 1] == DATE_HEADER_FIELD_START[i], \"Invalid date field\");\n    }\n    // extract the date string\n    let mut datetime_string: [u8; DATETIME_LENGTH] = [0; DATETIME_LENGTH];\n    // todo: make const (and also put all this shit in zkemail.nr)\n    let start_index = index + 10;\n    for i in 0..DATETIME_LENGTH {\n        datetime_string[i] = header[start_index + i];\n    }\n    // parse the datetime into unix\n    let parsed = parse_date_string(datetime_string);\n    to_unix_month(parsed)\n}\n\npub fn serialize_bytes<let LIMBS: u32, let SEQUENCE_LENGTH: u32>(sequence: [u8; SEQUENCE_LENGTH]) -> [Field; LIMBS] {\n    let mut limbs: [Field; LIMBS] = [0; LIMBS];\n    for i in 0..LIMBS {\n        let mut chunk = 0;\n        let mut v = 1;\n        for j in 0..31 {\n            let index = i * 31 + j;\n            if index < SEQUENCE_LENGTH {\n                chunk += sequence[index] as Field * v;\n                v *= 256;\n            }\n        }\n        limbs[i] = chunk;\n    }\n    limbs\n}\n\npub fn is_number_constraint(num: u8) {\n    assert(num >= 0x30);\n    assert(num < 0x3A);\n}\n\n/**\n* Extract the amount billed by Linode as a u32\n*/\npub fn extract_billed_amount(body: [u8; MAX_LINODE_EMAIL_BODY_LENGTH], index: u32, amount_length: u32) -> u32 {\n\n    // ensure billed amount follows valid payment text sequence\n    let payment_text_bytes = LINODE_BILLING_PAYMENT_TEXT.as_bytes();\n    for i in 0..LB_PAYMENT_TEXT_LEN {\n        assert(body[(index - LB_PAYMENT_TEXT_LEN) + i] == payment_text_bytes[i], \"Invalid payment text sequence.\");\n    }\n\n    let mut amount: Field = 0;\n    let fixed_values = 4; // '$', '.', and two decimals\n    let commas: Field = ((amount_length - fixed_values - 1) / 4) as Field; // account for \n    let mut power: Field = amount_length as Field - commas - 3; // 3 represents '$' and '.' and power is equal to numberic len - 1\n\n    // ensure first character is '$'\n    assert(body[index] == 36);\n\n    // if second character is a zero then decrement power\n    if body[index + 1] == 48 {\n        power = power - 1;\n    }\n\n    for i in 1..MAX_BILLED_AMOUNT {\n        if i < amount_length {\n            let byte = body[index + i];\n            // check that byte is not a comma or period\n            if (byte != 44) & (byte != 46) {\n                amount = amount + ((byte as Field - 48) * (10 as Field).pow_32(power));\n                power = power - 1;\n            }\n        }\n    }\n    amount as u32\n}\n\n// #[test]\n// fn value_extraction() {\n//     let index = 0;\n//     let mut body: [u8; MAX_LINODE_EMAIL_BODY_LENGTH] = [0; MAX_LINODE_EMAIL_BODY_LENGTH];\n//     let val = \"$4,123.00\";\n//     let bytes = val.as_bytes();\n//     for i in 0..bytes.len() {\n//         body[i] = bytes[i];\n//     }\n//     let extracted = extract_billed_amount(body, index, bytes.len());\n//     println(extracted);\n// }\n\n// #[test]\n// fn test_payment_string_bytes() {\n//  let bytes = LINODE_BILLING_PAYMENT_TEXT.as_bytes();\n//  println(bytes);\n// }"},"370":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/circuits/date_parser/src/lib.nr","source":"struct Datetime {\n    year: u16,\n    leap_years: u16,\n    add_leap_day: bool,\n    month: u8,\n    day: u8,\n    time: u32,\n    offset: u16,\n    subtract: bool\n}\n\nglobal DATETIME_LENGTH: u32 = 26;\n\n\nglobal months = [\n    \"Jan\".as_bytes(),\n    \"Feb\".as_bytes(),\n    \"Mar\".as_bytes(),\n    \"Apr\".as_bytes(),\n    \"May\".as_bytes(),\n    \"Jun\".as_bytes(),\n    \"Jul\".as_bytes(),\n    \"Aug\".as_bytes(),\n    \"Sep\".as_bytes(),\n    \"Oct\".as_bytes(),\n    \"Nov\".as_bytes(),\n    \"Dec\".as_bytes()\n];\n\nglobal days_in_month = [\n    31,\n    28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31\n];\n\npub fn parse_month(month: [u8; 3]) -> u8 {\n    let mut index = 0;\n    for i in 0..12 {\n        if month == months[i] {\n            index = i + 1;\n        }\n    }\n    index\n}\n\n// todo: is leap year + is past feb 29th\n\npub fn compute_leap_years(year: u16) -> u16 {\n    year / 4 - year / 100 + year / 400\n}\n\npub fn is_number_constraint(num: u8) {\n    assert(num >= 0x30);\n    assert(num < 0x3A);\n}\n\npub fn parse_year(year: [u8; 4]) -> (u16, u16) {\n    // range check year\n    for i in 0..year.len() {\n        is_number_constraint(year[i]);\n    }\n    // compute year\n    let mut year = (year[0] as u16 - 0x30) * 1000\n        + (year[1] as u16 - 0x30) * 100\n        + (year[2] as u16 - 0x30) * 10\n        + year[3] as u16\n        - 0x30;\n    // figure out number of leap years\n    let leap_years_since_0000 = compute_leap_years(year - 1);\n    let start_leap_years = compute_leap_years(1970);\n    let leap_years = leap_years_since_0000 - start_leap_years;\n    (year, leap_years)\n}\n\npub fn parse_time(time: [u8; 8]) -> u32 {\n    // check each char\n    is_number_constraint(time[0]);\n    is_number_constraint(time[1]);\n    assert(time[2] == 0x3A);\n    is_number_constraint(time[3]);\n    is_number_constraint(time[4]);\n    assert(time[5] == 0x3A);\n    is_number_constraint(time[6]);\n    is_number_constraint(time[7]);\n    // compute hours, mins, secs\n    let hours = (time[0] as u32 - 0x30) * 10 + time[1] as u32 - 0x30;\n    let mins = (time[3] as u32 - 0x30) * 10 + time[4] as u32 - 0x30;\n    let secs = (time[6] as u32 - 0x30) * 10 + time[7] as u32 - 0x30;\n    // return seconds since midnight\n    hours * 3600 + mins * 60 + secs\n}\n\npub fn parse_offset(offset: [u8; 5]) -> (u16, bool) {\n    // determine whether to add or subtract\n    let mut subtract = false;\n    if offset[0] == 0x2D {\n        subtract = true;\n    } else {\n        assert(offset[0] == 0x2B);\n    }\n    // check each char\n    for i in 1..offset.len() {\n        is_number_constraint(offset[i]);\n    }\n    // parse hours\n    let hours = (offset[1] as u16 - 0x30) * 10 + offset[2] as u16 - 0x30;\n    // parse mins\n    let mins = (offset[3] as u16 - 0x30) * 10 + offset[4] as u16 - 0x30;\n    // return seconds\n    let offset = hours * 3600 + mins * 60;\n    (offset, subtract)\n}\n\npub fn parse_day(dat: [u8; 2]) -> u8 {\n    // check each char\n    is_number_constraint(dat[0]);\n    is_number_constraint(dat[1]);\n    // compute day\n    (dat[0] as u8 - 0x30) * 10 + dat[1] as u8 - 0x30\n}\n\npub fn add_leap_day(year: u16, month: u8) -> bool {\n    // determine if current year is leap year\n    let div_by_4 = (year % 4 == 0) as u1;\n    let div_by_100 = (year % 100 != 0) as u1;\n    let div_by_400 = (year % 400 == 0) as u1;\n    let leap_year = div_by_4 * (1 - (1 - div_by_100) * (1 - div_by_400));\n    // determine if month is past feb\n    let past_feb = (month > 2) as u1;\n\n    (leap_year * past_feb) as bool\n}\n\npub fn parse_date_string(date_bytes: [u8; DATETIME_LENGTH]) -> Datetime {\n    // check day shift and set day\n    let day_shift = if date_bytes[1] == 0x20 {\n        (0, [0x30, date_bytes[0]])\n    } else {\n        (1, [date_bytes[0], date_bytes[1]])\n    };\n\n    // parse day\n    let day = parse_day(day_shift.1);\n\n    // parse month\n    let month = parse_month([date_bytes[2 + day_shift.0], date_bytes[3 + day_shift.0], date_bytes[4 + day_shift.0]]);\n    assert(month != 0);\n\n    // parse year\n    let year = parse_year(\n        [\n        date_bytes[6 + day_shift.0],\n        date_bytes[7 + day_shift.0],\n        date_bytes[8 + day_shift.0],\n        date_bytes[9 + day_shift.0]\n    ]\n    );\n    // parse time\n    let time = parse_time(\n        [\n        date_bytes[11 + day_shift.0],\n        date_bytes[12 + day_shift.0],\n        date_bytes[13 + day_shift.0],\n        date_bytes[14 + day_shift.0],\n        date_bytes[15 + day_shift.0],\n        date_bytes[16 + day_shift.0],\n        date_bytes[17 + day_shift.0],\n        date_bytes[18 + day_shift.0]\n    ]\n    );\n    // parse offset\n    let offset = parse_offset(\n        [\n        date_bytes[20 + day_shift.0],\n        date_bytes[21 + day_shift.0],\n        date_bytes[22 + day_shift.0],\n        date_bytes[23 + day_shift.0],\n        date_bytes[24 + day_shift.0]\n    ]\n    );\n    // check if leap day needs to be added\n    let add_leap_day = add_leap_day(year.0, month);\n\n    Datetime { year: year.0, leap_years: year.1, add_leap_day, month, day, time, offset: offset.0, subtract: offset.1 }\n}\n\npub fn to_unix_month(datetime: Datetime) -> u32 {\n    // get number of days in complete years\n    let days_in_complete_years = (datetime.year - 1970) as u32 * 365 + datetime.leap_years as u32;\n    // get number of days in current year\n    let mut days_in_current_year = 0;\n    for i in 0..12 {\n        if i + 1 < datetime.month {\n            days_in_current_year += days_in_month[i];\n        }\n    }\n    days_in_current_year += datetime.add_leap_day as u32;\n    // total seconds since epoch\n    let mut seconds_since_epoch = (days_in_complete_years + days_in_current_year) * 86400 + datetime.time as u32;\n    // apply offset\n    if datetime.subtract {\n        seconds_since_epoch -= datetime.offset as u32;\n    } else {\n        seconds_since_epoch += datetime.offset as u32;\n    }\n    // return unix timestamp\n    seconds_since_epoch\n}\n\npub fn to_unix(datetime: Datetime) -> u32 {\n    // get number of days in complete years\n    let days_in_complete_years = (datetime.year - 1970) as u32 * 365 + datetime.leap_years as u32;\n    // get number of days in current year\n    let mut days_in_current_year = 0;\n    for i in 0..12 {\n        if i + 1 < datetime.month {\n            days_in_current_year += days_in_month[i];\n        }\n    }\n    days_in_current_year += (datetime.day + datetime.add_leap_day as u8) as u32;\n    // total seconds since epoch\n    let mut seconds_since_epoch = (days_in_complete_years + days_in_current_year) * 86400 + datetime.time as u32;\n    // apply offset\n    if datetime.subtract {\n        seconds_since_epoch -= datetime.offset as u32;\n    } else {\n        seconds_since_epoch += datetime.offset as u32;\n    }\n    // return unix timestamp\n    seconds_since_epoch\n}\n\n#[test]\nfn test_main() {\n    let date_string = \"1 Sep 2024 23:22:12 +0400 \".as_bytes(); // padded 1\n    // its off a lil bit\n    // should be 1725247332\n    // should be 1725333732\n    let date = parse_date_string(date_string);\n    let unix = to_unix(date);\n    println(unix);\n}\n"},"371":{"path":"/home/jpag/nargo/github.com/zkemail/zkemail.nrv0.3.1/lib/src/base64.nr","source":"use crate::BODY_HASH_BASE64_LENGTH;\n\n// noir_base64 has issues right now, just use this for now\n\n/**\n * Decodes a base64 encoded body hash into a 32 byte sha256 hash of the body\n * @notice from https://github.com/richardliang/noir-rsa/blob/main/crates/rsa-biguint/src/lib.nr\n\n * @param encoded - the base 64 encoded body hash\n * @returns the decoded sha256 hash\n */\npub fn body_hash_base64_decode(encoded: [u8; BODY_HASH_BASE64_LENGTH]) -> [u8; 32] {\n    let mut total_bits = [0 as u1; BODY_HASH_BASE64_LENGTH * 6];\n    for i in 0..BODY_HASH_BASE64_LENGTH {\n        let translate = base64_lookup(encoded[i] as u8);\n        // Store as big endian\n        let translate_bits: [u1; 6] = (translate as Field).to_be_bits();\n        for j in 0..6 {\n            total_bits[i * 6 + j] = translate_bits[j];\n        }\n    }\n\n    // Since we're returning the SHA256 hash, only need first 32 bytes (=256 bits)\n    let mut output = [0 as u8; 32];\n    for i in 0..32 {\n        for j in 0..8 {\n            // Convert from big endian back to little endian\n            output[i] |= (total_bits[i * 8 + j] as u8) << (7 - j) as u8;\n        }\n    }\n\n    output\n}\n\n/**\n * Lookup for the base 64 encoding\n * @todo: replace with noir_lang base64 lib\n *\n * @param input - the base 64 encoded character\n * @returns the decoded value\n */\nfn base64_lookup(input: u8) -> u8 {\n    // A-Z: 65-90\n    if input >= 65 & input <= 90 {\n        input - 65\n    } else if input >= 97 & input <= 122 {\n        // a-z: 97-122\n        input - 71\n    } else if input >= 48 & input <= 57 {\n        // 0-9: 48-57\n        input + 4\n    } else if input == 43 {\n        // +\n        62\n    } else if input == 47 {\n        // /\n        63\n    } else {\n        // =\n        0\n    }\n}"},"372":{"path":"/home/jpag/nargo/github.com/zkemail/zkemail.nrv0.3.1/lib/src/lib.nr","source":"use dep::std::hash::pedersen_hash;\n\nmod dkim;\nmod partial_hash;\nmod base64;\n\nglobal RSA_EXPONENT: u32 = 65537;\nglobal KEY_BYTES_1024: u32 = 128;\nglobal KEY_BYTES_2048: u32 = 256;\nglobal KEY_LIMBS_1024: u32 = 9;\nglobal KEY_LIMBS_2048: u32 = 18;\nglobal BODY_HASH_BASE64_LENGTH: u32 = 44;\n\n/**\n * Get the body hash from the header by allowing circuit input to choose index\n * @notice unsafe, can theoretically make a recipient display name = the bh\n *\n * @param HEADER_LENGTH - The length of the email header\n * @param header - The email header as validated in the DKIM signature\n * @param index - The asserted index to find the body hash at\n * @returns The base 64 encoded body hash\n */\npub fn get_body_hash_by_index<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_HEADER_LENGTH],\n    index: u32\n) -> [u8; BODY_HASH_BASE64_LENGTH] {\n    // check index range\n    assert(index >= 3, \"Index does not leave room for 'bh=' prefix\");\n    assert(index + BODY_HASH_BASE64_LENGTH < MAX_HEADER_LENGTH, \"Index does not leave room for body hash\");\n    // check for 'bh=' prefix\n    let BH_PREFIX: [u8; 3] = [98, 104, 61]; // \"bh=\"\n    for i in 0..3 {\n        assert(header[index - 3 + i] == BH_PREFIX[i], \"No 'bh=' prefix found\");\n    }\n    // check for base64 suffix\n    let BH_SUFFIX: u8 = 59; // \";\"\n    assert(header[index + BODY_HASH_BASE64_LENGTH] == BH_SUFFIX, \"No base64 suffix found\");\n    // retrieve body hash\n    let mut body_hash = [0 as u8; BODY_HASH_BASE64_LENGTH];\n    for i in 0..BODY_HASH_BASE64_LENGTH {\n        body_hash[i] = header[index + i];\n    }\n    body_hash\n}\n\n/**\n * Standard outputs that essentially every email circuit will need to export (alongside app-specific outputs)\n * @notice if you only need the pubkey hash just import pedersen and hash away \n *\n * @param pubkey - the BN limbs of the DKIM RSA pubkey\n * @param signature - the BN limbs of the DKIM RSA signature\n * @returns\n *        0: Pedersen hash of DKIM public key (root of trust)\n *        1: Pedersen hash of DKIM signature (email nullifier)\n */\npub fn standard_outputs<let KEY_BYTE_LENGTH: u32>(\n    pubkey: [Field; KEY_BYTE_LENGTH],\n    signature: [Field; KEY_BYTE_LENGTH]\n) -> [Field; 2] {\n    // create pedersen hash of DKIM signing key to minimize public outputs\n    let pubkey_hash = pedersen_hash(pubkey);\n    // create email nullifier for email\n    let email_nullifier = pedersen_hash(signature);\n    // output the root of trust and email nullifier\n    [pubkey_hash, email_nullifier]\n}\n"},"374":{"path":"/home/jpag/nargo/github.com/zkemail/zkemail.nrv0.3.1/lib/src/dkim.nr","source":"use dep::rsa::bignum::fields::{Params1024, Params2048};\nuse dep::rsa::bignum::runtime_bignum::BigNumInstance;\nuse dep::rsa::types::RSA;\nuse dep::rsa::bignum::BigNum;\nuse dep::std::hash::sha256_var;\nuse crate::{KEY_LIMBS_1024, KEY_LIMBS_2048, KEY_BYTES_1024, KEY_BYTES_2048, RSA_EXPONENT};\n\ntype BN1024 = BigNum<KEY_LIMBS_1024, Params1024>;\ntype RSA1024 = RSA<BN1024, BigNumInstance<KEY_LIMBS_1024, Params1024>, KEY_BYTES_1024>;\ntype BN2048 = BigNum<KEY_LIMBS_2048, Params2048>;\ntype RSA2048 = RSA<BN2048, BigNumInstance<KEY_LIMBS_2048, Params2048>, KEY_BYTES_2048>;\n\n/**\n * Verify a 1024-bit RSA (DKIM) signature over an email header\n * \n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param header - The email header, 0-padded to the maximum possible length for this circuit\n * @param header_length - The actual length of the email header\n * @param pubkey_modulus_limbs - The DKIM RSA Pubkey\n * @param redc_params_limbs - Barrett Reduction Parameter for Pubkey for efficient signature verification\n * @param signature - The DKIM RSA Signature \n */\npub fn verify_dkim_1024<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_HEADER_LENGTH],\n    header_length: u32,\n    pubkey: [Field; KEY_LIMBS_1024],\n    pubkey_redc: [Field; KEY_LIMBS_1024],\n    signature: [Field; KEY_LIMBS_1024]\n) {\n    // check the header length is within bounds\n    assert(header_length <= MAX_HEADER_LENGTH);\n\n    // instantiate the BNInstance for the pubkey\n    let pubkey: BigNumInstance<KEY_LIMBS_1024, Params1024> = BigNumInstance::new(pubkey, pubkey_redc);\n\n    // instantiate BN for the signature\n    let signature: BN1024 = BigNum::from_array(signature);\n\n    // hash the header\n    let header_hash = sha256_var(header, header_length as u64);\n\n    // verify the DKIM signature over the header\n    let rsa: RSA1024 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(pubkey, header_hash, signature, RSA_EXPONENT));\n}\n\n/**\n * Verify a 1024-bit RSA (DKIM) signature over an email header\n * \n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param header - The email header, 0-padded to the maximum possible length for this circuit\n * @param header_length - The actual length of the email header\n * @param pubkey_modulus_limbs - The DKIM RSA Pubkey\n * @param redc_params_limbs - Barrett Reduction Parameter for Pubkey for efficient signature verification\n * @param signature - The DKIM RSA Signature \n */\npub fn verify_dkim_2048<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_HEADER_LENGTH],\n    header_length: u32,\n    pubkey: [Field; KEY_LIMBS_2048],\n    pubkey_redc: [Field; KEY_LIMBS_2048],\n    signature: [Field; KEY_LIMBS_2048]\n) {\n    // check the header length is within bounds\n    assert(header_length <= MAX_HEADER_LENGTH);\n\n    // instantiate the BNInstance for the pubkey\n    let pubkey: BigNumInstance<KEY_LIMBS_2048, Params2048> = BigNumInstance::new(pubkey, pubkey_redc);\n\n    // instantiate BN for the signature\n    let signature: BN2048 = BigNum::from_array(signature);\n\n    // hash the header\n    let header_hash = sha256_var(header, header_length as u64);\n\n    // verify the DKIM signature over the header\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(pubkey, header_hash, signature, RSA_EXPONENT));\n}\n"},"377":{"path":"/home/jpag/nargo/github.com/noir-lang/noir_rsav0.3.1/lib/src/rsa.nr","source":"use dep::bignum::BigNum;\nuse dep::bignum::runtime_bignum::BigNumInstance;\nuse dep::bignum::runtime_bignum::BigNumTrait;\nuse dep::bignum::runtime_bignum::BigNumInstanceTrait;\n\nuse crate::types::{RSA, BN1024, BN2048, BNInst1024, BNInst2048, RSA1024, RSA2048};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] = [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i as u32 < 52 + ps_len as u32 {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i as u32 == 52 + ps_len as u32 {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i as u32 == 53 + ps_len as u32 {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\nimpl<BN, BNInstance, let NumBytes: u32> RSA<BN, BNInstance, NumBytes>  where BN: BigNumTrait, BNInstance: BigNumInstanceTrait<BN> {\n    /**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @details The fourth function parameter is required to define the value of `NBytes`\n *          when converting a BigNum into a byte array, the number of bytes is required and currently cannot be inferred.\n *          Once numeric generics can be derived by applying operations to other numeric generics the need for this will go away.\n *\n * @note The exponent `e` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\n    pub fn verify_sha256_pkcs1v15(_: Self, instance: BNInstance, msg_hash: [u8; 32], sig: BN, exponent: u32) -> bool {\n        assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n        let mut exponentiated = instance.mul(sig, sig); // sig^2\n\n        if exponent == 65537 {\n            // e = 65537 = 1 0000 0000 0000 0001\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^2 * sig^2 = sig^4\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^8\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^16\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^32\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^64\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^128\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^256\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^512\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^1024\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^2048\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^4096\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^8192\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^16384\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^32768\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^65536\n        }\n        // otherwise, e = 3 = 11\n\n        exponentiated = instance.mul(exponentiated, sig); // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n\n        let mut padded_sha256_hash_bytes: [u8; NumBytes] = exponentiated.to_le_bytes();\n        compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n    }\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst1024 = BigNumInstance::new(\n        [\n        0xe908724e0d28a1565511879e00f063, 0x58dea28d5112982c8ab8597d3e611f, 0xb115f9878acc910a47b41ac8d5f763, 0xc71b0a719c2283f710f86024737cee, 0x9ee9eb73e95b84f033af5217337427, 0x8fcab34c99cc2661dd57de15ae2110, 0xa38db8a829eec5550342f6f66334dc, 0xd7c4b32fd351a47d860fda1897330e, 0x98c92a33a0f33fd7\n    ],\n        [\n        0x55582e8ba08822783fbd7d07390be2, 0x1d7d83f9dce3983c66f440dcc2f33e, 0x6072d13c84a4cb304f58fbabe782e7, 0x0cee5e0dd62bc54d15a91a4ea3bc50, 0xc485e6f946c45cf660fba4f49325cb, 0x1f0e45df0464b065c94e84ed1dad8c, 0xe4c7b3976310ea239059d834b545f3, 0xd418145200fa77235f5f8d852b121f, 0x01acf0bd16cad9bd8f\n    ]\n    );\n    let signature: BN1024 = BigNum::from_array(\n        [\n        0x393f230b55a12fb7bb39c7edd2cf48, 0x78f7d0a217d340407cae4f39b8f001, 0x603909ff76a519f3c8e96d695d462e, 0x0640ab230b459bf4b20b4823a5b850, 0x02ba190de61a85074b18e228231984, 0xe1424c0779825707aa433ecb86c388, 0xbed8087d947a9c6c56625ad20c91aa, 0x7da4a0c2eee3a3c0d61e892ab4ada9, 0x6ef98a936c8bf8e5\n    ]\n    );\n\n    let rsa: RSA1024 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0x183b4cadacea64716b6535b25a86ad, 0x129a32e9fbd374949e81b080546c2b, 0x9276332765f54b9b4d6fe23f4983a4, 0x91df05fde1a414c9fbf38808a01032, 0x97ca171c382e082ddd6c81be090902, 0x97161dde47ed979939451704b72648, 0x3b66f0c93f8ddbc62bb99f6b8fad2d, 0xc3a046fcad814d8938da372cd84d2a, 0xfe903cfe3ee4de6de3916023bb87f2, 0x8be5fd99c8b46dce9aab27ce4b3883, 0x0d99dfe50dd2288123804872da8543, 0xbb6d8afef8b2c7e3b86ad96973d4e5, 0x17e08fa3c5391279b844581f67825c, 0x09511f4a436abe495bfbfcc254d9c5, 0xf80d02572d620eab5ad7ecfbe2c20c, 0x2a5307402a05f59ba232ad0c8366d0, 0x7b9169630b317c38d549a86f85fcfc, 0xf2\n    ],\n        [\n        0xf4effa025abe90db41dc5bb5934a5f, 0x2596b25aa09f6a0e290accebbef006, 0x330e9567ec5eca92b7a8ce72ad3d83, 0xccf98d178ec4017e4947cadc02da7c, 0xaed6044ffeeb12de4d1e67aedfda78, 0xb5ae8a5a4637b632800e2f41dfbf0a, 0x8304360d359cf2f0d5d97c039f9b04, 0x53cde0d0633c0e66e1da9a118f6a96, 0xf9a83822351097bb1ed123d10290f5, 0xeb489c7f7227c09ca0117264dcf04f, 0x6a1b3618478a235f438adf84533177, 0x71c03085e38a87f5ec8e51c27dde98, 0xcf3e89d9cf253ef61d65d4431334d9, 0xa5a1a59e98fb7f49c746149324201d, 0x38f46c635f884f24c254eaa37981d6, 0x1c42be15dd95e1ac5bf01972b24ff9, 0x4555dd506d1f89e61279293c03db90, 0x010e\n    ]\n    );\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x5f0937ed1aacbdb83991e21c89ca8a, 0x5a1fa4ef2faf4042401c9121c73874, 0x7379fbb7713fbf807d250f7401afb8, 0x9cc5ce8813f3a83a72b681a4d434b2, 0x11cb49ac2ee1f9bed8a008b8327e1e, 0xf3362524f1224e48827b34a62f6ace, 0x3498a2944e32a3798fe9da684b32ae, 0xc346c33528bcdf7a06805126a29402, 0x6ac93f2fa68f270ec73674eae24380, 0x222c72de080496533ceeb8af827910, 0xc22889b311a53203278b942ca67100, 0x93d75567f7fe9ee7ca9871a0cb09f9, 0x049dabd976a9574847b1614f6b739c, 0xdc66b621dbae623df9b657b52fa1b0, 0xf37e82cc1eced382e11fc32e673f67, 0xe50545eb9027f1144a0ba7bbb0c886, 0xb6193409539c515d3c55a45c5734b1, 0x4b\n    ]\n    );\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0xc6a1c5e80ce354c6b00ccf20cf3a1d, 0x178d135f925a03eceb25f79bab56ee, 0x13ab3d6d8a5c5586752b5a3bc74ec3, 0x3d13b47b152367e3e2fc014d03d19f, 0xe89a7278a2945b4a672011691db30f, 0x5b4c1b061378143629dbb29dea1e4, 0x26a48b6f4e8df1472fd4fc12b17c18, 0xc7c92ead0ce810520cf3a8267254c1, 0x806b8cdba93909e9d9a71ee1bcdac2, 0x703ef80f8eb703b84c201366dff1c7, 0x7361034bb2c4c081aad8b1bcca83de, 0xb23c7e1109e65e6d08fa72cc862008, 0x750bc927874455782cd2d6fd5a51f6, 0xf0b83665fbf8cb5cf31cee9f89848e, 0x20d447b08953c7ce3330197938a8ae, 0x11a08bb5a2241c6a2a69f930d8b28b, 0xef5bca8dd582570a44705cb123d09e, 0xb7\n    ],\n        [\n        0xbc93ee57c1c8adc53f0a995a6221ca, 0x2a9b43587534b20dd85a5233329f10, 0xc587fd488f64eed02adc1f462f7448, 0xf1484d37676bb0e800996757382522, 0xc2126c48221aa61c9f52c6b918bab3, 0x8660c861dd52ed958beaf6c6c2cff0, 0x5edd9dc4f02a000f350948c70bdf94, 0x6f3b9603149272e9b232a379a017bb, 0x950fd85cffbdf4476b1cb66c1f63d6, 0xee459417b1a56b6f7ef3b89e385ac, 0x48daeef6d1a055f3746ab71058e137, 0x3cbc0ba96d541feee92dd27f9d0306, 0x6a2a42384cc388fa113ee80317e0a0, 0x43b4f89c508a42d309f295c0d9f3a5, 0x8d8c28b05f71b962b40ea906ff407f, 0x390a7989eb9cecc5827cb00e1ca693, 0x4cbf158eabf7e96ef7f2586d0ce613, 0x164\n    ]\n    );\n\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x19772b9af8a031170a7844ce4f3d7c, 0x4808e817258f57805a7326f70bcd74, 0xca8f3f98e374d52100115bfa645a7d, 0x49547189edff3b683fee267e717b7f, 0x96f263b47e96925f3b5898a7389ceb, 0x4cc50a893da91d0e085fc6656b30bc, 0x67e84ff92d88c0ad2c17ad2701309e, 0x095326818578173289665fcd9ad788, 0x775c6e85b745065db9411b9d579763, 0xad0f20c8a5265dfca4080ca877a2b8, 0xbfd199372f1680b3bc583a08bd8ba9, 0x663476ca3e5ede3e5976887db2c4e5, 0x531192309d0d49fed47c0216c27f9e, 0x37d26d31c86b951ca1c17b517063b7, 0x3cdb362ed5dfd06568eb9a9bbb6a91, 0x14520b9c23f583314729a9d858bca9, 0x5e0505067ada1026721d45997bf2c4, 0x3e\n    ]\n    );\n\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 3));\n}\n"},"378":{"path":"/home/jpag/nargo/github.com/noir-lang/noir-bignumv0.3.5/src/runtime_bignum.nr","source":"use dep::std;\nuse crate::utils::u60_representation::U60Repr;\nuse crate::utils::split_bits;\nuse crate::BigNum;\n/**\n * @brief runtime_bignum::BigNumTrait defines methods available to BigNum *if* the modulus is not known at compile time.\n *        e.g. RSA where the modulus is a witness value as it changes for every RSA signature\n *        tee `lib.nr` for a trait definition where the modulus is known at compile time\n **/\ntrait BigNumTrait {\n    fn new() -> Self;\n    fn one() -> Self;\n    fn from(limbs: [Field]) -> Self;\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> Self;\n    fn to_le_bytes<let NBytes: u32>(val: Self) -> [u8; NBytes];\n    fn get(self) -> [Field];\n    fn get_limb(self, idx: u64) -> Field;\n    fn set_limb(&mut self, idx: u32, value: Field);\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    fn validate_in_range(self);\n    fn validate_quotient_in_range(self);\n    fn __is_zero(self) -> bool;\n    fn __eq(self, rhs: Self) -> bool;\n}\n\n/**\n * @brief BigNumInstanceTrait defines methods available to a runtime BigNumInstance.\n *        BigNumInstance wraps the modulus parameter (as well as a Barret reduction parameter),\n *        which is required for the majority of BigNum operations\n **/\ntrait BigNumInstanceTrait<BN> where BN: BigNumTrait {\n    fn modulus(self) -> BN;\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BN;\n    fn eq(self, lhs: BN, rhs: BN) -> bool;\n    fn __neg(self, val: BN) -> BN;\n    fn __add(self, lhs: BN, rhs: BN) -> BN;\n    fn __sub(self, lhs: BN, rhs: BN) -> BN;\n    fn __mul(self, lhs: BN, rhs: BN) -> BN;\n    fn __div(self, lhs: BN, rhs: BN) -> BN;\n    fn __batch_invert<let M: u32>(self, x: [BN; M]) -> [BN; M];\n    fn __udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn __invmod(self, val: BN) -> BN;\n    fn __pow(self, val: BN, exponent: BN) -> BN;\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BN, BN);\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    );\n\n    fn validate_in_field(self, val: BN);\n    fn validate_gt(self, lhs: BN, rhs: BN);\n    fn assert_is_not_equal(self, lhs: BN, rhs: BN);\n    fn neg(self, val: BN) -> BN;\n    fn add(self, lhs: BN, rhs: BN) -> BN;\n    fn sub(self, lhs: BN, rhs: BN) -> BN;\n    fn mul(self, lhs: BN, rhs: BN) -> BN;\n    fn div(self, lhs: BN, rhs: BN) -> BN;\n    fn udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn udiv(self, numerator: BN, divisor: BN) -> BN;\n    fn umod(self, numerator: BN, divisor: BN) -> BN;\n\n}\n\n/**\n * @brief BigNumParamsTrait defines a \"field\" with which to parametrise BigNum.\n * @description The \"field\" does not need to be prime, any value *should* work (TODO: test!)\n**/\ntrait BigNumParamsTrait<let N: u32> {\n    /**\n     * @brief modulus_bits = log2(modulus) rounded up\n     **/\n    fn modulus_bits() -> u32;\n\n    fn has_multiplicative_inverse() -> bool { true }\n}\n\nstruct  BigNumInstance<let N: u32, Params> {\n    \n    /**\n     * @brief modulus: all BigNum operations are evaluated modulo this value\n     **/\n    modulus: [Field; N],\n\n    /**\n     * @brief modulus but represented in a U60Repr form\n     **/\n    modulus_u60: U60Repr<N, 2>,\n    modulus_u60_x4: U60Repr<N, 4>,\n\n    // /**\n    //  * @brief double_modulus: used when performing negations and subtractions\n    //  **/\n    double_modulus: [Field; N],\n    // /**\n    //  * @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    //  **/\n    redc_param: [Field; N],\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> {\n    // some strange circular dependency problem means we need to define `new` as a member of BigNumTrait as well as a definition outside of the trait\n    // (delete this method to see. BigNumInstance methods that use BigNum::new() error out, and I can't find a way of declaring BigNum to satisfy BigNumTrait as part of the BigNumInstance definition because BigNumInstance has no contextual knowledge of the BigNum type...)\n    fn new() -> Self {\n        BigNum { limbs: [0; N] }\n    }\n    fn one() -> BigNum<N, Params> {\n        let mut result: Self = BigNum { limbs: [0; N] };\n        result.limbs[0] = 1;\n        result\n    }\n}\n\nimpl<let N: u32, Params> BigNumTrait for BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn new() -> Self {\n        BigNum::new()\n    }\n    fn one() -> Self {\n        BigNum::one()\n    }\n\n    fn from(limbs: [Field]) -> Self {\n        BigNum { limbs: limbs.as_array() }\n    }\n\n    /**\n     * @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n     * @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n     *               is precisely large enough to cover Params::modulus_bits()\n     * @param x: input byte array\n     **/\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> BigNum<N, Params> {\n        let num_bits = NBytes * 8;\n        let modulus_bits = Params::modulus_bits();\n        assert(num_bits >= modulus_bits);\n        assert(num_bits - modulus_bits < 8);\n        let mut result = BigNum::new();\n\n        let excess_bytes = N * 15 - NBytes;\n        let final_limb_bytes = 15 - excess_bytes;\n        let mut limb: Field = 0;\n        let mut k = 0;\n        for _j in 0..final_limb_bytes {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result.limbs[N - 1] = limb;\n\n        for i in 1..N {\n            let mut limb: Field = 0;\n            for _j in 0..15 {\n                limb *= 256;\n                limb += x[k] as Field;\n                k += 1;\n            }\n            result.limbs[N - i - 1] = limb;\n        }\n\n        // max_bits_in_most_significant_byte should be known at comptime. if not...messy!\n        let mut max_bits_in_most_significant_byte = 8 - (num_bits - modulus_bits);\n\n        let most_significant_byte: Field = x[0] as Field;\n\n        most_significant_byte.assert_max_bit_size(max_bits_in_most_significant_byte as u32);\n        result\n    }\n\n    fn to_le_bytes<let NBytes: u32>(val: BigNum<N, Params>) -> [u8; NBytes] {\n        let nbytes = (Params::modulus_bits() / 8) + (Params::modulus_bits() % 8 != 0) as u32;\n        assert(nbytes <= NBytes);\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..N - 1 {\n            let limb_bytes: [u8; 15] = val.limbs[i].to_le_bytes();\n            for j in 0..15 {\n                result[i * 15 + j] = limb_bytes[j];\n            }\n        }\n        let last_limb_bytes: [u8; 15] = val.limbs[N - 1].to_le_bytes();\n        let num_last_bytes = (NBytes - (N - 1) * 15);\n        for i in 0..num_last_bytes {\n            result[(N-1) * 15 + i] = last_limb_bytes[i];\n        }\n        result\n    }\n\n    fn get(self) -> [Field] {\n        self.limbs\n    }\n    fn get_limb(self, idx: u64) -> Field {\n        self.limbs[idx]\n    }\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    /**\n     * @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n     * @description should be cheaper than using an IF statement (TODO: check!)\n     **/\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let mut result: Self = lhs;\n        for i in 0..N {\n            result.limbs[i] = (lhs.limbs[i] - rhs.limbs[i]) * predicate as Field + rhs.limbs[i];\n        }\n        result\n    }\n\n    /**\n     * @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n     **/\n    fn validate_in_range(self) {\n        for i in 0..(N - 1) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120);\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    /**\n     * @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n     * @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n     *              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n     *              Why is this?\n     *              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n     *                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n     *                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n     *              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n     *\n     *              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n     *              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n     **/\n    fn validate_quotient_in_range(self) {\n        for i in 0..(N) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        // Note: replace magic number 6 with definition\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120) + 6;\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    fn __is_zero(self) -> bool {\n        self.__is_zero_impl()\n    }\n\n    fn __eq(self, rhs: Self) -> bool {\n        self.__eq_impl(rhs)\n    }\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn from_array(limbs: [Field; N]) -> BigNum<N, Params> {\n        BigNum { limbs }\n    }\n\n    unconstrained fn __is_zero_impl(self) -> bool {\n        let mut result: bool = true;\n        for i in 0..N {\n            result = result & (self.limbs[i] == 0);\n        }\n        result\n    }\n\n    unconstrained fn __eq_impl(lhs: Self, rhs: Self) -> bool {\n        lhs.limbs == rhs.limbs\n    }\n}\n\nimpl<let N: u32, Params> BigNumInstanceTrait<BigNum<N, Params>> for BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn modulus(self) -> BigNum<N, Params> {\n        BigNum { limbs: self.modulus }\n    }\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        self.__derive_from_seed_impl(seed)\n    }\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ### NOTE: these functions call unconstrained internal implementations because trait impl modifiers are not supported \n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn __neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__neg_impl(val)\n    }\n\n    fn __add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add_impl(lhs, rhs)\n    }\n\n    fn __sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__sub_impl(lhs, rhs)\n    }\n\n    fn __mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__mul_impl(lhs, rhs)\n    }\n\n    fn __div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__div_impl(lhs, rhs)\n    }\n\n    fn __batch_invert<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        self.batch_invert_impl(x)\n    }\n\n    fn __invmod(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__invmod_impl(val)\n    }\n\n    fn __pow(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__pow_impl(val, exponent)\n    }\n\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__compute_quadratic_expression_impl(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        )\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    /**\n     * @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n     * @description The expression is of the form (when evaluated as an integer relation):\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * Note: this method requires the remainder term of the expression to be ZERO\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The expensive parts of this algorithm are the following:\n     *      1. evaluating the limb products required to compute `lhs * rhs`\n     *      2. applying range constraints to validate the result is 0\n     *\n     * Range constraints are needed for the following reason:\n     * When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n     * Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n     * Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n     * To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n     * (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n     * To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n     * We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n     * TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n     * I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n     * TODO: explain why we apply a 126-bit range check, this feels like a magic number\n     * (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n     * TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n     * \n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) {\n        // use an unconstrained function to compute the value of the quotient\n        let (quotient, _, borrow_flags): (BigNum<N, Params>, BigNum<N, Params>, [Field; 2 * N]) = unsafe {\n            self.__compute_quadratic_expression_with_borrow_flags(\n                lhs_terms,\n                lhs_flags,\n                rhs_terms,\n                rhs_flags,\n                linear_terms,\n                linear_flags\n            )\n        };\n        // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n        // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n        quotient.validate_quotient_in_range();\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        // (should be a compile-time check...unconstrained function?)\n\n        // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n        let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t4: [Field; N] = [0; N];\n\n        // TODO: this is super nasty as it requires a multiplication\n        let double_modulus: [Field; N] = self.double_modulus;\n        for k in 0..NUM_PRODUCTS {\n            for i in 0..N {\n                for j in 0..LHS_N {\n                    // note: if is_negative is not known at comptime this is very expensive\n                    if (lhs_flags[k][j]) {\n                        t0[k][i] -= lhs_terms[k][j].limbs[i];\n                        t0[k][i] += double_modulus[i];\n                    } else {\n                        t0[k][i] += lhs_terms[k][j].limbs[i];\n                    }\n                }\n                for j in 0..RHS_N {\n                    if (rhs_flags[k][j]) {\n                        t1[k][i] -= rhs_terms[k][j].limbs[i];\n                        t1[k][i] += double_modulus[i];\n                    } else {\n                        t1[k][i] += rhs_terms[k][j].limbs[i];\n                    }\n                }\n            }\n        }\n        for i in 0..N {\n            for j in 0..ADD_N {\n                if (linear_flags[j]) {\n                    t4[i] -= linear_terms[j].limbs[i];\n                    t4[i] += double_modulus[i];\n                } else {\n                    t4[i] += linear_terms[j].limbs[i];\n                }\n            }\n        }\n\n        // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n        // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n        // so that we can ensure that no limbs will underflow for an honest Prover\n        let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n        // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n        // TODO: this is super nasty as it requires a multiplication\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    if k == 0 {\n                        let new_term = t0[k][i] * t1[k][j] - quotient.limbs[i] * self.modulus[j];\n                        std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                        product_limbs[i + j] += new_term;\n                    } else {\n                        product_limbs[i + j] += t0[k][i] * t1[k][j];\n                    }\n                }\n                if (NUM_PRODUCTS == 0) {\n                    product_limbs[i + j] -= quotient.limbs[i] * self.modulus[j];\n                }\n            }\n            product_limbs[i] += t4[i];\n        }\n\n        // each limb product represents the sum of 120-bit products.\n        // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n        // where no more than 64 limb products are summed together.\n        // TODO: check in unconstrained function that this condition is satisfied\n        // TODO: define trade-offs regarding the value of borrow_shift\n        // (the larger the value, the greater the range check that is required on product_limbs)\n        // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n        // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n\n        // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n        //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n        // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n        borrow_flags[0].assert_max_bit_size(1);\n        product_limbs[0] += borrow_flags[0] * borrow_shift;\n        for i in 1..(N + N - 2) {\n            borrow_flags[i].assert_max_bit_size(1);\n            product_limbs[i] += \n                (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n        }\n        product_limbs[N + N - 2] -= borrow_flags[N + N - 3] * borrow_carry;\n\n        // Final step: Validate `product_limbs` represents the integer value `0`\n        // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n        // i.e. we need to do the following for each limb `i`:\n        //      1. validate the limb's low-120 bits equals zero\n        //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n        //      3. add the carry into limb `i+1`\n        // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n        // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n        // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n        //  where k is the number of bits in the prime field)\n        // We then add the result into the next limb and repeat.\n        let hi_shift: Field = 0x1000000000000000000000000000000;\n        let hi_downshift: Field = 1 / hi_shift;\n        for i in 0..N + N - 2 {\n            product_limbs[i] *= hi_downshift;\n            std::as_witness(product_limbs[i]);\n            product_limbs[i].assert_max_bit_size(126); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n            product_limbs[i + 1] += product_limbs[i];\n        }\n        // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n        assert(product_limbs[N + N - 2] == 0);\n    }\n\n    fn validate_in_field(self, val: BigNum<N, Params>) {\n        // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n        let mut p_minus_self: [Field; N] = [0; N];\n        let modulus: [Field; N] = self.modulus;\n        for i in 0..N {\n            p_minus_self[i] = modulus[i] - val.limbs[i];\n        }\n        let borrow_flags = unsafe {\n            self.__validate_in_field_compute_borrow_flags(val)\n        };\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        p_minus_self[0] += borrow_flags[0] as Field * two_pow_120;\n        for i in 1..N - 1 {\n            p_minus_self[i] += (borrow_flags[i] as Field * two_pow_120 - borrow_flags[i-1] as Field);\n        }\n        p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n        let mut compare = val;\n        compare.limbs = p_minus_self;\n        compare.validate_in_range();\n    }\n\n    /**\n     * @brief Validate self != other\n     * @details If A == B, then A == B mod N.\n     *          We can efficiently evaluate A == B mod N where N = circuit modulus\n     *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n     *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n     *          (todo: compute how tiny)\n     **/\n    fn assert_is_not_equal(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        let mut l: Field = 0;\n        let mut r: Field = 0;\n        let mut modulus_mod_n: Field = 0;\n        let mut two_pow_120: Field = 0x1000000000000000000000000000000;\n        let modulus = self.modulus;\n        for i in 0..N {\n            l *= two_pow_120;\n            r *= two_pow_120;\n            modulus_mod_n *= two_pow_120;\n            l += lhs.limbs[N - i - 1];\n            r += rhs.limbs[N - i - 1] ;\n            modulus_mod_n += modulus[N - i - 1];\n        }\n\n        // lhs can be either X mod N or P + X mod N\n        // rhs can be either Y mod N or P + Y mod N\n        // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n        let mut diff = l - r;\n        let mut target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n        assert(target != 0, \"asssert_is_not_equal fail\");\n    }\n\n    fn eq(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> bool {\n        let diff = self.sub(lhs, rhs);\n        // if self == other, possible values of `diff` will be `p` or `0`\n        // (the subtract operator constrains diff to be < ceil(log(p)))\n        // TODO: can do this more efficiently via witngen in unconstrained functions?\n        let mut is_equal_modulus: bool = true;\n        let mut is_equal_zero: bool = true;\n        for i in 0..N {\n            is_equal_modulus = is_equal_modulus & (diff.limbs[i] == self.modulus[i]);\n            is_equal_zero = is_equal_zero & (diff.limbs[i] == 0);\n        }\n        is_equal_modulus | is_equal_zero\n    }\n\n    fn neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe {\n            self.__neg_with_flags(val)\n        };\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let result_limb = modulus[0] - val.limbs[0] - result.limbs[0] + (borrow_flags[0] as Field * borrow_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val.limbs[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val.limbs[N - 1] - result.limbs[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    fn add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) = unsafe {\n            self.__add_with_flags(lhs, rhs)\n        };\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let result_limb = lhs.limbs[0] + rhs.limbs[0] - subtrahend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] + rhs.limbs[i]\n                - subtrahend[i]\n                - result.limbs[i]\n                - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] + rhs.limbs[N - 1]\n            - subtrahend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    // validate that lhs - rhs does not underflow i.e. lhs > rhs\n    fn validate_gt(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags) = unsafe {\n            self.__validate_gt_remainder(lhs, rhs)\n        };\n\n        result.validate_in_range();\n\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0] - 1\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n    }\n\n    fn sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) = unsafe {\n            self.__sub_with_flags(lhs, rhs)\n        };\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let result = self.__mul(lhs, rhs);\n        self.evaluate_quadratic_expression([[lhs]], [[false]], [[rhs]], [[false]], [result], [true]);\n        result\n    }\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        assert(\n            Params::has_multiplicative_inverse(), \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\"\n        );\n        let result = self.__div(lhs, rhs);\n        self.evaluate_quadratic_expression([[result]], [[false]], [[rhs]], [[false]], [lhs], [true]);\n        result\n    }\n\n    /**\n     * @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn __udiv_mod(\n        self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__udiv_mod_impl(numerator, divisor)\n    }\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn udiv_mod(\n        self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let (quotient, remainder) = BigNumInstance::__udiv_mod_impl(self, numerator, divisor);\n\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        self.evaluate_quadratic_expression(\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false]\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        self.validate_gt(divisor, remainder);\n        (quotient, remainder)\n    }\n\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. return param is floor(numerator / divisor)\n     **/\n    fn udiv(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).0\n    }\n\n    /**\n     * @brief udiv_mod performs integer modular reduction\n     *\n     * i.e. 1. numerator % divisor = return value\n     **/\n    fn umod(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).1\n    }\n}\n\nimpl<let N: u32, Params> BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C  O  N  S  T  R  U  C  T  O  R  S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn new(modulus: [Field; N], redc_param: [Field; N]) -> Self {\n        Self {\n            redc_param,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus)\n        }\n    }\n\n    unconstrained fn __derive_from_seed_impl<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        let mut rolling_seed = seed;\n\n        let mut to_reduce: [Field; 2 * N] = [0; 2 * N];\n\n        let mut double_modulus_bits = Params::modulus_bits() * 2;\n        let mut double_modulus_bytes = (double_modulus_bits) / 8 + (double_modulus_bits % 8 != 0) as u32;\n\n        let mut last_limb_bytes = double_modulus_bytes % 15;\n        if (last_limb_bytes == 0) {\n            last_limb_bytes = 15;\n        }\n        let mut last_limb_bits = double_modulus_bits % 8;\n        if (last_limb_bits == 0) {\n            last_limb_bits = 8;\n        }\n\n        for i in 0..(N - 1) {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut lo: Field = 0;\n            let mut hi: Field = 0;\n            for j in 0..15 {\n                hi *= 256;\n                lo *= 256;\n\n                if (i < 2 * N - 2) {\n                    lo += hash[j + 15] as Field;\n                    hi += hash[j] as Field;\n                }\n            }\n            to_reduce[2 * i] = lo;\n            to_reduce[2 * i + 1] = hi;\n            rolling_seed[0] += 1;\n        }\n\n        {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut hi: Field = 0;\n            for j in 0..(last_limb_bytes - 1) {\n                hi *= 256;\n                hi += hash[j] as Field;\n            }\n            hi *= 256;\n            let last_byte = hash[last_limb_bytes - 1];\n            let mask = (1 as u64 << (last_limb_bits) as u8) - 1;\n            let last_bits = last_byte as u64 & mask;\n            hi += last_bits as Field;\n            to_reduce[2 * N - 2] = hi;\n        }\n\n        let (_, remainder) = __barrett_reduction(\n            to_reduce,\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n        let mut result = BigNum::new();\n        result.limbs = remainder;\n        result\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    unconstrained fn __validate_in_field_compute_borrow_flags(self: Self, val: BigNum<N, Params>) -> [bool; N] {\n        let mut flags: [bool; N] = [false; N];\n        let modulus: [Field; N] = self.modulus;\n        flags[0] = modulus[0].lt(val.limbs[0]);\n        for i in 1..N - 1 {\n            flags[i] = modulus[i].lt(val.limbs[i] + flags[i - 1] as Field);\n        }\n        flags\n    }\n\n    unconstrained fn __pow_impl(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x: U60Repr<N, 2> = U60Repr::from(exponent.limbs);\n\n        let num_bits = Params::modulus_bits() + 1;\n\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n\n        for i in 0..num_bits {\n            accumulator = self.__mul(accumulator, accumulator);\n            if x.get_bit(num_bits - i - 1) {\n                accumulator = self.__mul(accumulator, val);\n            }\n        }\n        accumulator\n    }\n\n    unconstrained fn __mul_with_quotient(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut mul: [Field; 2 * N] = [0; 2 * N];\n        for i in 0..N {\n            for j in 0..N {\n                mul[i + j] += lhs.limbs[i] * rhs.limbs[j];\n            }\n        }\n        let (q, r) = __barrett_reduction(\n            split_bits::__normalize_limbs(mul, 2 * N),\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut quotient = BigNum::from_array(q);\n        let mut remainder = BigNum::from_array(r);\n        (quotient, remainder)\n    }\n\n    unconstrained fn __mul_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let (_, b) = self.__mul_with_quotient(lhs, rhs);\n        b\n    }\n\n    unconstrained fn __add_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let y_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let mut z_u60 = x_u60 + y_u60;\n\n        if z_u60.gte(self.modulus_u60) {\n            z_u60 = z_u60 - self.modulus_u60;\n        }\n        let mut result = BigNum::from_array(U60Repr::into(z_u60));\n        result\n    }\n\n    /**\n     * @brief given an input `x`, compute `2p - x` (unconstrained)\n     *\n     * @description we subtract the input from double the modulus, because all constrained BigNum operations\n     *              only guarantee that the output is in the range [0, ceil(log2(p))].\n     *              I.E. the input may be larger than the modulus `p`.\n     *              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n     *              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n     *              because such a check is expensive and usually unneccesary.\n     */\n    unconstrained fn __neg_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result = BigNum::from_array(U60Repr::into(self.modulus_u60 - x_u60));\n        result\n    }\n\n    unconstrained fn __add_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n        let add_u60 = a_u60 + b_u60;\n\n        let overflow = add_u60.gte(self.modulus_u60);\n\n        let mut subtrahend_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n        if overflow {\n            subtrahend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for i in 0..2 * N {\n            let mut add_term: u64 = a_u60.limbs[i] + b_u60.limbs[i] + carry_in;\n            carry = (add_term >= 0x1000000000000000) as u64;\n            add_term -= (carry as u64 * 0x1000000000000000);\n            result_u60.limbs[i] = add_term;\n            carry_in = carry as u64;\n            borrow = ((subtrahend_u60.limbs[i] + borrow_in) > result_u60.limbs[i]) as u64;\n            let sub = (borrow << 60) + result_u60.limbs[i] - subtrahend_u60.limbs[i] - borrow_in;\n            result_u60.limbs[i] = sub;\n            borrow_in = borrow;\n\n            if ((i & 1) == 1) {\n                let idx = (i - 1) / 2;\n                if (carry & borrow == 1) {\n                    carry = 0;\n                    borrow = 0;\n                }\n                carry_flags[idx] = carry as bool;\n                borrow_flags[idx] = borrow as bool;\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n\n        (result, carry_flags, borrow_flags, overflow)\n    }\n\n    unconstrained fn __validate_gt_remainder(\n        _: Self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N]) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let mut b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60);\n        b_u60 += U60Repr::one();\n        assert(underflow == false, \"BigNum::validate_gt check fails\");\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for i in 0..2 * N {\n            let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n            carry = (add_term >= 0x1000000000000000) as u64;\n            add_term -= (carry as u64 * 0x1000000000000000);\n            result_u60.limbs[i] = add_term;\n            carry_in = carry as u64;\n            borrow = ((b_u60.limbs[i] + borrow_in) > result_u60.limbs[i]) as u64;\n            let sub = (borrow << 60) + result_u60.limbs[i] - b_u60.limbs[i] - borrow_in;\n            result_u60.limbs[i] = sub;\n            borrow_in = borrow;\n\n            if ((i & 1) == 1) {\n                if (carry & borrow == 1) {\n                    carry = 0;\n                    borrow = 0;\n                }\n                carry_flags[i/2] = carry as bool;\n                borrow_flags[i/2] = borrow as bool;\n            }\n        }\n\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags)\n    }\n\n    unconstrained fn __sub_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n        if underflow {\n            addend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for i in 0..2 * N {\n            let mut add_term: u64 = a_u60.limbs[i] + addend_u60.limbs[i] + carry_in;\n            carry = (add_term >= 0x1000000000000000) as u64;\n            add_term -= (carry as u64 * 0x1000000000000000);\n            result_u60.limbs[i] = add_term;\n            carry_in = carry as u64;\n            borrow = ((b_u60.limbs[i] + borrow_in) > result_u60.limbs[i]) as u64;\n            let sub = (borrow << 60) + result_u60.limbs[i] - b_u60.limbs[i] - borrow_in;\n            result_u60.limbs[i] = sub;\n            borrow_in = borrow;\n\n            if ((i & 1) == 1) {\n                if (carry & borrow == 1) {\n                    carry = 0;\n                    borrow = 0;\n                }\n                carry_flags[i/2] = carry as bool;\n                borrow_flags[i/2] = borrow as bool;\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags, underflow)\n    }\n\n    unconstrained fn __neg_with_flags(self, val: BigNum<N, Params>) -> (BigNum<N, Params>, [bool; N]) {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: [0; 2 * N] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        let mut borrow_flags: [bool; N] = [false; N];\n        for i in 0..2 * N {\n            borrow = ((x_u60.limbs[i] + borrow_in) > self.modulus_u60.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.modulus_u60.limbs[i] - x_u60.limbs[i] - borrow_in;\n            result_u60.limbs[i] = sub;\n            borrow_in = borrow;\n            if ((i & 1) == 1) {\n                borrow_flags[i / 2] = borrow as bool;\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, borrow_flags)\n    }\n\n    /**\n     * @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n     * @description see `__neg` for why we use 2p instead of p\n     **/\n    unconstrained fn __sub_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add(lhs, self.__neg(rhs))\n    }\n\n    unconstrained fn __invmod_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let one: BigNum<N, Params> = BigNum::one();\n        let one_u60: U60Repr<N, 2> = U60Repr::from(one.limbs);\n        let exponent = self.modulus_u60.sub(one_u60.add(one_u60));\n        let mut result = BigNum::from_array(U60Repr::into(exponent));\n        self.__pow(val, result)\n    }\n\n    unconstrained fn batch_invert_impl<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>; M] = [BigNum::new(); M];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn batch_invert_slice_impl(self, x: [BigNum<N, Params>]) -> [BigNum<N, Params>] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>] = [BigNum::new()];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n            result = result.push_back(BigNum::new());\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn __div_impl(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        let t0 = self.__invmod(divisor);\n        self.__mul(numerator, t0)\n    }\n\n    /**\n     * @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n     **/\n    // NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n    // To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n    // We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n    // Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n    // Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\n    unconstrained fn __add_linear_expression<let M: u32>(\n        self,\n        x: [BigNum<N, Params>; M],\n        flags: [bool; M]\n    ) -> ([Field; N]) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut sum: [Field; N] = [0; N];\n        // TODO: ugly! Will fail if input array is empty\n        let modulus2: [Field;N] = self.double_modulus;\n        for i in 0..M {\n            if (flags[i]) {\n                for j in 0..N {\n                    sum[j] = sum[j] + modulus2[j] - x[i].limbs[j];\n                    assert(x[i].limbs[j].lt(modulus2[j]));\n                }\n            } else {\n                for j in 0..N {\n                    sum[j] = sum[j] + x[i].limbs[j];\n                }\n            }\n        }\n        // problem if we normalize when used in computing quotient\n        sum\n    }\n\n    /**\n     * @brief computes the limb products of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_product<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> [Field; 2 * N] {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut add: [Field; N] = [0; N];\n\n        for i in 0..NUM_PRODUCTS {\n            lhs[i] = self.__add_linear_expression(lhs_terms[i], lhs_flags[i]);\n            rhs[i] = self.__add_linear_expression(rhs_terms[i], rhs_flags[i]);\n        }\n\n        let add: [Field; N] = self.__add_linear_expression(linear_terms, linear_flags);\n\n        let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    mulout[i + j] += (lhs[k][i] * rhs[k][j]);\n                }\n            }\n            mulout[i] += add[i];\n        }\n        mulout\n    }\n\n    /**\n     * @brief computes the quotient/remainder of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_impl<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mulout = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n        // TODO: ugly! Will fail if input slice is empty\n        let k  = Params::modulus_bits();\n\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            k,\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r)\n    }\n\n    /**\n     * @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n     * @description The expression is of the form:\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n     * For example, when computing the product a * b - q * p = 0, it is possible that:\n     *      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n     *      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n     * In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n     * In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n     *\n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    unconstrained fn __compute_quadratic_expression_with_borrow_flags<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>, [Field; 2 * N]) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n\n        let mut mulout_p = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n        let mut relation_result: [Field; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n        let modulus: [Field; N] = self.modulus;\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            Params::modulus_bits(),\n            modulus,\n            self.modulus_u60_x4\n        );\n        assert(remainder == [0; N]);\n\n        for i in 0..N {\n            for j in 0..N {\n                mulout_n[i + j] += quotient[i] * modulus[j];\n            }\n        }\n\n        // compute borrow flags from mulout_p and mulout_n\n        let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        let downshift: Field = 1 / two_pow_120;\n\n        // determine whether we need to borrow from more significant limbs.\n        // initial limb is \"simple\" comparison operation\n        // TODO: check how expensive `lt` operator is w.r.t. witness generation\n        borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n        // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n        // and there is nothing to borrow against for the final limb.\n        let mut hi_bits = (mulout_p[0] - mulout_n[0] + (borrow_flags[0] * borrow_shift)) * downshift;\n        for i in 1..(N + N - 2) {\n            // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n            // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n            //     * downshift;\n            mulout_p[i] += hi_bits;\n\n            // determine whether negative limb values are greater than positive limb values\n            let underflow: Field = mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n            borrow_flags[i] = underflow;\n\n            hi_bits = (mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)) * downshift;\n        }\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r, borrow_flags)\n    }\n\n    unconstrained fn __udiv_mod_impl(\n        _: Self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n        let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator.limbs);\n\n        let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor.limbs);\n        let b = divisor_u60;\n\n        let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n        let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n        divisor_u60 = divisor_u60.shl(bit_difference);\n        accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n        if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n            divisor_u60.shr1();\n            accumulator_u60.shr1();\n        }\n        for _ in 0..(N * 120) {\n            if (remainder_u60.gte(b) == false) {\n                break;\n            }\n\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (remainder_u60.gte(divisor_u60)) {\n                remainder_u60 -= divisor_u60;\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient_u60 = quotient_u60 + accumulator_u60;\n            }\n            divisor_u60.shr1(); // >>= 1;\n            accumulator_u60.shr1(); //  >>= 1;\n        }\n\n        (\n            BigNum::from_array(U60Repr::into(quotient_u60)), BigNum::from_array(U60Repr::into(remainder_u60))\n        )\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n\nunconstrained fn __barrett_reduction<let N: u32>(\n    x: [Field; 2 * N],\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>\n) -> ([Field; N], [Field; N]) {\n    let mut mulout: [Field; 3 * N]  = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout[i + j] += x[i] * redc_param[j];\n        }\n    }\n    mulout = split_bits::__normalize_limbs(mulout, 3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n    let mut quotient_u60 = mulout_u60.shr((k + k));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = quotient_u60.into_field_array();\n    let mut partial_quotient: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..2 * N {\n        partial_quotient[i] = partial_quotient_full[i];\n    }\n    // quotient_mul_modulus can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus: [Field; 2 * N]  = [0; 2 * N];\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N]  = [0; 2 * N];\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus[i + j] += partial_quotient[i] * modulus[j];\n        }\n    }\n\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus[i]);\n        quotient_mul_modulus_normalized[i] = lo;\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus[i + 1] += hi;\n        }\n    }\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n\n    let x_u60 : U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    } else {}\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n"},"410":{"path":"/home/jpag/nargo/github.com/noir-lang/noir-bignumv0.3.5/src/utils/split_bits.nr","source":"\n// Decomposes a single field into two 120 bit fields and a carry\nunconstrained pub fn split_120_bits(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let offsets: [Field; 17] = [\n        1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000, 0x10000000000000000, 0x1000000000000000000, 0x100000000000000000000, 0x10000000000000000000000, 0x1000000000000000000000000, 0x100000000000000000000000000, 0x10000000000000000000000000000, 0x1000000000000000000000000000000, 0x100000000000000000000000000000000\n    ];\n\n    for i in 0..15 {\n        low += (x_bytes[i] as Field) * offsets[i];\n        high += (x_bytes[i + 15] as Field) * offsets[i];\n    }\n    high += (x_bytes[30] as Field) * offsets[15];\n    high += (x_bytes[31] as Field) * offsets[16];\n    // TDOO: investigate why this is triggered in BigCurve crate? it shouldn't be?\n    //   assert(x_bytes[31] == 0);\n    (low, high)\n}\n\n/**\n * @brief Decomposes a single field into two 60 bit fields\n *\n * @description Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\n **/\nunconstrained pub fn split_60_bits(x: Field) -> (u64, u64) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: u64 = 0;\n    let mut high: u64 = 0;\n\n    let offsets: [u64; 8] = [1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000];\n    for i in 0..8 {\n        low += (x_bytes[i] as u64) * offsets[i];\n        high += (x_bytes[i + 8] as u64) * offsets[i];\n    }\n    let t1 = low >> 60;\n    let mask = ((1 as u64) << 60 as u8) - 1;\n    low = low & mask;\n    high = (high << 4) | t1;\n    (low, high)\n}\n\nunconstrained pub(crate) fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32\n) -> [Field; N] {\n    let mut normalized: [Field; N] = [0; N];\n    let mut inp: _ = input;\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(inp[i]);\n\n        normalized[i]= lo;\n        inp[i + 1] +=  hi;\n    }\n    {\n        let (lo, hi) = split_120_bits(inp[range - 1]);\n        normalized[range - 1]= lo;\n        assert(hi == 0);\n    }\n    normalized\n}\n"},"411":{"path":"/home/jpag/nargo/github.com/noir-lang/noir-bignumv0.3.5/src/utils/u60_representation.nr","source":"use crate::utils::split_bits;\nuse crate::utils::msb::get_msb64;\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\nstruct U60Repr<let N: u32, let NumSegments: u32> {\n    limbs: [u64; N * NumSegments]\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut carry: u64 = 0;\n        for i in 0..N * NumSegments {\n            let mut add: u64 = self.limbs[i] + b.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            result.limbs[i] = add;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for i in 0..N * NumSegments {\n            borrow = ((b.limbs[i] + borrow_in) > self.limbs[i]) as u64;\n            let sub = (borrow << 60) + self.limbs[i] - b.limbs[i] - borrow_in;\n            result.limbs[i] = sub;\n            borrow_in = borrow;\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N) {\n            let (lo, hi) = unsafe {\n                split_bits::split_60_bits(input[i])\n            };\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    unconstrained fn new<let NumFieldSegments: u32>(x: [Field; N * NumFieldSegments]) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x[i]);\n            result.limbs[2 * i] = lo;\n            result.limbs[2 * i + 1] = hi;\n        }\n        result\n    }\n\n    unconstrained fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n        result.limbs[0] = 1;\n        result\n    }\n\n    unconstrained fn into_field_array(x: U60Repr<N, NumSegments>) -> [Field; N * NumSegments / 2] {\n        let mut result: [Field; N * NumSegments / 2] = [0; N * NumSegments / 2];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..(N * NumSegments / 2) {\n            result[i]= x.limbs[2 * i] as Field + (x.limbs[2 * i + 1] as Field * two_pow_60);\n        }\n        result\n    }\n\n    unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            if (b.limbs[(N * NumSegments) - 1 - i] < self.limbs[((N * NumSegments) - 1 - i)]) {\n                result = true;\n                early_exit = true;\n                break;\n            } else if (b.limbs[(N * NumSegments) - 1 - i] != self.limbs[((N * NumSegments) - 1 - i)]) {\n                result = false;\n                early_exit = true;\n                break;\n            }\n        }\n        if (early_exit == false) {\n            result = (self.limbs[0] == b.limbs[0]);\n        }\n        result\n    }\n\n    fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs[segment_index];\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; N * NumSegments] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = shift % 60;\n        let remainder_shift = 60 - limb_shift;\n        let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        result.limbs[0] = (self.limbs[0 + num_shifted_limbs] >> limb_shift as u8);\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i + num_shifted_limbs];\n            result.limbs[i] = (value >> limb_shift as u8);\n            let remainder: u64 = (value << remainder_shift as u8) & mask;\n            result.limbs[i - 1] = result.limbs[i - 1] + remainder;\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr1(&mut self) {\n        let value = self.limbs[NumSegments * N - 1];\n        self.limbs[NumSegments * N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for i in 0..N * NumSegments {\n            let value = self.limbs[N * NumSegments - 1 - i];\n            self.limbs[N * NumSegments - 1 - i] = (value >> 1) + remainder;\n            remainder = (value << 59) & 0x800000000000000;\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: [0; NumSegments * N] };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs[0];\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs[num_shifted_limbs] = (value << (limb_shift as u8)) & mask;\n\n        // shift 84. num shifted = 1\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs[i];\n            let upshift = ((value << (limb_shift as u8)) + remainder) & mask;\n            result.limbs[i + num_shifted_limbs] = upshift;\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs[0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs[0] = add;\n\n        for i in 1..NumSegments * N {\n            let mut add: u64 = self.limbs[i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs[i] = add;\n        }\n    }\n\n    unconstrained  fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs[((N * NumSegments) - 1 - i)];\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"6":{"path":"std/cmp.nr","source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(s, quote { Eq }, signature, for_each_field, quote { & }, body)\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"71":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod constants;\nmod types;\n\n#[aztec]\ncontract ZImburseEscrow {\n    use dep::aztec::prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map};\n    use dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note;\n    use dep::aztec::macros::{storage::storage, functions::{private, public, view, initializer}};\n    use dep::aztec::keys::getters::get_public_keys;\n    use dep::address_note::address_note::AddressNote;\n    use dep::aztec::note::note_getter_options::NoteGetterOptions;\n    use dep::zimburse_verifiers::{\n        constants::{MAX_LINODE_EMAIL_BODY_LENGTH, MAX_LINODE_EMAIL_HEADER_LENGTH},\n        linode::verify_linode_billing_receipt,\n        zkemail::KEY_LIMBS_2048\n    };\n    \n    use crate::types::escrow_definition::{EscrowDefinition, TITLE_LENGTH};\n    use crate::types::recurring_entitlement_note::RecurringEntitlementNote;\n    // use dep::aztec::macros::{storage::storage, functions::{private, initializer}};\n    use dep::token::Token;\n    use dep::z_imburse_dkim_registry::{ZImburseDkimRegistry, receipt_verifier_id };\n\n    #[storage]\n    struct Storage<Context> {\n        definition: SharedImmutable<EscrowDefinition, Context>,\n        entitlements: Map<AztecAddress, PrivateSet<RecurringEntitlementNote, Context>, Context>\n    }\n\n\n    /**\n     * Initialize the Z-Imburse contract by setting the owner and USDC token.\n     *\n     * @param registry The address of the Z-Imburse contract registry\n     * @param usdc_token The address of the USDC token\n     * @param title The title of the contract as a string of max length 60\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        dkimRegistry: AztecAddress,\n        escrowRegistry: AztecAddress,\n        usdc_token: AztecAddress,\n        title: str<TITLE_LENGTH>\n    ) {\n        let definition = EscrowDefinition::new(\n            dkimRegistry,\n            escrowRegistry,\n            context.msg_sender(),\n            usdc_token,\n            title\n        );\n        storage.definition.initialize(definition);\n    }\n\n\n    #[private]\n    fn give_entitlement(to: AztecAddress, amount: Field) {\n        let recipient_keys = get_public_keys(to);\n        let admin_keys = get_public_keys(context.msg_sender());\n        let mut entitlement: RecurringEntitlementNote = RecurringEntitlementNote::new(\n            to,\n            recipient_keys.npk_m.hash(),\n            U128::from_integer(amount)\n        );\n        storage.entitlements.at(to).insert(&mut entitlement).emit(\n            encode_and_encrypt_note(&mut context, admin_keys.ovpk_m, recipient_keys.ivpk_m, to)\n        );\n    }\n\n    #[private]\n    fn redeem_linode_entitlement(\n        // email inputs\n        body: [u8; MAX_LINODE_EMAIL_BODY_LENGTH],\n        body_hash_index: u32,\n        body_length: u32,\n        header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH],\n        header_length: u32,\n        pubkey: [Field; KEY_LIMBS_2048],\n        pubkey_redc: [Field; KEY_LIMBS_2048],\n        signature: [Field; KEY_LIMBS_2048],\n        from_index: u32,\n        subject_index: u32,\n        amount_index: u32,\n        amount_length: u32,\n        date_index: u32,\n        receipt_id_length: u32,\n        // claim hash\n        claim_secret_hash: Field,\n    ) {\n        // read note\n        // todo: filter for linode entitlement\n        let notes = storage.entitlements.at(context.msg_sender()).pop_notes(\n            NoteGetterOptions::new().set_limit(1)\n        );\n        assert(notes.len() == 1, \"No entitlements to redeem\");\n        let note = notes.get_unchecked(0);\n        assert(note.owner == context.msg_sender(), \"Entitlement does not belong to the sender\");\n\n        // check the dkim key hash matches the linode verifier id\n        let registry = storage.definition.read_private().dkimRegistry;\n        let pubkey_hash = std::hash::pedersen_hash(pubkey);\n        let verifier_id = ZImburseDkimRegistry::at(registry).check_dkim_key_hash_private(pubkey_hash).view(&mut context);\n        assert(verifier_id == receipt_verifier_id::LINODE, \"DKIM key is not registered for Linode\");\n        // verify linode billing receipt and extract amount, date, keyhash\n        let linode_receipt_result = verify_linode_billing_receipt(\n            body, body_hash_index, body_length, header, header_length, pubkey, pubkey_redc, signature, from_index, subject_index, amount_index, amount_length, date_index, receipt_id_length\n        );\n        let dkim_key_hash = linode_receipt_result[0];\n        let datetime = linode_receipt_result[1];\n        // billed amount returns 2 decimals, so multiply billed_amount by 10,000\n        let billed_amount = U128::from_integer(linode_receipt_result[2] * 10000);\n\n        // determine the amount to reimburse\n        let amount_to_reimburse = if note.max_value >= billed_amount {\n            billed_amount\n        } else {\n            note.max_value\n        };\n\n        // release funds from escrow by shielding in public\n        // todo: event should notify how much was reimbursed\n        let token_address = storage.definition.read_private().usdc;\n        Token::at(token_address).shield(context.this_address(), amount_to_reimburse.to_field(), claim_secret_hash, 0).enqueue(&mut context);\n    }\n\n    /**\n     * Get the title of the Z-Imburse escrow\n     */\n    #[public]\n    #[view]\n    pub fn get_title() -> [u8; TITLE_LENGTH]{\n        storage.definition.read_public().title_as_string()\n    }\n\n\n    /**\n     * Privately get the admin of the ZImburse escrow contract\n     *\n     * @return the admin of the ZImburse escrow contract\n     */\n    #[private]\n    #[view]\n    pub fn get_admin_private() -> AztecAddress {\n        storage.definition.read_private().admin\n    }\n\n}\n\n"},"72":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/escrow_definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\nuse dep::compressed_string::CompressedString;\n\nglobal ESCROW_DEFINITION_LENGTH: u32 = 6;\nglobal TITLE_LENGTH: u32 = 60;\nglobal TITLE_SERIALIZED_LENGTH: u32 = 2;\n\npub struct EscrowDefinition {\n    dkimRegistry: AztecAddress,\n    escrowRegistry: AztecAddress,\n    admin: AztecAddress,\n    usdc: AztecAddress,\n    title: CompressedString<TITLE_SERIALIZED_LENGTH, TITLE_LENGTH>\n}\n\nimpl Serialize<ESCROW_DEFINITION_LENGTH> for EscrowDefinition {\n    fn serialize(self: Self) -> [Field; ESCROW_DEFINITION_LENGTH] {\n        [\n            self.dkimRegistry.to_field(),\n            self.escrowRegistry.to_field(),\n            self.admin.to_field(),\n            self.usdc.to_field(),\n            self.title.value[0],\n            self.title.value[1]\n        ]\n    }\n}\n\nimpl Deserialize<ESCROW_DEFINITION_LENGTH> for EscrowDefinition {\n    fn deserialize(fields: [Field; ESCROW_DEFINITION_LENGTH]) -> Self {\n        EscrowDefinition {\n            dkimRegistry: AztecAddress::from_field(fields[0]),\n            escrowRegistry: AztecAddress::from_field(fields[1]),\n            admin: AztecAddress::from_field(fields[2]),\n            usdc: AztecAddress::from_field(fields[3]),\n            title: CompressedString { value: [fields[4], fields[5]] }\n        }\n    }\n}\n\nimpl EscrowDefinition {\n    /**\n     * Create a new definition for a Z-Imburse escrow contract with the uncompressed string\n     *\n     * @param dkimRegistry The address of the Z-Imburse dkim key hash registry\n     * @param escrowRegistry The address of the Z-Imburse contract registry\n     * @param admin The address of the admin of the contract\n     * @param usdc The address of the USDC token\n     * @param title The title of the contract as a string of max length 60\n     * @return The new definition\n     */\n    pub fn new(\n        dkimRegistry: AztecAddress,\n        escrowRegistry: AztecAddress,\n        admin: AztecAddress,\n        usdc: AztecAddress,\n        title: str<TITLE_LENGTH>\n    ) -> Self {\n        EscrowDefinition {\n            dkimRegistry,\n            escrowRegistry,\n            admin,\n            usdc,\n            title: CompressedString::from_string(title)\n        }\n    }\n\n    /**\n     * Return the bytes of the title to display as a string\n     *\n     * @return The title as a string\n     */\n    pub fn title_as_string(self) -> [u8; TITLE_LENGTH] {\n        self.title.to_bytes()\n    }\n}\n"},"73":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/recurring_entitlement_note.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator};\nuse dep::aztec::{note::utils::compute_note_hash_for_nullify, oracle::random::random};\nuse dep::compressed_string::CompressedString;\nuse dep::aztec::macros::notes::note;\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, PrivateContext};\nuse dep::aztec::keys::getters::get_nsk_app;\n\n// unique ids for each verifier type\nmod HOSTING_VERIFIER_TYPE {\n    global LINODE: u8 = 1; // supported\n    global HEROKU: u8 = 2; // todo: supported\n    global AWS: u8 = 3; // todo: supported\n    global GCP: u8 = 4; // not supported in mvp\n    global AZURE: u8 = 5; // not supported in mvp\n    global HETZNER: u8 = 6; // not supported in mvp\n    global DIGITAL_OCEAN: u8 = 7; // not supported in mvp\n}\n\n// trait OwnedNote {\n//     fn new(\n//         owner: AztecAddress,\n//         external_nullifier_hash: Field,\n//         npk_m_hash: Field,\n//         max_value: U128,\n//         verifier_type: u8,\n//     ) -> Self;\n// }\n\ntrait OwnedNote {\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self;\n}\n\n#[note]\npub struct RecurringEntitlementNote {\n    // the user that is allowed to use this entitlement\n    owner: AztecAddress,\n    // // the external nullifier that the admin can use to nullify the note\n    // external_nullifier_hash: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // // the type of email verifier that should be used for this entitlement\n    // verifier_type: u8,\n    // random entropy to make the note private\n    randomness: Field,\n}\n\nimpl NullifiableNote for RecurringEntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for RecurringEntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.owner == other.owner)\n            & (self.max_value == other.max_value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for RecurringEntitlementNote {\n    // fn new(\n    //     owner: AztecAddress,\n    //     external_nullifier_hash: Field,\n    //     npk_m_hash: Field,\n    //     max_value: U128,\n    //     verifier_type: u8,\n    //     randomness: Field\n    // ) -> Self {\n    //     Self {\n    //         owner,\n    //         external_nullifier_hash,\n    //         npk_m_hash,\n    //         max_value,\n    //         verifier_type,\n    //         randomness: unsafe_rand()\n    //         header: NoteHeader::empty()\n    //     }\n    // }\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self {\n        Self {\n            owner,\n            npk_m_hash,\n            max_value,\n            randomness: unsafe { random() },\n            header: NoteHeader::empty()\n        }\n    }\n}"},"79":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe { random() };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"94":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"96":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"97":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"}}}