{"transpiled":true,"noir_version":"0.34.0+02fea6abe8637b9fb8f9535d1709b367d5e1da5c","name":"ZImburseEscrow","functions":[{"name":"get_admin_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns","directive_integer_quotient","directive_invert"]},{"name":"give_entitlement","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","unsafe_rand","decompose_hint","notify_created_note","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log","directive_invert","directive_integer_quotient"]},{"name":"get_title","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIfwAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAA4AAAQDAgQlAAQIQwAFJAAEPAYrAAAECAMrAAAFCAQrAAAGCAUiAAAA0DoAAAAIQwAAADweAAAABB4AAAAFMQAAAAAEAAAABQAAAAYkAAIBBQoAAgYFBCEAABUABDsBAAAeAAsABiQABwEFCgAHBgUEIQAAGgAEOwEAACoAAAYkAAQGBAAABAAEACQBBAEGAAAEBgIEKgAEByQABwAIKgIIBwAABAcCByoCCAcAAAQHAgcqAggHAAAEBwIHKgIIBwAABAcCByoCCAcqAQYEAAAEBAIEKgIEBioAAAQAAAQAAgAqAgYEJAAEAAgqAAgDIAAzJAAEBQcMAAQDBwYkAAQBByEAALoABiAAOCoBBAUkAAQDBAAABAUCCQAABAkECioBCgMkAAQEBAAABAUCCgAABAoECyoBCwkqAAAEJAAEAwUAAAQABQAkAQQBBAAABAQCBSoABQoqAgMKAAAECgIKKgIJCioBBAUAAAQFAgUqAgUEKgEEBQAABAUCBSoCBQQqAAAFJAAEPQoAAAQACgAkAQQBBQAABAUCCiQAAgALJAAEPAwAAAQMCgwqAAoNDAAEDQwOFgAODiEAAF8ADioCCw0AAAQNAg0gAFkqAQUKAAAECgIKKgIKBSoAAAoAAAQAAgAqAgUKKgAABQAABAACACoCCAUqAAgGIABqJAAEAgsMAAQGCwwhAABxAAwgAG4qAQoJKgAJAyMkAAQCDQwABAYNDiEAAHUADjsBAAAAAAQEAg4AAAQOBg0qAQ0MJQAEAQAADioAAA0kAAQgDwAABAAPACQBBAENAAAEDQIPJQAEAQAAEEYCAAAADAAAAA8AAAAQAAAAHwAkAAQfESsAAA8IAysAABEIBCIAAADbKgENDgAABA4CDioCDg0qAAgLIACJJAAEHwwMAAQLDA4hAACTAA4gAI0AAAQGBwsOAAQGCwwhAACRAAw7AQAAKgALBiAAaioBBQwkAAQ8DgwABAwODyEAAJgADyAAtCoBCgwqAQUOJAAEHxAMAAQLEBEhAACeABE7AQAAAAAEDQIRAAAEEQsQKgEQDyQABDwQDAAEDhASIQAApQASOwEAACsAAAwIAyUABAA9CAQiAAAA7isACAUAEQAABBECEgAABBIOECoCDxAqAhEKKgEFEQAABBEHDg4ABBEODCEAALIADDsBAAAqAg4FIAC0AAAECwcMDgAECwwOIQAAuAAOOwEAACoADAsgAIkqAQQGHAAHAwkAAAcFCQotAAAAAAoAAAAJJAAEBQsMAAQDCwwhAADCAAw7AQAAKwAABggDJQAEAAYIBCIAAADuKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMHBg4ABAMGCSEAAM0ACTsBAAAqAgoEKgAGAyAAMyUABAAACAcNAAQIBwgFCAgXAAgICAghAADaCAgBAAQIAwgHCAkrAQgJCAYBAAQIBAgHCAkrAggGCAkBAAQIBwACCAcgANEjJQAEAAIIBgcABAgECAYIBSsACAQICCUABAAACAkNAAQICQgFCAoXAAgKCAohAADtCAoDAAQICAACCAgBAAQIAwgJCAsrAQgLCAYBAAQIAwgICAsrAQgLCAcBAAQIAwgJCAsrAggHCAsBAAQIAwgICAsrAggGCAsBAAQICQACCAkgAN8jKwEIAwgGCwAECAYAAggHIQAA8ggHIAD0KwAIAwgFIAECKwAAAAgFAQAEAAAIBAAAJQAEAAAICQ0ABAgJCAQIChcACAoICiEAAQAICgEABAgDCAkICysBCAsICAEABAgFCAkICysCCAgICwEABAgJAAIICSAA9yUBBAABCAUgAQIjKwAYyhjK","debug_symbols":"5d3hTttADAfwd8nnfrizfeczrzJNU4GCKlUFQZk0Id59aWnSQLpEg5H9rXxBFNzkd2lip8fhPlfXq8un2x/r7c3dY3Xx7bna3F0td+u7bf3o+WVRXT6sN5v17Y/uj6uw/xLlEP94v9zuHz7ulg+76iIqyaJaba/337LUW7hZb1bVhcaXRS/YWI+xlrQNjflcrAQrx2CJoRNN6Ux0ziEfo3MmehP9fVHF9Gl7DLENDp3gKfT580deuTnyNnbkI0m7YQ5hxK4W7Ritlvt2/Yf2+sC/xe93UL56B/bFO6Dw1TuIn95B4tAEJ6bRcyJZaM6JHPn9OUH0l579c/gDz5EPPCd94Dlnr09J3FzUknIeyS65ULuDbr5gO/dq5NIc36QhjrwaSaTZdv1t/9VQ1/riWm+e9Rxc66NrPbnWs2u9uNYn13rXtZZd11p2XWvZda0V17VWXNdacV1rxXWtFde1VlzXWnFda8V1rU3oGTNbq9fQ06NnzGE9+nlfUqu32NNPf97n1qMxj+jrefTUzlVSZyrtFV88480xPgfP+AiOp3yan0/v8eQZz57x4hmfPOOzZzx6hR3Eo1fYQTx6hR3CK3qFHcR7rrDqucKq5wqrniuseq6w6rnCqucKq54rrHqusGW8wpaxZX5Fm4V7sXSWyukfNOH0pvQ0E8NyWBdUIhaHsDiMxREsTsLiZCyOYnEKFsegOIaVlQ0rKxtWVjasrGxYWdmwsrJhZWXDysqGlZUNKyvHgJWW6z/wTO1Jp3+ayGc8BOZhMM/kyaecPJ0ttx7F8sSpry9qFxFEMup7pj5/IsUmOPKZ4yNgngTmyWAeBfMUMI9heSj8R4/kN55+NJs0S7DY8mkij/KZYOF2jlC4cDf4MNI4m5HSbEbKsxmpzGakaTYjzbMZqc5mpGU2I7W5jJRnc4/Es7lHYqB7pIMH6E7m4BEwz+QVRNteHlHPeAqWRyLWPJIQmIfBPALmAbu+ZPLrq23FVc+JWN9jWJ5EYB4G80x+faXT9ZVK35PAPBnMo2CeAuYxLE8OYJ7J73+4Xb5Kon0PgXkYzCNgngTmyWAeBfMUMI9heTSAecDys4LlZwXLzypY7081gXkymEfBPAXLU8DWWRWw+boCNl9XwObrCnq3n8FeRbGAt7lK1La5StxvD1/Ae0qmoIN89KaSJic+j0QbhfZTAohzb7CG3oNysC9WNPSWaiN89J5qI3z0NpQjfPHNR29EOcJ33ZEvGnoryhE+et/nET56jR7kU3BddSm4rroUXFddCq6rLgXXVZeC46r7Uj/8uXxYLy83q+Nnw908ba86HxW3+3X/+ps6+Dc=","brillig_names":["get_title"],"assert_messages":{"144":"attempt to add with overflow","157":"Array index out of bounds","183":"attempt to add with overflow","20":"Not initialized","177":"attempt to add with overflow","116":"Array index out of bounds","164":"Array index out of bounds","193":"Array index out of bounds","204":"attempt to add with overflow","25":"Function get_title can only be called statically"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":14,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/+29B5xkW1Uuvvt2mO6eO9M98U7uMJ1jVVd1mhsYnkp4BB/8BSOhZ6YHr4QrcK8E31MQQVAMgCJgRlQE9KGo+AAFBMGEShJM72ECRMCAGADhP6envq6vvl5nn3N21a6eganf796uObXSXnuvtddee+19OtzVz9Er/3XUvnfX/va4nR/AnK/9LTX3KbeQVimmnB3XiZw3XSdydl4ncna1UM5Etv2u8dNqebsj6LXVMvZcBzLuuQ5k7L0OZOy7DmTsvw5k3HsdyHjzdSDjvutAxv3XgYwD14GMg9eBjAeuAxkPutbGQJCxq/b90JX/Dl/574i7ug7Z8SM3LAlwO2u/J8FOEkwkk3UyGSaTTeLME2eZOKPE2BNjSgZrMhgSZR8kemkCfLyjzg+fv+2qfz9e+3vvJz1p42nDdz7h0uZTh++65+7huy4PX7jrnidcejIjfjwU8V9DETu6699P1f5u3H335uO/+e7hu+8a3rh0afgpd979jcN3fcvmky4/7q6nMO6e7kCmx0MRJ5uQ9hFN4N4ZKvATQxGfFor4nCaa+blQpl09gYg3hyIe7wlv5lQo03OhiPdrQtpvawL3u0MFfmEo4stCEX+uiWY+d08g0x8IRXxJKOLP7Alv5q+EMn1HKOL7mpC2vzcc92hvoMBnQhEnQhErTTTzXqFM7xuK+JWhiN/QRDMvhDK9OxTxO5qQ9tebwH17qMB/EIr4vlDEv2qimU/qC2T69FDE7whF/P6+8Gb+eCjT14Yi/mYT0v5rE7hbK6EQgXtDEQdDEU/3hzdzLJRpuQmmy6FMv7wJpg8IZfo1TTD9hlCmj22C6ZNCmX57E0yfFcr0hU0wfWko059tgumrQpn+nyaYviWU6buaYPruUKYfaoLpx0OZ/mso4udCEfv2hjfz2N5ApjOhiGtNSPuEJnCfHirwd4Qifnco4g830cyfDmX66lDE14UivqWJZr4jlOkHQxE/3IS0p24Ox526OVDgUijiWijiVzTRzAeGMv3aJpg+IpTp45pg+uRQps9ogul3hjJ9URNMXxbK9OeaYPrqUKZvaILpW0OZ/mETTN8TyvSvmmD60VCmn26C6X+GMu3dF850YF8g06OhiCNNSPuxwUCm/xKK+JlQxD0Hwpu570Ag06FQxPkmpL3YBO5doQI/JRTx20MRn99EM286GMi0PxTxYCji0MHwZi6EMj0fivjgJqT9ziZwfyBU4JeEIv5kKOIvNNHM7zsUyPTFoYg/Hor46kPhzXxDKNM/CEX8syakHTwcjnvqcKDAY6GIc6GI60008ytCmT4oFPFhoYgXmmjmN4YyfXoo4nObkPY3m8D9vVCB3xOK+GehiB9poplPPRLI9BmhiM8NRfyhI+HNfEUo018LRXx7E9J+pgncnqOBAu8PRTwainj2aHgzZ0KZrjbB9NZQpv+9CaYPCWX6yCaYXghl+sQmmD41lOmzm2D6vFCmL2mC6U+EMn1NE0xfG8r0zU0wfUco0/c2wfQDoUw/3ATTT4Qy/UwTTD8fynTfLeFMj98SyHQkFHE6FHGliWZ+RSjTrw5F3GxC2h9pAvfnQgX+36GIrw9FfHsTzfzjUKYfDEX8UCjiJ5po5qdCmXYfC0Q8dCxc2vs3gfuwUIEfEYq4GYr4pCaa+bRQps9pgul3hzJ9aRNMfzKU6S80wfSXQpm+pQmm7wxl+r4mmH4wlOlHmmD6yVCmn22C6RdCme4/Hs70yPFApqNNMJ0IZbrcBNPbQpnevwmmDwpl+g1NML0YyvSbQhHvaULaZ58KZPq9oYg/FIr48lPhzXxlKNM3hCL+ThPSfr4J3P7TgQIfDEU8EYo4eTq8mT8WyvRnQhF/IRTxDU0083dDmf55KOLfNyHt0Jlw3NkzgQJXQhFvDUW8XxPNnB4KZFoORVwPRbzPUHgzHxbK9DGhiPc0Ie2rm8B9fajAbw5FfGco4vuaaOaHQpl+NBTxn0IR/6uJZnYOBzI9Eop4djhc2q9tAnczVODHhyLeE4r4HcPhzTw0Esj0ZCji2VDE0kh4M+8VyvQhoYiPakLaH2oC96dCBf75UMRfCkX8zSaa+duhTN/TBNM/CWX6d00w/Xgo0/9sgul/hTK9eTSc6aHRQKbDTTAdC2VaaYLpuVCm922C6QNCmX5dE0wvhzJ9Qijit4QiPquJZr4wlOkrQhF/uQlpP9oE7r+GCvy5UMSus4GIB86GN/N0KNPxUMT5UMRzTTTzfCjTh4YiProJaV/cBO7LQwV+VSjiL4civrmJZr4jlOl7m2D6gVCmH26C6SdCmX6mCaafD2W6byyc6eGxQKYjTTAdD2VabYLpraFM79cE0weGMv36JpheCGV6Zyji3U1I+96pQKZ/Hor4N6GI/zQV3sx/C2XaOx2IeHQ6XNoHNoH7NaECPzoU8RtDEe9popn/EMr0U6GInw1F7J0Jb+YtM4FMp0MRV5uQ9vFN4D4tVOBnhiI+LxTxxU008ymzgUy/PRTxu0IRf3A2vJk/Hcr0V0MR39aEtP/ZBG73XKDA+0IRj4Qijs6FN3MhlOlKKOIdoYgPaKKZDwllejEU8YlNSPtzTeC+LlTgN4Yivi0U8Y+baObD5wOZPjIU8XIo4pPnw5v5jFCmLwxF/MkmpP2TJnD/OlTgj4Ui/kso4heaaGbPQiDTQwvhTG8JZTrRBNP5UKbnmmB6RyjTBzXB9KtCmW40wXQzlOndTTB9RijT54Yi/kAo4o810czXhDL9zVDEP2hC2psWw3H3LwYKfDQU8Uwo4mwTzVwNZXqvUMT7hiJ+VRPN/LpQpo8LRXx6E9K+tgncN4UK/PZQxD8IRfzTJpr5oVCmn2iC6T+HMnWlcKZ7SoFMDzfB9Fgo08kmmC6EMr21Cab3CmX64CaYPiyU6TeEIj6moLTbL/B7Rg0xeZ3GTbVnyW8tfLtzmV7V0Vraa8sbfTXZWy93uYKXJkbQSSl51dSX9dZ174hX8hJHvPMIfztq/+2r/e4If5+rv7Dxy+kZ3m/3FfQM7x27Dz3Da6/uS/L0Rumv6lq8/ipt7nMNr3bZbsveOPwudwgveivlNs9+F20MlTuID/iDF2x5a7zUOrOXnnX1Nsq5NV5kPCb/HKbfe6lN+H1W2saydIosCd3uGLpYW15JaPfEoF0qVVmHXYYOuw0d9hg6TC5hfLjQSeTe0xtF7q03yvaSjF3EC3LeRDC9JEc3/XuG9NpHL9LqIr2AbvJC2R6Mo950vC7BGySYHsLbI3h7SO4t2Cv/jdS+73X1F93ic772txT4ubC5fKGyUV0F/S3duXr/glca33K5Ul5e2SitrF1eKVVKS5Wlauni+sqF6qWN5epqdWVl9dKFyoW11XL54vJS+eJqdW2pvLRRXr5wsVSpbm5sjeubW9ie2qea0MXN2DHm+/3FZS5nEU7oDrReF1vz/KDVd0vrFy5fKic9dWG1tLJ0aeXCcrW6ubpZWbmwXlqtrFSWS5dXLl/YKJWXltYuVq9031JpfX25tH55ebVU3kzoHiAdd7RO5i1dHGy9LrboHmo13fJVuoebp1spGfIeab0etsbwUYvuxtqVXt5cKV0qXfnf5eVLa6XqcnX9UnXtcqVUrV4qrZSrpQvra5uXVsurG+sXlitLG5dXKqWL5eVKaXV9i+4tNCZaOU8ltI/FoF3rv+OGPq40emllc6W6sblZKW2ur69dLFcurl3c3Lx4aaOysbq6Vrri4DY3Li0vXbi4dLly4XJpc2Nzbbl84YpJla9oJaF7Io4+tuz6ZBTa5S19nDL0sbS2tHxxdf3ixZWN5YsXLmxuXl69tLKxdrl8YWWjvHShcsW5b1Qqa9VqaWPz8uaFamX9yoBZu7i2Xq6uXixV1xO6p61x15wqlhO6Z+LoeSmhPWTJXL3iFytXGnZhZe1KjFa6dHFtaXNtY3l5Y3156VL10uWl0tLyyuXN0vJ65dJ6df3K4ys+dONKZF3auHC5vCXzMMncQv+5Ne5G4uijlMQHiBWeWitlTOKF+9SeJbxHLX0Ffq6o9sKFSvVSQgNFvxyjjGbx3bx0oby5tF65WLm4uV6+cPnKQNy88nVj40qfLV280imXN9YvldaT+e3KkC1VNi9fKF+8vLF08UKlsrx6OaE7ZtAtV6rlSyury5c3rvjtzYublSvB0BVPULm4UalemVcrF8rrF1Y211dXlkrVldUrz6pXTGGperF6xWIubVaWu6k9Tzte1+MDqT3jrnV6vHTFTDfWlyoJjQlDj+NZfNdXKxdKVxR2cWPjYqWyvrlZvdLcSxsXlsuVpfX1pdLl1QtbjqC0unklqrgSWl66vLJaujJfXJnW1le27GjS7J/SpY1LS0vLpeW1yuWljfUr9nHxwpU+urR56XL5SqRxYW35Qqlypf82NleXK5evRCjl6oW1tY3La+WLF5aXuqk94/vqenwotWeqhXq8MgdsXLx04XJCY9rQ4xQ9w++/5OpyPdzQc2KjN7lW2ejqOo/Z1tJeucx21lraV+eHoSi0l0rJ0KD7MLb74DTxa+EcuuzLn4Bnv4s2b23lT04Lf/Di/MkpkUnjitb1wfLyIPFjHqdEzlMip8ZRLRzPmyzTiYIyHY8j0wWW6XgBmULbwnhjBXVwLIoOVldZpmNt1sFQm/kV1TmvsVqo8yrLdEtBmY5GkWmlwWccDdRvaH/eEog3XgCP1/gt7s8Sy3QksC3t1vloATzOu7Q4FmmwBeZxmuRJ/o0c2HDtbzfBvLz2l+dZR7IfIrotjD1WfLHHIZIJ3yFbv8jU3YRMVzIBq1eWPFdyBOUrGcTyaodrzL110b95b3ZQYDRm4Txpi/XWsBcySHpCPp911017AsmH90I459pqGX16HKS/eDZCcmTpP8m5qt0nbeUcJNoXKW71xs3g2e8a/Vmr4+Yzwv+I6Gkf6RWwg/TsIMk2IrRGhNa1gJe0B2totDVZqz6mr/47r6HBywkvJ7wSvGmBS0jynlu7xg549pNMMcbOjPCfNnQyKzIN0jPuy1mhNSu0rgW85BnGBto6QG1jXatuZgz6gMdvXNeBcZv8+x0GXewDA/4Weg6YvZQj+l2SV/M3A0a7OugZxs6Upw1TBp4TGW8y2uGE9gjJpPqx8Cza2resX9AGv1kPnkV7TmCAc4Zog9+cB8+iPS8wwDlBtMFvntrU4xo/ef3VXCDefCDeQiDeYiBeKRCvHIi3FICX2BD6b5qeoW+m6Bn0zr4UOp2lZ9BXJz0riQzJM7Szm56hDSPUropr/CTzWrX2vbXzylLZpzPw7CeZYsxrVeEPXhyXL8fgf2V/NlljJWsw9PGytH0Ygg3Qj6yMZRF+WYQfJHj8tk/wQMsJLWfQAh4HWNVAWlWD1kogLeAdIVqoQeLJtaejTne19hyTK+BP0nPA/O3NdRp9NRoDhAO9cD+xXqok837Bca6x3b0efJ7wV+gZfh+sycZFJvhY+o0XtPqNm4PWlSj87aAVvNi4ozg3Mm4466q0fRiCDdCPrAz1TDyIkg8PfPzWaoOcCaQ1Y9BaDaQFPDZuODU27nEy7rXacxg34Nm4AfMbZNxTZNyqW+4n1gtH+/sFx7nGdq948BOZZgWHDX4xw7hVv31uZ6Xv+dq/S019/MYNnv0kUwzj1ggevNi4ozg3Mm5EUzPS9mEIxksEVkaeJeOqEG+1Qc4G0po1aK0F0gJelnF/ORn3eu25z7gB82Iy7vuScatuuZ9YL5wq2C84zjW2e9WD3+3qg4WdE35/cIZxd8uzPqLTYuNa9fUdePa7SMcCasa9JvzBy0o3AZbHJh+FKZL+WQ7EWwnEqwbirQbisS9Rm403YZQ28k4Ykca0OWGsiZ4SnayLTIP0bJRkWxda60KL8cYC8Q4E4k0G4o23Wc6hQLyjTcppzX19BNfisVf1jX3w7HfRbK9s6UnHftL+c3H4ryf0bhX+3Qb/2+Lw39o2vl34q488UOsD6Am6gNyQDXSQbuMVP/dfnsyMNeesZsiZwKwIDHBGDJlWPHgWbZ13gcPpdPBb8+BZtHsFBjicTgc/wHYSHLelo/abxgDAAeys4KTZfpx5x79Q4lgqpu1n9U20o8O0UEK6u1faPgzBOJ3GytBB0yvCW0HfPsEDLSe0nEELeK1c3LQyo5K1UHoFLZQ4bZi2UALMXbRQ+jlaKAEHeuF+Yr3whLJfcJIPG13Fg8/15bx4wu+/mLFQsvbldzsLEnNfXoNa3ZeP5tzIuLFvtSZtH4ZgA/QjK0M9k0YlvOmM31ptkK3MgrTSuGGYbNxvI+NGBAXjBjwbN2DuR8b9DjJuzUhwP2VlQbgPOLrs9uAnv00JDmdB3pVh3OvyjA/BtDMLAp4cMcYwbi2u0NUNj1/ePMYzLrIvkiXoD8Q7EIh3KhBvsEk5rQKwiFmQ5bwTRqQxbU4YWuiT6OScyDRIz3j/+ZzQOie0GK83EK87EI/nCyvij7Ta9a72wTN2xK96Ur+RtP/WOPy3Vtu3Cf8pg//tEfV/h/BPW+1nrfJBh1f7GP/cfxXhp0Uk7HvYfvKsmtMyNyOGTOsevDwrcuDwah/8ej14Fm2du4DDq33wA2wnwXFbdLXP/DvdzqwtcPhZ4ke0FoZp8SJj1WjHTa5xnuk1ZFY/w7s2upCyFqmJXdxBvNvll8Cz30XKBNT8ktqlLuYTu9zrdsalmilD/6yI/GynoMHt6Rb+moXkBADPO6sZcltts7Jy3SJvHp1Y2UvgWFm52+m3ZpMgfEnWHYIb24enyQme/S6arZR9OtexqskM+KK051YGGTDcnjxr4zuERx65rfkZOCOGTLd58CzamukHDo9V8AMsrwtLNWLJWnXupjouJ7PwTCsrOAEEn5HQqRp01gw6txt0Dhh02EZYLvTxKrVh3cBZdjt/T/Dhz24l/NsN/Irb+TsXjGfNMZEOqlR8dss1fzHnGK2sUX/KfcvF1dMic4drTCZayTXGg+65koTbmafip1fkCs0ppSVCI60rl/PmSmImQjXetA4odYtMg/SMDwzliRN2Cw+HdrMO8oBWnoM8zRyE6w7EqwTgcQkmtzlPqSzgqxFoWWW30Q4OZMRH4NnvYh3cuGpvyxl64nrzZdIdnvFhZ92Z1jptxjvYJJ5Vo2+1x9qxr0p7mNZ0QVrTQov3Aar0TG2cfcE+egZ74njl2yg20HJm1h/Gh6U/LU3PshvQyms3aP8Iyf2cm3bSxT4H4M/Qc8C8bW+dxvOo7Ro3QUZX+8s5jQPCL/l8b41W1qYjt+H7qQ29QhPwJ+g5YF5GbXghtQFjY8rgi0+0nfyMOZ4vmY45x2veSWOoaJdV13xul/DXGCMZOwfdzvVzl/zFAd5WHijOotXRQlpF5ErzYbDFYaKfFcNZMliHiStGe1p16Nmyu7wxj7XXtNuXBsTca0rrK9ZJl8g0SM8OimxMq0to7SYex+Tqp/PaDeBbsfbrCsQLieV5fuU25yncAnxvBFppuY9IMbE3JufDzDFzH9UMPXG8xTEmnt1MsuWJYfU8cCgex5SsnzxrMc3DMa2pgrSmhBb7/156pjbOvoBjctgTx+QfophuWWiz/jA+LP1Z5459dgNaee3Gqj36KMWzwNHaI47JAXMzxbP/YMTkHK8hJ+6LyQHzjxkx+ZTRhn/2xOSAt2Lyv+mv0/hXaoPlsy2fwznFds3x+B7b5yhPa6+/Mw7/ah6fh5gcckKWKuEkH47J1Sas2NSKFdUGs2h1tJBWEbnYh7Ffgy0OE/2sfLolA3A4Ju822uPLk/vWK5onT2jjhVgHax2c2Opg7TvH7PAXye9f01eXZYqe4xm+z9EzfJ+nZ/i+QM/wfZGe4XuJnuF7mZ7hOy5osS6cibfW9xc281p/KQp/e60PXuxX9sTgT4XN6Os90vZhCDZAP7Iy9ojwe0R4vn0Hv+0TPNByQssZtLYHP9HqDaTVa9AKWVBwUMSFzeocEiNb7KzThYPGxAx4LmwGzJtoYl6qPWTHAr1wP7Fe2JntFxxt14wHP5FpTnA4gFivyZYWrKh+rwXjjhS0mMati+toQQMZN5x2p7R9GIINuMaIFMJ0ivD6yjwe+Phtn+CBlhNazqAFvFjG3eyFMWzceqVYYpgPJuPGigXGDXg2bsD8EBn3Q8i4VbfcT1nGzX2gkWMafiLTvOCwcX9NhnHPy7Nr4Uq1+Sj87SwEeLFxR3FuZNyIqjQ7MAzBeAnKysiTapoX4teaQTKtZq96yzLux5Nx85VkacYNmCeQcX8zGbfqlvsp60o17gNu97wHP5GpJDi8pfiUDONW/fYRvRYbl/dIEnj2u2hlB1vGXRL+mp7i8QtYHpu8vMuTksOzPYF4XYF4nYF484F47EtYx8knYtp6I++EEWlMmxNGSfTEpSScmsWzUZKtSEnIWCDegUC8yUC88TbLORSId7RJOdPKqCJdEendsgHP2GVUqicd+0n7I92it3Uxi5aZLxv8Ix1x3ToqpkfV1EfiqBb0pJeP6IUtvCjQeb/D7bx3W4PTNF/elSEnL24AA5wRQ6ZlD55FW9OwfJ0vaIPfjAfPoj0kMMDho1rgB9hOt/Pe4g5XXyDrfA8cq/Suw6Xb/m5fTxvT9rP6Rt8bGGOhhLT3kLR9GIIN0I+sDB00QyI8GxJ+2yd4oOWEljNoAS/W9bSlQFrAy1oovYsWSggEfAslwNyXFkp/TAsl4EAv3E/W9bK8UOI+4HYvefAbzujQM/z+gYyF0pQ8i7dQ8hs3L5Ri1j7pQsnaF419PS32r2ak7cMQLBk0x2rfWRnHRPhjIjwXDuC3fYIHWk5oOYMW8K4H47aKIz7uMW7rYhbADJNx/yMZN36HXrifsoyb+2A/fZ/04PObfvfTM/z+bxnGvV+e9RG9dhY9gGc/yRTDuHuEP3jxinVGZOKxyXuFeYoD8WwoEG8yEI9tW988E7F4dTVvdBZpjJnRmb7FJ9HJuMg0SM/48p1xoTUutBivPxDvQCDeqUC8wSbltHy8vj28Xat91n2kMV229KRjSt9w3urV9qjw32/wPxlR/0eFv/oerPahJ+gCckM20OHVvgavHa6xaIYDbcvXsU/enyFnh6vbKWCAM2LI1O/Bs2gfFxjg8Gof/I578CzaOncBh1f74AfYToLjtmC1PyOyAAewM4LDz5I4A3ri7Mxx+n0/yavtuMk1zmvHDZnVz3CMtCR4+1xjO5JPvDef+v0SePa7xn5utV8aFP7gxXa5l/Smr0KYF9mXRX62U9Dg9uRZbwD+mOjBJ7fVNisrd4z4pOFZtDUJAhwrK8dJEB1fedcjqoN9rlHO5BMta5QxVsGz30WzlbJP5zpWYdf7SS7nec6ZzeTDPpbbo3ODzqGDBM9rkCy5ee0IGOCMGDJNevAs2vrWceDwWAU/wPK68GtrnZ38+2FddVysb3lMlogPnmmxfELnEQad/QadIYPOAYMO2wjv8KOPH01tuGDgzLudv3NJ0iXCv2zgL7mdv3ORrzVXwyeh6Bd9fRPJw3hcjvS87jq/x5IurZKjSHFt7ktfYpYc6VpNd3Ws8cc5rEWSLU9BvSZCueaU25lnrT0vcjVz8M9KsrKfaFceBjxjJ1nV700ZOhkXmXgtygfXiqxh2413uPaXc4OsV9XDpEEL8Oz3GQ+0nNByQot1WhRvLAAvaTPWf9xmXcuOCh63eTQCrX2Cl3yuhdhrNA5/M/ZSPSU6OSUyDdIzvvRF45FTQovxDjaJx7EN6yfPJuaotIdpTRWkpbutnH8YpWdq4+wL+IAp7IljoVdT3HFKaLP+MD4s/QGe+81nN6CV1240rk3kfl1XnZYeMAW8dcC0i2KgX6O2Y17lfNo2jmusBjlg0H1DjVbankfJaMObqA3z0gbA8wFTwPw5xZVvNuJG9tltjO1yXyLRztjOqpCKFGNUrXlaY0scMNVD4eOEk3z4gCnawHorOX87OVYs5aTV0UJaReRiHzZPz2CLw0RfYxfVryUDcHhdPGa0Z9Joj8bDk572sN1hbQc+ia1+T3edF3B4/0L9mOqX/c3/Ix/wecOPTVK7NJaLHXecSmnHED0HzN95/KY1f2vMbs2lwOG+teZlXeNF1MvWuvdkDr0A5hMZejnpiuvlpKEXjb+ca1wX6tze56LFjFWfjkbpOWA+nTHndtbK5OdJ9q7eKLIvJ2QfW6rz3rYB4qd9prGUtbbQPuN4i+M92DZosl/g+AJ0S6QnwPCh9iz/c1PNl2XFO5wjQ7wTcQwtWf5HY3n2P72edlj+x5pvtM/UptjX8NoScGMGrS7hzzHnNg2P7Ex/PIU+y3rCoD9LsfIhmrvw+4yHV/LspDxL+l33Y87X/l1q7lPh/WL0O/gfo+eAOZExfuE7Rkn2SL6jqr5jey+T+OleuLW/pPtiwIEeuHaOL9bA75w3Vl91UvhxHvukBw/jgv0MdNojMOz7t32cp594PXycno0LvYTP13XX5QBtXovNd9flU/8BeLYRwDyabKSU00Y4TmR9JZ8+F23v1rs+4/36SDUdZd7HAH+dAyP6CLOmRMc11me6d3qUcJIPr890/ObNOwH+lEGrFTkYn1wdLZTLtVAuV0Cu3fbTVox3NKMdPj89Qm21/PSUtJ9jNtCy9p9OeWidLEjrpNBiH3yKnk0KfSsnyX7Z4j8k8NbcoblVnjsemTHHKy7nFdPiJ12f6Pjm9cklmhue1b2TLq/RT8qzdvlBbYcVK31TRoyc5VN9Y57jYfW5rJeZ+HrZiiGP5NALYJ6UoZcjrrhejhh6OSoyONcYN0BvgOtzjadrWz120nTEYwowT88ZZ3N+oV1rdCvO1j6z4mwd79png86OvWHboMl+wZoDeQ8EMBzTZvmf78rQveJyHMw5zBL9/j0kL9fxJf9ZNSl4xjnVbnr+qp467e8n3vjdER5/OHbl/cRFgetz0fYbvPE0ePa7xnqRVsfTmtdZNHSitSY8Z/NeaZGzHu3G45oGtIP1muekNuDxm7U/lnectarmJm9NA3wHtzlPHQfgJyPQsmpCroUzGZFqmMwzGaonrlvhsy94xpdmjwmtMaHFeAebxBtwO2ubrPZYdUWT0h6mtViQ1qLQSp6VRS7eU1ukZ1zzhmdWfefbKNYeE9qsP4wPS3+Ax28JrZtFpg7X2J9d9G+rzTeT/Gg/56B+n+ZW4CDGAjzXNADmFM2hf0htx++8342LZruED+eXAfOejPjBOrj+Pk8bAH/CaMOnaK30AWqDnvWwYoM+F22O9c7x4NlPMsXwOYvC37rcdiEO/6o1T5eFP3JmkBOyzBBO8uGcGdrAestz/kovO86i1dFCWkXkYh9WpmewxWGir7GL6teSATgjJPuU0Z55oz0aD8972sN2h3UA50s+2lvnhf7n+iKMBfUB7BsA8+/kA4727KQ7T+1akGex446xlHaM03PA/FdGXkDnb7SF+1vnUuBw31rzMmiV4+ulwvk4n162YXr8ehkN0MuooReNvxzRSj46t0c8R1v16YjH1PZa36Mjzpcskuztypds31VB/LTPNB62xrv2GcerC/RMa5nYL/jmRc6XLBBulv85kaF7xeV4Jy33EGkt4j1Hw+cpYuYedM1o5R40/rb6uuiaBv0Q0W6XLLuFP7Hsdrqgb1Nd+eyE/bu1LrHifK0jseJ8wJQ8sqfN61pHAhirjuSBtD6pGvM6v8xiTHhZe+lJv+s+5nm0pblPpegez63Xjr/esT+5XVfoqUHTcwdWHho4nN+29rDwnWso8+SVhoSWhYdx4dsLVF/DY/D+nn7ieNc6a8Hzz7f21OVAn47Q7w+m+UljRstGAPNMspGH5LQRjs3ZvySfiLWs3jXxbp0t0vkioo+oWnY0KvyxJtYz0icJJ/nwmhhtYL3lmRcBP2bQWjRo+fJeix5aowVpFZXLtVAuV0Cu3fbT237C46e1HT4/PUJttfy06tKKpTU+4fhr0aA1WpDWqNBiHzxGz+aFvpUHZr9s8de6E55fegSG1wWA+faMOV5xOZdrxTRWbKl9wnPXs2lueEXPTrqcFxmVZ+3yg9oOK1b6nowYOcun+sY8j0n1uayXcny9bMWQx3PoBTAvytDL8QC9HDf0ovVzzjXGDdAb4GLf75WmIx5TgPmRnHE253TalRex4mztMyvO1vGufcb1duz/YNugyX7BmgMXSU+A0djZ539emaF7xeU42LnG8yOAPUjP8Pvf9tbxf4HibN2jv3E/SZz7STiHeuN+kvrnxv0kN+4nsfDGAvA4FrHydcDTOd66G6GVtNqcQ7hxP0kTeBzjsn6+GO8n+QStd66n+0k+TfFYkftJHkUx0H8YeUBes3P9bVqOHzCfy7m3xW34vLGmzlPLs0Jt6NhTbwNw2Gdbe2ZfSvW6Vi1PpNi2asWDmptB3lLjOL4LJ/lYtTystzw1M4Bfykmro4W0isjFPozXZrDFYaKftSdqyeC7n8Sq91g0+HW49FgJ8D67yxvzWPW+2j/na/8uNffx2ivflR2z3jetr6x1Co8XPOO5vsharN14HJOrn85rN4DnOgzGAy0ntJzQCq2TD11rcp0ctznPmQK9M6iVtNJyH7tdXx8z9zGeoSdep3ANOZ5xPXaedRCeHWwSb4DkYf3kWRfPS3uYVrO1+ta5l+SZ2jj7Ao7JYU8ck38lxXS635A3jtZ9nSy7Aa28dmPV13/1np10ffX1gHnlnjqNr9uzU16O1yBLl/DhmBwwj6zRSovJF4w2PNrThu06NqMN305tuEht0FiH+eJzLcTkkerbc52hi31noMaMWveqMbnmvqyYHG1gveXZlwX8Yk5aHS2kVUQu9mFcMwpbHCb6GrtYdcUqg66HOSfO7Vky2pNnvQJ4tjvsTfKd9x+m+nrtfx476gPYNwDmWeQDXm74MWut0YZaS7NGGu2w9qOe5/Gb1vxdpCZ5gXSg9Z7WGiyiXiqch/PpBTAvyNDLUIBehgy9jIoMzjX6MOgNcLFj1jQd8RkEwLw0Y87dzTsDt22A+GXlqK24UPuM860c78G2eS/45UZ8AboLpCfAaB2Nz//8bM54Z55oIt5JWwvtdn19zLVQ1l23PGa4X9WXFV3TwK5j39Oodqt+g+32Vwv6NtWVpQPgWPX11rpkxuDni/MB8yaP7GnzOtPn9pww6H+Q5vW3GPM6xyu672Ht/0Ss+zFro7TuiOt+3nnt+Otc939l3W/X4dLrfngfTe+Dsura8u7T6R6mb15h385+mGHYbgHzfk8/cQ6C7wjT/cOEz57euhygPUK//xnNTxozWjay3S7ak/rLnDbCsTnrK/lErB/0ronBs99F25svW/vSOl+0qzYQ/HVcY02sdfX8nqzkw2tiHb9550Xda2913ssnV0cL5XItlMsVkGu3/bQVV+epqU3z0yPUVstPawxhxXLWPt2oh1azZ6rYB4/SsyWhb+WB2S9b64Ii9fXWumBvjXZWfT3PR19t5KCt+EnnBiu2PEBzQ6l3J13OiwzJs3bXSKMdVqx0i0ePeXyqb8zz/pb6XNbLYny9bMWQx3LoBTBDGXo5FqCXY4Ze9D5s5xrjBugNcBHveq76dMRjCjCTGTbYxnt2c71LQfvMirN1vGufDTo79oZt872IJc+dB7zvBBiOabP8TzVD94rLcTDn1DnHpntD1r0HgDlH/u9rjftceD7SPbrY7wMZSmmHpcfzGXbeTI6A5wCrDldzBBH1UuH43KcXwNwvQy/NvOPCmhsZlmMFXe+1+z1EGuuwjv5HTv/H81u7/N92/Sjxa+a9SFynBBj2iVqvy37Bt1fmyx34/M8jMnRv3buC2tRr6V0yFyPaWex3yXyTR3amP55Cn2W18i/PoTnmCUaMfT2/S+aeayd22vV3yeA7x7V56hCPCy0Lz3qXjN6Hre864PPHz/L0E9cOWO+SYV/4q5SjRJ+O0O/PNfy03iVjvUvmjWQj35PTRrim98a7ZK5+OEd5410yrTkvc+NdMu3fS7rxLpnGeDTrXTK/2pvOv9l3yfyfjDneepfMp42zaxw/Fbln7M00N/zf3p10eY1+Lb9L5rczYuQv1XfJvCtDL7v5LpmYOco0HXGOEjDvzxln78a7ZLZtgPhpnwHGl6O03iWjeWX2iaDJfsG3f+uLnX3+568zdK+4HAdzbesS/f5h+r2mym04vluacwD49Llod657Y1vw7HfRzr1txbZl4a81xMk5F8SNj9m8+wGbT3v4xuPuvLRx9513PeGhm0+8Z/PJd3eQeGVpCv+W1tyb6NkcfT9o/M6fAYJnFc0Jjzmhw6n3OUN24KkqrJQUcE4YMgHWGla+rr+J8L7UX0FQNnRilejjGR+vWhBaWo6/m3h8DBLtYL3mOaoAeB5nocdtFwLx5gPw+IgDtznPtT96dKGVtPa5ncc6Yx/JcSInPuDZ76Id0y9byxfVU6IT61oNPDtNsuUpF8Gzg03i8XKQ9ZNnOahXDTCtckFaZaHFcwtfmaU2zr6Aj0FqeW8Snkz11eWcFNqsP4wPS396xXBC67TI1OEa+7OL/m21+TTJj/aPkNylvjot4CD8BjwfgwTMC/vqNCrUdoRuXHKGuRZbD4DhrQfArNZopYWWZaMN69SGkrRB5/5ugrmT2nAbtUG3mNLm+BK1sV1zPHjGnuNLwt+6miTma4Y0Pkx7zRDkhCw81pLPl9prhiwfBlscJvrDQt96zZDGN8AZIdmtkukRoz0j9L3LNb4WVNuD3xK7m6595y3kr+mr/35jKdioR2v5PEjPZkk2tfGS0GK8SiBedyDeNLVnovad0wWPoTFwtvZ8gn5/fC13wnMS+6s5ko/HP8sNmMfTPPF8Y67jsa/rynYdF9d2cNoaME/2zK1WjKdrciveAg6/ksCK3TQHEFEvW+nW8Rx6Acy3ZuhlPEAv44ZeNEZ3rnGe0/gv9vVfaTqaoeeAeVZGXIZ0a4lk381XUWmfWcebdf2pfcYx+Rw901JI9guWnyuTngAzR7hZ/ucHcsbEJaK53rfzd3yuhSuTY8auWa+o5DHD679J0WPRdS/6K+JR5CXLbuFPeC4AzE8U9G1WHKg60DIY9vm8drVe9z5OdDieOWDI/rMe2Zn+Qgr9tPUfYH6L5vVX9e2ka12BYV0JgWexy3yLHJH+pZz+ml+BsJuvOMl6hQ9v0QNGj2xzWQjnHvVVIlYcreN+kODLHjwuuQIMX9lixUjdBPNmTz9xnmqMnulrPRM+/2z4+xH6/e00P6XFjGwjgPl3spF35rQRzpuwf0k+Ea9I8a7PwLPfRbt+ZGvuGRP+Ol+064gE+I8Lf+RNICdk4SsGkg/nTfQaubzzol4zwrTKBi1fbrTsoTVekFZRuVwL5XIF5NptP23F1XmuDUrz0yPUVstPawyRd49o0kNrvCCtcaHFPtg6Pstzj+4VsF+25o4pgbfmDt3z4Lnj0xlzvOJyvt+KaXxrQiu2/CzNDSf6d9LlvMi4PGv3UTG0w4qVOmqy5z0qpj7VN+atVzWOGnpZiq+XCu8d+fQCmL4MvZx2xfVy2tCLdVSM4wbojY+KRYohqj4djdFzwBzw6Ij9N+d0dvNVVNpn1vFmjWG0zzg2Zv8H2+bjrvAL1hxo5UXGCTfL/5zJ0L3ichzMfgrlj/HG1VKJbQHjqlr7N48rwIxn2J7alXXkT/sROODL/gewnSwD4TMs57d4nWbh8fdJweFy9HGDz4ynLWgDl5nrNROWfrevsvToN54PvjoOtERa5wUukV7JGAdaIm2NAx0rR0UvbAuA7XQ7X6GssDwOuJzVwrOuhAROWu1DFh/8fojolATO0hHGhe+KkqrQ4bHzFRl+R3ETmh/v3Nmu+POZ7Xc0p8B+54EF/Q7amsfvcK5gt/2Odd1fHr+DNvj8jqVfwHztdeJ3HlHQ71jj4IbfqX94XPj8zpLQ4bHzuAy/o7gJzXeR31mpPa+Fg1vjbY1kafV4W6c2cNvW6Dlgnpwx3tbp3wkt67j8msAAh/3OqsjQSXCrhM+wy/R8jfhaePx9RXCScdIrcMyn6mmL5XdAX8cO6xcwz8jwO+tEt9Xj4BzJ00Xy8fgAzHdmjINzrlEv1jjQsXJO9MK2ANhO+n2F8BmWx8E54mvh8fdVwUnGQVXg8vDB7+x3lgXO0pHld9LGDvcVYF6U0++cI5qPJ78DGWuPtsbbKsnS6vHG45/btkrPAfOyjPGmdoj8OI+3VYEBDvudFZEhz3ir0vNV4ps13pYFZ9DVdW+Nt15PWyy/A/o6dli/gPm5DL/TzvlHfT/PP68uOP9Y4yBt/mFfvywydDp7nmFYHgfrxNfC4+/q43j+WS7AB7+z36kKnKUjy++kjR3uK8C8IaffWSeaDya/gzG/p/a3j2jHGG8r1AbeX1im54B5a8Z4Y3tmPfF4WxYY4PA+SFVk6HS2f2HYLnq+THwtPP7eKTjJONkjcMyn19MWtIH9Duj3uHT9AuYPM/zOCtFt9ThgP9hF8vH4AMx7MsZBmj/mcaBjRf0C2wJgO93OeVlheRzw/GPh8feq4LDf6SzAB7+z3+kSOEtHfFYMMGljh/sKMH+V4XcUN6G5SH6nl2RR/lqz1Wvw/0h/nW7P3p102b475Vk8H3d1b2QlpR2Wj/tEQR+HtuTxcVx7pj6O9TLtouulYtm8pRfAfLqgzefRy6qhF2s9Ydkp4OL5xatjJ01Hll/8r5z7apzLaNe+GvTG+2raZ1Y+LM1P87lE9s94BtsGTfYLHaQD0LXqCtT/+fxPf412Vl1BL9H855t2/o5Pn2uc61tte07a70S+fhftrEHZp3+uN14WmXjt3kmyqV0vCy3Gw5mciL5tyfL56m/Z5x/3jB3LBqz9qjSfzzGktY7hsx3Kr8s1ntM4YMg+7JGd6Xel0Of2nDDo31ajn9jL2N6ddKeJ17LwGhBeySfe+vmqXen6WfOZvH6ezfAZ8NdTJHu76ti25x3ip2tVjjsBk7aehx4GCQbjkccmx6jqI3qF3yDB93rwMC58uTz1NTwG1z39lMgwLbJzzM3+/rF763JY58rvoPmJ/USajQDmiWQj985pIxzvs39JPvFyjf56Y/Dsd9FiqrIVd+h8EdFHVC07WhH+qDfW3Ns64SSfW2p/uV9Zb3nmRY13mdaUQavDQ2vKQ2ulIK2icrkWyuUKyLXbfnrbT3j8tLbD56dHqK0+P819mMdPL3torRSkpTl49sGcR5sR+uyXud74seR3p4S/VffCPp1hOJYCzF0Zc7zibl3bVmusFdMUzSfcQ3PDD+7dSZfzIpoLbZcf1HZYsdK3ZsTIWT7VN+Z5/a8+l/UyHV8vFWvv19ILYJ6VoZdzAXo5Z+hlXWRwzt6vBVzEGKLq0xHnSwDzPTnj7GWSvV15kW0bIH7aZ7yvBBiNYbTPODZm/wfb5v2fHzTiTtC18iIaO/v8z0ty5kV4j+sOI3/L69MuepZ8h132yvPk8+Pk/37DoMtjvEuetTsvrHMY6/EVBXME1l5rWo6A1wdWXhi02pAvN/PCll4A85oMvawG6GXV0IuVF+a1i5UX5tqk2HnhaZGDdfQrOf3fbuSFt23Akxe25qyqwGif8X57Fz3T/Dn7BSv+5Dt1WB/AzfI/b83QveImNL+/1tA++r0dOUqM7Wl6Dph3FvQ/Grd3EF3AWGu8qsjAtlcxaHUJf85RAuYPM3KUrAeLPst6wqD/MZpj3kNzDH6f8fDimBPP4tUW2vGlxm4cO/1pTt/BsXG71r7b8bAnduLaU8Ck1Tpy/g4wnD/XtYHlqzQnyuto3/47xgX7Gei0R2B4vADmIxk5yhmRfdDVxxvvyR+/uS4HaI/Q7x8nX5kWv1h5/KGb6zT+MaeNcOzJ+ko+Eddg3hwlePa7aOubsrUm0zkwoo+oWnak4xo5Ss1NniOc5MM5Sh2/1ryh7bTWMdaanGl1eGhNe2itFqRVVC7XQrlcAbl2209bMV6evESan+YcpeWnNRa34kWtNeC8okVrtSAtPZ+Qlo/UvAX7Zc5Rwi9b/K39LZ07tF6V547TNdppc7ziJjSfQzlKK35KW59YdStnaW74bzfvpGvl53iN3g4/qO2wYqVpjx7z+FTfmOd4WH0u62Umvl62YshbXbZeAFPO0MutrrhebjX0ck5kcK4xboDeANfnGs+AtHrspOmIxxRg1jNsEP6b8wvtWqNbcbb2mRVn63jXPht0duyt+W72C9YcaK3ROabN8j/3ydC94nIcPODqfg/yxhtXV2uldVzBL1vj6kEFbQ9tzdOPPE9q/NdJcGyPDMt3C/GZLQuPv3cLDq+x1g0+s562WHcigL7u77F+AfN1Hv32UVtijIPbSB6eK3h8AOaRGePgNteoF2sc6Fi5TfTCtgDYTteoN2fA8ji4jfhaePx9XXCScTArcHn44HeumZ8ROEtH1t5w2tjhvgLM4zP8juImNN/WUW+Xnglp95lU5OOsWOjugrEQ+i1PLAS+3Ld8JrXIeOO9tazxpue3+IyGNd7WPG1BG9jvcHydpl/APDPD77Rz/lHfz/PPswvOP9Y4SJt/2Nerj+Yz6mlntngc3Ep8LTz+rj6O559qAT743fI7PG+ojjAu2O+kjR3uK8D8YIbfUdyE5ivI7+j83e55zmobYH6k4DxnrTXS5jn2OzrXdrqd86HCck6Px4GFx9/XBYfHyTmDz6ynLZbf4VqANP0C5pUZfofny1aPg9tJHvYDPD4A85qMcXC7a9SLNQ50rNwuemFbAGyeuJfHwe3ENyvuPSc4HO+sF+CD39nvrAmcpSPL76SNHe4rwLwxp9+5nWh+Ofkd9bHtnucgnzXP/VbBec7Kd6bNc+x3QtZZnAMpss7SfIl1ht2aD6y2WH6H1/dp+gXMH10n66z3Fpx/rHGQZ521JjJw3Mt2z7A8Dqx1FuPxd2udpfuJefjgd/Y7qwJn6cjyO2ljh/sKMH+d0+/wOmuc/I6eDW/3OgtrDGud9fcF11loa551Ftdqa34lz3jjPJ21zkobb1qPwPXj1niretqCNrDf0dygpV/A/Nt1ss76TMH5xxoHedZZei9TnrvAeBxY66y0u8DUx/H8s1qAD35nv7MicJaOMC58eeVeocNjp6+GmOZ3FHfrjDL5HX0nWDLe+L3eLcz5byb05qkNXTV5nGt87xtgBj1tY1rONeqJx5u+r5LfVwgdzIoMEXWwtWezkEMHgLklo3+xZ8Pr5Hbt2Wz3JfHT93hb98BpnwAHehgkGF5nzgpeD+kBMHpPf4/Q6SaYUY9ueY9onvgoveTf7zB+dySTE7nx4XPoUwIXsS5zxScTeMY+m691mtbZ/BmRiWPCgyRbnvdHXK94yTOMKa5RmJZnlk6nDfp6Xpff4zlS+7v13uWabUQch8usE/jCCZGP7fVRx+vynd9X1wXXNeNZj6GfHmlHj0c/PQaec+nzjOoeOCMkk+rewrNo67jRvWhu74wHz6KtPhU4Z4g2+Pl8cZ65FzgniLa+x9HCs2jr3A8crgUEP/bfXHsPWk5oOeG3T2QqgjcfiLcQiLcYiFcKxCsH4i0F4lUC8HgPjc+u8bs+8Qz9xXMO+oLfPQQ9z9Iz6JDvCCqLXPzeom56hnbBX/DeLD7xzkQtlX16BM9+F+280RZ/PfekNY/R7sEql0pJrfFht/PsDmQahmDWRbBWwZBVNKtFo9bFGHkHNPAOEq3lQFrLBq3VQFrAO0K0rADjWfvqdPViYMCfpOeAWaMg4DkUBADHKm62LmJNZN4vOM41tnvCg5/IZB0Ixu/fm7Fwsw4bxAm4/cYNnrEPG+ilB7oZFs25kXHD0eslH8MQjG8tYGXkubVDM7itNsipQFpTBq21QFrAY+OGU2PjfjkZt97AoNVwvHt3gIz7Z8i4rZtTtRP5Oxu39ZYA53ZWefP3blcfLOyc8PtrMoxb9dvndq4+ztf+XWrq4zdu8Ox30U4yla0VklbqRnNuZNy6IoZMwxCMl2CsDPVMmorggc/HxVppkCFpI04NMK31QFrAyzLut5Jx6zaSZdyA+dixOo23k3GrbrmfWC+8XN8vOM7Z28oWPh9LYeeE338/w7in5VnErTqvcYNnv4uWoimzAwd/TStFc25k3JzW5bYPQzDOgbAy1DNZOZ9pIX6tGSTTOhdIC3hZxv0hMu60MwBs3IB5Gxn335Bxq265n6yaEDZu7gNu97QHn/OF7Jzw+8cyjFv12+cac2rtMm7w7HfRzg+VrRwh1+6g/VGcGxm31pdBpmEIZhUlWZ6JB1Hy4YGP31ptkDOBtGYMWrcG0gJelnF/gYxbC44s4wbMj5Jx31SzTuswXNrBG97o2C84zjW2+5wHP5FpVnDY4PtqxNOMW/Xb5xqT2u0ybvDsd7GKyq4atybpuWAB7Y/i3Mi49UAEZBqGYLwLwMrIs1t2qxBvtUHOBtKaNWjdFkgLeFnGfWZ/na5WMVvGDZh7yLhHyLj1ZAH3E+uFT1PsF5zkw0ZX9eDzqSU2bvw+FWDceqPb+dq/S019yt7b7cEztnF3C381bh6/vNOAZ8dJNnUUekKG8foD8Q4E4p0KxBtss5yjgXhjbZZzMhBvvA1y8umO5HO+9nfpcqVSXdpcL5U21y5W19Y2ltbWK+WNjc2VtfXV0mpl7fKliytrG5cvbS6tl0uXNlcvVJZKF0uli+ulpdLa6iWW57aC8txuyFO+cHl9ee0Kz8rFC6X1S8vrS5XSSqmyUVpaWd/YXFu5tHJ5fam6Xr20sVStXpGosly+XC5Xli5dXipdvlhaY3luLyBPK/p/KBDvaJNyJv6IfVbyiReAlS7lDcDizBF2ANYtekp0cofINEjPJki2O4TWHUKL8VYC8VYD8ZYD8dYC8aYC8aYD8XoC8c4F4q0H4lUD8Th+1pi3j+BabCNVn42CZ7+L5iPKlp6sRdK9ovAvb92QeV74dxv87x2n/RcTev9N+KsvP1DrA+gJuoAMkA10+E2C8EPcf3kKJQDPfmwtQ84ERm88BM6IIRNg08Z8zNvXnciJD9/8F3PMZ+mSCxT4NsdVkdnSuXU7pXWLHehyO1WuNYPWrMgVup+dVoQRKR5YzrtmjFmEoWvGVUMnEyLTID3jauYJoTUhtHYT73DtL9+UwXpVPXQbtPTGXCt+zTvOJgLxQnJZ1qncvMlyPRXXSlpW4j3eqVp/bAGe/S7aDXZl3kFL0xPvNPIJNN4tg2x5djJ19zEUb8DtPJlntedWg5beJMG0VgvSWhVa1i1cfJsl3/AGm9tHz2BPWJMm7X6LZ0ODSxwwPs4ZcurmVJbdgFZeu0H7R0ju39m/U0a9teIMPQfMP91Sp/H7RttnDHm7hA/fgA6YP8qZn+U2vDtHG04YbXgnteF91AbOG4OvtaMbyeaX85ZrxNzRTbvFktcTMd+4lPbWGF5PHHQ7bxDR2JJPcqANrLc8/kNvUcii1dFCWkXkYh/GN2HoTrgVu6h+LRmAw+ugGaM93UZ7NB7u9rTHZ3d5Yx4rRxgpRljOGyPEzBGm9ZW1TuHxgmc81xdZi7Ubj2Ny9dN57Ub3B0OLJkIPOISuNTke4DbniaP19sFW0kqLyWO+kcqJnPjwKaOYMflyhp54f53f9IhnN5NseW5px7ODTeJxzTvrJ8/ZhHVpD9PqLkirW2hZRVZcm8F5BM654RnsiWPy0YG6nHobFOsP48PSn96wmGU3vpjcshu0n+PZmYGddBHPAp5jcsCsUzw7T23XG2m47YjJAcMxOWDKNVppMfm60YYKtUHfEA14jsm3xwG1YYXaoOvBtLxbJJ+znNfnxMy7Zfmc2G9y033ItDet6FsYZgkn+XBM3q4cU5G1civlYh/GeQXY4jDR19ilyNsFOCa3bhj35U586xWNGRNb3VP7/lU1+0xs9aG17xyzw18kvz/ySF0WyMW3duH7HD3D93l6hu8L9AzfF+kZvpfoGb6X6Rm+L9EzfOfb3PTEeGJrcWzdX/QJnv2u8S1zrfY1GpPrLVztOGip8QZkGoZgPLmxMvIEIBUhvs9dWyefmVY1kBbwuOjTSqA9iSZrLvZjp3CSngPm74/WadxjBFtWoGhdoZbIbB20ZKOrevA5CKrQM/z+PzMCGMu4d/ssVkzj1knEMu4ozo2MGw5fJ8xhCMYndlkZebIFFSHeaoNs5dGPZqvDs4z7BWTcfB9SmnED5rfIuH+QjFt1y/2UdRaL+4DbXfHgJzL1Cg4b/I9kGLdVlbHbxh2zKkON26pGjXLQk4wbkZuesRuGYGkXQuW5fGxWiFunafMaEfBiGXezp7uzjPu1ZNxccpFm3ID5ETLu15Fxq265n7KMm/uA2z3rwU9kmhMcNu43ZBi3deFhnEs3/cYNnrEvPNRLzfSWgXYctMQSbF3aPgzBeI3Hysizfp4S4q02yJAb2AYJj2mF1ONwTUGWcf8RGTfW3D7jBszdZNzvIeNW3XI/sV7mSGbroCW3e8qDz7fwsnPC73+aYdzz8qzPNdayt8u4wbOfZIph3FqbprfeRnNuZNzIpcxJ24chmJWYsTwTD6LkM0jw+O1aM0imtSeQFvCyjPuTZNx8p0iacQPmQWTc/0zGrbrlfmK9cMHjfsFxrrHd8x58vl6anRN+/48M41b99hG9dho3ePaTTDGMW6+0Bi827ijOjYwbyc4JafswBEv6rHaQt0EZx0T4YyI8D3z8tk/wQMsJLWfQAl4s4w65F3WQ8LKMe99gnS5gfcYNmAky7sEaDc5wQy/cT1nGzX2wn74vePATmcqCw8Z9S022NOPW+1z7iE6Ljct7Qg88+0mmGMa9X/iDl1W9DVgem7xrV6RCfTkQrxKItxqINxuINx2INxWItx6INx+INxeItxCIx76Zx2zyiRdd+2864Og6ko8wo+v9oqdEJydFpkF6dpxkOym0TgotxusPxDsQiHcqEG+wzXKOBuKNtVnOyUC88TbLeVsg3u1tlnMoEO9ok3JaMWSfa3zfVqsrZpzIiQ/7hjg+96rPUz2pz0vafyQK/6unkg8J/7LBP9Ki6yIvrMFf50acSoaeoAvIDdlAh08lYzxy/x11jfyOCj+ei3k8VzLkTGDS3jU4YsjEvmCCcJL/lgTvJqLFbemm599fM6JED0+sTRRpVb+RKuAqeatiYlb96t6zVfWrhQ5cIFIi2fIUqeAZ+tXaa827J64Vbc1Ur2uhTMTKQ2/lJXj2u2iVn1v9rpXWy4ZOKiIT1yFw1bbauhZf7CYen67QIh5LD1bFtFZ/hhYwWYU5efFC3ifDeRZusybuFgSP27wQgZaVr0rsLdJOhDduAc9+FytZe9Xe5jP0xBsH86Q7Tn5DtjwbE7qZEIpnVaha7Zk3aC1Ie5jWckFay0KL65gW6Jl1QkXfYZw8gz3x6YpfovzknNBm/WF8WPrT3aYsuwGtvHaD9o+Q3P+HcrN6MgHwfLpiu7qfYqA3Udvxe9mQt0v48OkKwLwlI5dqna74LU8bfKcr/mqwTuO3qQ16yuXG6Qr7dEWkosyqNTdkna6ALDzWks8ttb9fKqcrtDCY/dUw0dfYJc/pCr0hl08McHuqRnvynC4DPNvdrbXv4LNVw3mgzssqeNd3AWvlPPubvyMf0GXQ5ZNuC/IsXnlV4wkjbQdXlADmHzx+k2k5Z88Z1hyvpWppG+ugtf3+7Hh62Vr3TufQC2A+laGX6QC9TBt60fddO9fow6A3wEW8pbPq0xGPKcB8NmPOxfuwl0n23XwftvaZxnzWeNc+49JZKwYETfYLvnlxH/Hmd29n+Z/eGu2seGeZaCLeiVckUlrica/xIPtXwOz3tMOyIZ3PrDnfOvFmrS0B54s5AWPFnEc8sjP9Sgp9lvWEQb9MsfJxmmPUb1q82LfgWbzXGl71r5PUBp4HuCQZMMMZ4xe+Y4Fkj+Q7quo7tn0g8Zsk+dgv8DjUl5cBh28TBox1qIv36fPkNaeFloXHRYKAgTw9AsN+ZtvHefqJYy9+R68eCkz4PPpAXQ70Ka/FKuQr1X8Anm0EMJfJRlZy2gjHida5lijnOjLWZ+AZ+1yLzoGaT4joI6qWHVk33B50O98gOEk4yYfXZ2gD6y1P3kljr1bnYHxydbRQLtdCuVwBuXbbT2/7CY+f1nb4/PQItdXy06rLvLlo7TumNVuQlhV7ropcHI/y3KM5SfbL1twxL/BWjKq5VY5fLmXM8YrLecW0+EnXttonPHd9E80Nzzuwky6v0WflWbv8oLbDipW+OSNGzvKpvjHPY1J9LutlNb5eKrzP7tMLYJ6aoZeJAL1MGHqZFBmca4wboDfA9bnGeqdWj500HfGYAswzcsbZcyR7u9boVpytfWbF2Tretc8GnR17w7b5PZjPM+JO0OU9EMBo7OzzP9+boXvF5TiYc5hH6fcXkLx8S2daTQqe6Y3beP7ag3XaP0S8b9Q0ZH5u1DQQreulpmEpAI/3K7jNZcHTujxuczkCrbQzIiWi2+q5x4mc+IBn7DMipQw9sV8tke7w7GaSLU+8jWcHm8Szbs6y2lMyaJWlPUxruSAtraHj9UOZnuWtaYA9cU3D7xp5GCvH6qtDADzHYTeLTB2usT+76N9Wm28m+dF+zkG921gLIcYCvFXTMEpz6Puo7XorGvcR8staE9JNMB/MiB+sWy//jNpQljYAnvNogPlPWiv9JbXB2lu15vhIe/reOR48Y8/xOk/qnnefi+bzqpZda4yBnBnkVH9h5czQBtZbnvpXrcvNotXRQlpF5ErzYbDFYaKfFcNZMlg1DUtGe3yxkq+mwYqVsPcFPlsH4A/XeaHf2RYxBtQHsG8AzH+RDzh1cCddzpeU5FnEPcUtG5h3djt4TxEwnTXZ0/ICWvun86Q1x2uuim/HXDD0shpfLxVrr8TSC2D2ZuhlLkAvc4ZedL/XuUYfBr0BLnYdbpqOeEwB5pBHR5wvKZPs7cqXQG+cL9E+Awz3mY537bNBguG4ELYNmuwXrDULXwIKmBLhZvmf4QzdKy7HO2lxSaR52XuOBjxjxyVp+rfWQhzb602/Rdc0yEvFriNRn49xYvn8xYI+35rj03w+r7usdQloLRn8EOdbtcuAWfHInlaryPTTYnvAPJTWJ+cO7qTL8cqC8GJ/znUkkfaozTo9rYHjGrR75/TXbahBy7U/mbX/zjlmwACHzyEAxsor8f5knrySVQeleFYuvKHWze30NTwGv9LTT2l7mLqeSfg882BdDmv9+1U0P2k9r2UjgPkuspGvzmkjHJuzf0k+EWtZvWtivkIxUkxV9u2V8Jq4HXWq4K+1nFgTa63DNOEkH14T69mhvPOixrutPH+TJVdHC+VyLZTLFZBrt/30tp/w+GmrvjvNT49QW31+mvswj59e8NCaL0hrXmhlnW3juceqI3km+V2tIykJPMvYIzCcdwXMszPmeMXlXK4V0xTNJ3wPzQ2vOriTLudF5uVZu+v10Q4rVnpBRozcTH08r//V57JeVuPrpcJ1HT69AOalGXqZCtCLVT+mV3U71xg36H3fsc8JpemI8yWA+amccXYb6gBz1ZFon1l1JGnXQHNexDofbdWRvMqIO0HXyoto7OzzP7+YMy/CtXlfRcDsU+ErD9Iz/P6xw3X81xlxNj4RazoqXww1Hbz/XqTGgt/+ei3WWCT9zjmOdq1pwDP2C12WhH/F0Inu6fJeNdcI5InBdguPa3n0LV2WHpYMWoDHb6G1NVYNS168hQA8K5/F/hh4Osdzm+cj0GpzDqF6LeYQVE98PofzQhxXQjaNv7TWl/EONonXysvb0+rc89CqCK209ZraOPuCffQM9oQcdRIHfIrWO7NCm/WH8WHpT/O3WXYDWnntBu0fIbk/S/EYv8yMdcm1PIDZpBjo89R2vSeC97a6hI9Vy3PToat/i9TydB1Kb4OVywTMbdSGPYfqbdB9Cis2uBZqeSLFlmYtj8Z27a7l0RgupJZHYz4rB2OdH/W9YNCi1dFCWkXkYh/G8TZscZjoa+yi+rVk0Lp5K086YMjA/DpceqwEeJ/d5Y15NMa6Fu4TirQmKPv6inWi+b9Bt3Oda9meVR+7W3gck1v7yXnsBvCcb9C1e95xVgrEC70zUNcTedfOGtu0klbaGjhmrZITOfEBz9hr4PkMPXG8xTEmnnE9dp4YNsadga1c1y0VpLUktNj/c/ytNs6+gGNy687Ah1FM51s7YHzkWTtwfT23OU99PeC5vh7t53j2EZ54FvBWTP6Lh+o0Hk1tB1+O1xZr3xGT6/mEboK5lBGTV4w2XKY2LEkbAM8xOWCeTW24k9qgsc6NvNvOmC32maZF4a8+DzE55IQsPNaSD8fkavN587eaV86i1dFCWkXkYh9m5RWGib7GLqpfX86dY3KrDt2qjcuzXtE7ahK703NQia1+nOrrtf957KgPYN8AmOeRD3il4ces2nKuh4gZd8yltMOqkf5+j9+05u8iNckcx2l9CeulGl8vFc5v+fQCmB/O0MtsgF5mDb1o/OVcow/Tc+Xtvm9SYwvW0U9kzLnYR14i2du1j2zVATVz/yX7RcAs0jNr3/aVRnwBulp3w/6nx2X7n9fkjHf4fBHinTbHJZXrZT9wTmSy+rromoZrKCLZ7ZJlt7o3wXb7xoK+zZrj0+yE/fuSyMDr+bLBz5d7B8xveWRn+qUU+mmxPWD+L83r7zi0ky7HK3PCi/dV8OxauqfxXTn9NZ8N+GK6pxHjkccm3w+YZ698WmhZeHynGmDS7mlk3w6YP/f0k1WzxPkG9vf7DtflsNa/H6L5KS1mtO5pPER7Un+T00Y4Nr9xT+PVD6+Jb9zT2Jq8l0+ujhbK5Voolysg12776Xbc08h+WnXJ8QFoWfl/aw2K77MFaVlrgKrIxWsAnns0D8x+2eI/L/A8v+g9jZx33c6N1minzfGKy7lcK6Ypuia8heaGlcM76XJeZFaetfueRrTDipVOe/SYx6f6xjyPSd89jW24v9K8p9HSC2DGM/Qy4YrrZcLQy7V+T2NF+LOO5jNs8Ivpnkb2iVbsDdvm+voV8n86B1p5EY2dff7nXIbuFZfj4LT1aYn4cA6a/S9gzpP/e9ThnXR5btOYvd25PeuMCGDuk2HnmiPQeghfjsC6X2TO0Esb3rFjnlG39AKYB2foZTpAL9a5K437nGus49A6zNh7Cmk64tw5YB6e0/+1IX7d4f+2bcBzPtSaszSXr33GtbElegbbZh/2KE/8Z50vKhFulv+5mKF7xeXa1IhjyMxR6t4H+587C/of6w6QtP0XKx/JeUu9l51pdQl/6w6Qb/bIzvTLKfRZVusOkOfTHHM3zTF6XtXixTEn33sUKXYy40uN3Th2+tacvmOeZG/X2nc7HvbEToDJEztx/s5aG6CNHPvnqVsC/LwHD+OC/UyDT3A7c/pcx/M8Tz/x+niKnun59oTPGylHadUZfR/5yrQ9DiuP/1aykRfktBGu6eU5IflEXIN5c5Tg2e+i5UjL1ppM58B2ra/AX9cgyFFqbnKCcJIP5yj1nhBr3rDOuOjZ7lafl/HJ1dFCuVwL5XIF5NptP23FeHnyEml+mnOUlp9uVV6RaU0XpDUttNgH83pc972s82Psly3+1v4W+3SrBojjlzdnzPGKy2fA0uKnIveM/TbNDX97eCddXqPrfl+780xohxUr/X7BXFyRvA7Hw+pzWS/V+HrZiiHHXbZeAPPeDL2Mu+J6GTf0MiEyONcYN0BvgIud307TEedxAfPnOeNszi+0a42+bQPET/sMML68svYZx8bs/2DboMl+wZoDrT0azm9m+Z+P5tyj4ZzB91GcjNrWW+n3j9Pv+i5xvlua8fG5Fs6dtfM99nrn+M2uHjc+ZvPuB2w+7eEbj7vz0sbdd971hIduPvGezSff3UHiLUtT+Le05t5Ez3rp+0Hjd/4MEDyrqFd49AqdQYLvNWQHnvXK97Ty7ROGTHw1yY3XDOUbjs1eScPHq/KEhruFV/M41+wVOHnxlgLw+IgDt/nGa4bqH/C8Fl4ztCgyDdKz0yTbotDSsn/GO9gkHm+FWduRoGUdRb7eXjO0cKQu56LQZv1hfFj6Azx+S2idFpk6XGN/dtG/rTafJvnR/hGSe+VInRZfzca6tF4z9JIjdRrr1HbruDja1SV8eOsBMLfXaKWFlutGG+7laQPgTxhtuIva8N+oDcDxxQZfaiEndMLp1EjHHarW3KBxHtKpuh3IYy35cDpVlxUd9Cytnewr1nPS6mghrSJysQ/jVw/BFoeJ/rDQzxNHA2eEZNdrSAbod27PCH3vco2vBdX24LfE7s7VvnMJ4SOP1H9nPSWfPhfNLrx2CZ79buc4aBH/LbvUVz/puOD1CI8BPFsh2fJc44FnM4F4a4F456g9Z2vf0dZkDDyexsDe2vOz9HtvbRClHcvV19GBNs8fgHkyzRMvNOY6Hvt6LDgZjzr3n6/9u9TcZ8tPLqS0g48CA+ZpnrmVaTlnx5lWHAgc9mclkYH1shpfLxVO5/v0AphnZuhlPkAv84Ze9FU3zjXOc9AbH7mLua5J0xGXCwLmeRlxWRuvzM91VFb7zDoqq2sH7TMuf7fWCXxU9oVGDAq666QnwOiV8z7/8+KcMfEy0bwX+UcrP/Wl/ioqXaPx+pXn7yLrXuQUI/q2Jcvnq79ln/8zBX2+VYaW5vN5bW6tXa214ALRSVsLAuY1HtnT5nWmb+V+mf7v0Lz+WmNe59fsLAov9udcBhqzzFfLh/RqBS4fev214693lDdszzueqw20LKzDpZdj8ytC9PVR1tUd1rjP82oYCw/jgn07+2GGYbsFzG97+onXRLwFWBF6CZ9/N/z9CP3+ezQ/sZ9IsxHA/BfZyLty2gjnTfRa7Iglut71GXj2u2ivCTSvrNP5ol1HJMBfxzXyJnpsga8YSD6cN9Hxm3de1HiXaS0btHy50WUPrYWCtIrK5Voolysg12776W0/4fHT2g6fnx6htlp+WmOIvHtEix5azb7Win3wIj3TNYC1V8B+2VoXlATeWhfongevCz6bMccrLuf7rZjGii11fHP81HG0Tnf46E66nBfR11NdS0fF9tRkz3tUo8i1S1lHxUBrNb5eCh8VG8jQy3SAXvIeFeO4wToqFum6i8KvMbvFoyP234ske7vyIlac3YrXqnHpr+/1fOwXrDnQOirGMW2W/xnL0L3ichycjLvaV3es9revRh+ytK5vlkqghzYk32+lf/Pz5DObYXsc2ybf99S+cz92Cwxw+NVOPSJDJ8H1ED7Dsm12E18Lj+U8IjjJmDkmcAP0fcLTFrThJMEcIf5p+gXMmke/fa7ehhjjoJPk6SL5uC8Ac1vGOOh0jXqxxoH2B/NPPmwLgO2k348QPsPyOOgkvhbeEZGBcZJxMCFwaXy6iA9+P0R0FgTOshWMC/Y7aWOHbRYwD8jwO4q7dWXKYL1d0HHD9Qki7/nav0tNfezxZrUNMA8tON6s+UP1DRz2O930u6vB6LhU2D1CF3wtPJazR3B4/dFJfPB9wtMWy+/0EJ80/QLmURl+J+b8cwfJ0yXy4S9gLmaMgztco16scaA++w76nnxC5x8eB3cQXwuPv3cKDvudngw+7N/wO/udPQJn2Yrld9LGDo9pwDwpp9/pJJqfHKi3CzJif+NaineeVjDesY4px4p3Juh5kXhnj+Ak42Rd4DjemfO0xfI7e4h/mn4B85zrJN757oLzjzUO8sQ7rDvnGuMdtnuG5XFgxTuMZ81VHO/MCVwaH57n8Dv7HT0+nDfeSRs7bLOAeWlAvPNH5Hf0uoDY4039Cx8zwnPA/GTGeFM7tI7d6ngDDvudkPHGx8F6iK+Fx3LqnMbHa9kG8H3d0xbL7zD9NP0C5hcy/M4eoht7/tF5neefXyo4/1jjQG1e5we2BY4XrHmGYfVYIPhaeNZcxXHvusCl8eF5Dr+z35kSON+cxX4nbeywzQLmLTn9Ds8nryW/gzHPuVWN7c/X/l1q6nN1vOm4gnx8JBow78wYbzqWrCvMdZ4ADvsdPcLb6Wz/wrCc/+NjqhYeyzktOLx3Ys1z6562WH5Hj6ha+gXM+zL8TpxjzFfHAfvBLrfTvjim/2DGOFB/bI0D9Q/qF9gWANvpds7LCsvjgOcfC4+/61zHfmd7byGFD+ev8Dv7nVmBs2zF8jtpY4dtFjAfyel3uJ0vIL/Tvmthr443Hv/cNuv6009mjDe1wzzjDTjsd0LGG5834LjewmM59ZUBvC9vzXOrnrZYfkev77T0C5jPZvidOFcg2fOPXhXA888XWjD/6F6Szg9sC4DtdPY8w7A8DtgfWHjWXAUcnn9mM/jwPIff2e9UBc43Z7HfSRs7bLOA2V8rusnyOxxDPYn8jtZkdZDcvnMOgDl8S51u5ZaddNm+q/Is3ti+uic7ldIOHtuAOeHRo2Xz1muZdWwDh+v5dWyzXs7F14t5NaGlF8CMZuhlIkAvE4Ze1O8412hr6q9j7+en6Yj38wEzk2GDu3nOIfT6Rt3P1z7juIrva9B5jv2CVc9knXOoEm6W/1nN0L11zqEysPN3fCLew+E958D3cMQ8C6jnM62zgFa/4hnvVeS5Jg/PcBYwot0uFa3DuU+Gb1O/pbrKU/fC/p3jCdBaM/h11f4NmAOG7A/yyM70V1Poc3tOGPTvpHn9IbfspHuOeM0Kr/bmUa7ala6fNa/A6+evyemvec9rN6/b1fW85a/VpwOHr/wCDNdYoo281sxzjlxjGwvPum5Xffus0GHfftnTT4kM50R263x7wuclt9TlsO6CeCzNT1oDatkIYH6cbOQJOW2E4332L8kn3pr/+rluN5KPqFp2lHXdru6JQGexr9tdN2h1eGite2i18rpdSy7XQrlcAbl2209b1+32ZLTD56dHqK2Wn9YYworlrLvEZj20pgvS0pwb+2C+bvdWoc9+mc85vIT8rs4dVp2vzh2AseaOH82Y4xU3oTlj5GOt+Mm3JgTMy2lueOstO+laeU/Oi7TDD2o7rFjplRkxcpZP9Y15a/1v7T+ci6+XilUDYOkFMK/N0Et3gF66Db1Y+7UcN/A6O/lEjCGqPh1xrg0wv54zzt6N63a3bYD4aZ/x/hVgNIbRPku7blfrHdgvWHOglRfR/Sif//ntnHkRzjU/lvwUbI7tjf0s56XP0XPA/D75v48ZdLmmZF2eRbwnrWrlt9EOK7/07gw7z8qnWDkvzYMnOlgVGawcQUS9mHcFWHoBzJ9m6GU2QC/W3Kj3KzrXGCtAb3xGMFL+rurTEY8pwPxVTv/H81u7/B/05junm+d+N+0z3vdinwjb5uu5P0b+75zQtfbFOFbL8j+fzLkvdo5ovnv/1e99LloOditHua17aQf7QcD8a4ad6d1u1ppDY2u9Sp39MscegJsxaHUJf85RAuazGTlK4E6k0GdZTxj0b6kdBEv67gtG/mXNw4v3KPEs9r6b7keCv7Uf2VNr27WYo9z2dcSvmf1RPiOqMT+PTfbr6i/OCT/2Q+c8eLou5XmpR2DYzwDmsKefEhnWRHZe37Pvuc+xuhxWjvL4sbp86j+sHCVgHkg2cqr2PctG4Ktv3FO/cw5sV80C+OvdWshRag5ninCSD+coNba05g1tJ9dDrRq01g1aHR5a6x5aywVpFZXLtVAuV0Cu3fbTVow3ldEOn5/mHKXlp2PclbxckJbm9dgH89223UKf/TLnKO9DfrfVMep/z5jjrRj1d2oxalr8xGs11hH7dsD8D5ob7jq2ky6v0Zfl2bVUu/Vwjx7z+FTfmOcxqT6X9bIWXy8VX+6W9QKYR2bopSdAL77cLcNy3KCvRY2do0zTkVVLfzlnnM11DO1ao1txtvaZFWen1fZbOUr2f7Bt3me5y4g7QdfKUWrs7PM/T87QveJyHJyMu9trz7m26F4kS+v65mqt9HlqA+v+XvQcME/PsL3z9G+eJ7gf7yUwwOG9vDtEhk6C4/P2DHsbPb8X8bXwztP32wUnGTMzAjdA32c9bUEbuGYe9Htcun4B810e/fZRG2KMg3uTPF0kH9+VAJjvyRgH93aNerHGgd6bcG/RC9sCYDvp99sJn2F5HNyb+Fp4/P284PA+8+0ZfM4TH/zONfO3CZxlK3xXKGDSxg5weey8LMPvKG5C8wzFXZCRY/qY443HP7eNxxtgfipjvKkdat7EGm/AYb8TMt5uped8B4eFx3LeJji8bmMbwPcZT1ssvwP6OnZYv4D5xQy/czvRjT3/QL7b6Tlgfrng/GONg9sFBjjgy7YA2E5nzzMMy+PgPPG18Ky5Cjg8/9yWwYfnOfzOfudWgfPNWex30sYO2yxg3prT79yLaH5hX71duocce7zp3T+Qj8cbYH4nY7ypHVr1EDregMN+J2S88br9duJr4bGctwpOMk56BI7jqnVPWyy/w/2Zpl/AvD/D79xGdGPPPzqv8/zzpwXnH2sc3CYwOj+wLQC209nzDMPyOGB/YOFZcxXHvesCl8aH5zn8zn7nnMD55iz2O2ljh20WMB/N6XfuIJofIr+jddaxxxuPf24bjzfA/GPGeFM7RJ7GN96Aw34nZLxxvvI24mvhsZznBIfX61Z83eNpi+V3OJ+Ypl/AfC7D79xKdGPPPzqv8/zjjqfLadmUNQ5uFRidH9gW+N40a56x9tSda/QHFp41V3Hc2yNwaXx4nsPv7HfWBc43Z7HfSRs7bLPbsnn6ZJ+Bu1UTR35H9wBijzce/1adFsdyRzPGm9qhtc+i4w047HdCxtsaPed8goXHcuqcxvspVnw95WmL5Xd0b8TSL2DOevTb5xr39GPPP9YeDmAmM8aB2pQ1DnRfSecH60xRp7PnGWtv37lGf2DhWXMVx73WfojFh+c5/M5+Z03gfHOWb1/NmrMAs5LT7/Da7eXkdyAj3nsZe7zx+E9oa30Ix3K3Z4y3NDv0jTe9IyJ0vPH+AOcTLDyWc01wknGyInAcVy172oI2sN8B/R6Xrl/A/PcMvxOnLtCef3Re5/nnwQXnH2sc6H66zg9sC4DtdPY8w7A8DtgfWHjWXMVxr+6vpvHheQ6/s9/RmkfLVnT/3zd22GYB84gMv6O4Cc1nkd/h+v7kE/Gs/GZCj9/fwW3jGmfAXMoYb/rOjtqWpfesPHDY78yIDBF1sFVvNp9DB4B5bEb/Yq94mmSPtFe8onvF233peZ8pYHx9AhzowbrDoYO+A8+yHT2vMiF0+LzKt3h0y+ueOeKj9BKY2/bVf+8ROh3yb64vvInojgtc7PN4aTKBZz/J1GL+WzWPeg5t3NDJpMg0SM8OkmyTQmtSaLUSj8cFZOY721hn2sYJgz7geSyfrX0fqf1N+D3/+E668B+AP0HPAfPIsTqN7z9el7eXaONZj9EGzvNwXYfVhh4Dz7l036z60XPJA26nfiw8i7b2rfoKbu+kB8+irbUuwDlDtMFvivj2usZPXt8wGYg3FYg3HYg3E4g3G4g3F4CXjFf0wzg9g4576JmeD+YaVL4jfUb48fzVTc8g7wi1gefL5JP4/Tjv/Vwq+/QDnv0u2ntPt/jrO3L0fRxJ+xdj8C+XSkkd+2FX7/dFafswBBugH1kZiyL8ogjPL+PFb/sED7Sc0HIGLeAdJFoLgbQWDFqlQFrAO0K0rEnrHTRp4WWQOmmdpOeAWaVJ63dp0gIO9ML9xHrhF/ztFxznGtt91oOfyDQuON30+x9nBOeq3z4XK6jyGzd49pNMMYx7XPiDFxt3FOdGxg0HviBtH4ZgA27nm+Etz2S9abskxFttkOOBtMYNWuVAWsBj44ZTY+P+OzLupdpzGDfg2bgBM0jG/VEybtUt9xPrhVcK+wXHucZ2lzz4XJHNzgm//2OGcetKr4/otNO4wbPf7YzWW8P/qnHrW4l1JRDNuZFx6yoLMg1DMF4ysDLUM+ly01rWXWsGybSWAmkBL8u4u07U6eJKbZ9xA+bvz9Zp7KnRsJaW3E+sF37V9X7Bca6x3T0efF4Cs3PC7/trsmWlTfHpIzrtNG7w7HfR0kFlduDgr6mKaM6NjBtLpbK0fRiCDdCPrIw870ufEOLXmkEyrUogLeBlGfdZMm69l8YybsD8Fhn3BBk3cKz32rNelkjm/YKTfNjo5j343a4+WDgXht/nM4y7W55FzLWu5821dsfhb+ZawYtzKUsiE4/NsySbOoolocV4i4F4pUC8hUC8nkC88UC8+UA89l3tm6BKl66HCYr95vZKg54dJ9kqQkvfGcJ4/YF4BwLxTgXiDbZZztFAvLE2yzkUiHe0STmtmKCP4Nq5p8djOZKPKFt6soLISPe4XEzo6d1u3Qb/lTj81xJ6elZZffmBWh9AT3rPHGQDHX7nN9rC/ded0V6eOzi+KGfIaS2YgTNiyMQLZmvMx8mK+N9twVmRmGM+S5ecRAAsJwi6SLY8SQrOXiUfK9bOuyay4oqQNVFa/UKcfSz/nU28jxWzfkGzxVb9woTIxOvQgyRbnjqB3cI7XPtrZWPzZs0B32zW3Ip78+LNB+Dx9hK3Oc82oO4xtpKWtaWY2Fuk7K83tgDPfhdp37Zmbz0ZeuLtNt7Dx7MBkq0ktHSbivEONonHyU/Wj7bHqqtZlPZk1ej4aGlSnPNYi/RMbdy6o4q3uQ8Q3f9NOSHdqu1wjXkE3gK22ozfsuwGtPLaDfpnhOR+/YmddJEPA/wZeg6Y2ykf9oYTO+XldT7P98yH7zAFzG9m5K+sNrwlRxtOGG04TG14G7VB5660OV779Hzt36XmPt45Hjxjz/Fnhb+1nonpc7uEv8YYuJcRcvYQLP/lexlbVaeYRaujhbSKyJXmw2CLw0Q/K4azZAAOr4Pmjfb4YqUOVyxWCtmEtGKsiHnu5bx57khrgrKvr1gnXSLTID07KLIxrS6htZt4HJOrn85rN4DnuT00tu4KxOsJwOPYgtusvtqKLQB/NgKtfYKXfKLVMmbE5ODZ76LNz2Vr7aJ64liFY0w8u5lka3dMrnFm3rVYnhLEvLQWhBb7/7P0zMojoL85Joc9cUx+4GRdzpLQZv1hfFj6AzyvpXx244vvLbtB+zmePX6yTovLMVmXHJMD5jmjdRqnqO2dRFvpIiYHzAGD7nCNVlpMbpW/jlIbOqUN1pkNwDyC2jBObQAO+2z1vX2u8X257ZrjwbPfNeY0W+1zOoW/jrGIeceqZdc6TyMmh5xq41ZMflZ+yzsHAf5sTlodLaRVRC72YV30DLY4TPQ1dlH9+tZlHJP3GO2ZMNqTZ72iMWNiq3tq37+sZp8Jv3vXvnPMDn+R/P6fw3VZIFcvyYfvk/QM36fomd59zOd4Z+iZnmsdoO98plHP0fRR+1prQ/5iN/DsJ5li+JA9wl/PqPa5SD6Mit3UtiDTMAQboB9VGSy8tVCYE+KhQbq1WNnnGhVYhNYeg1ZnIC3gcbGbOoLE6B7lCSQAz8VugFmhSfgCTcLqRLifWC97SOb9guNcY7snPPiJTGcFhx3QnRmBieo3XtLOb9yctIsUoJhJO/Bi447i3Mi44cj3SNuHIdgA/cjKUM/Egyj58MDHb602yLOBtM4atJo9G8PGracnE8P8NjJuzXoDno17e9VGxv1MY5UAvXA/sV446tkvOM41trvTg5/I1Cs4bPDPzTBuK8O328YdM8Onxq0ZvnacHkVEphmEYQjWypRAq0+PttK4S4G0gJdl3D9Gxq2nRy3jBsxHR+o0fpKMGzhW6ibLuNNOj8558BOZJgWHjfvnMoxb9dvnGq8qaJdxg2fs06N69YKmoqI5NzJuLJnOStuHIVgyaI6BKQlzTIQ/JsLzwMdv+wQPtJzQcgYt4MUy7pA7JwYJj41b98wSw3wTGTdgYdyAZ+MGzFvJuN9Mxg2+0Av3U5Zxcx/sp++THvxEphnBYeN+R4Zx610ZfUSnxcblrd8Hz37XeNdSq417v/AHL94rOCsy8djk+v08OSiOSELwDgTinQrEG2yznKOBeGNtlnMoEO9ok3Im45HHbPKJWO+ynje6juQjzOh6v+gp0clJkWmQnnEu9aTQOim0GK8rEK8zEG9PIN5cIN5iIN5kIB7HFxoT9LnGe0pbvT/iRE58wDP2nrTqSeeZpP1H4vDfOoNySPjvN/hHCqLXeKEE/urrcAYFeoIuIDdkAx3YWBJPYW7j/jvlGvmdEn5pc+PRDDmtBQFwRgyZ2FY4t578Nyt4NxEtbks3PZ85ffVvEmfeXGOStlcSKW7ynm8Bz9h7JXrnpu6V8FoBsLwO4PeSFrlvEf3K+1jcTpVrxqA1J3JZcXeedY21HroWauniJAPsWrpJQydjItMgPeManTGhNSa0dhPPqqVjveappdN7SpuppRsLxAtZ+ydtxjqA2zwqeKOCx20ejUBrn+Aln8TeeC3QrrgFPPtd45qp1fY2lKEnjr2HSHd4NkCyFYkVDzaJN0DysH60PUMGrVFpD9OaLEhrUmglz2ZELq5DmaRnsDmupdP1YBIHPPBUXc6TQpv1h/Fh6Q/w3G8+uwGtvHaD9o+Q3F91qk4LOMi1AZ5r6QDzM6fqNL6a2q55MZa3S/hwLR1gvr5GKy03Zm0GPMLTBsCfMNrwP6kNj6Y26D3waTm5SHPsct6Ee8ycnMZjVh3MWBz+VWtu0BgOtXSQE7LwWEs+XEunMV+H2/meAG0n+4q5nLQ6WkiriFzswzje1l1IK3ZR/VoyWLV0Z432TBjtyVNLB3i2O60JTmx17nSdl/Y/jx31AewbAPMM8gE/YfgxPrczKs8SGzgl7Tpf+3epuU+V5wxtxyl6DpjnePymNX/rnGGt1zW3xXPwKUMvM/H1srXuPZ5DL4D5vgy9HHfF9XLc0MtJkcG5Rh8GvQEudsyapqMheg6YF2fMuXiPyCTJHuk9Isv6HpFtGyB+2mcaS1lxofbZoNsZm7L/BE32C755cR/xHiXcLP/z0znjHb6DHvFOn4u27liy/I/qi/3Pzxf0P9a7X3TO1zUN+2VeW+q+gxVzAsaKOV/rkZ3pj6XQZ1lPGPT/gOaYX6E5Rv2mxSt5dlyeJf3Oe1it9q+65w7+R+k5YN6Y03eMkuyRfEdVfQf2Oth3HCH5utzOWgwr/wwc6GGQYLgeH78fI1rqq44LP67XOO7Bw7jw+ZmTQofH4O96+oljr2P0bEzoJXw+S/lu0Oa12B+Sr1T/AXi2ke11MeXU353TRjhOZH0lnz7X2A/tWp+BZ79r7M9Wr8+0pkjnwIg+omrZkY5rrM8gJ2Q5QjjJh9dnOn7z5p0Af9Kg1YocjE+ujhbK5Voolysg1277aSvGO5LRDp+fHqG2Wn56Utqfd//ppIfW8YK0jgst9sEn6dmE0LdykuyXLf5DAm/NHZpb5bnjCxlzvOJyXjEtftL1iY5vXp9009wwdnonXV6jH5dn7fKD2g4rVtpbkz0tRs7yqb4xz/Gw+lzWy0x8vVS41sGnF8AcytDLoQC9HDL0ckRkcK4xboDeABexHqTq0xGPKcCc9OiI/TfnF9q1RrfibO0zK87W8a59Nujs2Bu2DZrsF3y5LvZ/HNNm+Z+pDN0rLsfBnMM8Rb/Pkbz8jrjkP6smxXrnaTc9f8CZOu3S6Trv0PfnWfsdXK/RrngaPGPvd0wLf6sGWetWeJ9tt945WhSPaxr0XLilh2mDFuDx2z4X/l7IkLMEoTUUSZsRg3CbxwRvTPC4zWMRaFm1HRHrib01DVxPHGl/z6wnVj2xX+V6Yjy7mWTTvKG1H45nB5vE4z0v1k+eOvIxaQ/TmilISw8jJc9mRa7kmdo4+wKuaYA9cU3DJYq1R4V23joE3ZdNaN0sMnW4xv7son9bbb6Z5Ef7OQf1OGNu1bt1uKYBML9B64y7qO36rle2c+SXAcP5ZcA8OSN+mDHacA+1YUraAHjOowHmB6kNT6U2YGxMG3zx6SM67ZzjwTP2HK/vZoZOOGcWqaajas0NaTUNkFP3tq2cmRUXzma0k21pNietjhbSKiJXmg+DLQ4T/awYzpIBOCMk+4TRHl+s1OGKxUpaX5TY6vOG67y0/3nsqA9g3wCYl5APeL3hx/huoDF5FnFPscr7stoO3lMEzI9n5AV0j1djCGuOBw7vJ+i5N9bLbHy9VLjGwKcXwPxshl5OBejllKEX3e91rtGH6Tm82DUNaTriMQWYX8yZL5ki2duVL9k+J0z8tM+sMy863rXPuKbBigG5hur1RnwBunwmAjBjhJvlf96YM96ZIpr3nN75Oz4Raw2952jAM3ZckhUX8FqI+3VU9Fh0TYO8VOw6EvX56m/Z5/9eQZ9vzfFpPp/XXda6ROsPmR/ifMAcMGR/t0d2pj+ZQj8ttgfMJ2hef//pnXQ5XhkVXlb9fMTznmadntbAcY71L3L6a96/aNf+5Pa846lB07ONVh4aONYZDSuvxDWUefJKp4SWhWflwiGP5sI55gTMxzz9xDmIU/RM1zFb9++eqcthrX//keYn9hNpNgKYUcqD/0tOG+HYnP1L8olYy+pdE4Nnv4sWU5WtuEPni9hnwtWO9PwO1sSQU2serDUx2sB6yzMvarxr1R/lzXvNeGgNFaRVVC7XQrlcAbl2209v+wmPn9Z2+Pz0CLXV8tOqS44PQMs6e6x9x7SGCtLS9Sz74FF6Ni30rTww+2WL/1mBt9YFms/mdcFwjXbWPekzRPNxRg7aip/y5BMmaG74ijM76XJeZEietcsPajusWGnOo8c8PtU35nlMqs9lvczG18tWDLldW+DRC2CqGXo5FqCXY4ZetH7Ouca4AXoDXJ+LVgta9emIxxRgbsuwwTbWAS7nibO1z6w4W8e79hnX27H/g21zXcZXkP/TOdDKi2js7PM/98/QveJyHMzt6SbZD9Iz/P7s4Tr+g404G5+I+x3evMpunWG18irWmW884/x+nrse9F0sXB/K7cxTr6G5glbWSkTMpy3nzadFuh/FzKdNGDrRPXw+J8s1AkXuh2s3HtfyoB3WHjVoWTkDwOO3dt8zYt3nkQePYxErXwc86z4IwA9FoNXmHEL1WswhqJ64xp/zQhxXQrZ2308CeVg/ee4ts85B4/tEQVoTQivtzhK1cfYFXMsDe+Janu+j9Y6eq2T9YXxY+tP87YCr9x23eUBoDbj0Ng+Q/Gj/CMn9YorH+B07rEuu5dme64brNF5Kbceczmt2fm0H7+sfMOj+WM4YjtvwE9SGaWmDlcsEzAeG6jReTm2w6ge1/vJauJ8kUr1wrtgu4h1sVWue1toPvZ8EsvD9g8mH85ZaK5I3B+R7v5NFq6OFtIrIxT6Ma6hhi8NEX2MX1a8lA3BGSHYr1zZmtEfj4TFPe3x2lzfm0Rgr4l2RXnsFz34Xt943ra+s+JHHy/Uck6ufzms3gOd8g67dY8fkofX11n08eda7gJ+MQCvtjs7dvjMw5h2dQxl64niLY0w843rsPDEsnh1sEs+qU8i7FtOYmWmNFaQ1JrTY/1tndq08QlZ9/T9RTGfdVaxrRkt/1p24PrsBrbx2Y90Z+B9ndtLNc2fg/Sme/eyZnfL66uutOwMB84WMmHzKaEPHUHobAG/dGThMbegaqrdBYx3mi8+1EJNHqu83Y3KN2WLfGajz9JTwT7sz0BeTow2stzxn5HzvYbVodbSQVhG52IdN0TOrvl5jF9WvJYOuh7m+ntszY7Qnz3oF8Gx32Jvk+vrvGq7zsu4oxVhQH8C+ATBj5AO+bGgnXWutwfUQ7ayRRjusGumZ2sNm6sjTapL5ncSjIkPauYNIeqlwfsunF8AsZejlZIBeThp60fjLucZ1IfQGuNhnM9J0xHuZgDnn0dFu3xlo7SNrn1n7yLrfq33GuQqO92DbvI/8ZUZ8AbpTpCfAjBFulv+5b4buFZfjnbS1UKR5OXd9fcy1kOaSfGsh7lf1ZUXXNFxDEWn/x3tPo3VP7MML+jbVlaUD657GMZEhLc4/SXTS4nzAPMIje9q8zvS5PdYddE+jeX3DmNc5XtH33Vj3UEa8g27LrvguHe4HrgcCzDdeO/56R93mdp0S8dP7fKw7f7Q2CDh8fxZgMB5beW+ab15h385+mGHYbgHzLZ5+4hwE34dzVuglfF5p+PsR+v1baX7SmNGyke1zdWQj35bTRjg2Z30ln4i1cd41MXj2u2j1i1tzT9Y5kYg+omrZkY5rrIn17tKjhJN8eE2s4zfvvKg1AK3Oe/nk6mihXK6FcrkCcu22n7bi6qMZ7fD56RFqq+WnNYawYjlde1nnoJjWyYK0tO7fqhvlNQDPPZoHZr9srQuGBN5aF1j3NALmNRlzvHVP438YOWgrftK5wYotf5nmhncP7aTLeZGT8qxdflDbYcVKv54RI2f5VN+Y990XzXqZjq8X865vSy+AeUuGXvLc2ap6OWLo5ajI4Fxj3KD3kbf7js9J4c86+p2ccTbndNqVF7Hi7GbuHOV9MCv21nMI7BesOVDPI7H/6XHZ/uf9GbpXXI6DOafO/k9rzrQWhmvD/pz832cMujwfad1t7BrRkyntsPT4VwVzBFpf7csRWPeLnDL0MhlfL+YZdUsvgPn7DL0cD9CLde5K4z7nGusxtA7zWjqb9s85/R/Pb+3yf9u5fs/50JCzchwncm0ubJvPCH2G/F/aXhn7P97DyvI/n8/QveJybWrE/RczR6l7H+x/uobT22H1h3UHSNr+i+VrOG9p3c+vd4AAxroDZO9wuuxWjlDps6zWHSCTw1f/Jn03MFynq7G9xYtjTs5RXivvkjk6fPVvlu8YItm/mN4lwzXxesc1+wLQss6gHRNaFh6/9wEweh+2+jP28WPDV/+m5Sh1DcFrYfZnDx+uy2HVGU0P1+VL2+Ow8vjfMFynMVf7nmUj8NUcJ+MTcQ12410y7vp5l0wrzsv45OpooVyuhXK5AnLttp/e9hMR3yVj+Wnuwzx++qSH1vGCtPSdJ+yDeT0+JvTTcpTwyxZ/a39Lz8DrOTiOX75u+OrftDlecfkMWFr8VOSesUcP1+l++/BOurxGb+N798w8E9phxUqXh6/+jfEuGY6Hfe+SmYyvF/NdMpZeAPOEYefVSzPvkmG9hLxLJmZ+O01HnMcFzLcMX/17Lb5LZtsGPO+SAYwvr6x9xrGx9S4t0GS/YM2B1h6Nxs4+//Os4at/s/ZoOO+JOJhrWxfo9++i33G39Cz9/jwDH59r4dzZbBz+5rkzvXM8OeeCuPExm3c/YPNpD9943J2XNu6+864nPHTzifdsPvnuDhJvRprCv6U19yZ61kvfDxq/82eA4FlFvcKjV+jwFWC9huzAU1X4UlInDJn42sQbrxnKNxzT9Ms6sUr08YyPV+m1zVqOv5t419prhqYC8UKu3OFQntucJ5TXK4hbSavNVwF5j0GC57V+FdBpkq2dx45beaWPdQwlLy3reKMer0k76q9l7rws5WOQvztcl1PThKw/jA9Lf3q9QkLrtMjU4Rr7s4v+bbX5NMmP9o+Q3O8ertPiq9lYl9ZrhiojdRrvG67Lq1d+sZ13CR/rapIP1milhZZzRhv+bDi9DYA/YbShn9rwl8P1NgDHFxt8qYWc0AmnUyMdw6xac4PGeUin6pE7HmvJh9OpuqzooGdp7WRfMZeTVkcLaRWRi30Yv3po+9gv0R8W+nniaOCMkOxWyfSI0Z4R+t7lGl8Lqu3Bb4ndjde+c7nffw7Xf2c9JZ8+F80uvHYJnv1u5zhoEf8tu9RXP+m44PUIjwH2i5AtzzUeeDYfiNcTiDdO7dlb+z5HNHtH6r/31Z7vpd8fUBM47ViulkSBNusJMPtpnpgf2UmXx74eC05ki/kKzNGUdpyl54A5XJM9La04Sv+24kwrDgQO+7MxkYH1MhtfLxVO5/v0sl26laGXoQC9DBl6GRUZnGuc56A3PnIXc12TpqMxer599YhHR22+Mn85z5X52meA4T7TtYP2Wdp1hXr9HvsFX+zkK4ny+Z9yhu4Vl2PitPxUpPWq96gseMbOT2nsaOWndI3G61eev4use5FTjOjbliyfr/6Wff75gj7fKkNL8/m8NrfWrtZacJTopK0FAXNfj+xp8zrTt3K/TP8izesPMOZ1fs3OWeHF/pxfv6dr8/O1f5ea+5ivVwT/0/QcMA+9dvx1NU8Ja9b1u5z3AIweUR8kGM49oo1cYpInFgX8jAfPep2I+nbrdSKAebSnn3hNxFuAel1MwueFFA/rdTXJ75s0P7GfSLMRwLyEbOQbc9oI503YvySfiCW63vUZX1k3Goe/eWWdzhcRfUTVsiONe5A3gZyQ5RThJB/Om+irDvPOixrvMq0Zg5YvNzrjoTVakFZRuVwL5XIF5NptPx36itc0Pz1CbbX8tMYQVixn7RGd9dAaLUhrVGixDz5Lz3QNYO0VsF+25o4xgbfmDt3z4LnjxRlzvOJyvt+KaazYUsc3x08/SnPDG0d20uW8yKg8a5cf1HZYsdLLM2LkLJ/qG/PWUbHThl5m4+vFvELM0gtgXpWhl5MBerGO0J0SGZxrjBv0iF3s6+fSdGQd8/nlnHE2H1W51q8QSzt2xPuigGH/p1cKsF+w5kDrqBjnVLL8z5szdK+4HAdz+SNK6pK+WSJZWtc3S6WEXoXakNBG+dsSPQfMOzJsr0L/TmjVur2hH5cEBjj8aqeyyNBJcGXCZ1iuJ1kivhYefz8iOFzOWDb4nPW0BW3gknUuf0zTL2De69FvH7UlxjiokjxdJB+PD8B8IGMcVF2jXqxxoGOlKnphWwBsJ/3OZdgMy+OgSnwtPP5eFhyO4Y4U4IPfDxGdSYGzdIRxwX4nbexwXwHmwxl+R3ETmm86WW8X2r9Y+9vu8Yb8pjXePlFwvKGtecYb74XomO90O8elwpboeYX4Wnj8vSw4yThZFDjmc9bTFrSB/Q7oay6f9QuYz2T4HR63rR4HyyQPzwc8PgDz+YxxsOwa9WKNAx0ry6IXtgXA5pl/eBwsE9+s+WdJcNjvlAvwwe/sd0oCZ+nI2gdKGzvcV4DZVwt8svaBlonmj5HfwZjfU/vbR7RjjDeed7ltZXoOmMOetlnzf2ftO4+3ssAAh/1OSWTgeY77m2EX6HmZ+Fp4/H1RcJJxskfgmM9ZT1ssvwP6OnZYv4AZ8ei33XGvxpwc945njAP1x9Y4SIt72cbV/3e6nfOywvI44PnHwuPvJcFhv7NYgA9+Z7+zIHC+OYv9TtrY4b4CTDWn36kQzW8jv7NAsiSfZLyVSJZWjzce/5znK9FzwNyaMd7S7JDHW0lggMP5yEWRIc9466TnHNdnjbcFwRl0dd1b422Ppy3W0WA+tpWmX8DcL8PvtHP+Ud/P888DC84/1jhIm3/Y1y+IDJ3OnmcYlscBr7ctPP6uPo7nn4UCfPA7+51OgbN0xGc2AJM2drivAPP1GX5HcROajyK/00myKH+MCfjhToP/xmid7jNGd9Jl+16QZ/F83NUcZTmlHZaPe0xBH2fF8mk+jve91MexXsZddL1ULJu39AKYuwrafB69LBl6sdYTlp0CLp5fvDp20nRk+cWnZNgg8tudJHu78tvQG+e3tc8Ak8dP8/4eYBboGWybYyf4hQ7X6D/TakPU//n8z3dm6F5xE5qjJ+u/LwhO7JpbJ+3HBzz7SaYYtRe6v6D2muhE11q8du8k2dSuNa/KeKiNj+jbliyfr/6Wff6LIvp8jiHVv7LP7zH4oe4PMAcM2V/mkd1aTyh9bs8Jg/6v0bz+46M76Y4Tr5LwGhBeySde/vaqXWn+VvOZnL/9mZz+eoFkb1c9yfa8Q/w0R8hxJ2DS8smcVwGMVYfDMWqeOhwrD6x4GBe+XJ76Gh6Dr/P0UyLDuMjOazjez/y70boc6NMR+v3XaX5iP5FmI4D5B7KRN+a0EY732b8kn3g5Jn/dH3j2u2gxVdmKO3S+iOgjqpYdlYU/6v5036VKOMmH6/50vZx3XtR418qlMq0OD60FD61yQVpF5XItlMsVkGu3/fS2n/D46SL7zCPUVp+f5j7M46dLHlrlgrR0Pcs+mPNoE0Kf/TLX/f0d+d0F4b8o8Cxjj8BwvgIwf58xxytuQvM45UU0prFiSx3fPHf9I80N+8/upMt5Ec2FtssPajusWOnTGTFylk/1jXnOr6nPZb2Mx9dLxdr7tfQCmP/K0MtygF6WDb1URQbn7P1awEWMIao+HXG+ZBumNu6z4uwSyd6uvMi2DRA/7TOuowGMxjDaZxwbs/+DbXO9C/yCNQda9TcaO/v8z8EM3Ssux8Gcp+QzkOPEh+e3RXoOmGNn63RXz+6ky2N8XJ71ucZ1cavHcFdKO3rkefI549Ej03K172gLj5kegQEOx0U8t6leyvH1UvHtBbFeADORoZelAL1Ye0FdIoMjWsnnLOEnn9h3CaTpiNevgFnI6f+4xq1d/m/bBjx5YcBwn2mcqH02SDDj9EzzUewXeK8dMFbuYJxws/zPrRm6V9yE5ltqi/w+ohMjR8ljhdvB/hUw986ws7T+4D4bFxgrH7koMrBPmjdodQl/zlEC5n4e2Zn+RAp9lvWEQf8SzTEPpDlG/abFa8DVfQrH3XFqC+34Evyt2sL/L6fv4Ni4XWvf7XjYEztxTQ5g0modoYdBguH8OX7n2F/njh7hx+voHg+etf+kfkbnZh6DG55+4jUz1zVNCL3k74vO1uUA7RH6/TL5SvUfgLfOJr+UbOTOnDbCsSfrK/lEXIN5c5Tg2e+ixUBla02meZCIPqJq2ZGOa+QoNTe5TDjJxzqbzHrLk+8BvJU7GjdodXhojXto9RSkVVQu10K5XAG5dttPb/sJj5/Wdvj8NOcoLT+9KO234jqtNeB40aLVU5BWj9BKy1vq/iv7Zc5RvihijPrDATHq62tOPi1+0jWsju9ugvkxmhvedHYnXV6j98izdvlBbYcVK/10Royc5VN9Y57jYfW5rJdyfL1sxZArLlsvgHl1hl5WXHG9rBh6WRYZnGuMG6A3wPW5xjMgrR47aTriMQWY1+WMs8+S7O1ao1txtvaZFWfreNc+G3R27K35bvYL1hw4TnoCDMe0Wf7nLRm6V1yOgzk3zra3QrK0rm+u1kqvUhsS2lgX83gDzDszbG+V/p3Qgg/nftS+Bg74su0BtpPgeBwwLMe4K8TXwuPvVcHhuXXZ4LPkaQvawDXznBtP0y9g3ufRbx+1JcY4WCN52L54fADmgxnjYM016sUaBzpW1kQvbAuA7aTf2S+n7SmtEV8Lj78vCw7veVQL8MHvXDNfEThLRxgX7HfSxg73FWA+kuF3FDeheZbiru1zWLW/8eazq+NN5zPIZ81nn2zBnJ82f7Df0XVnnvHG+WU+K5o13jR+4HWbNd7KnrZYfofnuzT9AuazGX6nnfOP+n6ef75QcP6xxkHa/MO+viIydDp7nmFYHgerxNfC4+/q46z8Wh4++J39zpLAWTqy/E7a2OG+Asz+sat/s/zOKtMkv7O9r1T72+6z8JDPWoMd8bTNskOrNiptDcZ+R9dgecYb10vwnn7WeNM5zYqRrfnAaovld/hMVpp+ATPq0W+75x/1/Tz/TGSMA/Up1jhIm3/Y1+s9BZ0u+24MHgcc92bdjaE+zqo9zsMHv7PfKQucL1Zmv5M2drivtnWU0++sEM2/O15v127fxYL1n1WfdlvGeEuzwzz1aZwT1vq0POONa3pi3sWy4GkL2uC7i8XSL2Dun+F3rpW7WB5UcP6xxsH1cBeLno3Owyf0LhZrbzRt7Fh3sXxDht9R3ITmO8jv6D5pxPcpbSb0pqkN3LYpeg6YixnjbZr+ndDSd3d2uJ3vWQQO+51JkSGiDrbyyzM5dACYb8roX+ROub6iXXtf231J/PRuWX0XpdUnej/iIMHwnf2TgmfZDo9nhgFuN8Hc49Et73PxPeJKL4F5/vH677qX79tv5/OgowJ3LZyRHY3D3zwjO2roZExkGqRnB0m2MaE1JrQsPO5f8OZ9OW57nn3pUZGV3xc1Uvub8Hve2E668AOA5/ccAuYhpTqN54/V5e0l2njWY7RB6zl6PG3w1fJYPlb1A5wRkkn1Y+FZtLVv1ea5vWP0G7/XGbSc0HLCj+27KN5YIN54IN5EIF7IO3iTsQF9jtIzreFgO+ukZ+NCm+sAuukZZBshefVdw/Heab1U9umC32kdKTYw32mt74WO9r7PcqmU1D0ddvU+1vfKDUOwAWe/9CbPy0z0pSHWi6HyDkrgHSRaIS+1HiQ8phXyIvZBwjtCtKzJ4DdoMsBFTjoZ8CXg2y/YosngLTQZAIcvNddO5O+JzPsFx7nGdu/14CcyjQoOB/DvzAherZfZxgk6/MYNnrFfZjsq/PVlp9GcGxm3BrWQaRiCDbidb2+1PJP1lvlZId5qgxwNpDVq0JoLpAU8Nm44NTbuvyDjRiYExg14Nm7AdJJx/z8ybtUt9xPrhSPp/YLjXGO7Zz34XEXCzgm/fzjDuK034sapKvYbN3jGfiOuRsrWm6qjODcybkRTGskPQzAOxVkZ6pl0OcYDH7+12iBDls68jGNa84G0gJdl3J8l49ar/CzjBsxfLNZpfJ6MGzi8FNVO5O9s3NwHbHRTHvxuVx8sbNzbv9di9iLGDXotNq5VX9+BZ2zj7hb+c7XvvLTqEZl4bO4l2fIcq8GzmUC82UC86UC8qUA89iWs4+QT8SjuRt4JI9KYNieMbtET+zFeYuPZcZJtXmjp1gvj9QfiHQjEOxWIN9hmOYcC8Y42Kac19/W5xiOhrUzj+8Y+j5GYR8BUTzr2k/ZHuqJxPaG3KPznDP6lOPxXeIsP/K0jaP2kJ+hCr1rk65uTjxU35I3vrLTxXIac1sIQOCOGTLwwtMb8HNFt15YHeMYe81m65MUyYHkh3EWy5VmM6+JwgOhyO1WuOYOWLgRDF9BWQiBaSjPjuCt49rtYKeWr/Z61JcprDH61HZ7xVpdunWp6eDfxDtf+WlnHvNlhwDebHba2DvLidQfgWQmaDteY4bQyftzm2Qi00rKsvB5pV2wBnrGzrHsz9JTopCwycZngAMmm87ReMcZ4B5vE4ww+60fbs9egNSvtYVrTBWlNCy3O/czSM7Vx9gX76BnsCfFuMpf8r/G6nPNCm+NDjA8rjgY8ly777Aa08tqNtWPz7PGddH3b94D5asr7PJfazjspoAs6Xa5xrufrXwDz/Iw8zazRhu+jNmg5FuD5mgvALFAbXmC0gX22tW0byecs5/U5Mbdt1a50jm/XdWvgr/M0rrSAnD0Ey3/5Sgu0gfWWJ+4E/HROWh0tpFVELvZhU/QMtjhM9DV2Uf1aMgCH10HdRnt8O+kdzhXaSQ+NeTTGildm4bdXLrOItCYo+/qKddIlMg3Ss4MiG9PqElq7iccxufrpvHaj83zopu4+eV4EL2RvyKqIyBsDAX5vBFr7BC/5JPYWKSb2xuTg2e+izc9la+2ieuJ8AseYeHYzyZYnX4FnB5vE45iS9ZNnLaaxPNOaKUhrRmix/+c4XW2cfQHH5LAnjsn/H8V0c0Kb9YfxYekP8Pgty25AK6/dWPHsRyie1dJ6wHNMDpifXKjT+Bi1vZNoK13E5IA5YND9ZEZMbq0r/ona0CltADzH5IB5CrXhU9QGXftZvrfPNb5qqF1zPHj2u8acZqt9Tqfw1zEWMe9Ytexa52nE5JBTbdyKyffKb3nnIMDvzUmro4W0ishl5bvZXw0TfY1dVL++dRnH5D1Ge3w5d996RWPGxFbxqssDE1f/JvwGat85Zoe/SH6/bb4uC/B7ST58t67UG6Nn+D5Oz/B9gp7hO0qwQ0vF2+tn/IVfu+VndBxGLFkv+WL4TuIfyc8tcdzGfawFj4BhmwEM5/q4EHKWbAQ+kffF8IxjvDyxlMYQvtgQektscnSiTmOSYCHjDXvJ/Fw39hJpLRbVXs6TvWDcsr3oaQkrr2XlmTSP5bMX6C2xl9Xr3l6Wv8TtZXm355flmPby9ZHnl1C8A23mlydHwvPgAyPZdafARZwHch/1i7Q+NnPQnaKTePPQ1XkwbYxME/+YceO88Et4aC297g3fRDBcH8g19t9Mdo3xyzWlzeYGeR6cFzz8m+3lMYa9oK+tcZ/XXtTO4tlLJbe9TEbhb9vLpOgknr1UcttLrPrFmPbyXUbcyPbSyrixCB7zS7Mzrmf8n2RnsCnOZ4TamVWvGMkvr+fdq4m0N2vu1Vj1itZ+RLPjpN14oePyQJvxrhe9tMLOb4yXG+PlxnhpL96N8XJjvHwxjxeOB3k/PDQenBW4eOvkNe+6Czz7Xdx6etW55pLirXvWSnlyUhHPSq4l/b0o/BIepdp3rLsAw3kDwPA5wm76NxYnCQ893zdIz9hu8Ay6WCB+u403Eoh3oM14rWifnh/Fv/m89j8Y61E+XxDqf2YELmLewXv3Ap+bjOP/7HOTM4ZOFkSm69EOdktOHp/QbTPjU8+FxjvLXfXOj+DZ7+LeDaI6t86Sx5mfqiVfboxfYbEYp/1VPkvHfbxU+475ETB8jgswS4THV+rP0/yIORN0BukZj//tubXGt0T8FG8kEK8V/NLOB/JrKIcn6zRgi3z+OtQ+FwQu3vgse+2T75qIdNeDedfEgqGTksh0PY6vduPdaN+N9oXgsT/j16CH+rN5gYt4d8sln0zg2e+irUfLls55ToVO9J6YQXrG/Zfndc94NhKId7DNeDfkvLbkZHvHWG3G3ksCFy++LXvPsYBnv4vmb8qWzkuGTjR+HKRnnCdp530WRfHaLecNvdzQyw297OTH/hq+ZoCedRF9rU3uNOgDnu+owzOtF2NaXQYtrTfl1zdxTYy+KmjSoDUtMrTy4vNWnvXlOyI4j5VnL0z3SvhsL6+589Q/ao51gJ5xvJsnB6k5Kr4HiOfStNyWtb7g2MKKEeLE5Eu5cxwxYwTVk8YI0XKwdPk4zinqmBiGYDxgWBl5BkxJiFuJrDwBJA/kVl4YHuvNAntr30dqf5PE4J9M1uki4PO9NgQw/4MOi/9pjQY7KjZG7UT+nsi8X3CSDzukWQ8+H4qdoWf4/UM12dIO0O+RZ/E24Jdyb8DvicLf3oAHr+gbDGTcOHCsBe7DEIw9OCsjjwffI8RbbZAzgbRmDFohN99wtMHGrScKEsP8NBk3v7SQZ2U27u3oh4z7P8i4wRd64X5ivXD0sF9wnGuMqKY9+IlMvYLDt2N8IcO4rVMNoNdO4wbPfhf3VEOv8LdONURxbmTcuBFgRto+DMGSQXOs9p2VcUyEPybCc8iO3/YJHmg5oeUMWsCLZdwhbw0cJLws4z48VacLWJ9xA+YmMu5bajR46QO9cD9lGTf3wX76PunBT2QaFxw27jM12dKMe1ye9RGdFhuX9xUP4NlPMsUw7v3CH7ysch7A8tjkVzwUKX3sD8QLLQk9FYg32GY5hwLxjjYpZ9LPPBaST8Tjlat5o9ZItmdGrftFT4lOTopMg/SMUzAnhdZJocV4C4F404F484F4k4F4PI9apYAniW4L+9R7jSB4xi4FVD2pP03afyQO/62jeYeE/36Df6RrFFesYFF9D14bAj1BF5AbsoEOp2Q1bsgb3wH+GOEdzZDTWhgCZ8SQiW1shnCS/yYE7yaixW3ppudPrRl7Ek99XS1maW9pv/+VJNdKaT8veNlH49kYyZYnTY5nHK9qujvvHKvp9dC1QNoR30iLPu+WMnj2u7hHfHV7xDriOy4yDdIz3poaF1rqk3cTj68/btU2kZWkyDvOQt/2PhSAl7QZcTm3+ZTgnRI8bvOpCLT2CV7yuRbillNx+Jtxi+op0clxkWmQng2QbMeF1nGhxXgHm8QbIHlYP3ni1VPSHqZVNNaeFlrW2pNzTXxlO2xuHz2DPfH1xy+jvMpxoc36w/iw9Ad47jef3YBWXrtB+0dI7pdTTomvHWVd8vXHgPnUVJ3Gz1Db8fuQIW+X8OHrjwHz8xk5IOsK51d72uB7JcnvURt+kdoAHPbZ1lop0hx7Tb7iwDq2GSn3VbXmBmutcpDkhCw81pIPX3/cypIKH62OFtIqIhf7MI63YYvDRF9jF2uNpTIAh9dYQ0Z7Jo32aDw86WkP2x3y2uCT2OrTp+u8tP957KgPYN8AmD8kH/AJw49xec8peZbYgPr187V/l5r7VHn9rO04Ts8B8z6P32RaztlzhjXHA4f79qTIwHqZia+XCucHfHoBzF9k6OVogF6OGno5JjI41+jDNP/W5xpzHq0eO2k64jEFmL/NmHM7awkfvqqsqzeK7MsJ2ceW6ry397OIn/aZxnzWeNc+4/1AKwYETfYLvnlxH/E+RbhZ/uefc8Y700QT8U6fi7buWOJxr/Eg+1fA/HuGnakN6Xxmzfm6pmG/zGtLwPliTsBYMefnPbIz/fEU+izrCYP+CcoX3kRzl/pNi1fy7Kg8S/r9EMnSav86SG1g2zlEzwHTV2tPlu84RbJH8h1V9R3be+TEb5Dk6yIYHoeapwcO9DBIMFyyq0U6efOaR4SWhYdxwX4G8vQIDPsZwNzi6SeOvY7Qs3Ghl/C5/3RdDvQpr8VOTdflU/+xbQ/0HDBfSTYylNNGOE7kOSH5RNzL8a7PwLPfNe77tnp9dkT4az4hoo+oWnZ0VPhjfaZ7SIOEk3x4fYY2sN7y5J0Af9yg1YocjE+ujhbK5Voolysg12776W0/4fHT2g6fnx6htvr8NPdhHj993EPraEFaR4WWVbfD8SjPPZqTZL9s8T8p8FaMqrlVjl8elDHHKy7nFdPiJ12f6Pjmuev/o7nhSdM76fIa/ag8a5cf1HZYsdLXevSYx6f6xjzHw+pzWS8z8fWyFUPuz6EXwGxk6GV/gF72G3oZFBmca4wbOPZJPhFjiKpPR1zbCZg7c8bZx0n2dq3Rt22A+GmfAYb7TGMY7TOOjdn/8Z5y8mG/YM2BvAcCGI2dff7nWzJ0r7gcB3MO8xj9/nSSN09NCp5pTQqev3SmTvvbiPeNmobMT+6aBn3N3SA9473SCaE1IbR2E+9aq2mYCMQLqYXgVxpym8cEb0zwrJqlVtLaJ3jJJ7E3zme1eu5xIic+4NnvGuuzWm1vQxl6Yr86RLrDs5tJtjx1JHh2sEk83vNi/Wh7hgxaY9IepjVdkJbus/P6YYyeWTUNsDmuaYA9cU3DLxt5GG5znjoEwHMcdrPI1OEa+7OL/m21+WaSH+3nHNQbjLUQYizAWzUNe2kO/Q1qO9rA6xe8LhX5ZcBwfhkwb82IH6aNNryN2jAmbQA859EA89e0VnoHtcHaW7Xm+AlqY7vmePCMPcfrPKl73n0ums+r8pgBf40xkDODnJCFx1ry4ZwZ2sB6y1P/CviZnLQ6WkiriFxZdVnDRD8rhrNksGoaxo32+GIlX02DFSth7wt8Elv9wFydF/qdbRFjQH0A+wbAfJh8QPfMTrqcLzkrzxIbOCPtOl/7d6m5T0Ndj7aD/TFgPp6RF9D5G23h/j4jMFpPx3PwGUMvM/H1spUvOZlDL4D51wy9nAzQy0lDL6dEBucafRj0xjnjmDFrmo6G6DlgPpczXzJGsrcrX7JtA8Qvq8bXigu1z7jW6yw9g21zzhd+wVqzTJOeAHOWcLP8T1+Ndla8M0Y03za983d8Is7L3nM04Bk7LknTv7UW4tgez86SbEXWNMhLxa4jUbtVv8F2e8wzdiw7seZ41QFweN1lrUtAa9zghzgfMAcM2Yc8sjP9iRT6abE9YG6l9cnZmZ10OV45Jby4dg/Pkn6PVINm1ulpDRznWGcyfEYba9By7U9qDZq1P5lWg8bnEADDeaVW7U9aeFYunP2wFSPx+nLN009pe5gTQi/h800zdTms9e/tND+lxYxWrdU3k42cz2kjHJuzf0k+fS5aLat3TQyefB43xtyTtlfCa+J21KmCv9ZyYk0MOSHLUcJJPrwm1rNDeedFrW9s5fmbLLk6WiiXa6FcroBcu+2nrbg6T313mp8eobZaflpjiLz5/1MeWicL0joptLLOtvHco3lg9svW3DEk8NbcoflsnjuekDHHKy7ncq2YxrcmtGLLu2lueNHMTrqcF9F7NtrlB7UdVqz09IwYuZn6eF7/q89lvczE10uFawR8egHMd2To5UiAXo4YejkqMjjXGDdoXV7EGKLq0xHXMgDmu3PG2W2oA9yRF9m2AeKnfWbV/mgMo33GsTH7P62tY79gzYFWXoTPiWT5nx/OmRfhPM3tlLC2fOpBeobf3ztXx/9RI87GJ2JNR+WLoaaDc05Faiz4iutrscYi6fdIZ3e9axrw7HfR9hm3+l3v+JgwdDIkMnHulGsE8uzF7xYe1/KgHazXPHedAJ5ritt5z4h1n0cePCufxf4YeNZ9EIA/GYFWm3MI1Wsxh6B64jtbOS/EcSVky3NnmN7jGorHMS7rJ88ZCuscNL5PFKQ1IbTS1mtq4+wLuJYH9sS1PH9B651jQpv1h/Fh6U/ztwOu3nfc5gGhNeDS2zxA8qP9IyT331I8BhzEuYDnPVLAPJhioI9Q2/G7tWbvEj6c4wfMP+SM4bgNn/C0wcplbvtkasM/GblM9tnWxde7XcsT8+Jrjcc0totdy6PztMZwabU8Q4STfDhvqTFf3ry/xphZtDpaSKuIXOzDON6GLQ4TfY1dVL+WDMAZIdmteo9xoz0aD4972uOzu7wxj8ZYfS7aWij3fUIx77JO6ysrfrTqGa7HmNzaT85jN3ru2lq7x47JxwLweH7lNudZO2ts00paaWvg3b4zMOYa+GSGnrLuDOR67N26M7CV67rxgrTGhRb7f46/1cbTYnLYE8fkd8zW5fStHTA+8qwdsuwGtPLajXVn4H1md9LVGg8rJv/h2TqN+1PbwZfjNa2v1/MJXG/2oBqttJh8wmjDV1IbxqUNgOeYHDBPoDY8lNqgsc6NvJv9MpqzcfibMbmOccTkkBOy+GJytfm8+VvNK2fR6mghrSJysQ9jvwZbHCb6Gruofn05d47Jx4z2WLVxedYrWlvEZ155b/r9VF+P/udaZa2vVx/K/uZJ5ANeYPgxXmuclWcRay3NGmnNd/B+1FM9ftOaJ6068rRaS47jzogMaecOIumlwnOpTy+AeUaGXo4H6OW4oRetn3Gusb4eegNc7Jg1TUc8pgDz3Iw5F/vI4yR7u/aRt2MP4qd9BhjuMx3v2mecA+X6etg2aLJf8O1H+errff7nh3LGO3y+CPFOm+OSyvWyH6h31PDahGOWImsarqGItP+zxLl7jcGte2JfkeHbdB/FmuPT7onldde4yMDrkjGDny/3DphXe2Rn+kMp9NNie8C8k+b1/z27ky7HK3rnJO+r4FnS75Huj9myq8PUBu4HrgcCzK/l9Nd8NqBddZtW3c9hkq/L2XU/WhsEHOiB74/BeOSxyXd25dkr13s4LTzrnka+94Vh2LcD5u2efrJqljjfwP7+3wx/P0K//y7NT2nzvnVP4+fIRv4gp41wbK7v7uxz0e5J9K6JwbPfRatf3Jp7ss6JRPQRVcuOdF8Xa2LICVkOE07yse5pZL3lmRe1BqDVeS+fXB0tlMu1UC5XQK7d9tPWOajDGe3w+ekRaqvPT3Mf5vHTxz20jhWkdUxosQ/meg2tS7bywOyXOdYBf+ueRvbp1vqac5OfyZjjFZdzuVZMY8WWOr557nJUrzA0t5Mu50WOybN2+UFthxUr9dRkT4uRs3yqb8zz+l99LutlMr5etmLIQzn0Apj9GXo5FKCXQ4ZeDosMzjXGDdAb4CLGEFWfjvjMBmCOenS02/c0btsA8dM+Awz3mcYw2mccG7P/g21v25Wr+wVrDrTyIho7+/zP2QzdKy7HwWnrxzHiwzlo9r+AmSb/d7+5nXR5PhqTZ7FrRI+ltMPS42KGnWuOAG3JkyPgOcCqodS9gYh6Mc+oW3oBzGqGXo4G6MU6d2W9S2aMvlvvkomZF07TEeeFAXOvnP6vDfHrDv+3bQOe86HWnKV5Yevubuscpsac7Bes+M86X8R7WFn+54EZuldcrk2NOIbMHKXWnrD/eWhB/6P7glafWWs8q15E3wnEtLqEv3UHyNd6ZLdyhEqfZbXuALmH5phH0Byj51UtXhxzco7yWnmXzKWcvoP3w76Y3iXjWxtYvkpzoryOPurBw7jwnWPUexZ4DD7J00+8Pub71IeEXsLnFXN1Oaw6o6eQr0zb47Dy+K8iG3l6ThuBr+Z8ND4R12DX5LtkdA6M6COivUtGx681b1hnXHQd0+rzMj65Olool2uhXK6AXLvtp60YbzCjHT4/zTlKy09PSPutuM6qtTzmoXW0IK2jQot9MK/Hdd8rLUf5Ck+Mau1v6dyhuXOeO16ZMccrbkLzb42zaxw/Fbln7BdpbnjX3E66vEZv43v3zHfJoB1WrPQrGTFylk/1jXmOh33vkmnDO3a2YsiBHHoBzJsy9DLgiutlwNDLoMjgXPa7ZAaJR6vHTpqOeEwB5u0542zOL7RrjW7F2dpnVpyt4137bNDZsTdsGzTZL1hzoLVHo++S8fmfd2foXnE5Duba1jn6/f30u75LPPn9Awa+I/n5w/En10fp+aOId4fceB9MZDyu90s+52t/S8U+S/rAuk/COhth6fdafc/MWACeVffd4Xbe/691w9zmsxFo7RO85JOMhd1+z0ykMyHme2ZUT1wvzO9SwbPTJJvema41xIx3sEk8vpee9ZPnLKqea2Fa0wVpTQut5NmMyJV21lv389LOwd08X5fzjNBm/WF8WPoDPN/hf1pk6nCN/dlF/7bafJrkt94zc3i+Tgs4yOEqfDfBfMt8ncYt1PZmz8GdrNEqcjfFaWqDnoOz7qYAzIOoDcPUBp0T0866R7J5b+wAnrHPuqtvtubfmD5X/Y3WNSGfpn7iDOEkH86n4Tvr7Rbhc4vw4fg6L62OFtIqIpd1v0PaOTiOCSz9WvENcGB7A0ST89EjIkMHPYNuRoQftwe/JXY3JbIntnrbfP33L/U7YzTmZF/FuTQ8GyXZ8tQOsj8NwesJxJui9vTVvk8SzQfQGOisPQfcXpd+n1zaO4isM0oPofnhm405bjffQXQ6pR18Zh0wX+2ZU5mWc3Z8afljjUs4PtvNdxAVeTfTozL00qp3M50WGZyz30EEuD63M8Y7X/t3qbmP9/1VPKYA85iMeGw3z0huvzOJ+Gmf6XrAGu/aZ4MEY60PQJP9guXfrFqYtHcQWf7n7pyxMPva0/M7f8eHcyYt7psl39wInrHzXWn657nxrMjE665Z0lPM9Tz7Ih6jPDcB5pkZPupMRputWF5zBTyncc4GtMYMfljLAeaAIftzPbKn3ZfA9NPWb4B5Bc3Pz5/fSZffk3JWePE6nev4Yp7f13sN9E4B3mN8UU6/y2cP2rU/vT1PeN79pjkJyzfrPTt8j5517oXnxDyx5GmhZeFxXhEwfAaeYdhHA+anPP3EeabT9Mw62/5ew2+P0O8/S/NMWgzLNgKYPyUb+fmcNsJ5D/YvySdibOJdX4Fnv4sWP5bzxMLtuvsE/DVPiLwH5NT33lh5D80r5s29ax4zK4/f4cL2BM4UpFVULtdCuVwBuXbbT2/7CY+fLnIfzgi11fLTqkuOD0DLuv9I+45pnSlI64zQysr189yjuX72yxZ/611C7NMZBricf/5AxhxvvUvoMPlwjWms2FL7hOeuv6S54XMGXc5vnJFn7fKD2g4rVvqbjBg5y6f6xry1jj9l6GUmvl7MO6AsvQDmHzL0kuc+obQ7oKwzUAzLcQP0tlt3QFlnfQDzqZxx9vZ7gV378htWnK19ZsXZaXdAWWd92P/BtkGT/YI1B1r5DY2dff7HLVz9k5Xf4JzJz5KfQr0T13jtIVla1zdLJdBDG5LvqF/aI8+3nnnaxrScs/P4HUQXMMDhd/PsFRk6CW4v4TNsLz3fQ3wtPP5+RHC4BnivwWfG0xa0gf0A16+l6Xf7bg+PfvtcvS0xxkEnydNF8vH4AMyxjHHQ6Rr1Yo0DHSudohe2BcB20u98NoJheRx0El8Lj/tvr+BwjMUy7cnJh89C9AqcpSOMC/Y7oKVjh/sKMJMZfkdxt+KuqXq70Ec1V9T28TZHusBzwCwUHG9s/yw/wwDH8js83gCX5nc0fgZfC4+/TwpOMk7mBS7N72hbLL/D+4pp+gXMrRl+p1N4n6/9u9TU5+o4WCR5eD7g8QGYe2WMg0XXqBdrHOhYWaTvyYdtoZP+4nfem7dqKB3RvCkFj/tvr+Cw32GZunLyYb8zLXCWjiy/A1o6drSvks+Dc/qdRaL56cl6u/C8RmZrvOlYP1/7d6mpz9XxNi1tUPvierCHZYw3tf1amNsw3mYEBjhs41ob3klws4TPsHP0fIb4Wnj8fVFwknGyIHDMZ97TFrSB/Q73c5p+AXMhw+/E2Ve7Og4mSZ4uko/HB2AuZ4wDtW1rHOhYmRS9sC0AtpN+Z7tlWB4HHGdZeNx/s4LD8w/LNJOTD/udOYGzdIRxwX6Hz0YwDPcVYO7J8DuKm9D8E/I7nSSL8lff0Gnw/9aFOt2XLeyky7kEHVvJ2J4jvq3OFcyntGOOngPmmRlje57+zXbCY3tOYKw4Rv0W62Uqvl628kwLOfQCmOdl6GXBFdfLgqGXeZHBOdtOOS6fJR6tHjtpOpql54B5QYYNIs/EtWztyjNt2wDx0z4DDPfZrMBonw26nfM1x1qgyX7BijuL+D/L//x4Tv/H671/Gq//rufN+ggnhu05aT8+4NnvYsV9V/dA9wp/tVeOVbmvdd1s2fWc0GK87trfiL5tyfL56m/Z5/9CRJ/PMaT6V/b5PQa/LtdoBwcM2X/FIzvT70qhz+05YdD/Y5rXf31hJ90p4qVr6gHhlXySfuf1V6vtqkRt4H7gtRpg3pzTX/O+T7v2dbfnHeJXIvnYF/M41PUscKCHQYKx5t0FoqXjXucHXivNe/CsNbX69jmhw779XZ5+SmSYEtkHXX288fzzhYW6HKA9Qr+/h+Yn9hNpNrINs1in8f6cNsL7Kqyv5NPnGvuhlXGBb+4Bz37X2J+tnns07tD5IqKPqFp2pOMa9TeQE7KUCCf5cP2Njt+886LGu0xrxqDV4aE146E1X5BWUblcC+VyBeTabT+97QM8flrb4fPTI9RWy09rDGHFcnuFH8dfFq35grR0Pcs+eI6e6RqA/TLX33yB/K7m1GYFnmXsERjOV2zH+zUlps3x1j0UH6mtC6yYxootdXxz/NRHc8PU4k66nBeZl2ft8oPaDitWGvDoMY9P9Y15zq+pz2W9TMXXy1YMWXbZegHMLRl6KbvieikbeimJDM41xg3QG+D66HuMsZOmIx5TgBnKsEH47zmSvV15ESvO1j6z4mwd79png86OvWHboMl+wZoDZ0hPgOGYNsv/zGXo3rqn5z0Uw0LeKeK/l/iw/+W9AsAskf97yOJOujzGdW8k3p67nRdGO3hPGDBrGXauax6dNzuc27FPbeUIeuh31UuDfbgoejHzwpZeAHM+Qy8LAXqx9t80j+BcY6wCvXFeONIapurTEY8pwNwvp/9rQ/34Dv8HvfnywoDhPtPxrn2WFidqvov9grUvWCT+s/zPw3LGf1x//X21+C/enqudo9xrtAMwX1/Q/1h9prr17UtZcWm3QatL+HOOEjAXPLJb8Z3SZ1lPGPS/jeaYy8YcM+fhxTEnx5eRYiczvtTYjWOnx187vmPH2nc7HvbETlyTA5i02Inzd4CxajA49tf9qVnhx+voWQ8exgX7GY7RrPmaffy3evqJ199c1zQl9BI+v7BYl8M6I/gM8pXqP6wzgoB5HdnIs3LaCMeePCckn4hrMG+OEjz7XbQcadlak+m6rV3rK/DXNQhylJqbLBNO8uEcZaty/Faugml1eGhNe2gtFKRVVC7XQrlcAbl2209be/958hJpfppzlD4/zX2Yx0/Pe2gtFKRlxaOac+Z4lOcevpco+bBftvhbtQscTzIMzx2A+aWMOV5xE5rPphylFT/p+kTHN89dr6e54U8Wd9K18nO8Rm9nngntsGKl3yiYiyuS1+F4WH0u62Uuvl62Ysgll60XwPx2hl6WXHG9LBl6KYsMzjXGDdAb4GLnt9N0xHlcwLwrZ5zN+YV2rdG3bYD4aZ8BxpdX1j7j2Jj9H2wbNNkvWHOgdUZQY2ef//mzDN1btWTPID8FOqO1v/Fs72qttPok+F3LJ/1VQZ9k7RWm+SRew6pP6iQ4HgcMy/3INdoWHn/X9WoyZkYFjvn0eNqCNnDNvI4dS7+A+aRHv33UlhjjQP2LxuDsX/6loA+2xoGOlSXRC9sCYDvpd/bFDMvjYIn4Wnjcf4uCk4yDHkOmUk4+XDM/L3CWjjRO4/GlY4f7ats31L6k+R3FTWh+dsxtt6t9+7VXx5vu10I+a7+219M2yw41hvbt11q5M8DmGW+8x8X5IQuPv2stn7WfZs0HVlssv6P7apZ+AXPEo992zz/q+3n+OZ4xDtSnWOMgbf6x9uh5/rHmGYblccDxi4VnzT/AyZp/svhYZ3V43lAdWX6H5zqG4b4CzFROv8Px11+Q39E6rHj1gvaZVKxHF4y2LWaMtzQ75PGm+0/A8dWr5hlvvG7nNY6Fx9/nBIdj5KzcU9r+J/sd3ntP0y9gbsvwO+2cf9T38/xzvuD8Y42DtPmHfb3m1TudPc8wLI8DjnstPGv+4bjXN/9k8WG/Mytwlo6sPJPGynuFDsfKX5nhdxQ3ofkb5Hf4jpbkk4y3cZKlhWvgzYTeBLWB28Z3NALm4RnjbYL+ndDCHRQ83sYFBjjsd8ZEhog62NojnsyhA8A8IqN/23jPUUVzGNt9Sfz0DKy+f8LqE+BwTQFgxghP7zGybAfwajt8jxFgvtGjW1738P1ySi+BeR7ZUw/OA5JO9vTWZe4imJtIJsDcVarTfSLpulvoJr9/u/E7Pr79NoyPZKz0xRkrW3NLf2+9fV3Eq4vaD5h+kqOb/v2/SvXne3sb2wNdgG6i/97a97296XjdgjdIML2E1yd4fdJvSR/cXZOv3zXaQSv3Lrmvk/H3/wPEoH/7L2QGAA==","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"redeem_linode_entitlement","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"body","type":{"kind":"array","length":832,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"body_hash_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"body_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"header","type":{"kind":"array","length":640,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"header_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"pubkey","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"pubkey_redc","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"},{"name":"from_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"subject_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"amount_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"amount_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"date_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"receipt_id_length","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"claim_secret_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","decompose_hint","get_key_validation_request","notify_nullified_note","split_60_bits","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","__mul_impl","__compute_quadratic_expression_with_borrow_flags","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","get_public_data_witness","lt_32_hint","lte_16_hint","pack_arguments","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"usdc_token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"title","type":{"kind":"string","length":60},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"838":"attempt to add with overflow","762":"Array index out of bounds","567":"Array index out of bounds","695":"Array index out of bounds","945":"Array index out of bounds","174":"attempt to add with overflow","686":"attempt to subtract with overflow","744":"attempt to add with overflow","750":"attempt to add with overflow","933":"attempt to add with overflow","1012":"attempt to add with overflow","668":"Array index out of bounds","1107":"attempt to add with overflow","208":"attempt to add with overflow","912":"Array index out of bounds","778":"Array index out of bounds","711":"attempt to add with overflow","961":"Array index out of bounds","1086":"Array index out of bounds","824":"Array index out of bounds","690":"attempt to subtract with overflow","620":"attempt to add with overflow","230":"attempt to add with overflow","806":"Array index out of bounds","998":"Array index out of bounds","599":"attempt to add with overflow","212":"Array index out of bounds","724":"Array index out of bounds","791":"attempt to add with overflow","974":"attempt to add with overflow","904":"Array index out of bounds","980":"Array index out of bounds","770":"Array index out of bounds","575":"attempt to add with overflow","892":"attempt to add with overflow","953":"Array index out of bounds","1078":"Array index out of bounds","1066":"attempt to add with overflow","679":"attempt to add with overflow","609":"Array index out of bounds","219":"Array index out of bounds","731":"Array index out of bounds","920":"Array index out of bounds","591":"Array index out of bounds","463":"Initializer address is not the contract deployer","527":"SharedImmutable already initialized","1094":"Array index out of bounds","457":"Initialization hash does not match"}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"body","type":{"kind":"array","length":832,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"body_hash_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"body_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"header","type":{"kind":"array","length":640,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"header_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"pubkey","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"pubkey_redc","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"signature","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"from_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"subject_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amount_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"amount_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"date_index","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"receipt_id_length","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"claim_secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseEscrow::redeem_linode_entitlement_parameters"}}],"kind":"struct","path":"ZImburseEscrow::redeem_linode_entitlement_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseEscrow::get_title_parameters"}},{"name":"return_type","type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"ZImburseEscrow::get_title_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseEscrow::get_admin_private_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrow::get_admin_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseEscrow::give_entitlement_parameters"}}],"kind":"struct","path":"ZImburseEscrow::give_entitlement_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"usdc_token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"title","type":{"kind":"string","length":60}}],"kind":"struct","path":"ZImburseEscrow::constructor_parameters"}}],"kind":"struct","path":"ZImburseEscrow::constructor_abi"}]}},"file_map":{"101":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"103":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"105":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"108":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\nuse std::{\n    embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n    utils::point::point_to_bytes, note::note_interface::NoteInterface,\n    encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n},\n    keys::public_keys::{OvpkM, IvpkM}\n};\n\npub fn compute_encrypted_event_log<Event, let N: u32, let OB: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<N> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    note: Note,\n    num_public_values: u8 // Number of values to be appended to the log in public (used in partial note flow).\n) -> [u8; M] where Note: NoteInterface<N> {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    encrypted_bytes[64] = num_public_values; // TODO(#8558): This can be just a single bit if we store info about partial fields in ABI\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[65 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[97 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[145 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[193 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 337;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[337 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // num_public_values (1 byte)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(unsafe_rand());\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::compute_encrypted_note_log, keys::public_keys::{OvpkM, IvpkM},\n        test::mocks::mock_note::MockNoteBuilder\n    };\n    use dep::protocol_types::{address::AztecAddress, point::Point};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_note_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n        let num_public_values: u8 = 0;\n\n        let log: [u8; 449] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note,\n            num_public_values\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38\n        ];\n        assert_eq(encrypted_note_log_from_typescript, log);\n    }\n\n    #[test]\n    unconstrained fn test_encrypted_note_log_of_finalized_partial_note_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let storage_slot = 0x0fe46be583b71f4ab5b70c2657ff1d05cccf1d292a9369628d1a194f944e6599;\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let note_value = 0x301640ceea758391b2e161c92c0513f129020f4125256afdae2646ce31099f5c;\n        let note_public_value1 = 0x14172339287e8d281545c177313f02b6aa2fedfd628cfd8b7f11a136fd0d6557;\n        let note_public_value2 = 0x0834d81e3f73c7e2809b08ae38600ffc76a2554473eeab6de7bff4b33a84feac;\n        let note = MockNoteBuilder::new(note_value).contract_address(contract_address).storage_slot(storage_slot).build();\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n        let num_public_values: u8 = 2;\n\n        // First we compute the encrypted log without the public values\n        let log_without_public_values: [u8; 449] = compute_encrypted_note_log(\n            contract_address,\n            storage_slot,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            note,\n            num_public_values\n        );\n\n        // Then we \"append\" the public values to the log by copying both the original log and the current log into a new byte array\n        let mut log: [u8; 513] = [0; 513];\n        for i in 0..449 {\n            log[i] = log_without_public_values[i];\n        }\n        let note_public_value1_bytes: [u8; 32] = note_public_value1.to_be_bytes();\n        let note_public_value2_bytes: [u8; 32] = note_public_value2.to_be_bytes();\n        for i in 0..32 {\n            log[449 + i] = note_public_value1_bytes[i];\n            log[481 + i] = note_public_value2_bytes[i];\n        }\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_note_log_of_finalized_partial_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 205, 103, 212, 60, 151, 141, 10, 151, 222, 151, 180, 43, 91, 148, 201, 110, 165, 10, 238, 32, 134, 235, 99, 216, 200, 182, 31, 22, 156, 18, 209, 222, 172, 239, 193, 212, 86, 99, 62, 70, 182, 45, 175, 241, 91, 202, 179, 225, 236, 95, 71, 66, 151, 225, 203, 53, 216, 85, 102, 130, 6, 8, 25, 180, 86, 58, 140, 198, 105, 102, 177, 42, 94, 115, 247, 145, 147, 24, 231, 39, 73, 27, 10, 219, 130, 115, 188, 74, 114, 5, 177, 199, 83, 183, 106, 87, 204, 238, 231, 72, 45, 240, 39, 174, 25, 98, 53, 187, 156, 159, 244, 38, 20, 23, 35, 57, 40, 126, 141, 40, 21, 69, 193, 119, 49, 63, 2, 182, 170, 47, 237, 253, 98, 140, 253, 139, 127, 17, 161, 54, 253, 13, 101, 87, 8, 52, 216, 30, 63, 115, 199, 226, 128, 155, 8, 174, 56, 96, 15, 252, 118, 162, 85, 68, 115, 238, 171, 109, 231, 191, 244, 179, 58, 132, 254, 172\n        ];\n        assert_eq(encrypted_note_log_of_finalized_partial_from_typescript, log);\n    }\n}\n"},"109":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::aes128::aes128_encrypt;\n\nuse crate::{keys::public_keys::IvpkM, utils::point::point_to_bytes};\n\npub struct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk: IvpkM) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk }\n    }\n\n    /// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n    /// be able to derive the key with which the incoming log can be decrypted.\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 144] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer = [0 as u8; 128];\n\n        let serialized_eph_sk_high: [u8; 32] = self.eph_sk.hi.to_be_bytes();\n        let serialized_eph_sk_low: [u8; 32] = self.eph_sk.lo.to_be_bytes();\n\n        let address_bytes: [u8; 32] = self.recipient.to_field().to_be_bytes();\n        let serialized_recipient_ivpk = point_to_bytes(self.recipient_ivpk.to_point());\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n        }\n        for i in 0..32 {\n            buffer[i + 96] = serialized_recipient_ivpk[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash_with_separator(\n            [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ).to_be_bytes();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::{encrypted_logs::outgoing_body::EncryptedLogOutgoingBody, keys::public_keys::IvpkM};\n    use dep::protocol_types::{address::AztecAddress, scalar::Scalar};\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n\n    #[test]\n    unconstrained fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n"},"112":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr","source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::IvpkM};\n\npub struct EncryptedLogIncomingBody<let N: u32> {\n    plaintext: [u8; N * 32 + 64]\n}\n\nimpl<let N: u32> EncryptedLogIncomingBody<N> {\n    pub fn from_note<T>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T>(event: T, randomness: Field) -> Self where T: EventInterface<N> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use dep::protocol_types::{\n        address::AztecAddress, scalar::Scalar, point::Point, traits::Serialize,\n        abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote}},\n        encrypted_logs::incoming_body::EncryptedLogIncomingBody, event::event_interface::EventInterface,\n        context::PrivateContext, keys::public_keys::IvpkM\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: u32 = 3;\n\n    impl NullifiableNote for AddressNote {\n        fn compute_nullifier(\n            _self: Self,\n            _context: &mut PrivateContext,\n            _note_hash_for_nullify: Field\n        ) -> Field {\n            1\n        }\n\n        unconstrained fn compute_nullifier_without_context(_self: Self) -> Field {\n            1\n        }\n    }\n\n    struct AddressNoteHidingPoint {\n        inner: Point\n    }\n\n    impl NoteInterface<ADDRESS_NOTE_LEN> for AddressNote {\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader {\n            self.header\n        }\n\n        fn set_header(&mut self, header: NoteHeader) {\n            self.header = header;\n        }\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] {\n            [self.address.to_field(), self.owner.to_field(), self.randomness]\n        }\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote {\n                address: AztecAddress::from_field(fields[0]),\n                owner: AztecAddress::from_field(fields[1]),\n                randomness: fields[2],\n                header: NoteHeader::empty()\n            }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_LEN * 32 + 64] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_LEN * 32 + 64] = [0; ADDRESS_NOTE_LEN * 32 + 64];\n\n            let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n            let note_type_id_bytes: [u8; 32] = AddressNote::get_note_type_id().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n\n        fn compute_note_hash(_self: Self) -> Field {\n            crate::generators::Ga1.x\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    unconstrained fn test_encrypted_note_log_incoming_body_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        // 1. `EncryptedLogIncomingBody::from_note` calls `note.to_be_bytes(storage_slot)` function which serializes\n        // the note to bytes - note that in the case of `AddressNote` the `to_be_bytes` function was automatically\n        // implemented by Aztec macros.\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        // 2. `body.compute_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: u32 = 3;\n\n    impl EventInterface<TEST_EVENT_LEN> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            comptime\n            {\n                EventSelector::from_signature(\"TestEvent(Field,Field,Field)\")\n            }\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_LEN * 32 + 64] {\n            let mut buffer: [u8; TEST_EVENT_LEN * 32 + 64] = [0; TEST_EVENT_LEN * 32 + 64];\n\n            let randomness_bytes: [u8; 32] = randomness.to_be_bytes();\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_LEN * 32 + 32] {\n            let mut buffer: [u8; TEST_EVENT_LEN * 32 + 32] = [0; TEST_EVENT_LEN * 32 + 32];\n\n            let event_type_id_bytes: [u8; 32] = TestEvent::get_event_type_id().to_field().to_be_bytes();\n\n            for i in 0..32 {\n                buffer[i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes: [u8; 32] = serialized_event[i].to_be_bytes();\n                for j in 0..32 {\n                    buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_event_log_incoming_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let event_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 201, 247, 40, 80, 60, 188, 158, 251, 242, 103, 197, 79, 165, 195, 10, 160, 255, 35, 167, 152, 25, 233, 77, 145, 214, 243, 210, 119, 0, 20, 29, 95, 15, 63, 33, 190, 184, 67, 254, 96, 128, 243, 220, 228, 201, 130, 86, 163, 52, 127, 111, 10, 212, 7, 160, 16, 87, 13, 39, 11, 5, 1, 164, 65, 8, 56, 82, 245, 13, 68, 176, 90, 100, 69, 243, 78, 117, 188, 221, 34, 178, 31, 155, 89, 143, 176, 129, 118, 36, 236, 64, 179, 52, 239, 184, 51, 51, 199, 221, 49, 81, 197, 17, 199, 192, 99, 49, 168, 157, 164, 190, 33, 240, 182, 214, 173, 7, 156, 102, 95, 65, 217, 225, 123, 42, 21, 124, 144\n        ];\n\n        assert_eq(event_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..event_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], event_body_ciphertext_from_typescript[i]);\n        }\n    }\n}\n"},"113":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::{get_public_keys, get_ovsk_app}, public_keys::{OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    num_public_values: u8 // Number of values to be appended to the log in public (used in partial note flow).\n) -> (u32, [u8; M], Field) where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(\n        contract_address,\n        storage_slot,\n        ovsk_app,\n        ovpk,\n        ivpk,\n        recipient,\n        note,\n        num_public_values\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32, let M: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    num_public_values: u8 // Number of values to be appended to the log in public (used in partial note flow).\n) -> (u32, [u8; M], Field) where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient, num_public_values)\n}\n\npub fn encode_and_encrypt_note<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(AztecAddress, AztecAddress, &mut PrivateContext)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovpk = get_public_keys(ov).ovpk_m;\n        let ivpk = get_public_keys(iv).ivpk_m;\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        // Number of public values is always 0 here because `encode_and_encrypt_note(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, iv, num_public_values);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(AztecAddress, AztecAddress, &mut PrivateContext)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        // Note: We could save a lot of gates by obtaining the following keys in an unconstrained context but this\n        // function is currently not used anywhere so we are not optimizing it.\n        let ovpk = get_public_keys(ov).ovpk_m;\n        let ivpk = get_public_keys(iv).ivpk_m;\n\n        // Number of public values is always 0 here because `encode_and_encrypt_note_unconstrained(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n\n        // See the comment in `encode_and_encrypt_note_with_keys_unconstrained` for why having note hash counter\n        // and log hash unconstrained here is fine.\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, iv, num_public_values)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        // Number of public values is always 0 here because `encode_and_encrypt_note_unconstrained(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient, num_public_values);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, let N: u32, let M: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        // Number of public values is always 0 here because `encode_and_encrypt_note_with_keys_unconstrained(...)` is only called\n        // in the non-partial note flow.\n        let num_public_values = 0;\n\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient, num_public_values)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n"},"114":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"117":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(self.args_hash == packed_args_hash);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        let packed_args_hash = unsafe {\n            pack_arguments(self.args)\n        };\n        assert(args_hash == packed_args_hash);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"120":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"125":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\nuse crate::hash::ArgsHasher;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"138":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"139":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"144":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"145":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::oracle::logs_traits::ToBytesForUnencryptedLog;\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (n as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"155":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"161":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"165":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"},"166":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"170":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"172":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter)\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) -> Field {\n    notify_nullified_note_oracle(nullifier, note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"174":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr","source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n"},"177":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n"},"178":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(_contract_address: AztecAddress, _randomness: Field, _encrypted_event: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<let N: u32, let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _recipient: AztecAddress,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<let N: u32, let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    recipient: AztecAddress,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        recipient,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<let N: u32>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n"},"182":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"183":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"185":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"186":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"187":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call.\n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments\n///   itself.\nunconstrained pub fn pack_arguments_array<let N: u32>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call.\n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments\n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"199":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"201":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x2499880e2b1b831785c17286f99a0d5122fee784ce7b1c04e380c4a991da819a;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"202":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"211":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"219":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"221":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"222":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"224":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"244":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"246":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"249":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_le_radix(256)\n    }\n    // docs:end:to_le_bytes\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8]` slice of length `byte_size`.\n    /// This slice will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{8*byte_size}` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `byte_size` equal to or greater than the number of bytes necessary to represent the `Field` modulus\n    /// (e.g. 32 for the BN254 field) allow for multiple byte decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        self.to_be_radix(256)\n    }\n    // docs:end:to_be_bytes\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"275":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\nmod keccak;\nmod sha256;\nmod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    __pedersen_hash_with_separator(input, separator)\n}\n\nfn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    __pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n    // Same as from_field but:\n    // does not assert the limbs are 128 bits\n    // does not assert the decomposition does not overflow the EmbeddedCurveScalar\n    fn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n\n"},"296":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"319":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"341":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n  value: [Field; N]\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    crate::sha256::digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u64, msg_start: u32) -> ([u8; 64], u64) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut msg_byte_ptr: u64 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    for k in msg_start..msg_end {\n        if k as u64 < message_size {\n            msg_block[msg_byte_ptr] = msg[k];\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n    (msg_block, msg_byte_ptr)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u64,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u64 {\n    let mut msg_byte_ptr: u64 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    let mut extra_bytes = 0;\n    if msg_end > N {\n        msg_end = N;\n        extra_bytes = msg_end - N;\n    }\n\n    for k in msg_start..msg_end {\n        if k as u64 < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start as u64 < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start as u64 < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start as u64 < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if msg_byte_ptr == 64 {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start as u64 < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start as u64 < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start as u64 < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE as u64 {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..64 {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..64 {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(mut msg_block: [u8; 64], mut msg_byte_ptr: u64) -> ([u8; 64], u64) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        if msg_byte_ptr < 64 {\n            for _ in 57..64 {\n                if msg_byte_ptr <= 63 {\n                    msg_block[msg_byte_ptr] = 0;\n                    msg_byte_ptr += 1;\n                }\n            }\n        }\n    }\n    (msg_block, msg_byte_ptr)\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; 64], mut msg_byte_ptr: u64, message_size: u64) -> [u8; 64] {\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for _i in 0..64 {\n        // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n        if msg_byte_ptr < 56 {\n            msg_block[msg_byte_ptr] = 0;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        } else if msg_byte_ptr < 64 {\n            for j in 0..8 {\n                msg_block[msg_byte_ptr + j] = len_bytes[j];\n            }\n            msg_byte_ptr += 8;\n        }\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; 64], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n"},"356":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"357":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app, macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness: unsafe_rand(), header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"368":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/circuits/zimburse_verifiers/src/sha256_var.nr","source":"use std::runtime::is_unconstrained;\nuse std::hash::sha256_compression;\n\n////////\n//////// USE UNTIL AZTEC-NARGO v0.35.0\n////////\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if std::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !std::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !std::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}"},"369":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/circuits/zimburse_verifiers/src/linode.nr","source":"use dep::zkemail::{KEY_LIMBS_2048, dkim::verify_dkim_2048, get_body_hash_by_index, base64::body_hash_base64_decode};\nuse crate::constants::{LinodeBillingParams, MAX_LINODE_EMAIL_BODY_LENGTH, MAX_LINODE_EMAIL_HEADER_LENGTH};\nuse crate::utils::{check_from_linode_billing, check_subject_billing_receipt, extract_billed_amount, extract_datetime};\nuse std::hash::pedersen_hash;\n\n/// USE UNTIL WE HAVE AZTEC-NARGO v0.35.0\nuse crate::sha256_var::sha256_var;\n\npub fn verify_linode_billing_receipt(\n    body: [u8; MAX_LINODE_EMAIL_BODY_LENGTH],\n    body_hash_index: u32,\n    body_length: u32,\n    header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH],\n    header_length: u32,\n    pubkey: [Field; KEY_LIMBS_2048],\n    pubkey_redc: [Field; KEY_LIMBS_2048],\n    signature: [Field; KEY_LIMBS_2048],\n    from_index: u32,\n    subject_index: u32,\n    amount_index: u32,\n    amount_length: u32,\n    date_index: u32,\n    receipt_id_length: u32,\n) -> [Field; 3] {\n\n    // check the body and header lengths are within bounds\n    assert(header_length <= MAX_LINODE_EMAIL_HEADER_LENGTH);\n    assert(body_length <= MAX_LINODE_EMAIL_BODY_LENGTH);\n\n    // verify the dkim signature over the header\n    verify_dkim_2048(header, header_length, pubkey, pubkey_redc, signature);\n\n    // extract body hash and decode from base64\n    let body_hash_encoded = get_body_hash_by_index(header, body_hash_index);\n    let signed_body_hash = body_hash_base64_decode(body_hash_encoded);\n\n    // compute the hash of the asserted body\n    let computed_body_hash = sha256_var(body, body_length as u64);\n\n    // compare the retrieved body hash to the computed body hash\n    assert(\n        signed_body_hash == computed_body_hash, \"SHA256 hash computed over body does not match body hash found in DKIM-signed header\"\n    );\n\n    // assert email is from billing@linode.com\n    check_from_linode_billing(from_index, header);\n\n    // assert this is a billing receipt email from Linode\n    check_subject_billing_receipt(subject_index, header, receipt_id_length);\n\n    // extract billed amount\n    // note: the billed amount has 2 decimals\n    let billed_amount = extract_billed_amount(body, amount_index, amount_length);\n\n    // extract the timestamp header from the email\n    let datetime = extract_datetime(header, date_index);\n    \n    // hash the dkim key used to verify the email\n    let dkim_key_hash = pedersen_hash(pubkey);\n    [dkim_key_hash, datetime as Field, billed_amount as Field]\n    // [dkim_key_hash as Field, 0, 0]\n}\n"},"371":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/circuits/zimburse_verifiers/src/utils.nr","source":"use crate::constants::{\n   LB_FROM_LEN, LB_PAYMENT_TEXT_LEN, LB_SUBJECT_FIXED_END_LEN, LB_SUBJECT_FIXED_START_LEN, LINODE_BILLING_FROM, LINODE_BILLING_PAYMENT_TEXT,\n   LINODE_BILLING_SUBJECT_FIXED_END, LINODE_BILLING_SUBJECT_FIXED_START, MAX_BILLED_AMOUNT, MAX_LINODE_EMAIL_BODY_LENGTH,\n    MAX_LINODE_EMAIL_HEADER_LENGTH, DATE_HEADER_FIELD_MAX_LENGTH, DATE_LENGTH_DETERMINATION_INDEX, DATE_HEADER_FIELD_START\n};\nuse dep::date_parser::{parse_date_string, to_unix_month, DATETIME_LENGTH};\n\n/**\n* Check that email is from linode billing address\n*/\npub fn check_from_linode_billing(index: u32, header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH]) {\n    // check the first char is \"f\" or \"F\"\n    assert((header[index] == 0x66) | (header[index] != 0x46), \"Email sender not found.\");\n\n    // check the remaing chars are the expected Linode billing\n    let from_bytes = LINODE_BILLING_FROM.as_bytes();\n    for i in 0..LB_FROM_LEN {\n        assert(header[i + index + 1] == from_bytes[i], \"Email not from Linode billing.\");\n    }\n\n    // check for CRLF\n    assert(header[LB_FROM_LEN + index + 1] == 0x0D, \"Invalid CRLF sequence\");\n    assert(header[LB_FROM_LEN + index + 2] == 0x0A, \"Invalid CRLF sequence\");\n}\n\n/**\n* Check that email subject is linode billing receipt\n*/\npub fn check_subject_billing_receipt(index: u32, header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH], receipt_id_length: u32) {\n    // check the first char is \"s\" or \"S\"\n    assert((header[index] == 0x73) | (header[index] == 0x53), \"Email subject not found\");\n\n    let fixed_start_bytes = LINODE_BILLING_SUBJECT_FIXED_START.as_bytes();\n    // check chars in fixed section start\n    for i in 0..LB_SUBJECT_FIXED_START_LEN {\n        assert(header[i + index + 1] == fixed_start_bytes[i], \"Email subject is not Linode billing receipt\");\n    }\n\n    let fixed_end_bytes = LINODE_BILLING_SUBJECT_FIXED_END.as_bytes();\n    // check chars in fixed section end\n    for i in 0..LB_SUBJECT_FIXED_END_LEN {\n        let headerIndex = i + index + receipt_id_length + LB_SUBJECT_FIXED_START_LEN;\n        assert(header[headerIndex] == fixed_end_bytes[i], \"Email subject is not Linode billing receipt\");\n    }\n}\n\n/**\n * Constrains a span to be a full header field\n *\n * @param MAX_HEADER_LENGTH: the maximum possible length of the header\n * @param header: the header of the email\n * @param index: the index that the header field begins at\n * @param length: the length of the header field\n */\npub fn constrain_header_field<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH],\n    index: u32,\n    length: u32\n) {\n    // check that the field does not lie outside of the max \n    assert(index + length <= header.len(), \"Header field out of bounds\");\n    // if not the first field in the header, ensure the header field is preceded by a CRLF\n    if (index != 0) {\n        assert(header[index - 2] == 0x0D, \"Missing prefix CR in field constraint\");\n        assert(header[index - 1] == 0x0A, \"Missing prefix LF in field constraint\");\n    }\n    // check that the following two chars are the crlf\n    if (index + length < header.len()) {\n        assert(header[index + length] == 0x0D, \"Missing suffix CR in field constraint\");\n        assert(header[index + length + 1] == 0x0A, \"Missing suffix LF field constraint\");\n    }\n    // check that the field does not contain any CRLF\n    for i in 0..MAX_HEADER_LENGTH {\n        if (i < length) {\n            assert(header[index + i] != 0x0D, \"CR in field constraint Field\");\n        }\n    }\n}\n\n/**\n * Extracts the datetime from the email header\n *\n * @param header: the header of the email\n * @param index: the index that the date header field begins at\n * @return the parsed unix timestamp\n */\npub fn extract_datetime(header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH], index: u32) -> u32 {\n    // determine the index of the selector that chooses the length of the date field\n    let length_decider = index + DATE_LENGTH_DETERMINATION_INDEX;\n    let length = if header[length_decider] == 0x20 {\n        DATE_HEADER_FIELD_MAX_LENGTH - 1\n    } else {\n        DATE_HEADER_FIELD_MAX_LENGTH\n    };\n    // constrain the header field to be a single and full header field\n    constrain_header_field::<DATE_HEADER_FIELD_MAX_LENGTH>(header, index, length);\n    // check the header field starts with \"Date: \"\n    let first_byte = (header[index] == 0x44) as u1 | (header[index] == 0x64) as u1;\n    assert(first_byte as bool, \"Invalid date field: [D/d]\");\n    for i in 0..DATE_HEADER_FIELD_START.len() {\n        assert(header[index + i + 1] == DATE_HEADER_FIELD_START[i], \"Invalid date field\");\n    }\n    // extract the date string\n    let mut datetime_string: [u8; DATETIME_LENGTH] = [0; DATETIME_LENGTH];\n    // todo: make const (and also put all this shit in zkemail.nr)\n    let start_index = index + 10;\n    for i in 0..DATETIME_LENGTH {\n        datetime_string[i] = header[start_index + i];\n    }\n    // parse the datetime into unix\n    let parsed = parse_date_string(datetime_string);\n    to_unix_month(parsed)\n}\n\npub fn serialize_bytes<let LIMBS: u32, let SEQUENCE_LENGTH: u32>(sequence: [u8; SEQUENCE_LENGTH]) -> [Field; LIMBS] {\n    let mut limbs: [Field; LIMBS] = [0; LIMBS];\n    for i in 0..LIMBS {\n        let mut chunk = 0;\n        let mut v = 1;\n        for j in 0..31 {\n            let index = i * 31 + j;\n            if index < SEQUENCE_LENGTH {\n                chunk += sequence[index] as Field * v;\n                v *= 256;\n            }\n        }\n        limbs[i] = chunk;\n    }\n    limbs\n}\n\npub fn is_number_constraint(num: u8) {\n    assert(num >= 0x30);\n    assert(num < 0x3A);\n}\n\n/**\n* Extract the amount billed by Linode as a u32\n*/\npub fn extract_billed_amount(body: [u8; MAX_LINODE_EMAIL_BODY_LENGTH], index: u32, amount_length: u32) -> u32 {\n\n    // ensure billed amount follows valid payment text sequence\n    let payment_text_bytes = LINODE_BILLING_PAYMENT_TEXT.as_bytes();\n    for i in 0..LB_PAYMENT_TEXT_LEN {\n        assert(body[(index - LB_PAYMENT_TEXT_LEN) + i] == payment_text_bytes[i], \"Invalid payment text sequence.\");\n    }\n\n    let mut amount: Field = 0;\n    let fixed_values = 4; // '$', '.', and two decimals\n    let commas: Field = ((amount_length - fixed_values - 1) / 4) as Field; // account for \n    let mut power: Field = amount_length as Field - commas - 3; // 3 represents '$' and '.' and power is equal to numberic len - 1\n\n    // ensure first character is '$'\n    assert(body[index] == 36);\n\n    // if second character is a zero then decrement power\n    if body[index + 1] == 48 {\n        power = power - 1;\n    }\n\n    for i in 1..MAX_BILLED_AMOUNT {\n        if i < amount_length {\n            let byte = body[index + i];\n            // check that byte is not a comma or period\n            if (byte != 44) & (byte != 46) {\n                amount = amount + ((byte as Field - 48) * (10 as Field).pow_32(power));\n                power = power - 1;\n            }\n        }\n    }\n    amount as u32\n}\n\n// #[test]\n// fn value_extraction() {\n//     let index = 0;\n//     let mut body: [u8; MAX_LINODE_EMAIL_BODY_LENGTH] = [0; MAX_LINODE_EMAIL_BODY_LENGTH];\n//     let val = \"$4,123.00\";\n//     let bytes = val.as_bytes();\n//     for i in 0..bytes.len() {\n//         body[i] = bytes[i];\n//     }\n//     let extracted = extract_billed_amount(body, index, bytes.len());\n//     println(extracted);\n// }\n\n// #[test]\n// fn test_payment_string_bytes() {\n//  let bytes = LINODE_BILLING_PAYMENT_TEXT.as_bytes();\n//  println(bytes);\n// }"},"372":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/circuits/date_parser/src/lib.nr","source":"struct Datetime {\n    year: u16,\n    leap_years: u16,\n    add_leap_day: bool,\n    month: u8,\n    day: u8,\n    time: u32,\n    offset: u16,\n    subtract: bool\n}\n\nglobal DATETIME_LENGTH: u32 = 26;\n\n\nglobal months = [\n    \"Jan\".as_bytes(),\n    \"Feb\".as_bytes(),\n    \"Mar\".as_bytes(),\n    \"Apr\".as_bytes(),\n    \"May\".as_bytes(),\n    \"Jun\".as_bytes(),\n    \"Jul\".as_bytes(),\n    \"Aug\".as_bytes(),\n    \"Sep\".as_bytes(),\n    \"Oct\".as_bytes(),\n    \"Nov\".as_bytes(),\n    \"Dec\".as_bytes()\n];\n\nglobal days_in_month = [\n    31,\n    28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31\n];\n\npub fn parse_month(month: [u8; 3]) -> u8 {\n    let mut index = 0;\n    for i in 0..12 {\n        if month == months[i] {\n            index = i + 1;\n        }\n    }\n    index\n}\n\n// todo: is leap year + is past feb 29th\n\npub fn compute_leap_years(year: u16) -> u16 {\n    year / 4 - year / 100 + year / 400\n}\n\npub fn is_number_constraint(num: u8) {\n    assert(num >= 0x30);\n    assert(num < 0x3A);\n}\n\npub fn parse_year(year: [u8; 4]) -> (u16, u16) {\n    // range check year\n    for i in 0..year.len() {\n        is_number_constraint(year[i]);\n    }\n    // compute year\n    let mut year = (year[0] as u16 - 0x30) * 1000\n        + (year[1] as u16 - 0x30) * 100\n        + (year[2] as u16 - 0x30) * 10\n        + year[3] as u16\n        - 0x30;\n    // figure out number of leap years\n    let leap_years_since_0000 = compute_leap_years(year - 1);\n    let start_leap_years = compute_leap_years(1970);\n    let leap_years = leap_years_since_0000 - start_leap_years;\n    (year, leap_years)\n}\n\npub fn parse_time(time: [u8; 8]) -> u32 {\n    // check each char\n    is_number_constraint(time[0]);\n    is_number_constraint(time[1]);\n    assert(time[2] == 0x3A);\n    is_number_constraint(time[3]);\n    is_number_constraint(time[4]);\n    assert(time[5] == 0x3A);\n    is_number_constraint(time[6]);\n    is_number_constraint(time[7]);\n    // compute hours, mins, secs\n    let hours = (time[0] as u32 - 0x30) * 10 + time[1] as u32 - 0x30;\n    let mins = (time[3] as u32 - 0x30) * 10 + time[4] as u32 - 0x30;\n    let secs = (time[6] as u32 - 0x30) * 10 + time[7] as u32 - 0x30;\n    // return seconds since midnight\n    hours * 3600 + mins * 60 + secs\n}\n\npub fn parse_offset(offset: [u8; 5]) -> (u16, bool) {\n    // determine whether to add or subtract\n    let mut subtract = false;\n    if offset[0] == 0x2D {\n        subtract = true;\n    } else {\n        assert(offset[0] == 0x2B);\n    }\n    // check each char\n    for i in 1..offset.len() {\n        is_number_constraint(offset[i]);\n    }\n    // parse hours\n    let hours = (offset[1] as u16 - 0x30) * 10 + offset[2] as u16 - 0x30;\n    // parse mins\n    let mins = (offset[3] as u16 - 0x30) * 10 + offset[4] as u16 - 0x30;\n    // return seconds\n    let offset = hours * 3600 + mins * 60;\n    (offset, subtract)\n}\n\npub fn parse_day(dat: [u8; 2]) -> u8 {\n    // check each char\n    is_number_constraint(dat[0]);\n    is_number_constraint(dat[1]);\n    // compute day\n    (dat[0] as u8 - 0x30) * 10 + dat[1] as u8 - 0x30\n}\n\npub fn add_leap_day(year: u16, month: u8) -> bool {\n    // determine if current year is leap year\n    let div_by_4 = (year % 4 == 0) as u1;\n    let div_by_100 = (year % 100 != 0) as u1;\n    let div_by_400 = (year % 400 == 0) as u1;\n    let leap_year = div_by_4 * (1 - (1 - div_by_100) * (1 - div_by_400));\n    // determine if month is past feb\n    let past_feb = (month > 2) as u1;\n\n    (leap_year * past_feb) as bool\n}\n\npub fn parse_date_string(date_bytes: [u8; DATETIME_LENGTH]) -> Datetime {\n    // check day shift and set day\n    let day_shift = if date_bytes[1] == 0x20 {\n        (0, [0x30, date_bytes[0]])\n    } else {\n        (1, [date_bytes[0], date_bytes[1]])\n    };\n\n    // parse day\n    let day = parse_day(day_shift.1);\n\n    // parse month\n    let month = parse_month([date_bytes[2 + day_shift.0], date_bytes[3 + day_shift.0], date_bytes[4 + day_shift.0]]);\n    assert(month != 0);\n\n    // parse year\n    let year = parse_year(\n        [\n        date_bytes[6 + day_shift.0],\n        date_bytes[7 + day_shift.0],\n        date_bytes[8 + day_shift.0],\n        date_bytes[9 + day_shift.0]\n    ]\n    );\n    // parse time\n    let time = parse_time(\n        [\n        date_bytes[11 + day_shift.0],\n        date_bytes[12 + day_shift.0],\n        date_bytes[13 + day_shift.0],\n        date_bytes[14 + day_shift.0],\n        date_bytes[15 + day_shift.0],\n        date_bytes[16 + day_shift.0],\n        date_bytes[17 + day_shift.0],\n        date_bytes[18 + day_shift.0]\n    ]\n    );\n    // parse offset\n    let offset = parse_offset(\n        [\n        date_bytes[20 + day_shift.0],\n        date_bytes[21 + day_shift.0],\n        date_bytes[22 + day_shift.0],\n        date_bytes[23 + day_shift.0],\n        date_bytes[24 + day_shift.0]\n    ]\n    );\n    // check if leap day needs to be added\n    let add_leap_day = add_leap_day(year.0, month);\n\n    Datetime { year: year.0, leap_years: year.1, add_leap_day, month, day, time, offset: offset.0, subtract: offset.1 }\n}\n\npub fn to_unix_month(datetime: Datetime) -> u32 {\n    // get number of days in complete years\n    let days_in_complete_years = (datetime.year - 1970) as u32 * 365 + datetime.leap_years as u32;\n    // get number of days in current year\n    let mut days_in_current_year = 0;\n    for i in 0..12 {\n        if i + 1 < datetime.month {\n            days_in_current_year += days_in_month[i];\n        }\n    }\n    days_in_current_year += datetime.add_leap_day as u32;\n    // total seconds since epoch\n    let mut seconds_since_epoch = (days_in_complete_years + days_in_current_year) * 86400 + datetime.time as u32;\n    // apply offset\n    if datetime.subtract {\n        seconds_since_epoch -= datetime.offset as u32;\n    } else {\n        seconds_since_epoch += datetime.offset as u32;\n    }\n    // return unix timestamp\n    seconds_since_epoch\n}\n\npub fn to_unix(datetime: Datetime) -> u32 {\n    // get number of days in complete years\n    let days_in_complete_years = (datetime.year - 1970) as u32 * 365 + datetime.leap_years as u32;\n    // get number of days in current year\n    let mut days_in_current_year = 0;\n    for i in 0..12 {\n        if i + 1 < datetime.month {\n            days_in_current_year += days_in_month[i];\n        }\n    }\n    days_in_current_year += (datetime.day + datetime.add_leap_day as u8) as u32;\n    // total seconds since epoch\n    let mut seconds_since_epoch = (days_in_complete_years + days_in_current_year) * 86400 + datetime.time as u32;\n    // apply offset\n    if datetime.subtract {\n        seconds_since_epoch -= datetime.offset as u32;\n    } else {\n        seconds_since_epoch += datetime.offset as u32;\n    }\n    // return unix timestamp\n    seconds_since_epoch\n}\n\n#[test]\nfn test_main() {\n    let date_string = \"1 Sep 2024 23:22:12 +0400 \".as_bytes(); // padded 1\n    // its off a lil bit\n    // should be 1725247332\n    // should be 1725333732\n    let date = parse_date_string(date_string);\n    let unix = to_unix(date);\n    println(unix);\n}\n"},"373":{"path":"/home/jpag/nargo/github.com/zkemail/zkemail.nrv0.3.0/lib/src/base64.nr","source":"use crate::BODY_HASH_BASE64_LENGTH;\n\n// noir_base64 has issues right now, just use this for now\n\n/**\n * Decodes a base64 encoded body hash into a 32 byte sha256 hash of the body\n * @notice from https://github.com/richardliang/noir-rsa/blob/main/crates/rsa-biguint/src/lib.nr\n\n * @param encoded - the base 64 encoded body hash\n * @returns the decoded sha256 hash\n */\npub fn body_hash_base64_decode(encoded: [u8; BODY_HASH_BASE64_LENGTH]) -> [u8; 32] {\n    let mut total_bits = [0 as u1; BODY_HASH_BASE64_LENGTH * 6];\n    for i in 0..BODY_HASH_BASE64_LENGTH {\n        let translate = base64_lookup(encoded[i] as u8);\n        // Store as big endian\n        let translate_bits: [u1; 6] = (translate as Field).to_be_bits();\n        for j in 0..6 {\n            total_bits[i * 6 + j] = translate_bits[j];\n        }\n    }\n\n    // Since we're returning the SHA256 hash, only need first 32 bytes (=256 bits)\n    let mut output = [0 as u8; 32];\n    for i in 0..32 {\n        for j in 0..8 {\n            // Convert from big endian back to little endian\n            output[i] |= (total_bits[i * 8 + j] as u8) << (7 - j) as u8;\n        }\n    }\n\n    output\n}\n\n/**\n * Lookup for the base 64 encoding\n * @todo: replace with noir_lang base64 lib\n *\n * @param input - the base 64 encoded character\n * @returns the decoded value\n */\nfn base64_lookup(input: u8) -> u8 {\n    // A-Z: 65-90\n    if input >= 65 & input <= 90 {\n        input - 65\n    } else if input >= 97 & input <= 122 {\n        // a-z: 97-122\n        input - 71\n    } else if input >= 48 & input <= 57 {\n        // 0-9: 48-57\n        input + 4\n    } else if input == 43 {\n        // +\n        62\n    } else if input == 47 {\n        // /\n        63\n    } else {\n        // =\n        0\n    }\n}"},"374":{"path":"/home/jpag/nargo/github.com/zkemail/zkemail.nrv0.3.0/lib/src/lib.nr","source":"use dep::std::hash::pedersen_hash;\n\nmod dkim;\nmod partial_hash;\nmod base64;\n\nglobal RSA_EXPONENT: u32 = 65537;\nglobal KEY_BYTES_1024: u32 = 128;\nglobal KEY_BYTES_2048: u32 = 256;\nglobal KEY_LIMBS_1024: u32 = 9;\nglobal KEY_LIMBS_2048: u32 = 18;\nglobal BODY_HASH_BASE64_LENGTH: u32 = 44;\n\n/**\n * Get the body hash from the header by allowing circuit input to choose index\n * @notice unsafe, can theoretically make a recipient display name = the bh\n *\n * @param HEADER_LENGTH - The length of the email header\n * @param header - The email header as validated in the DKIM signature\n * @param index - The asserted index to find the body hash at\n * @returns The base 64 encoded body hash\n */\npub fn get_body_hash_by_index<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_HEADER_LENGTH],\n    index: u32\n) -> [u8; BODY_HASH_BASE64_LENGTH] {\n    // check index range\n    assert(index >= 3, \"Index does not leave room for 'bh=' prefix\");\n    assert(index + BODY_HASH_BASE64_LENGTH < MAX_HEADER_LENGTH, \"Index does not leave room for body hash\");\n    // check for 'bh=' prefix\n    let BH_PREFIX: [u8; 3] = [98, 104, 61]; // \"bh=\"\n    for i in 0..3 {\n        assert(header[index - 3 + i] == BH_PREFIX[i], \"No 'bh=' prefix found\");\n    }\n    // check for base64 suffix\n    let BH_SUFFIX: u8 = 59; // \";\"\n    assert(header[index + BODY_HASH_BASE64_LENGTH] == BH_SUFFIX, \"No base64 suffix found\");\n    // retrieve body hash\n    let mut body_hash = [0 as u8; BODY_HASH_BASE64_LENGTH];\n    for i in 0..BODY_HASH_BASE64_LENGTH {\n        body_hash[i] = header[index + i];\n    }\n    body_hash\n}\n\n/**\n * Standard outputs that essentially every email circuit will need to export (alongside app-specific outputs)\n * @notice if you only need the pubkey hash just import pedersen and hash away \n *\n * @param pubkey - the BN limbs of the DKIM RSA pubkey\n * @param signature - the BN limbs of the DKIM RSA signature\n * @returns\n *        0: Pedersen hash of DKIM public key (root of trust)\n *        1: Pedersen hash of DKIM signature (email nullifier)\n */\npub fn standard_outputs<let KEY_BYTE_LENGTH: u32>(\n    pubkey: [Field; KEY_BYTE_LENGTH],\n    signature: [Field; KEY_BYTE_LENGTH]\n) -> [Field; 2] {\n    // create pedersen hash of DKIM signing key to minimize public outputs\n    let pubkey_hash = pedersen_hash(pubkey);\n    // create email nullifier for email\n    let email_nullifier = pedersen_hash(signature);\n    // output the root of trust and email nullifier\n    [pubkey_hash, email_nullifier]\n}\n"},"376":{"path":"/home/jpag/nargo/github.com/zkemail/zkemail.nrv0.3.0/lib/src/dkim.nr","source":"use dep::rsa::bignum::fields::{Params1024, Params2048};\nuse dep::rsa::bignum::runtime_bignum::BigNumInstance;\nuse dep::rsa::types::RSA;\nuse dep::rsa::bignum::BigNum;\nuse dep::std::hash::sha256_var;\nuse crate::{KEY_LIMBS_1024, KEY_LIMBS_2048, KEY_BYTES_1024, KEY_BYTES_2048, RSA_EXPONENT};\n\ntype BN1024 = BigNum<KEY_LIMBS_1024, Params1024>;\ntype RSA1024 = RSA<BN1024, BigNumInstance<KEY_LIMBS_1024, Params1024>, KEY_BYTES_1024>;\ntype BN2048 = BigNum<KEY_LIMBS_2048, Params2048>;\ntype RSA2048 = RSA<BN2048, BigNumInstance<KEY_LIMBS_2048, Params2048>, KEY_BYTES_2048>;\n\n/**\n * Verify a 1024-bit RSA (DKIM) signature over an email header\n * \n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param header - The email header, 0-padded to the maximum possible length for this circuit\n * @param header_length - The actual length of the email header\n * @param pubkey_modulus_limbs - The DKIM RSA Pubkey\n * @param redc_params_limbs - Barrett Reduction Parameter for Pubkey for efficient signature verification\n * @param signature - The DKIM RSA Signature \n */\npub fn verify_dkim_1024<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_HEADER_LENGTH],\n    header_length: u32,\n    pubkey: [Field; KEY_LIMBS_1024],\n    pubkey_redc: [Field; KEY_LIMBS_1024],\n    signature: [Field; KEY_LIMBS_1024]\n) {\n    // check the header length is within bounds\n    assert(header_length <= MAX_HEADER_LENGTH);\n\n    // instantiate the BNInstance for the pubkey\n    let pubkey: BigNumInstance<KEY_LIMBS_1024, Params1024> = BigNumInstance::new(pubkey, pubkey_redc);\n\n    // instantiate BN for the signature\n    let signature: BN1024 = BigNum::from_array(signature);\n\n    // hash the header\n    let header_hash = sha256_var(header, header_length as u64);\n\n    // verify the DKIM signature over the header\n    let rsa: RSA1024 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(pubkey, header_hash, signature, RSA_EXPONENT));\n}\n\n/**\n * Verify a 1024-bit RSA (DKIM) signature over an email header\n * \n * @param MAX_HEADER_LENGTH - The maximum length of the email header\n * @param header - The email header, 0-padded to the maximum possible length for this circuit\n * @param header_length - The actual length of the email header\n * @param pubkey_modulus_limbs - The DKIM RSA Pubkey\n * @param redc_params_limbs - Barrett Reduction Parameter for Pubkey for efficient signature verification\n * @param signature - The DKIM RSA Signature \n */\npub fn verify_dkim_2048<let MAX_HEADER_LENGTH: u32>(\n    header: [u8; MAX_HEADER_LENGTH],\n    header_length: u32,\n    pubkey: [Field; KEY_LIMBS_2048],\n    pubkey_redc: [Field; KEY_LIMBS_2048],\n    signature: [Field; KEY_LIMBS_2048]\n) {\n    // check the header length is within bounds\n    assert(header_length <= MAX_HEADER_LENGTH);\n\n    // instantiate the BNInstance for the pubkey\n    let pubkey: BigNumInstance<KEY_LIMBS_2048, Params2048> = BigNumInstance::new(pubkey, pubkey_redc);\n\n    // instantiate BN for the signature\n    let signature: BN2048 = BigNum::from_array(signature);\n\n    // hash the header\n    let header_hash = sha256_var(header, header_length as u64);\n\n    // verify the DKIM signature over the header\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(pubkey, header_hash, signature, RSA_EXPONENT));\n}\n"},"379":{"path":"/home/jpag/nargo/github.com/noir-lang/noir_rsav0.3.0/lib/src/rsa.nr","source":"use dep::bignum::BigNum;\nuse dep::bignum::runtime_bignum::BigNumInstance;\nuse dep::bignum::runtime_bignum::BigNumTrait;\nuse dep::bignum::runtime_bignum::BigNumInstanceTrait;\n\nuse crate::types::{RSA, BN1024, BN2048, BNInst1024, BNInst2048, RSA1024, RSA2048};\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] = [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i as u32 < 52 + ps_len as u32 {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i as u32 == 52 + ps_len as u32 {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i as u32 == 53 + ps_len as u32 {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\nimpl<BN, BNInstance, let NumBytes: u32> RSA<BN, BNInstance, NumBytes>  where BN: BigNumTrait, BNInstance: BigNumInstanceTrait<BN> {\n    /**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @details The fourth function parameter is required to define the value of `NBytes`\n *          when converting a BigNum into a byte array, the number of bytes is required and currently cannot be inferred.\n *          Once numeric generics can be derived by applying operations to other numeric generics the need for this will go away.\n *\n * @note The exponent `e` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\n    pub fn verify_sha256_pkcs1v15(_: Self, instance: BNInstance, msg_hash: [u8; 32], sig: BN, exponent: u32) -> bool {\n        assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n        let mut exponentiated = instance.mul(sig, sig); // sig^2\n\n        if exponent == 65537 {\n            // e = 65537 = 1 0000 0000 0000 0001\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^2 * sig^2 = sig^4\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^8\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^16\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^32\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^64\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^128\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^256\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^512\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^1024\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^2048\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^4096\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^8192\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^16384\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^32768\n            exponentiated = instance.mul(exponentiated, exponentiated); // sig^65536\n        }\n        // otherwise, e = 3 = 11\n\n        exponentiated = instance.mul(exponentiated, sig); // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n\n        let mut padded_sha256_hash_bytes: [u8; NumBytes] = exponentiated.to_le_bytes();\n        compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n    }\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_1024() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst1024 = BigNumInstance::new(\n        [\n        0xe908724e0d28a1565511879e00f063, 0x58dea28d5112982c8ab8597d3e611f, 0xb115f9878acc910a47b41ac8d5f763, 0xc71b0a719c2283f710f86024737cee, 0x9ee9eb73e95b84f033af5217337427, 0x8fcab34c99cc2661dd57de15ae2110, 0xa38db8a829eec5550342f6f66334dc, 0xd7c4b32fd351a47d860fda1897330e, 0x98c92a33a0f33fd7\n    ],\n        [\n        0x55582e8ba08822783fbd7d07390be2, 0x1d7d83f9dce3983c66f440dcc2f33e, 0x6072d13c84a4cb304f58fbabe782e7, 0x0cee5e0dd62bc54d15a91a4ea3bc50, 0xc485e6f946c45cf660fba4f49325cb, 0x1f0e45df0464b065c94e84ed1dad8c, 0xe4c7b3976310ea239059d834b545f3, 0xd418145200fa77235f5f8d852b121f, 0x01acf0bd16cad9bd8f\n    ]\n    );\n    let signature: BN1024 = BigNum::from_array(\n        [\n        0x393f230b55a12fb7bb39c7edd2cf48, 0x78f7d0a217d340407cae4f39b8f001, 0x603909ff76a519f3c8e96d695d462e, 0x0640ab230b459bf4b20b4823a5b850, 0x02ba190de61a85074b18e228231984, 0xe1424c0779825707aa433ecb86c388, 0xbed8087d947a9c6c56625ad20c91aa, 0x7da4a0c2eee3a3c0d61e892ab4ada9, 0x6ef98a936c8bf8e5\n    ]\n    );\n\n    let rsa: RSA1024 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"hello world\".as_bytes());\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0x183b4cadacea64716b6535b25a86ad, 0x129a32e9fbd374949e81b080546c2b, 0x9276332765f54b9b4d6fe23f4983a4, 0x91df05fde1a414c9fbf38808a01032, 0x97ca171c382e082ddd6c81be090902, 0x97161dde47ed979939451704b72648, 0x3b66f0c93f8ddbc62bb99f6b8fad2d, 0xc3a046fcad814d8938da372cd84d2a, 0xfe903cfe3ee4de6de3916023bb87f2, 0x8be5fd99c8b46dce9aab27ce4b3883, 0x0d99dfe50dd2288123804872da8543, 0xbb6d8afef8b2c7e3b86ad96973d4e5, 0x17e08fa3c5391279b844581f67825c, 0x09511f4a436abe495bfbfcc254d9c5, 0xf80d02572d620eab5ad7ecfbe2c20c, 0x2a5307402a05f59ba232ad0c8366d0, 0x7b9169630b317c38d549a86f85fcfc, 0xf2\n    ],\n        [\n        0xf4effa025abe90db41dc5bb5934a5f, 0x2596b25aa09f6a0e290accebbef006, 0x330e9567ec5eca92b7a8ce72ad3d83, 0xccf98d178ec4017e4947cadc02da7c, 0xaed6044ffeeb12de4d1e67aedfda78, 0xb5ae8a5a4637b632800e2f41dfbf0a, 0x8304360d359cf2f0d5d97c039f9b04, 0x53cde0d0633c0e66e1da9a118f6a96, 0xf9a83822351097bb1ed123d10290f5, 0xeb489c7f7227c09ca0117264dcf04f, 0x6a1b3618478a235f438adf84533177, 0x71c03085e38a87f5ec8e51c27dde98, 0xcf3e89d9cf253ef61d65d4431334d9, 0xa5a1a59e98fb7f49c746149324201d, 0x38f46c635f884f24c254eaa37981d6, 0x1c42be15dd95e1ac5bf01972b24ff9, 0x4555dd506d1f89e61279293c03db90, 0x010e\n    ]\n    );\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x5f0937ed1aacbdb83991e21c89ca8a, 0x5a1fa4ef2faf4042401c9121c73874, 0x7379fbb7713fbf807d250f7401afb8, 0x9cc5ce8813f3a83a72b681a4d434b2, 0x11cb49ac2ee1f9bed8a008b8327e1e, 0xf3362524f1224e48827b34a62f6ace, 0x3498a2944e32a3798fe9da684b32ae, 0xc346c33528bcdf7a06805126a29402, 0x6ac93f2fa68f270ec73674eae24380, 0x222c72de080496533ceeb8af827910, 0xc22889b311a53203278b942ca67100, 0x93d75567f7fe9ee7ca9871a0cb09f9, 0x049dabd976a9574847b1614f6b739c, 0xdc66b621dbae623df9b657b52fa1b0, 0xf37e82cc1eced382e11fc32e673f67, 0xe50545eb9027f1144a0ba7bbb0c886, 0xb6193409539c515d3c55a45c5734b1, 0x4b\n    ]\n    );\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 65537));\n}\n\n#[test]\nfn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n    let sha256_hash: [u8; 32] = dep::std::hash::sha256(\"Hello World! This is Noir-RSA\".as_bytes());\n\n    let BNInstance: BNInst2048 = BigNumInstance::new(\n        [\n        0xc6a1c5e80ce354c6b00ccf20cf3a1d, 0x178d135f925a03eceb25f79bab56ee, 0x13ab3d6d8a5c5586752b5a3bc74ec3, 0x3d13b47b152367e3e2fc014d03d19f, 0xe89a7278a2945b4a672011691db30f, 0x5b4c1b061378143629dbb29dea1e4, 0x26a48b6f4e8df1472fd4fc12b17c18, 0xc7c92ead0ce810520cf3a8267254c1, 0x806b8cdba93909e9d9a71ee1bcdac2, 0x703ef80f8eb703b84c201366dff1c7, 0x7361034bb2c4c081aad8b1bcca83de, 0xb23c7e1109e65e6d08fa72cc862008, 0x750bc927874455782cd2d6fd5a51f6, 0xf0b83665fbf8cb5cf31cee9f89848e, 0x20d447b08953c7ce3330197938a8ae, 0x11a08bb5a2241c6a2a69f930d8b28b, 0xef5bca8dd582570a44705cb123d09e, 0xb7\n    ],\n        [\n        0xbc93ee57c1c8adc53f0a995a6221ca, 0x2a9b43587534b20dd85a5233329f10, 0xc587fd488f64eed02adc1f462f7448, 0xf1484d37676bb0e800996757382522, 0xc2126c48221aa61c9f52c6b918bab3, 0x8660c861dd52ed958beaf6c6c2cff0, 0x5edd9dc4f02a000f350948c70bdf94, 0x6f3b9603149272e9b232a379a017bb, 0x950fd85cffbdf4476b1cb66c1f63d6, 0xee459417b1a56b6f7ef3b89e385ac, 0x48daeef6d1a055f3746ab71058e137, 0x3cbc0ba96d541feee92dd27f9d0306, 0x6a2a42384cc388fa113ee80317e0a0, 0x43b4f89c508a42d309f295c0d9f3a5, 0x8d8c28b05f71b962b40ea906ff407f, 0x390a7989eb9cecc5827cb00e1ca693, 0x4cbf158eabf7e96ef7f2586d0ce613, 0x164\n    ]\n    );\n\n    let signature: BN2048 = BigNum::from_array(\n        [\n        0x19772b9af8a031170a7844ce4f3d7c, 0x4808e817258f57805a7326f70bcd74, 0xca8f3f98e374d52100115bfa645a7d, 0x49547189edff3b683fee267e717b7f, 0x96f263b47e96925f3b5898a7389ceb, 0x4cc50a893da91d0e085fc6656b30bc, 0x67e84ff92d88c0ad2c17ad2701309e, 0x095326818578173289665fcd9ad788, 0x775c6e85b745065db9411b9d579763, 0xad0f20c8a5265dfca4080ca877a2b8, 0xbfd199372f1680b3bc583a08bd8ba9, 0x663476ca3e5ede3e5976887db2c4e5, 0x531192309d0d49fed47c0216c27f9e, 0x37d26d31c86b951ca1c17b517063b7, 0x3cdb362ed5dfd06568eb9a9bbb6a91, 0x14520b9c23f583314729a9d858bca9, 0x5e0505067ada1026721d45997bf2c4, 0x3e\n    ]\n    );\n\n    let rsa: RSA2048 = RSA {};\n    assert(rsa.verify_sha256_pkcs1v15(BNInstance, sha256_hash, signature, 3));\n}\n"},"380":{"path":"/home/jpag/nargo/github.com/noir-lang/noir-bignumv0.3.3/src/runtime_bignum.nr","source":"use dep::std;\nuse crate::utils::u60_representation::U60Repr;\nuse crate::utils::arrayX::ArrayX;\nuse crate::utils::split_bits;\nuse crate::BigNum;\n\n/**\n * @brief runtime_bignum::BigNumTrait defines methods available to BigNum *if* the modulus is not known at compile time.\n *        e.g. RSA where the modulus is a witness value as it changes for every RSA signature\n *        tee `lib.nr` for a trait definition where the modulus is known at compile time\n **/\ntrait BigNumTrait {\n    fn new() -> Self;\n    fn one() -> Self;\n    fn from(limbs: [Field]) -> Self;\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> Self;\n    fn to_le_bytes<let NBytes: u32>(val: Self) -> [u8; NBytes];\n    fn get(self) -> [Field];\n    fn get_limb(self, idx: u64) -> Field;\n    fn set_limb(&mut self, idx: u32, value: Field);\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self;\n    fn validate_in_range(self);\n    fn validate_quotient_in_range(self);\n    fn __is_zero(self) -> bool;\n    fn __eq(self, rhs: Self) -> bool;\n}\n\n/**\n * @brief BigNumInstanceTrait defines methods available to a runtime BigNumInstance.\n *        BigNumInstance wraps the modulus parameter (as well as a Barret reduction parameter),\n *        which is required for the majority of BigNum operations\n **/\ntrait BigNumInstanceTrait<BN> where BN: BigNumTrait {\n    fn modulus(self) -> BN;\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BN;\n    fn eq(self, lhs: BN, rhs: BN) -> bool;\n    fn __neg(self, val: BN) -> BN;\n    fn __add(self, lhs: BN, rhs: BN) -> BN;\n    fn __sub(self, lhs: BN, rhs: BN) -> BN;\n    fn __mul(self, lhs: BN, rhs: BN) -> BN;\n    fn __div(self, lhs: BN, rhs: BN) -> BN;\n    fn __batch_invert<let M: u32>(self, x: [BN; M]) -> [BN; M];\n    fn __udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn __invmod(self, val: BN) -> BN;\n    fn __pow(self, val: BN, exponent: BN) -> BN;\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BN, BN);\n\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BN; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BN; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BN; ADD_N],\n        linear_flags: [bool; ADD_N]\n    );\n\n    fn validate_in_field(self, val: BN);\n    fn validate_gt(self, lhs: BN, rhs: BN);\n    fn assert_is_not_equal(self, lhs: BN, rhs: BN);\n    fn neg(self, val: BN) -> BN;\n    fn add(self, lhs: BN, rhs: BN) -> BN;\n    fn sub(self, lhs: BN, rhs: BN) -> BN;\n    fn mul(self, lhs: BN, rhs: BN) -> BN;\n    fn div(self, lhs: BN, rhs: BN) -> BN;\n    fn udiv_mod(self, numerator: BN, divisor: BN) -> (BN, BN);\n    fn udiv(self, numerator: BN, divisor: BN) -> BN;\n    fn umod(self, numerator: BN, divisor: BN) -> BN;\n\n}\n\n/**\n * @brief BigNumParamsTrait defines a \"field\" with which to parametrise BigNum.\n * @description The \"field\" does not need to be prime, any value *should* work (TODO: test!)\n**/\ntrait BigNumParamsTrait<let N: u32> {\n    /**\n     * @brief modulus_bits = log2(modulus) rounded up\n     **/\n    fn modulus_bits() -> u32;\n\n    fn has_multiplicative_inverse() -> bool { true }\n}\n\nstruct  BigNumInstance<let N: u32, Params> {\n    \n    /**\n     * @brief modulus: all BigNum operations are evaluated modulo this value\n     **/\n    modulus: [Field; N],\n\n    /**\n     * @brief modulus but represented in a U60Repr form\n     **/\n    modulus_u60: U60Repr<N, 2>,\n    modulus_u60_x4: U60Repr<N, 4>,\n\n    // /**\n    //  * @brief double_modulus: used when performing negations and subtractions\n    //  **/\n    double_modulus: [Field; N],\n    // /**\n    //  * @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    //  **/\n    redc_param: [Field; N],\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> {\n    // some strange circular dependency problem means we need to define `new` as a member of BigNumTrait as well as a definition outside of the trait\n    // (delete this method to see. BigNumInstance methods that use BigNum::new() error out, and I can't find a way of declaring BigNum to satisfy BigNumTrait as part of the BigNumInstance definition because BigNumInstance has no contextual knowledge of the BigNum type...)\n    fn new() -> Self {\n        BigNum { limbs: [0; N] }\n    }\n    fn one() -> BigNum<N, Params> {\n        let mut result: Self = BigNum { limbs: [0; N] };\n        result.limbs[0] = 1;\n        result\n    }\n}\n\nimpl<let N: u32, Params> BigNumTrait for BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn new() -> Self {\n        BigNum::new()\n    }\n    fn one() -> Self {\n        BigNum::one()\n    }\n\n    fn from(limbs: [Field]) -> Self {\n        BigNum { limbs: limbs.as_array() }\n    }\n\n    /**\n     * @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n     * @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n     *               is precisely large enough to cover Params::modulus_bits()\n     * @param x: input byte array\n     **/\n    fn from_be_bytes<let NBytes: u32>(x: [u8; NBytes]) -> BigNum<N, Params> {\n        let num_bits = NBytes * 8;\n        let modulus_bits = Params::modulus_bits();\n        assert(num_bits >= modulus_bits);\n        assert(num_bits - modulus_bits < 8);\n        let mut result = BigNum::new();\n\n        let excess_bytes = N * 15 - NBytes;\n        let final_limb_bytes = 15 - excess_bytes;\n        let mut limb: Field = 0;\n        let mut k = 0;\n        for _j in 0..final_limb_bytes {\n            limb *= 256;\n            limb += x[k] as Field;\n            k += 1;\n        }\n        result.limbs[N - 1] = limb;\n\n        for i in 1..N {\n            let mut limb: Field = 0;\n            for _j in 0..15 {\n                limb *= 256;\n                limb += x[k] as Field;\n                k += 1;\n            }\n            result.limbs[N - i - 1] = limb;\n        }\n\n        // max_bits_in_most_significant_byte should be known at comptime. if not...messy!\n        let mut max_bits_in_most_significant_byte = 8 - (num_bits - modulus_bits);\n\n        let most_significant_byte: Field = x[0] as Field;\n\n        most_significant_byte.assert_max_bit_size(max_bits_in_most_significant_byte as u32);\n        result\n    }\n\n    fn to_le_bytes<let NBytes: u32>(val: BigNum<N, Params>) -> [u8; NBytes] {\n        let nbytes = (Params::modulus_bits() / 8) + (Params::modulus_bits() % 8 != 0) as u32;\n        assert(nbytes <= NBytes);\n\n        let mut result: [u8; NBytes] = [0; NBytes];\n        for i in 0..N - 1 {\n            let limb_bytes: [u8; 15] = val.limbs[i].to_le_bytes();\n            for j in 0..15 {\n                result[i * 15 + j] = limb_bytes[j];\n            }\n        }\n        let last_limb_bytes: [u8; 15] = val.limbs[N - 1].to_le_bytes();\n        let num_last_bytes = (NBytes - (N - 1) * 15);\n        for i in 0..num_last_bytes {\n            result[(N-1) * 15 + i] = last_limb_bytes[i];\n        }\n        result\n    }\n\n    fn get(self) -> [Field] {\n        self.limbs\n    }\n    fn get_limb(self, idx: u64) -> Field {\n        self.limbs[idx]\n    }\n    fn set_limb(&mut self, idx: u32, value: Field) {\n        self.limbs[idx] = value;\n    }\n\n    /**\n     * @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n     * @description should be cheaper than using an IF statement (TODO: check!)\n     **/\n    fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let mut result: Self = lhs;\n        for i in 0..N {\n            result.limbs[i] = (lhs.limbs[i] - rhs.limbs[i]) * predicate as Field + rhs.limbs[i];\n        }\n        result\n    }\n\n    /**\n     * @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n     **/\n    fn validate_in_range(self) {\n        for i in 0..(N - 1) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120);\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    /**\n     * @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n     * @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n     *              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n     *              Why is this?\n     *              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n     *                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n     *                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n     *              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n     *\n     *              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n     *              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n     **/\n    fn validate_quotient_in_range(self) {\n        for i in 0..(N) {\n            self.limbs[i].assert_max_bit_size(120);\n        }\n        // Note: replace magic number 6 with definition\n        let final_limb_bits = Params::modulus_bits() - ((N - 1) * 120) + 6;\n        self.limbs[N - 1].assert_max_bit_size(final_limb_bits as u32);\n    }\n\n    fn __is_zero(self) -> bool {\n        self.__is_zero_impl()\n    }\n\n    fn __eq(self, rhs: Self) -> bool {\n        self.__eq_impl(rhs)\n    }\n}\n\nimpl<let N: u32, Params> BigNum<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn from_array(limbs: [Field; N]) -> BigNum<N, Params> {\n        BigNum { limbs }\n    }\n\n    unconstrained fn __is_zero_impl(self) -> bool {\n        let mut result: bool = true;\n        for i in 0..N {\n            result = result & (self.limbs[i] == 0);\n        }\n        result\n    }\n\n    unconstrained fn __eq_impl(lhs: Self, rhs: Self) -> bool {\n        lhs.limbs == rhs.limbs\n    }\n}\n\nimpl<let N: u32, Params> BigNumInstanceTrait<BigNum<N, Params>> for BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    fn modulus(self) -> BigNum<N, Params> {\n        BigNum { limbs: self.modulus }\n    }\n    fn __derive_from_seed<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        self.__derive_from_seed_impl(seed)\n    }\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ### NOTE: these functions call unconstrained internal implementations because trait impl modifiers are not supported \n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn __neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__neg_impl(val)\n    }\n\n    fn __add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add_impl(lhs, rhs)\n    }\n\n    fn __sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__sub_impl(lhs, rhs)\n    }\n\n    fn __mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__mul_impl(lhs, rhs)\n    }\n\n    fn __div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__div_impl(lhs, rhs)\n    }\n\n    fn __batch_invert<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        self.batch_invert_impl(x)\n    }\n\n    fn __invmod(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__invmod_impl(val)\n    }\n\n    fn __pow(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__pow_impl(val, exponent)\n    }\n\n    fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__compute_quadratic_expression_impl(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        )\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    /**\n     * @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n     * @description The expression is of the form (when evaluated as an integer relation):\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * Note: this method requires the remainder term of the expression to be ZERO\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The expensive parts of this algorithm are the following:\n     *      1. evaluating the limb products required to compute `lhs * rhs`\n     *      2. applying range constraints to validate the result is 0\n     *\n     * Range constraints are needed for the following reason:\n     * When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n     * Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n     * Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n     * To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n     * (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n     * To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n     * We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n     * TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n     * I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n     * TODO: explain why we apply a 126-bit range check, this feels like a magic number\n     * (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n     * TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n     * \n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) {\n        // use an unconstrained function to compute the value of the quotient\n        let (quotient, _, borrow_flags): (BigNum<N, Params>, BigNum<N, Params>, ArrayX<Field, N, 2>) = self.__compute_quadratic_expression_with_borrow_flags(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n        // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n        quotient.validate_quotient_in_range();\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        // (should be a compile-time check...unconstrained function?)\n\n        // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n        let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut t4: [Field; N] = [0; N];\n\n        // TODO: this is super nasty as it requires a multiplication\n        let double_modulus: [Field; N] = self.double_modulus;\n        for k in 0..NUM_PRODUCTS {\n            for i in 0..N {\n                for j in 0..LHS_N {\n                    // note: if is_negative is not known at comptime this is very expensive\n                    if (lhs_flags[k][j]) {\n                        t0[k][i] -= lhs_terms[k][j].limbs[i];\n                        t0[k][i] += double_modulus[i];\n                    } else {\n                        t0[k][i] += lhs_terms[k][j].limbs[i];\n                    }\n                }\n                for j in 0..RHS_N {\n                    if (rhs_flags[k][j]) {\n                        t1[k][i] -= rhs_terms[k][j].limbs[i];\n                        t1[k][i] += double_modulus[i];\n                    } else {\n                        t1[k][i] += rhs_terms[k][j].limbs[i];\n                    }\n                }\n            }\n        }\n        for i in 0..N {\n            for j in 0..ADD_N {\n                if (linear_flags[j]) {\n                    t4[i] -= linear_terms[j].limbs[i];\n                    t4[i] += double_modulus[i];\n                } else {\n                    t4[i] += linear_terms[j].limbs[i];\n                }\n            }\n        }\n\n        // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n        // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n        // so that we can ensure that no limbs will underflow for an honest Prover\n        let mut product_limbs: ArrayX<Field, N,2> = ArrayX::new();\n        //       let fff: [Field; N] = quotient.limbs;\n        //      let mut borrow_flags: ArrayX<Field, N,2> = BigNum::get_borrow_flags3(t0, t1, t2, t3, t4, fff, self.modulus);\n\n        // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n        // TODO: this is super nasty as it requires a multiplication\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    if k == 0 {\n                        let new_term = t0[k][i] * t1[k][j] - quotient.limbs[i] * self.modulus[j];\n                        std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                        product_limbs.add_assign(i + j, new_term);\n                    } else {\n                        product_limbs.add_assign(i + j, t0[k][i] * t1[k][j]);\n                    }\n                }\n                if (NUM_PRODUCTS == 0) {\n                    product_limbs.sub_assign(i + j, quotient.limbs[i] * self.modulus[j]);\n                }\n            }\n            product_limbs.add_assign(i, t4[i]);\n        }\n\n        // each limb product represents the sum of 120-bit products.\n        // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n        // where no more than 64 limb products are summed together.\n        // TODO: check in unconstrained function that this condition is satisfied\n        // TODO: define trade-offs regarding the value of borrow_shift\n        // (the larger the value, the greater the range check that is required on product_limbs)\n        // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n        // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n\n        // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n        //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n        // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n        borrow_flags.get(0).assert_max_bit_size(1);\n        product_limbs.add_assign(0, borrow_flags.get(0) * borrow_shift);\n        for i in 1..(N + N - 2) {\n            borrow_flags.get(i).assert_max_bit_size(1);\n            product_limbs.add_assign(\n                i,\n                (borrow_flags.get(i) * borrow_shift - borrow_flags.get(i - 1) * borrow_carry)\n            );\n        }\n        product_limbs.sub_assign(N + N - 2, borrow_flags.get(N + N - 3) * borrow_carry);\n\n        // Final step: Validate `product_limbs` represents the integer value `0`\n        // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n        // i.e. we need to do the following for each limb `i`:\n        //      1. validate the limb's low-120 bits equals zero\n        //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n        //      3. add the carry into limb `i+1`\n        // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n        // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n        // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n        //  where k is the number of bits in the prime field)\n        // We then add the result into the next limb and repeat.\n        let hi_shift: Field = 0x1000000000000000000000000000000;\n        let hi_downshift: Field = 1 / hi_shift;\n        for i in 0..N + N - 2 {\n            product_limbs.mul_assign(i, hi_downshift);\n            std::as_witness(product_limbs.get(i));\n            product_limbs.get(i).assert_max_bit_size(126); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n            product_limbs.add_assign(i + 1, product_limbs.get(i));\n        }\n        // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n        assert(product_limbs.get(N + N - 2) == 0);\n    }\n\n    fn validate_in_field(self, val: BigNum<N, Params>) {\n        // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n        let mut p_minus_self: [Field; N] = [0; N];\n        let modulus: [Field; N] = self.modulus;\n        for i in 0..N {\n            p_minus_self[i] = modulus[i] - val.limbs[i];\n        }\n        let borrow_flags = self.__validate_in_field_compute_borrow_flags(val);\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        p_minus_self[0] += borrow_flags[0] as Field * two_pow_120;\n        for i in 1..N - 1 {\n            p_minus_self[i] += (borrow_flags[i] as Field * two_pow_120 - borrow_flags[i-1] as Field);\n        }\n        p_minus_self[N - 1] -= borrow_flags[N - 2] as Field;\n        let mut compare = val;\n        compare.limbs = p_minus_self;\n        compare.validate_in_range();\n    }\n\n    /**\n     * @brief Validate self != other\n     * @details If A == B, then A == B mod N.\n     *          We can efficiently evaluate A == B mod N where N = circuit modulus\n     *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n     *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n     *          (todo: compute how tiny)\n     **/\n    fn assert_is_not_equal(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        let mut l: Field = 0;\n        let mut r: Field = 0;\n        let mut modulus_mod_n: Field = 0;\n        let mut two_pow_120: Field = 0x1000000000000000000000000000000;\n        let modulus = self.modulus;\n        for i in 0..N {\n            l *= two_pow_120;\n            r *= two_pow_120;\n            modulus_mod_n *= two_pow_120;\n            l += lhs.limbs[N - i - 1];\n            r += rhs.limbs[N - i - 1] ;\n            modulus_mod_n += modulus[N - i - 1];\n        }\n\n        // lhs can be either X mod N or P + X mod N\n        // rhs can be either Y mod N or P + Y mod N\n        // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n        let mut diff = l - r;\n        let mut target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n        assert(target != 0, \"asssert_is_not_equal fail\");\n    }\n\n    fn eq(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> bool {\n        let diff = self.sub(lhs, rhs);\n        // if self == other, possible values of `diff` will be `p` or `0`\n        // (the subtract operator constrains diff to be < ceil(log(p)))\n        // TODO: can do this more efficiently via witngen in unconstrained functions?\n        let mut is_equal_modulus: bool = true;\n        let mut is_equal_zero: bool = true;\n        for i in 0..N {\n            is_equal_modulus = is_equal_modulus & (diff.limbs[i] == self.modulus[i]);\n            is_equal_zero = is_equal_zero & (diff.limbs[i] == 0);\n        }\n        is_equal_modulus | is_equal_zero\n    }\n\n    fn neg(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = self.__neg_with_flags(val);\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let result_limb = modulus[0] - val.limbs[0] - result.limbs[0] + (borrow_flags[0] as Field * borrow_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] - val.limbs[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + (borrow_flags[i] as Field * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val.limbs[N - 1] - result.limbs[N - 1] - borrow_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    fn add(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) = self.__add_with_flags(lhs, rhs);\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut subtrahend: [Field; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let result_limb = lhs.limbs[0] + rhs.limbs[0] - subtrahend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] + rhs.limbs[i]\n                - subtrahend[i]\n                - result.limbs[i]\n                - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] + rhs.limbs[N - 1]\n            - subtrahend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n\n    // validate that lhs - rhs does not underflow i.e. lhs > rhs\n    fn validate_gt(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags) = self.__validate_gt_remainder(lhs, rhs);\n\n        result.validate_in_range();\n\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0] - 1\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n    }\n\n    fn sub(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        // so we do... p - x - r = 0 and there might be borrow flags\n\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) = self.__sub_with_flags(lhs, rhs);\n        result.validate_in_range();\n        let modulus = self.modulus;\n        let borrow_shift = 0x1000000000000000000000000000000;\n        let carry_shift = 0x1000000000000000000000000000000;\n\n        let mut addend: [Field; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n        let result_limb = lhs.limbs[0] - rhs.limbs[0] + addend[0] - result.limbs[0]\n            + (borrow_flags[0] as Field * borrow_shift)\n            - (carry_flags[0] as Field * carry_shift);\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = lhs.limbs[i] - rhs.limbs[i] + addend[i] - result.limbs[i] - borrow_flags[i - 1] as Field\n                + carry_flags[i - 1] as Field\n                + ((borrow_flags[i] as Field - carry_flags[i] as Field) * borrow_shift);\n            assert(result_limb == 0);\n        }\n        let result_limb = lhs.limbs[N - 1] - rhs.limbs[N - 1] + addend[N - 1]\n            - result.limbs[N - 1]\n            - borrow_flags[N - 2] as Field\n            + carry_flags[N - 2] as Field;\n        assert(result_limb == 0);\n        result\n    }\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let result = self.__mul(lhs, rhs);\n        self.evaluate_quadratic_expression([[lhs]], [[false]], [[rhs]], [[false]], [result], [true]);\n        result\n    }\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        assert(\n            Params::has_multiplicative_inverse(), \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\"\n        );\n        let result = self.__div(lhs, rhs);\n        self.evaluate_quadratic_expression([[result]], [[false]], [[rhs]], [[false]], [lhs], [true]);\n        result\n    }\n\n    /**\n     * @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn __udiv_mod(\n        self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        self.__udiv_mod_impl(numerator, divisor)\n    }\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. 1. floor(numerator / divisor) = quotient\n     *      2. numerator % divisor = remainder\n     *      3. divisor * quotient + remainder = numerator\n     **/\n    fn udiv_mod(\n        self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let (quotient, remainder) = BigNumInstance::__udiv_mod_impl(self, numerator, divisor);\n\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        self.evaluate_quadratic_expression(\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false]\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        self.validate_gt(divisor, remainder);\n        (quotient, remainder)\n    }\n\n    /**\n     * @brief udiv_mod performs integer division between numerator, divisor \n     *\n     * i.e. return param is floor(numerator / divisor)\n     **/\n    fn udiv(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).0\n    }\n\n    /**\n     * @brief udiv_mod performs integer modular reduction\n     *\n     * i.e. 1. numerator % divisor = return value\n     **/\n    fn umod(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.udiv_mod(numerator, divisor).1\n    }\n}\n\nimpl<let N: u32, Params> BigNumInstance<N, Params> where Params: BigNumParamsTrait<N> {\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### C  O  N  S  T  R  U  C  T  O  R  S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    fn new(modulus: [Field; N], redc_param: [Field; N]) -> Self {\n        Self {\n            redc_param,\n            modulus,\n            modulus_u60: U60Repr::from(modulus),\n            modulus_u60_x4: U60Repr::from(modulus),\n            double_modulus: get_double_modulus(modulus)\n        }\n    }\n\n    unconstrained fn __derive_from_seed_impl<let SeedBytes: u32>(self, seed: [u8; SeedBytes]) -> BigNum<N, Params> {\n        let mut rolling_seed = seed;\n\n        let mut to_reduce: ArrayX<Field, N, 2> = ArrayX { segments: [[0; N], [0; N]] };\n\n        let mut double_modulus_bits = Params::modulus_bits() * 2;\n        let mut double_modulus_bytes = (double_modulus_bits) / 8 + (double_modulus_bits % 8 != 0) as u32;\n\n        let mut last_limb_bytes = double_modulus_bytes % 15;\n        if (last_limb_bytes == 0) {\n            last_limb_bytes = 15;\n        }\n        let mut last_limb_bits = double_modulus_bits % 8;\n        if (last_limb_bits == 0) {\n            last_limb_bits = 8;\n        }\n\n        for i in 0..(N - 1) {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut lo: Field = 0;\n            let mut hi: Field = 0;\n            for j in 0..15 {\n                hi *= 256;\n                lo *= 256;\n\n                if (i < 2 * N - 2) {\n                    lo += hash[j + 15] as Field;\n                    hi += hash[j] as Field;\n                }\n            }\n            to_reduce.set(2 * i, lo);\n            to_reduce.set(2 * i + 1, hi);\n            rolling_seed[0] += 1;\n        }\n\n        {\n            let hash: [u8; 32] = std::hash::sha256(rolling_seed);\n            let mut hi: Field = 0;\n            for j in 0..(last_limb_bytes - 1) {\n                hi *= 256;\n                hi += hash[j] as Field;\n            }\n            hi *= 256;\n            let last_byte = hash[last_limb_bytes - 1];\n            let mask = (1 as u64 << (last_limb_bits) as u8) - 1;\n            let last_bits = last_byte as u64 & mask;\n            hi += last_bits as Field;\n            to_reduce.set(2 * N - 2, hi);\n        }\n\n        let (_, remainder) = __barrett_reduction(\n            to_reduce,\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n        let mut result = BigNum::new();\n        result.limbs = remainder;\n        result\n    }\n\n    // ####################################################################################################################\n    // ####################################################################################################################\n    // ### U N C O N S T R A I N E D    F U N C T I O N S\n    // ####################################################################################################################\n    // ####################################################################################################################\n\n    unconstrained fn __validate_in_field_compute_borrow_flags(self: Self, val: BigNum<N, Params>) -> [bool; N] {\n        let mut flags: [bool; N] = [false; N];\n        let modulus: [Field; N] = self.modulus;\n        flags[0] = modulus[0].lt(val.limbs[0]);\n        for i in 1..N - 1 {\n            flags[i] = modulus[i].lt(val.limbs[i] + flags[i - 1] as Field);\n        }\n        flags\n    }\n\n    unconstrained fn __pow_impl(self, val: BigNum<N, Params>, exponent: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x: U60Repr<N, 2> = U60Repr::from(exponent.limbs);\n\n        let num_bits = Params::modulus_bits() + 1;\n\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n\n        for i in 0..num_bits {\n            accumulator = self.__mul(accumulator, accumulator);\n            if x.get_bit(num_bits - i - 1) {\n                accumulator = self.__mul(accumulator, val);\n            }\n        }\n        accumulator\n    }\n\n    unconstrained fn __mul_with_quotient(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut mul: ArrayX<Field, N, 2> = ArrayX::new();\n        for i in 0..N {\n            for j in 0..N {\n                mul.add_assign(i + j, lhs.limbs[i] * rhs.limbs[j]);\n            }\n        }\n        let (q, r) = __barrett_reduction(\n            mul.__normalize_limbs(N + N),\n            self.redc_param,\n            Params::modulus_bits(),\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut quotient = BigNum::from_array(q);\n        let mut remainder = BigNum::from_array(r);\n        (quotient, remainder)\n    }\n\n    unconstrained fn __mul_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let (_, b) = self.__mul_with_quotient(lhs, rhs);\n        b\n    }\n\n    unconstrained fn __add_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let y_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let mut z_u60 = x_u60 + y_u60;\n\n        if z_u60.gte(self.modulus_u60) {\n            z_u60 = z_u60 - self.modulus_u60;\n        }\n        let mut result = BigNum::from_array(U60Repr::into(z_u60));\n        result\n    }\n\n    /**\n     * @brief given an input `x`, compute `2p - x` (unconstrained)\n     *\n     * @description we subtract the input from double the modulus, because all constrained BigNum operations\n     *              only guarantee that the output is in the range [0, ceil(log2(p))].\n     *              I.E. the input may be larger than the modulus `p`.\n     *              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n     *              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n     *              because such a check is expensive and usually unneccesary.\n     */\n    unconstrained fn __neg_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result = BigNum::from_array(U60Repr::into(self.modulus_u60 - x_u60));\n        result\n    }\n\n    unconstrained fn __add_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n        let add_u60 = a_u60 + b_u60;\n\n        let overflow = add_u60.gte(self.modulus_u60);\n\n        let mut subtrahend_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        if overflow {\n            subtrahend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                let mut add_term: u64 = a_u60.limbs.segments[j][i] + b_u60.limbs.segments[j][i] + carry_in;\n                carry = (add_term >= 0x1000000000000000) as u64;\n                add_term -= (carry as u64 * 0x1000000000000000);\n                result_u60.limbs.segments[j][i] = add_term;\n                carry_in = carry as u64;\n                borrow = ((subtrahend_u60.limbs.segments[j][i] + borrow_in) > result_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + result_u60.limbs.segments[j][i]\n                    - subtrahend_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    if (carry & borrow == 1) {\n                        carry = 0;\n                        borrow = 0;\n                    }\n                    carry_flags[idx] = carry as bool;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n\n        (result, carry_flags, borrow_flags, overflow)\n    }\n\n    unconstrained fn __validate_gt_remainder(\n        _: Self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N]) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let mut b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60);\n        b_u60 += U60Repr::one();\n        assert(underflow == false, \"BigNum::validate_gt check fails\");\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                let mut add_term: u64 = a_u60.limbs.segments[j][i] + addend_u60.limbs.segments[j][i] + carry_in;\n                carry = (add_term >= 0x1000000000000000) as u64;\n                add_term -= (carry as u64 * 0x1000000000000000);\n                result_u60.limbs.segments[j][i] = add_term;\n                carry_in = carry as u64;\n                borrow = ((b_u60.limbs.segments[j][i] + borrow_in) > result_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + result_u60.limbs.segments[j][i]\n                    - b_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    if (carry & borrow == 1) {\n                        carry = 0;\n                        borrow = 0;\n                    }\n                    carry_flags[idx] = carry as bool;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags)\n    }\n\n    unconstrained fn __sub_with_flags(\n        self,\n        lhs: BigNum<N, Params>,\n        rhs: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, [bool; N], [bool; N], bool) {\n        let a_u60 : U60Repr<N, 2> = U60Repr::from(lhs.limbs);\n        let b_u60 : U60Repr<N, 2> = U60Repr::from(rhs.limbs);\n\n        let underflow = b_u60.gte(a_u60 + U60Repr::one());\n\n        let mut addend_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        if underflow {\n            addend_u60 = self.modulus_u60;\n        }\n\n        let mut carry: u64 = 0;\n        let mut carry_in: u64 = 0;\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n        let mut borrow_flags: [bool; N] = [false; N];\n        let mut carry_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                let mut add_term: u64 = a_u60.limbs.segments[j][i] + addend_u60.limbs.segments[j][i] + carry_in;\n                carry = (add_term >= 0x1000000000000000) as u64;\n                add_term -= (carry as u64 * 0x1000000000000000);\n                result_u60.limbs.segments[j][i] = add_term;\n                carry_in = carry as u64;\n                borrow = ((b_u60.limbs.segments[j][i] + borrow_in) > result_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + result_u60.limbs.segments[j][i]\n                    - b_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    if (carry & borrow == 1) {\n                        carry = 0;\n                        borrow = 0;\n                    }\n                    carry_flags[idx] = carry as bool;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, carry_flags, borrow_flags, underflow)\n    }\n\n    unconstrained fn __neg_with_flags(self, val: BigNum<N, Params>) -> (BigNum<N, Params>, [bool; N]) {\n        let f: [Field; N] = val.limbs;\n        let x_u60 : U60Repr<N, 2> = U60Repr::from(f);\n        let mut result_u60 : U60Repr<N, 2> = U60Repr { limbs: ArrayX::new() };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        let mut borrow_flags: [bool; N] = [false; N];\n        for j in 0..2 {\n            for i in 0..N {\n                borrow = ((x_u60.limbs.segments[j][i] + borrow_in) > self.modulus_u60.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + self.modulus_u60.limbs.segments[j][i]\n                    - x_u60.limbs.segments[j][i]\n                    - borrow_in;\n                result_u60.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n                if ((j * N + i) & 1 == 1) {\n                    let idx = (j * N + i - 1) / 2;\n                    borrow_flags[idx] = borrow as bool;\n                }\n            }\n        }\n        let mut result = BigNum::from_array(U60Repr::into(result_u60));\n        (result, borrow_flags)\n    }\n\n    /**\n     * @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n     * @description see `__neg` for why we use 2p instead of p\n     **/\n    unconstrained fn __sub_impl(self, lhs: BigNum<N, Params>, rhs: BigNum<N, Params>) -> BigNum<N, Params> {\n        self.__add(lhs, self.__neg(rhs))\n    }\n\n    unconstrained fn __invmod_impl(self, val: BigNum<N, Params>) -> BigNum<N, Params> {\n        let one: BigNum<N, Params> = BigNum::one();\n        let one_u60: U60Repr<N, 2> = U60Repr::from(one.limbs);\n        let exponent = self.modulus_u60.sub(one_u60.add(one_u60));\n        let mut result = BigNum::from_array(U60Repr::into(exponent));\n        self.__pow(val, result)\n    }\n\n    unconstrained fn batch_invert_impl<let M: u32>(self, x: [BigNum<N, Params>; M]) -> [BigNum<N, Params>; M] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>; M] = [BigNum::new(); M];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn batch_invert_slice_impl(self, x: [BigNum<N, Params>]) -> [BigNum<N, Params>] {\n        // TODO: ugly! Will fail if input slice is empty\n        let mut accumulator: BigNum<N, Params> = BigNum::one();\n        let mut result: [BigNum<N, Params>] = [BigNum::new()];\n        let mut temporaries: [BigNum<N, Params>] = &[];\n        for i in 0..x.len() {\n            temporaries = temporaries.push_back(accumulator);\n            if (x[i].__is_zero() == false) {\n                accumulator = self.__mul(accumulator, x[i]);\n            }\n            result = result.push_back(BigNum::new());\n        }\n\n        accumulator = self.__invmod(accumulator);\n        let mut T0: BigNum<N, Params> = BigNum::new();\n        T0.limbs = [0; N];\n        for i in 0..x.len() {\n            let idx = x.len() - 1 - i;\n            if (x[idx].__is_zero() == false) {\n                T0 = self.__mul(accumulator, temporaries[idx]);\n                accumulator = self.__mul(accumulator, x[idx]);\n                result[idx] = T0;\n            }\n        }\n        result\n    }\n\n    unconstrained fn __div_impl(self, numerator: BigNum<N, Params>, divisor: BigNum<N, Params>) -> BigNum<N, Params> {\n        let t0 = self.__invmod(divisor);\n        self.__mul(numerator, t0)\n    }\n\n    /**\n     * @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n     **/\n    // NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n    // To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n    // We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n    // Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n    // Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\n    unconstrained fn __add_linear_expression<let M: u32>(\n        self,\n        x: [BigNum<N, Params>; M],\n        flags: [bool; M]\n    ) -> ([Field; N]) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut sum: [Field; N] = [0; N];\n        // TODO: ugly! Will fail if input array is empty\n        let modulus2: [Field;N] = self.double_modulus;\n        for i in 0..M {\n            if (flags[i]) {\n                for j in 0..N {\n                    sum[j] = sum[j] + modulus2[j] - x[i].limbs[j];\n                    assert(x[i].limbs[j].lt(modulus2[j]));\n                }\n            } else {\n                for j in 0..N {\n                    sum[j] = sum[j] + x[i].limbs[j];\n                }\n            }\n        }\n        // problem if we normalize when used in computing quotient\n        sum\n        //   let result_p: ArrayX<Field, N, 1> = BigNum::__normalize_limbs(ArrayX::from_array(lhs_sum_p), N);\n        //  let result_n: ArrayX<Field, N, 1> = BigNum::__normalize_limbs(ArrayX::from_array(lhs_sum_n), N);\n        //  (result_p.segments[0], result_n.segments[0])\n    }\n\n    /**\n     * @brief computes the limb products of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_product<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> ArrayX<Field, N, 2> {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mut lhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut rhs: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n        let mut add: [Field; N] = [0; N];\n\n        for i in 0..NUM_PRODUCTS {\n            lhs[i] = self.__add_linear_expression(lhs_terms[i], lhs_flags[i]);\n            rhs[i] = self.__add_linear_expression(rhs_terms[i], rhs_flags[i]);\n        }\n\n        let add: [Field; N] = self.__add_linear_expression(linear_terms, linear_flags);\n\n        let mut mulout: ArrayX<Field, N,2> = ArrayX::new();\n\n        for i in 0..N {\n            for j in 0..N {\n                for k in 0..NUM_PRODUCTS {\n                    mulout.add_assign(i + j, (lhs[k][i] * rhs[k][j]));\n                }\n            }\n            mulout.add_assign(i, add[i]);\n        }\n        mulout\n    }\n\n    /**\n     * @brief computes the quotient/remainder of a quadratic expression\n     * @details see __compute_quadratic_expression_with_borrow_flags for full description\n     **/\n    unconstrained fn __compute_quadratic_expression_impl<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n        let mulout = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let relation_result: ArrayX<Field, N, 2> = mulout.__normalize_limbs(N + N);\n\n        // TODO: ugly! Will fail if input slice is empty\n        let k  = Params::modulus_bits();\n\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            k,\n            self.modulus,\n            self.modulus_u60_x4\n        );\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r)\n    }\n\n    /**\n     * @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n     * @description The expression is of the form:\n     *\n     * \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n     *\n     * The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n     *\n     * When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n     * This can be achieved by minimizing the number of degree-2 relations required.\n     *\n     * The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n     * For example, when computing the product a * b - q * p = 0, it is possible that:\n     *      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n     *      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n     * In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n     * In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n     *\n     * @param lhs_terms a 2D array of BigNum\n     * @param lhs_flags a 2D array of sign flags\n     * @param rhs_terms a 2D array of BigNum\n     * @param rhs_flags a 2D array of sign flags\n     * @param linear_terms an array of BigNum\n     * @param linear_flags an array of sign flags\n     **/\n    unconstrained fn __compute_quadratic_expression_with_borrow_flags<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        self,\n        lhs_terms: [[BigNum<N, Params>; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[BigNum<N, Params>; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [BigNum<N, Params>; ADD_N],\n        linear_flags: [bool; ADD_N]\n    ) -> (BigNum<N, Params>, BigNum<N, Params>, ArrayX<Field, N, 2>) {\n        // TODO, validate we do not overflow N2 when multiplying and N when adding\n\n        let mut mulout_p = self.__compute_quadratic_expression_product(\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags\n        );\n        let mut mulout_n: ArrayX<Field, N, 2> = ArrayX::new();\n\n        let relation_result: ArrayX<Field, N, 2> = mulout_p.__normalize_limbs(N + N);\n        let modulus: [Field; N] = self.modulus;\n        let (quotient, remainder) = __barrett_reduction(\n            relation_result,\n            self.redc_param,\n            Params::modulus_bits(),\n            modulus,\n            self.modulus_u60_x4\n        );\n        assert(remainder == [0; N]);\n\n        for i in 0..N {\n            for j in 0..N {\n                mulout_n.add_assign(i + j, quotient[i] * modulus[j]);\n            }\n        }\n\n        // compute borrow flags from mulout_p and mulout_n\n        let mut borrow_flags: ArrayX<Field, N, 2> = ArrayX::new();\n        let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n        let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n        let two_pow_120: Field = 0x1000000000000000000000000000000;\n        let downshift: Field = 1 / two_pow_120;\n\n        // determine whether we need to borrow from more significant limbs.\n        // initial limb is \"simple\" comparison operation\n        // TODO: check how expensive `lt` operator is w.r.t. witness generation\n        borrow_flags.set(0, mulout_p.get(0).lt(mulout_n.get(0)) as Field);\n        // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n        // and there is nothing to borrow against for the final limb.\n        let mut hi_bits = (mulout_p.get(0) - mulout_n.get(0) + (borrow_flags.get(0) * borrow_shift)) * downshift;\n        for i in 1..(N + N - 2) {\n            // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n            // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n            //     * downshift;\n            mulout_p.add_assign(i, hi_bits);\n\n            // determine whether negative limb values are greater than positive limb values\n            let underflow: Field = mulout_p.get(i).lt(mulout_n.get(i) + (borrow_flags.get(i - 1) * borrow_carry)) as Field;\n            borrow_flags.set(i, underflow);\n\n            hi_bits = (mulout_p.get(i) - mulout_n.get(i) + (borrow_flags.get(i) * borrow_shift)\n                - (borrow_flags.get(i - 1) * borrow_carry)) * downshift;\n        }\n\n        let mut q = BigNum::from_array(quotient);\n        let mut r = BigNum::from_array(remainder);\n        (q, r, borrow_flags)\n    }\n\n    unconstrained fn __udiv_mod_impl(\n        _: Self,\n        numerator: BigNum<N, Params>,\n        divisor: BigNum<N, Params>\n    ) -> (BigNum<N, Params>, BigNum<N, Params>) {\n        let mut quotient_u60: U60Repr<N, 2> = U60Repr::from([0; N]);\n        let mut remainder_u60: U60Repr<N, 2> = U60Repr::from(numerator.limbs);\n\n        let mut divisor_u60: U60Repr<N, 2> = U60Repr::from(divisor.limbs);\n        let b = divisor_u60;\n\n        let mut bit_difference = remainder_u60.get_msb() - divisor_u60.get_msb();\n\n        let mut accumulator_u60: U60Repr<N, 2> = U60Repr::one();\n        divisor_u60 = divisor_u60.shl(bit_difference);\n        accumulator_u60 = accumulator_u60.shl(bit_difference);\n\n        if (divisor_u60.gte(remainder_u60 + U60Repr::one())) {\n            divisor_u60.shr1();\n            accumulator_u60.shr1();\n        }\n        for _ in 0..(N * 120) {\n            if (remainder_u60.gte(b) == false) {\n                break;\n            }\n\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (remainder_u60.gte(divisor_u60)) {\n                remainder_u60 -= divisor_u60;\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient_u60 = quotient_u60 + accumulator_u60;\n            }\n            divisor_u60.shr1(); // >>= 1;\n            accumulator_u60.shr1(); //  >>= 1;\n        }\n\n        (\n            BigNum::from_array(U60Repr::into(quotient_u60)), BigNum::from_array(U60Repr::into(remainder_u60))\n        )\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [Field; N]) -> [Field; N] {\n    let TWO_POW_120: Field = 0x1000000000000000000000000000000;\n    let m: U60Repr<N, 2> = U60Repr::from(modulus);\n    let mut result: [Field; N] = U60Repr::into(m + m);\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n\nunconstrained fn __barrett_reduction<let N: u32>(\n    x: ArrayX<Field, N, 2>,\n    redc_param: [Field; N],\n    k: u32,\n    modulus: [Field; N],\n    modulus_u60: U60Repr<N, 4>\n) -> ([Field; N], [Field; N]) {\n    let mut mulout: ArrayX<Field, N, 3>  = ArrayX { segments: [[0; N]; 3] };\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout.add_assign(i + j, x.get(i) * redc_param[j]);\n        }\n    }\n    mulout = mulout.__normalize_limbs(3 * N - 1);\n    let mulout_u60: U60Repr<N, 6> = U60Repr::new(mulout);\n    let mut quotient_u60 = mulout_u60.shr((k + k));\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient: ArrayX<Field, N, 2> = quotient_u60.into_arrayX();\n\n    // quotient_mul_modulus can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus: ArrayX<Field, N, 2>  = ArrayX { segments: [[0; N]; 2] };\n    let mut quotient_mul_modulus_normalized: ArrayX<Field, N, 2>  = ArrayX { segments: [[0; N]; 2] };\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus.add_assign(i + j, partial_quotient.get(i) * modulus[j]);\n        }\n    }\n\n    for i in 0..(N + N) {\n        let (lo, hi) = split_bits::split_120_bits(quotient_mul_modulus.get(i));\n        quotient_mul_modulus_normalized.set(i, lo);\n        // TODO: what is faster, leaving this if statement in or out?\n        // (array is size-1 too large so we can tolerate adding 0 into max element)\n        if (i + 1 < N + N) {\n            quotient_mul_modulus.add_assign(i + 1, hi);\n        }\n    }\n    let quotient_mul_modulus_u60: U60Repr<N, 4> = U60Repr::new(quotient_mul_modulus_normalized);\n\n    let x_u60 : U60Repr<N, 4> = U60Repr::new(x);\n    let mut remainder_u60 = x_u60 - quotient_mul_modulus_u60;\n\n    if (remainder_u60.gte(modulus_u60)) {\n        remainder_u60 = remainder_u60 - modulus_u60;\n        quotient_u60.increment();\n    } else {}\n\n    let q: [Field; N] = U60Repr::into(quotient_u60);\n    let r: [Field; N] = U60Repr::into(remainder_u60);\n\n    (q, r)\n}\n"},"412":{"path":"/home/jpag/nargo/github.com/noir-lang/noir-bignumv0.3.3/src/utils/split_bits.nr","source":"\n// Decomposes a single field into two 120 bit fields and a carry\nunconstrained pub fn split_120_bits(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let offsets: [Field; 17] = [\n        1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000, 0x10000000000000000, 0x1000000000000000000, 0x100000000000000000000, 0x10000000000000000000000, 0x1000000000000000000000000, 0x100000000000000000000000000, 0x10000000000000000000000000000, 0x1000000000000000000000000000000, 0x100000000000000000000000000000000\n    ];\n\n    for i in 0..15 {\n        low += (x_bytes[i] as Field) * offsets[i];\n        high += (x_bytes[i + 15] as Field) * offsets[i];\n    }\n    high += (x_bytes[30] as Field) * offsets[15];\n    high += (x_bytes[31] as Field) * offsets[16];\n    // TDOO: investigate why this is triggered in BigCurve crate? it shouldn't be?\n    //   assert(x_bytes[31] == 0);\n    (low, high)\n}\n\n/**\n * @brief Decomposes a single field into two 60 bit fields\n *\n * @description Expects the input limb to be in the range [0, ..., 2^{120 - 1}]\n **/\nunconstrained pub fn split_60_bits(x: Field) -> (u64, u64) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: u64 = 0;\n    let mut high: u64 = 0;\n\n    let offsets: [u64; 8] = [1, 0x100, 0x10000, 0x1000000, 0x100000000, 0x10000000000, 0x1000000000000, 0x100000000000000];\n    for i in 0..8 {\n        low += (x_bytes[i] as u64) * offsets[i];\n        high += (x_bytes[i + 8] as u64) * offsets[i];\n    }\n    let t1 = low >> 60;\n    let mask = ((1 as u64) << 60 as u8) - 1;\n    low = low & mask;\n    high = (high << 4) | t1;\n    (low, high)\n}\n"},"413":{"path":"/home/jpag/nargo/github.com/noir-lang/noir-bignumv0.3.3/src/utils/arrayX.nr","source":"use dep::std;\nuse crate::utils::split_bits;\n\n/**\n * @brief Array abstraction, whose size is a known multiplier `SizeMultiplier` of an initial size `N`\n *\n * @note ArrayX is a workaround for the lack of arithmetic over generics.\n *       e.g. [Field; N * 2] is not currently possible\n *       This abstraction can be removed once Noir supports arithmetic on generics.\n**/\nstruct  ArrayX<T, let N: u32, let SizeMultiplier: u32> {\n    segments: [[T; N]; SizeMultiplier]\n}\n\nimpl<T, let N: u32, let SizeMultiplier: u32> std::convert::From<[T; N]> for ArrayX<T, N, SizeMultiplier> where T: std::default::Default {\n    fn from(input: [T; N]) -> Self {\n        assert(N == 1);\n        let mut result = ArrayX::new();\n        result.segments[0] = input;\n        result\n    }\n}\n\nimpl<T, let N: u32, let SizeMultiplier: u32> std::convert::From<[[T; N]; SizeMultiplier]> for ArrayX<T, N, SizeMultiplier> where T: std::default::Default {\n    fn from(input: [[T; N]; SizeMultiplier]) -> Self {\n        ArrayX { segments: input }\n    }\n}\n\nimpl<T, let N: u32, let SizeMultiplier: u32> std::cmp::Eq for ArrayX<T, N, SizeMultiplier> where T: std::cmp::Eq {\n    fn eq(self, other: Self) -> bool {\n        let mut result: bool = true;\n        for i in 0..SizeMultiplier {\n            for j in 0..N {\n                result = result & (self.segments[i][j] == other.segments[i][j]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let SizeMultiplier: u32> ArrayX<T, N, SizeMultiplier> {\n\n    fn new() -> Self where T: std::default::Default {\n        ArrayX { segments: [[T::default(); N]; SizeMultiplier] }\n    }\n\n    fn mul_assign(&mut self, i: u32, rhs: T) where T: std::ops::Mul {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] *= rhs;\n    }\n\n    fn add_assign(&mut self, i: u32, rhs: T) where T: std::ops::Add {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] += rhs;\n    }\n\n    fn sub_assign(&mut self, i: u32, rhs: T) where T: std::ops::Sub {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] -= rhs;\n    }\n\n    fn set(&mut self, i: u32, x: T) {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index] = x;\n    }\n\n    fn get(self, i: u32) -> T {\n        let segment = i / N;\n        let index = i % N;\n        self.segments[segment][index]\n    }\n}\n\nimpl<let N: u32, let SizeMultiplier: u32> ArrayX<Field, N, SizeMultiplier> {\n\n    unconstrained fn __normalize_limbs(self, range: u32) -> Self {\n        let mut normalized: Self = ArrayX::new();\n        let mut inp = self;\n        // (9 limb mul = 17 product terms)\n\n        // a2 a1 a0\n        // b2 b1 b0\n\n        // a0b0\n        // a1b0 a0b1\n        // a2b0 a1b1 a0b2\n        // a2b1 a1b2\n        // a2b2\n\n        // r0 lo\n        // r0 hi + r1 lo\n        // r1 hi + r2 lo\n        // r2 hi + r3 lo\n        // r3 hi + r4 lo\n        // r4 hi = 6?\n        for i in 0..(range - 1) {\n            let (lo, hi) = split_bits::split_120_bits(inp.get(i));\n\n            normalized.set(i, lo);\n            inp.set(i + 1, inp.get(i + 1) + hi);\n        }\n        {\n            let (lo, hi) = split_bits::split_120_bits(inp.get(range - 1));\n            normalized.set(range - 1, lo);\n            assert(hi == 0);\n        }\n        normalized\n    }\n}\n"},"414":{"path":"/home/jpag/nargo/github.com/noir-lang/noir-bignumv0.3.3/src/utils/u60_representation.nr","source":"use dep::std;\n\nuse crate::utils::arrayX::ArrayX;\nuse crate::utils::split_bits;\nuse crate::utils::msb::get_msb64;\n\n/**\n * @brief U60Repr represents a BigNum element as a sequence of 60-bit unsigned integers.\n *\n * @description: used in unconstrained functions when computing witness values.\n * It is helpful to use u60 types when evaluating addition operations that can overflow the field modulus,\n * as well as when performing bit shifts.\n */\nstruct  U60Repr<let N: u32, let NumSegments: u32>\n{\n    limbs: ArrayX<u64, N, NumSegments>\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Add for U60Repr<N, NumSegments> {\n    fn add(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let mut carry: u64 = 0;\n        for j in 0..NumSegments {\n            for i in 0..N {\n                let mut add: u64 = self.limbs.segments[j][i] + b.limbs.segments[j][i] + carry;\n                carry = add >> 60;\n                add = add - (carry << 60);\n                result.limbs.segments[j][i] = add;\n            }\n        }\n\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::ops::Sub for U60Repr<N, NumSegments> {\n    fn sub(self, b: Self) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let mut borrow: u64 = 0;\n        let mut borrow_in: u64 = 0;\n\n        for j in 0..NumSegments {\n            for i in 0..N {\n                borrow = ((b.limbs.segments[j][i] + borrow_in) > self.limbs.segments[j][i]) as u64;\n                let sub = (borrow << 60) + self.limbs.segments[j][i] - b.limbs.segments[j][i] - borrow_in;\n                result.limbs.segments[j][i] = sub;\n                borrow_in = borrow;\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::From<[Field; N]> for U60Repr<N, NumSegments> {\n    fn from(input: [Field; N]) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n        for i in 0..(N) {\n            let (lo, hi) = split_bits::split_60_bits(input[i]);\n            result.limbs.set(2 * i, lo);\n            result.limbs.set(2 * i + 1, hi);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::convert::Into<[Field; N]> for U60Repr<N, NumSegments> {\n    fn into(x: U60Repr<N, NumSegments>) -> [Field; N] {\n        let mut result: [Field; N] = [0; N];\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..N {\n            result[i] = x.limbs.get(2 * i) as Field + (x.limbs.get(2 * i + 1) as Field * two_pow_60);\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> std::cmp::Eq for U60Repr<N, NumSegments> {\n    fn eq(self, other: Self) -> bool {\n        self.limbs == other.limbs\n    }\n}\n\nimpl<let N: u32, let NumSegments: u32> U60Repr<N, NumSegments> {\n\n    unconstrained fn new<let NumFieldSegments: u32>(x: ArrayX<Field, N, NumFieldSegments>) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n        for i in 0..(N * NumFieldSegments) {\n            let (lo, hi) = split_bits::split_60_bits(x.get(i));\n            result.limbs.set(2 * i, lo);\n            result.limbs.set(2 * i + 1, hi);\n        }\n        result\n    }\n\n    unconstrained fn one() -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n        result.limbs.set(0, 1);\n        result\n    }\n\n    unconstrained fn into_arrayX<let NumFieldSegments: u32>(x: U60Repr<N, NumSegments>) -> ArrayX<Field, N, NumFieldSegments> {\n        let mut result: ArrayX<Field, N, NumFieldSegments> = ArrayX { segments: [[0; N]; NumFieldSegments] };\n        let two_pow_60: Field = 0x1000000000000000;\n        for i in 0..(N * NumFieldSegments) {\n            result.set(\n                i,\n                x.limbs.get(2 * i) as Field + (x.limbs.get(2 * i + 1) as Field * two_pow_60)\n            );\n        }\n        result\n    }\n\n    unconstrained fn gte(self, b: Self) -> bool {\n        let mut result = false;\n        let mut early_exit = false;\n        for i in 0..(N * NumSegments) {\n            if (b.limbs.get((N * NumSegments) - 1 - i) < (self.limbs.get((N * NumSegments) - 1 - i))) {\n                result = true;\n                early_exit = true;\n                break;\n            } else if (b.limbs.get((N * NumSegments) - 1 - i) != (self.limbs.get((N * NumSegments) - 1 - i))) {\n                result = false;\n                early_exit = true;\n                break;\n            }\n        }\n        if (early_exit == false) {\n            result = (self.limbs.get(0) == b.limbs.get(0));\n        }\n        result\n    }\n\n    fn get_bit(self, bit: u32) -> bool {\n        let segment_index = bit / 60;\n        let uint_index = bit % 60;\n\n        let limb: u64 = self.limbs.get(segment_index);\n        let value = (limb >> uint_index as u8) & 1;\n        value == 1\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = shift % 60;\n        let remainder_shift = 60 - limb_shift;\n        let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        result.limbs.set(\n            0,\n            (self.limbs.get(0 + num_shifted_limbs) >> limb_shift as u8)\n        );\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs.get(i + num_shifted_limbs);\n            result.limbs.set(i, (value >> limb_shift as u8));\n            let remainder: u64 = (value << remainder_shift as u8) & mask;\n            result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shr1(&mut self) {\n        let value = self.limbs.segments[NumSegments - 1][N - 1];\n        self.limbs.segments[NumSegments - 1][N - 1] = value >> 1;\n\n        let mut remainder = (value & 1) << 59;\n\n        for j in 0..NumSegments {\n            for i in 0..N {\n                let value = self.limbs.segments[NumSegments - 1 - j][N - 1 - i];\n                self.limbs.segments[NumSegments - 1 - j][N - 1 - i] = (value >> 1) + remainder;\n                remainder = (value << 59) & 0x800000000000000;\n            }\n        }\n    }\n\n    // note: shr cannot satisfy `Shr` Trait due to `shift` parameter being u64 and not u8 (shift value might be greater than 255)\n    fn shl(self, shift: u32) -> Self {\n        let mut result: Self = U60Repr { limbs: ArrayX { segments: [[0; N]; NumSegments] } };\n\n        let num_shifted_limbs = shift / 60;\n        let limb_shift = (shift % 60) as u8;\n        let remainder_shift: u8 = 60 - limb_shift as u8;\n\n        // 83\n        // limb shift = 1\n        // inside shift = 19 bits to the left\n        // meaning we have 19 carry bits and 41 remainder bits\n        let mask: u64 = (1 as u64 << 60) - 1;\n        //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n        let value = self.limbs.get(0);\n\n        let mut remainder = (value >> remainder_shift);\n        result.limbs.set(num_shifted_limbs, (value << (limb_shift as u8)) & mask);\n\n        // shift 84. num shifted = 1\n\n        for i in 1..((N * NumSegments) - num_shifted_limbs) {\n            let value = self.limbs.get(i);\n            let upshift = ((value << (limb_shift as u8)) + remainder) & mask;\n            result.limbs.set(i + num_shifted_limbs, upshift);\n            remainder = (value >> remainder_shift);\n            // let remainder: u64 = (self.limbs.get(i + num_shifted_limbs as u64) << remainder_shift as u8) & mask;\n            // result.limbs.set(i - 1, result.limbs.get(i - 1) + remainder);\n        }\n        result\n    }\n\n    fn increment(&mut self) {\n        let mut carry: u64 = 0;\n\n        let mut add: u64 = self.limbs.segments[0][0] + 1;\n        carry = add >> 60;\n        add = add - (carry << 60);\n        self.limbs.segments[0][0] = add;\n        for i in 1..N {\n            let mut add: u64 = self.limbs.segments[0][i] + carry;\n            carry = add >> 60;\n            add = add - (carry << 60);\n            self.limbs.segments[0][i] = add;\n        }\n        for j in 1..NumSegments {\n            for i in 0..N {\n                let mut add: u64 = self.limbs.segments[j][i] + carry;\n                carry = add >> 60;\n                add = add - (carry << 60);\n                self.limbs.segments[j][i] = add;\n            }\n        }\n    }\n\n    unconstrained  fn get_msb(val: Self) -> u32 {\n        let mut count = 0;\n        for i in 0..N * NumSegments {\n            let v = val.limbs.get((N * NumSegments) - 1 - i);\n            if (v > 0) {\n                count = 60 * ((N * NumSegments) - 1 - i) + get_msb64(v);\n                break;\n            }\n        }\n        count\n    }\n}\n"},"55":{"path":"std/ops/arith.nr","source":"// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"6":{"path":"std/cmp.nr","source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(s, quote { Eq }, signature, for_each_field, quote { & }, body)\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"71":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod constants;\nmod types;\n\n#[aztec]\ncontract ZImburseEscrow {\n    use dep::aztec::prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map};\n    use dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note;\n    use dep::aztec::macros::{storage::storage, functions::{private, public, view, initializer}};\n    use dep::aztec::keys::getters::get_public_keys;\n    use dep::address_note::address_note::AddressNote;\n    use dep::aztec::note::note_getter_options::NoteGetterOptions;\n    use dep::zimburse_verifiers::{\n        constants::{MAX_LINODE_EMAIL_BODY_LENGTH, MAX_LINODE_EMAIL_HEADER_LENGTH},\n        linode::verify_linode_billing_receipt,\n        zkemail::KEY_LIMBS_2048\n    };\n    \n    use crate::types::definition::{Definition, TITLE_LENGTH};\n    use crate::types::recurring_entitlement_note::RecurringEntitlementNote;\n    // use dep::aztec::macros::{storage::storage, functions::{private, initializer}};\n    use dep::token::Token;\n\n    #[storage]\n    struct Storage<Context> {\n        definition: SharedImmutable<Definition, Context>,\n        entitlements: Map<AztecAddress, PrivateSet<RecurringEntitlementNote, Context>, Context>\n    }\n\n\n    /**\n     * Initialize the Z-Imburse contract by setting the owner and USDC token.\n     *\n     * @param registry The address of the Z-Imburse contract registry\n     * @param usdc_token The address of the USDC token\n     * @param title The title of the contract as a string of max length 60\n     */\n    #[public]\n    #[initializer]\n    fn constructor(registry: AztecAddress, usdc_token: AztecAddress, title: str<TITLE_LENGTH>) {\n        let definition = Definition::new(registry, context.msg_sender(), usdc_token, title);\n        storage.definition.initialize(definition);\n    }\n\n\n    #[private]\n    fn give_entitlement(to: AztecAddress, amount: Field) {\n        let recipient = get_public_keys(to);\n        let mut entitlement: RecurringEntitlementNote = RecurringEntitlementNote::new(to, recipient.npk_m.hash(), U128::from_integer(amount));\n        storage.entitlements.at(to).insert(&mut entitlement).emit(\n            encode_and_encrypt_note(&mut context, context.msg_sender(), to)\n        );\n    }\n\n    #[private]\n    fn redeem_linode_entitlement(\n        // email inputs\n        body: [u8; MAX_LINODE_EMAIL_BODY_LENGTH],\n        body_hash_index: u32,\n        body_length: u32,\n        header: [u8; MAX_LINODE_EMAIL_HEADER_LENGTH],\n        header_length: u32,\n        pubkey: [Field; KEY_LIMBS_2048],\n        pubkey_redc: [Field; KEY_LIMBS_2048],\n        signature: [Field; KEY_LIMBS_2048],\n        from_index: u32,\n        subject_index: u32,\n        amount_index: u32,\n        amount_length: u32,\n        date_index: u32,\n        receipt_id_length: u32,\n        // claim hash\n        claim_secret_hash: Field,\n    ) {\n        // read note\n        // todo: filter for linode entitlement\n        let notes = storage.entitlements.at(context.msg_sender()).pop_notes(\n            NoteGetterOptions::new().set_limit(1)\n        );\n        assert(notes.len() == 1, \"No entitlements to redeem\");\n        let note = notes.get_unchecked(0);\n        assert(note.owner == context.msg_sender(), \"Entitlement does not belong to the sender\");\n\n        // verify linode billing receipt and extract amount, date, keyhash\n        let linode_receipt_result = verify_linode_billing_receipt(\n            body, body_hash_index, body_length, header, header_length, pubkey, pubkey_redc, signature, from_index, subject_index, amount_index, amount_length, date_index, receipt_id_length\n        );\n        let dkim_key_hash = linode_receipt_result[0];\n        let datetime = linode_receipt_result[1];\n        // billed amount returns 2 decimals, so multiply billed_amount by 10,000\n        let billed_amount = U128::from_integer(linode_receipt_result[2] * 10000);\n\n        // determine the amount to reimburse\n        let amount_to_reimburse = if note.max_value >= billed_amount {\n            billed_amount\n        } else {\n            note.max_value\n        };\n\n        // release funds from escrow by shielding in public\n        // todo: event should notify how much was reimbursed\n        let token_address = storage.definition.read_private().usdc;\n        Token::at(token_address).shield(context.this_address(), amount_to_reimburse.to_field(), claim_secret_hash, 0).enqueue(&mut context);\n    }\n\n    /**\n     * Get the title of the Z-Imburse escrow\n     */\n    #[public]\n    #[view]\n    pub fn get_title() -> [u8; TITLE_LENGTH]{\n        storage.definition.read_public().title_as_string()\n    }\n\n\n    /**\n     * Privately get the admin of the ZImburse escrow contract\n     *\n     * @return the admin of the ZImburse escrow contract\n     */\n    #[private]\n    #[view]\n    pub fn get_admin_private() -> AztecAddress {\n        storage.definition.read_private().admin\n    }\n\n}\n\n"},"72":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/recurring_entitlement_note.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator};\nuse dep::aztec::{note::utils::compute_note_hash_for_nullify, oracle::unsafe_rand::unsafe_rand};\nuse dep::compressed_string::CompressedString;\nuse dep::aztec::macros::notes::note;\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, PrivateContext};\nuse dep::aztec::keys::getters::get_nsk_app;\n\n// unique ids for each verifier type\nmod HOSTING_VERIFIER_TYPE {\n    global LINODE: u8 = 1; // supported\n    global HEROKU: u8 = 2; // todo: supported\n    global AWS: u8 = 3; // todo: supported\n    global GCP: u8 = 4; // not supported in mvp\n    global AZURE: u8 = 5; // not supported in mvp\n    global HETZNER: u8 = 6; // not supported in mvp\n    global DIGITAL_OCEAN: u8 = 7; // not supported in mvp\n}\n\n// trait OwnedNote {\n//     fn new(\n//         owner: AztecAddress,\n//         external_nullifier_hash: Field,\n//         npk_m_hash: Field,\n//         max_value: U128,\n//         verifier_type: u8,\n//     ) -> Self;\n// }\n\ntrait OwnedNote {\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self;\n}\n\n#[note]\npub struct RecurringEntitlementNote {\n    // the user that is allowed to use this entitlement\n    owner: AztecAddress,\n    // // the external nullifier that the admin can use to nullify the note\n    // external_nullifier_hash: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // // the type of email verifier that should be used for this entitlement\n    // verifier_type: u8,\n    // random entropy to make the note private\n    randomness: Field,\n}\n\nimpl NullifiableNote for RecurringEntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for RecurringEntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.owner == other.owner)\n            & (self.max_value == other.max_value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for RecurringEntitlementNote {\n    // fn new(\n    //     owner: AztecAddress,\n    //     external_nullifier_hash: Field,\n    //     npk_m_hash: Field,\n    //     max_value: U128,\n    //     verifier_type: u8,\n    //     randomness: Field\n    // ) -> Self {\n    //     Self {\n    //         owner,\n    //         external_nullifier_hash,\n    //         npk_m_hash,\n    //         max_value,\n    //         verifier_type,\n    //         randomness: unsafe_rand()\n    //         header: NoteHeader::empty()\n    //     }\n    // }\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self {\n        Self {\n            owner,\n            npk_m_hash,\n            max_value,\n            randomness: unsafe { unsafe_rand() },\n            header: NoteHeader::empty()\n        }\n    }\n}"},"75":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\nuse dep::compressed_string::CompressedString;\n\nglobal DEFINITION_LENGTH: u32 = 5;\nglobal TITLE_LENGTH: u32 = 60;\nglobal TITLE_SERIALIZED_LENGTH: u32 = 2;\n\npub struct Definition {\n    registry: AztecAddress,\n    admin: AztecAddress,\n    usdc: AztecAddress,\n    title: CompressedString<TITLE_SERIALIZED_LENGTH, TITLE_LENGTH>\n}\n\nimpl Serialize<DEFINITION_LENGTH> for Definition {\n    fn serialize(self: Self) -> [Field; DEFINITION_LENGTH] {\n        [self.registry.to_field(), self.admin.to_field(), self.usdc.to_field(), self.title.value[0], self.title.value[1]]\n    }\n}\n\nimpl Deserialize<DEFINITION_LENGTH> for Definition {\n    fn deserialize(fields: [Field; DEFINITION_LENGTH]) -> Self {\n        Definition {\n            registry: AztecAddress::from_field(fields[0]),\n            admin: AztecAddress::from_field(fields[1]),\n            usdc: AztecAddress::from_field(fields[2]),\n            title: CompressedString { value: [fields[3], fields[4]] }\n        }\n    }\n}\n\nimpl Definition {\n    /**\n     * Create a new definition for a Z-Imburse escrow contract with the uncompressed string\n     *\n     * @param registry The address of the Z-Imburse contract registry\n     * @param admin The address of the admin of the contract\n     * @param usdc The address of the USDC token\n     * @param title The title of the contract as a string of max length 60\n     * @return The new definition\n     */\n    pub fn new(registry: AztecAddress, admin: AztecAddress, usdc: AztecAddress, title: str<TITLE_LENGTH>) -> Self {\n        Definition { registry, admin, usdc, title: CompressedString::from_string(title) }\n    }\n\n    /**\n     * Return the bytes of the title to display as a string\n     *\n     * @return The title as a string\n     */\n    pub fn title_as_string(self) -> [u8; TITLE_LENGTH] {\n        self.title.to_bytes()\n    }\n}\n"},"79":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"93":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"94":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_getter_options.nr","source":"use std::option::Option;\nuse dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, traits::ToField};\nuse crate::note::note_interface::NoteInterface;\n\npub struct PropertySelector {\n    index: u8, // index of the field in the serialized note array\n    offset: u8, // offset in the byte representation of the field (selected with index above) from which to reading\n    length: u8, // number of bytes to read after the offset\n}\n\npub struct Select {\n    property_selector: PropertySelector,\n    comparator: u8,\n    value: Field,\n}\n\nimpl Select {\n    // The selected property will be the left hand side and value the right hand side of the operation, so e.g. the\n    // object created by new(property, Comparator.GT, value) represents 'property > value'.\n    pub fn new(property_selector: PropertySelector, comparator: u8, value: Field) -> Self {\n        Select { property_selector, comparator, value }\n    }\n}\n\npub struct SortOrderEnum {\n    DESC: u8,\n    ASC: u8,\n}\n\nglobal SortOrder = SortOrderEnum {\n    DESC: 1,\n    ASC: 2,\n};\n\npub struct Sort {\n    property_selector: PropertySelector,\n    order: u8,\n}\n\nimpl Sort {\n    pub fn new(property_selector: PropertySelector, order: u8) -> Self {\n        Sort { property_selector, order }\n    }\n}\n\npub struct NoteStatusEnum {\n    ACTIVE: u8,\n    ACTIVE_OR_NULLIFIED: u8,\n}\n\nglobal NoteStatus = NoteStatusEnum {\n    ACTIVE: 1,\n    ACTIVE_OR_NULLIFIED: 2,\n    // TODO 4217: add 'NULLIFIED'\n};\n\n// This is the default filter and preprocessor, which does nothing\nfn return_all_notes<Note>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    _p: Field\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    notes\n}\n\n// docs:start:NoteGetterOptions\npub struct NoteGetterOptions<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    // Preprocessor and filter functions are used to filter notes. The preprocessor is applied before the filter and\n    // unlike filter it is applied in an unconstrained context.\n    preprocessor: fn ([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n    filter: fn ([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], FILTER_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    filter_args: FILTER_ARGS,\n    status: u8,\n}\n// docs:end:NoteGetterOptions\n\n// When retrieving notes using the NoteGetterOptions, the configurations are applied in a specific sequence to ensure\n// precise and controlled data retrieval.\n// The database-level configurations are applied first:\n// `selects` to specify fields, `sorts` to establish sorting criteria, `offset` to skip items, and `limit` to cap\n// the result size.\n// And finally, a custom preprocessor and filter to refine the outcome further.\nimpl<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS> NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS> {\n    // This method adds a `Select` criterion to the options.\n    // It takes a property_selector indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from `utils::comparison`)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    // This method adds a `Sort` criterion to the options.\n    // It takes a field_index indicating which field to sort by and an order (SortOrder) to determine the sorting direction.\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    // This method lets you set a limit for the maximum number of notes to be retrieved in a single query result.\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set.\n        assert_constant(limit);\n\n        self.limit = limit;\n        *self\n    }\n\n    // This method sets the offset value, which determines where to start retrieving notes in the query results.\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n\nimpl<Note, let N: u32> NoteGetterOptions<Note, N, Field, Field> where Note: NoteInterface<N> {\n    // This function initializes a NoteGetterOptions that simply returns the maximum number of notes allowed in a call.\n    pub fn new() -> Self {\n        Self {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            preprocessor: return_all_notes,\n            preprocessor_args: 0,\n            filter: return_all_notes,\n            filter_args: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n}\n\nimpl<Note, let N: u32, PREPROCESSOR_ARGS> NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, Field> where Note: NoteInterface<N> {\n    // This function initializes a NoteGetterOptions with a preprocessor, which takes the notes returned from\n    // the database and preprocessor_args as its parameters.\n    // `preprocessor_args` allows you to provide additional data or context to the custom preprocessor.\n    pub fn with_preprocessor(\n        preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n        preprocessor_args: PREPROCESSOR_ARGS\n    ) -> Self {\n        Self {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            preprocessor,\n            preprocessor_args,\n            filter: return_all_notes,\n            filter_args: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n}\n\nimpl<Note, let N: u32, FILTER_ARGS> NoteGetterOptions<Note, N, Field, FILTER_ARGS> where Note: NoteInterface<N> {\n    // This function initializes a NoteGetterOptions with a filter, which takes\n    // the notes returned from the database and filter_args as its parameters.\n    // `filter_args` allows you to provide additional data or context to the custom filter.\n    pub fn with_filter(\n        filter: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], FILTER_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n        filter_args: FILTER_ARGS\n    ) -> Self {\n        Self {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTE_HASH_READ_REQUESTS_PER_CALL as u32,\n            offset: 0,\n            preprocessor: return_all_notes,\n            preprocessor_args: 0,\n            filter,\n            filter_args,\n            status: NoteStatus.ACTIVE\n        }\n    }\n}\n"},"95":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"96":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, notification_note_hash, nullifier_counter) == 0);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n\n"},"99":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.56.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"}}}