{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseEscrowRegistry","functions":[{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"451":"Initialization hash does not match","189":"attempt to add with overflow","573":"Not initialized","1469":"Array index out of bounds","1847":"Array index out of bounds","1329":"attempt to add with overflow","1250":"Array index out of bounds","1183":"attempt to add with overflow","476":"SharedImmutable already initialized","1427":"attempt to add with overflow","1933":"attempt to add with overflow","970":"Array index out of bounds","775":"Function get_contract_registration_status can only be called statically","1226":"Array index out of bounds","1543":"Array index out of bounds","1671":"Array index out of bounds","1860":"attempt to add with overflow","1208":"Array index out of bounds","245":"attempt to add with overflow","757":"attempt to add with overflow","1397":"Array index out of bounds","1720":"Array index out of bounds","227":"Array index out of bounds","1891":"attempt to add with overflow","1117":"Array index out of bounds","1757":"Array index out of bounds","1172":"Array index out of bounds","1556":"attempt to add with overflow","1873":"Array index out of bounds","1739":"Array index out of bounds","1477":"attempt to add with overflow","1733":"attempt to add with overflow","124":"attempt to add with overflow","691":"Function get_escrow_class_id can only be called statically","234":"Array index out of bounds","1130":"attempt to add with overflow","100":"attempt to add with overflow","1258":"Array index out of bounds","1514":"attempt to add with overflow","1819":"attempt to add with overflow","1831":"Array index out of bounds","1880":"Array index out of bounds","978":"Array index out of bounds","1679":"Array index out of bounds","76":"attempt to add with overflow","1161":"attempt to add with overflow","1027":"Array index out of bounds","1216":"attempt to add with overflow","637":"Storage slot 0 not allowed. Storage slots must start from 1.","771":"Not initialized","1143":"Array index out of bounds","1405":"Array index out of bounds","1009":"Array index out of bounds","1527":"Array index out of bounds","1771":"attempt to add with overflow","1192":"Array index out of bounds","1704":"Array index out of bounds","1905":"Array index out of bounds","223":"attempt to add with overflow","991":"attempt to add with overflow","1503":"Array index out of bounds","1692":"attempt to add with overflow","1923":"attempt to add with overflow","1101":"Array index out of bounds","1418":"attempt to add with overflow","1485":"Array index out of bounds","1869":"attempt to add with overflow","1089":"attempt to add with overflow","1150":"Array index out of bounds","1912":"Array index out of bounds","949":"attempt to add with overflow","1266":"Array index out of bounds","559":"attempt to add with overflow","687":"Not initialized","1449":"attempt to add with overflow","1589":"Array index out of bounds","1315":"Array index out of bounds","1571":"Array index out of bounds","1839":"Array index out of bounds","1955":"attempt to add with overflow","1431":"Array index out of bounds","657":"SharedImmutable already initialized","1041":"attempt to add with overflow","1297":"Array index out of bounds","1937":"Array index out of bounds","578":"Function set_contract_registered can only be called internally","834":"Storage slot 0 not allowed. Storage slots must start from 1.","962":"Array index out of bounds","1279":"attempt to add with overflow","1535":"Array index out of bounds","1139":"attempt to add with overflow","1200":"attempt to add with overflow","1389":"Array index out of bounds","938":"Array index out of bounds","1651":"attempt to add with overflow","1663":"Array index out of bounds","1377":"attempt to add with overflow","1438":"Array index out of bounds","1712":"Array index out of bounds","1901":"attempt to add with overflow","1109":"Array index out of bounds","1237":"attempt to add with overflow","1493":"attempt to add with overflow","1944":"Array index out of bounds","457":"Initializer address is not the contract deployer","1603":"attempt to add with overflow"}},{"name":"get_participants","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"array","length":10,"type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_participants"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"dkim_registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow_contract_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"509":"Array index out of bounds","119":"Array index out of bounds","695":"Array index out of bounds","494":"attempt to add with overflow","677":"Array index out of bounds","415":"attempt to add with overflow","671":"attempt to add with overflow","473":"Array index out of bounds","342":"Initializer address is not the contract deployer","601":"Array index out of bounds","336":"Initialization hash does not match","589":"attempt to add with overflow","74":"attempt to add with overflow","650":"Array index out of bounds","452":"attempt to add with overflow","769":"Array index out of bounds","757":"attempt to add with overflow","431":"attempt to add with overflow","108":"attempt to add with overflow","617":"Array index out of bounds","541":"attempt to add with overflow","407":"Array index out of bounds","465":"Array index out of bounds","785":"Array index out of bounds","709":"attempt to add with overflow","130":"attempt to add with overflow","642":"Array index out of bounds","441":"Array index out of bounds","630":"attempt to add with overflow","112":"Array index out of bounds","368":"SharedImmutable already initialized","423":"Array index out of bounds","481":"Array index out of bounds","609":"Array index out of bounds","798":"attempt to add with overflow","658":"Array index out of bounds","527":"Array index out of bounds","777":"Array index out of bounds"}},{"name":"get_contract_registration_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_contract_registration_status"],"assert_messages":{"311":"Array index out of bounds","180":"Array index out of bounds","20":"Function get_contract_registration_status can only be called statically","113":"Storage slot 0 not allowed. Storage slots must start from 1.","148":"Array index out of bounds","299":"attempt to add with overflow","340":"attempt to add with overflow","159":"attempt to add with overflow","188":"Array index out of bounds","319":"Array index out of bounds","237":"Array index out of bounds","327":"Array index out of bounds","219":"Array index out of bounds","251":"attempt to add with overflow","15":"Not initialized","172":"Array index out of bounds","201":"attempt to add with overflow"}},{"name":"get_managed_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"boolean"},{"kind":"integer","sign":"unsigned","width":32}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_managed_escrows"]},{"name":"set_contract_registered","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["set_contract_registered"],"assert_messages":{"180":"attempt to add with overflow","369":"Array index out of bounds","14":"Not initialized","139":"SharedImmutable already initialized","206":"Array index out of bounds","238":"Array index out of bounds","357":"attempt to add with overflow","398":"attempt to add with overflow","188":"Array index out of bounds","217":"attempt to add with overflow","246":"Array index out of bounds","19":"Function set_contract_registered can only be called internally","112":"Storage slot 0 not allowed. Storage slots must start from 1.","377":"Array index out of bounds","295":"Array index out of bounds","196":"attempt to add with overflow","385":"Array index out of bounds","277":"Array index out of bounds","309":"attempt to add with overflow","172":"Array index out of bounds","230":"Array index out of bounds","259":"attempt to add with overflow"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":19,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"check_and_register_participant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_notes_internal","get_collapse_hints","pack_arguments_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_escrow_class_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQQKAAIGBAUhAAAPAAU6AQAAHgALAAQkAAcBBgoABwQGBSEAABQABToBAAAqAAAEJAAEBAUAAAQABQAkAQQBBAAABAQCBSoABQckAAcACCoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBAUAAAQFAgUqAgUEKgAABQAABAACACoCBAUkAAQBCCQABAMEJAAEAAcqAAcDIAArDAAEAwQHIQAANAAHIAAuKgEFBCQABAIFAAAEBAIGAAAEBgUHKgEHAyMqAQUHHAAHAwkAAAcGCQosAAAAAAoAAAAJJAAEAwsMAAQDCwwhAAA8AAw6AQAAKwAABwgDJQAEAAQIBCIAAABKKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMICQ4ABAMJByEAAEcABzoBAAAqAgoFKgAJAyAAKysBCAMIBgsABAgGAAIIByEAAE4IByAAUCsACAMIBSAAXisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABcCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAFMlAQQAAQgFIABeIysAGMoYyg==","debug_symbols":"1ZrdbuIwEIXfxddc2B6PZ4ZXWa2q0EIVKQoV0JVWiHffpJuEtIkctZTKc4MwHHs+/DPHjHI2T9vN6/NDWe/2R7P+dTbV/rE4lfu6aZ0vK7M5lFVVPj+MPza2feE3+fGlqNvW8VQcTmbtyIeV2dZP7VsIzQC7stqaNdnLaiIWoE4rSIPUYZzRBu+kEwfv+ar2cyNHdtCpI3t5p/69MnIzurNuENuR+Afgnb194qkPILI08c6HXuy8yAI7O+wx2I3H7tjdN7I3E/8evg3g7x0A7h0g3DsA3hwAUfoIGO3SniD22KmJA0/2RPwkT9uHvtCHv9BHPt/Hz57PJtf1KUDCaMrms0tz7ocAdrSCAHOrIbEfGkXswmoggevVBP7janinmt6rpgfV9EE1Paqmj6rpSTU9q6YXzfSg2mtBtdeCaq8F1V4Lqr0WVHstqPZaUO21IfdTizzQ46RyE3LfORQGerYT+p/fOUMtKVqLC/RMsS888VVL7g2d9aKLWnS0etFzv9sk8wxmniXZDTmevZvQh8znXmKKPve7DcOV3i+oJQAP2DT9rar9DHO/CaXpc686pOlzrzok6WPuVYc0fe5VhzR97s6cps/9/0uaPndnTtPn7sxpetVeG1V7bVTttVG115JqryXFXntpmn+KQ1lsqm33MNjutX4cPRt2+vvy/5tG/A8=","brillig_names":["get_escrow_class_id"],"assert_messages":{"14":"Not initialized","59":"Array index out of bounds","70":"attempt to add with overflow","19":"Function get_escrow_class_id can only be called statically"}},{"name":"register_participant","is_unconstrained":false,"custom_attributes":["private","interal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_participant_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/+1dW4gkVxmu7p6evsz2dO/O/bo9sy8GjPRsZnYXjLCb9RYwK4pKAgrO7kyyi7sz6+yMyYq+JZA8CUbxAl7A+KSQgIKixgcNxDeDyZuCYhBECArx/qDO6alv+utvTl26qs+2CVUwVHf1fzvff+o/5//PqZqcd3Ac2//L+Z+L/jnvHT1Ac94/t9IdK32U1XJpZ66PdubJxiphXdj/G/LxH97/K+3/lff/Kj7dCPmqzTxEzNpwjxjiCjeCL1jk/I2+LPnn9d3dzRs3d5u7280be9d3r928frv56LXdq83tT23uPHx9+1EW8C/6MuOfL+zsrN9uXtva2Hysub2329x+uHl5e29r4xYzctN6YqwR4/xRk9c3NoKtncqnbO5cUqvfklbzW1M0u5XU6rMplL49qdL7Uih9d1KlD6RQ+oGkSh9MofSjSZVeSaH0kaRKt1Io3Umq9DYxnvDPN/duXQ3meDztXfpkUlufTgHQl5Iq/UYKpd9KqvQ7KZQ+m1TpD1Io/XFSpT9PofTFpEp/mULpy0mV/jqF0t+n4P1z2vv19RTK/5EUrf+kUJovJFR6rJBc6d3EmwjmlaRW35vC6vNJlb43hdL3JVX6oRRKH0yq9OMplG4kVXo9hdKbSZU+lkLpZ5IqfTyF0ieTKv18CqVfScH7taQGP5OU8dkerT3MfF/2GU2GzCm7yaLP+99b6Y6VChnaV9nn1lpGdtGN3aeN7GE3slumMnGxfCAL9kOXcck7/d9whv6a/7tH/DWvUyUBvTmdINuhw/NpIQM+d9bWc6trRnbJhexWa72Nh+DYxqPcjam5VvSvwRbz9XuFzu/vL3fwMcfY/t+7/Gtclhr1Pz+yuXvf9e0rn7i0d+Py5g7fjoykJy3Xw0g80ZF4cXtrd2f9yu6FjY2dzVtdN3nJItULkFgliVfXr23dv8Fc5WSSPrK5c+va9hZzVWJKqpEkL4CH0eF+OUL0/ew7DbJphOw8JnZV/Ov9t2FtJQwD6KySTf2OzTnSA/3HxAfm91GxyWBSJ5v6WTpukD7WMSp2joqdxqYG0Zx3YE+jB3syvmA/HSf6fo6rbNPxhG2pJ+TLfNxfvsx/mf8yPDP/ZXzJ+DL/Zf7L8Mz8l/El48v8l/kvw3Pw/jP+QN2J62Bat6pZZIG+RmfmgyxPZHkWWWpDnWxlu+K0EfSjZBfzmcPUSbiG38c6yWpYm6GzSja5qDueiMDJYDImNhlMxsmmfP9sateOoI91jImdY2JnP/nU531sX3sdjm3qk9wzxk8TXvdhdE1SO+5U34XOKtnkou9Oin7o4r47JTY16BrHxCmRNSWy+snnzi8bqzWxCfqm3ehbC+sH0Fklm1z0g2kv3Aem/TOO8M6RbOifkfYbn8zKNcM3538u+nygmSH7QTNHfEX6/rp/bhA/909c80QHsDGrpK8RvWKp44GtvTaa2Rg0c0IzYaGZjyFnIQbNYgyakzFomjFoloRG+6PpD8te92H66CmScafuUeiskk0u7tFTon9ZMDFzMayI769yX9re3Txcd2f+V+gazto+0DToGo+5PD9Afy/QtRnLtVnLtTnLtXnLtQXLtUXLtZOWa025Zo4R+nycPvNcjscX9EcbLh7R5b2jeOI629TP3z2Hsvv9O64NBXzOy/Wwvmmbe+s9YZtfgIfzMvRn0Bbo87jYVCAZLLtAtJrvOMyBrPM4Gw6az02KrXVqD2gdzn/PVbzuvCzXR0zcjQWt9j6wJTey7zGym25kn27vHfNloe+buct4rqMP8RPzKdCP0HXQ/CHfkTHly6jT76gzRNU90M64dQ/bvqa65wKz1bNh4z50ut7XVBf9tn1NNbGJ6zw8l41Ta8r4wvmOv0HszPyQ4Zn5IfNDhued5cv8kPkh48v8kPkh48v88P/Lx/U/5M2cx2veXbfI4j0Uni+b+SDLE1meRZbaUPOO1jriygIf2uju2a/WqpG96Eb2GSN7wY3sswaPZcHJ1LJ+RPUwrEWgHgZ6roeBpkH1sOepHoY1jjqd4/jatH3WTdsvh/Uj6HRd19L1TVtda0ZsatA1vu+D1o/zGd+bls/cQ+gX3E+j1us5PuK3mvBBlieyPIsstcHIQkzguPI7iitoC+LKPLUJ10Hzp1xHxqsUV/B7leytkq08ZjGedQtfnb4zJgWhrXkdHCBnJEGbXqM2VfNH28Rxb5psZ7kYFxyuUbV4/RCYTor+ItH8nXyMtUC8zXFa+AzNhMgGD487EyKb1zw9wsDN/qDVM9yWorRliq6D5t8hdrIstBvjY9iaLXig1/SVSbFB91T2sR+s56St3A8Zm0Mf5IMxaN9X/kaNGbJ9qOzE9stG7E/p/RDAsEj6FG++50CjfgPP4fyHaHivoO7b4nveFvshj9fLmZdpOOaAZjQCe+XV2IzfEW+WpU0O52XteDNHWPD4NUltBc10/ihGBcGIY+OMyAbPMsmeEdlB8WbOCQZrLW6L3mu83w808yF2siy0G+vT3Ld1H92hbP/Mcw22AdeWaO7/W/LJG6kv3eWwL90V4SOds9liAOzUGDBracvdEX3XzV7eg76r8yCNf4zLSgQuGhttfVf7t86hOAfldgdh3rToD8McNOcGiLmOzTbMQXNvBOY6FsbBfEpw4blsHMyXLPrDMAfNxQFiPkH2BGEOmvdEYD4huMTBfEJw4f1rcTCvWfSHYQ6aSwPEXOfhNsxB88EIzHU+FwfzccGlTrjEwfyURX8Y5qB5aICYj5E9QZiD5mMRmOuzVHEwHxNceL9qHMwXLfrDMAfNxgAxr5A9QZiD5moE5hWvG5c4mFcElzrhEgfzBYv+MMxBsx2BOb+nzvWce5b04jpobvVhzq1+mRZcDObzYkNQzS/I9hGL7Z8Osb3uddcYgnTWySa2A89fYL4PGq5VuXoXp5GHdytiTj4s+otE80S+2w5zYL5fFr6c19kLPER/aBNkF0V2UD92g8FBrapE9nBbhi0YPBWzTjNNtrup06ye1TrNIa6kr0T2cf/i+2pYaPg9oeZoEA3n8HrPgj4sBwMN33+g+cJA6gf2PjAt7eU+8OWIWBYHc60flASXBtEgLzA+LhMekKU5H2SwH3RMmRbZPKZ8cyBjit0PXO/EddA806MfONZ6nn1MKQkuDaJBrsA1UX6jrOaBkMF+4NjCNJyPgua7EX5g3a79MCXtZT8816MfbLXistCUBJcG0SB/4PVenmNpbggZYfXhKZHN4/8PBzKvtftBcyf2w0969IOumdpieklwaRANcgrjB+DHz3xrvggZ7AetF02IbK4XvRDhBzfPm9v9MC7tZT/8okc/6LPKtpheElx4fRt5hvED8OO1Pc0hbc8cag1pXGRzDemlCD+4XFdUP4xJe9kPr/ToB9uz8BrTS4JLwzu6rmX8APz4XRz6XD1yBPaD5tuzIpvz7d+EtI/3h3GfOSbygtYfYOOyxUad0y1bbATNqxHz5WWLPbyfKuj5Qo4PoPkjral8rtCRgXpGXmSgtlQh/S5yLOREyIG0tlUkmr+QL/j59yFqB9fEgtZrinSeE9lB94P6vul/5noQ7BwWmnlLW/4aESfc7NM7eD8I42Crs/Ba3D97XGtCn81bcAGN3rfmXlwUG+KuYynmtnoQaP47kByq+50sWlPhHOrwPQ+FYDtt458Nc82hbOtYC2JDgei0/xW8o++DAc+CyAaPi3WxWgg2vB/BI/me2ICD952BD2MSrzlNWGyFLNveOtBzboo4zHvYJigO67t3QL9E10HzxUJHxnShYy94+L6at7RB4zmvq2sbmFb7lK0Oqf4Gz3GLTbMhfDbZir3OEXhtdiaEr5d13ybJ1rq57fl81qdjKu9TcFMnaHXVnjHuVUQ/529voz6I+VtBMOB9CmWRzXNOnMsiexBrHkG1EltueDoipqBueZJsd1O3XFvpV90yKFfl2s3hHi/i03dO2eo0kKV1Gp6PguYdEX3Azf+Asq/BwD7uG6C5EDHmBq1p5S24gGZacGkQDedDWscLW2djP3BewDRcDwTN/RF+cDPHt/uhIhiwHx7o0Q+2Oo3O1Xm9wRw83mO84DGaxw4d8yAjrE4DGtvc7sMRfnBTp7H7QcdK9sNDPfohznit6wZcp+F98sDvJMnSuAQZ7AfIGBYajkugWY/wg5t9hOFxiee7oNnsQ1zSuZUtLoGG6/hzhAdkxYlLWj+2xSXQ3BjgHEHzYNjH/gHNJyP8EDTvDRuTdU8Aj8nIhzkucX4aJy5BRlhcAs3tCD+4eSbR7oc5wYD98Nke/WCLS/ruTc3FG0TD9eM7EZeeGGBcYryD4hJonorwg2IcJy4tCi4cl1BjsMUlfg6Z669c51Q/IV8Ju1+KYg+3/+mInEF5+d1wnKfyvCsoT7U9v6Wx1TaGfzWiL7nJQQ/qXbwWGrRWDZqvR/QlXf+01bt0XCoLLrwXqUJnN+vErXty3tF9d/AVYwOab8fMQbnvO3rGaVVz0MO+RfoUb9s8XP2m8ZPXrXmcD5pbhq2znBQ5XC97LgRbzgVs9Tq+3ybo/2KX3GDfjsNl+t/FQ6QL+OeJpkx2FOn78xT7KuSIdi0X//PYP5t7Y9j/XCkH8w0JX4Nohrk+IXwlshtYft+3b0T0FyxyUGsaFjlFovkZ1URfoL5bFLnm919ZfseR6/7aVS9G+9ux06H/q+J/6Bqi9oOmKv7H95fI/yMB/q+Q/9FvRsrBfEXhaxBNOaTfVCz+f9G3r+p1x5U+YrnCvjb97H9pUM0h848AAA==","debug_symbols":"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","brillig_names":["get_participant_escrows"]},{"name":"register_escrow","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_nullifier_membership_witness","get_contract_instance_internal","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","get_key_validation_request","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"owner","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"owner","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b3dd3286"},{"kind":"string","value":"ParticipantNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseDkimRegistry"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrow"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrowRegistry"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"managed_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"participants","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"participant_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"contract_registration","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::register_escrow_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::register_escrow_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::get_contract_registration_status_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseEscrowRegistry::get_contract_registration_status_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::check_and_register_participant_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::check_and_register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseEscrowRegistry::get_escrow_class_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseEscrowRegistry::get_escrow_class_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::register_participant_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow_contract_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseEscrowRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::set_contract_registered_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::set_contract_registered_abi"}]}},"file_map":{"100":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"102":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"105":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"108":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"109":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"112":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"113":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"115":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"116":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"120":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"132":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"133":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"138":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"139":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"148":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"150":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"154":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::{NoteInterface, NullifiableNote}}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = unsafe {\n            get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier)\n        };\n\n        // 2) First we prove that the tree leaf in the witness is present in the nullifier tree. This is expected to be\n        // the leaf that contains the nullifier we're proving inclusion for.\n        assert(\n            self.state.partial.nullifier_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n\n        // 3) Then we simply check that the value in the leaf is the expected one. Note that we don't need to perform\n        // any checks on the rest of the values in the leaf preimage (the next index or next nullifier), since all we\n        // care about is showing that the tree contains an entry with the expected nullifier.\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, let N: u32>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N> + NullifiableNote;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, let N: u32>(\n        self,\n        note: Note,\n        context: &mut PrivateContext\n    ) where Note: NoteInterface<N> + NullifiableNote {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"156":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"159":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LTE, rhs), \"Expected lhs to not be less than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n    }\n}\n"},"160":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"162":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"165":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"166":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"167":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"170":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"171":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"172":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n"},"173":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"175":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"176":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"178":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"179":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"180":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"181":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"193":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"195":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"196":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"205":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"211":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"212":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"213":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"215":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"216":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"218":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"238":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"240":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"243":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"269":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"290":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"294":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"313":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"335":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n  value: [Field; N]\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n"},"339":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/recurring_entitlement_note.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator};\nuse dep::aztec::{note::utils::compute_note_hash_for_nullify, oracle::random::random};\nuse dep::compressed_string::CompressedString;\nuse dep::aztec::macros::notes::note;\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, PrivateContext};\nuse dep::aztec::keys::getters::get_nsk_app;\n\n// unique ids for each verifier type\nmod HOSTING_VERIFIER_TYPE {\n    global LINODE: u8 = 1; // supported\n    global HEROKU: u8 = 2; // todo: supported\n    global AWS: u8 = 3; // todo: supported\n    global GCP: u8 = 4; // not supported in mvp\n    global AZURE: u8 = 5; // not supported in mvp\n    global HETZNER: u8 = 6; // not supported in mvp\n    global DIGITAL_OCEAN: u8 = 7; // not supported in mvp\n}\n\n// trait OwnedNote {\n//     fn new(\n//         owner: AztecAddress,\n//         external_nullifier_hash: Field,\n//         npk_m_hash: Field,\n//         max_value: U128,\n//         verifier_type: u8,\n//     ) -> Self;\n// }\n\ntrait OwnedNote {\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self;\n}\n\n#[note]\npub struct RecurringEntitlementNote {\n    // the user that is allowed to use this entitlement\n    owner: AztecAddress,\n    // // the external nullifier that the admin can use to nullify the note\n    // external_nullifier_hash: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // // the type of email verifier that should be used for this entitlement\n    // verifier_type: u8,\n    // random entropy to make the note private\n    randomness: Field,\n}\n\nimpl NullifiableNote for RecurringEntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for RecurringEntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.owner == other.owner)\n            & (self.max_value == other.max_value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for RecurringEntitlementNote {\n    // fn new(\n    //     owner: AztecAddress,\n    //     external_nullifier_hash: Field,\n    //     npk_m_hash: Field,\n    //     max_value: U128,\n    //     verifier_type: u8,\n    //     randomness: Field\n    // ) -> Self {\n    //     Self {\n    //         owner,\n    //         external_nullifier_hash,\n    //         npk_m_hash,\n    //         max_value,\n    //         verifier_type,\n    //         randomness: unsafe_rand()\n    //         header: NoteHeader::empty()\n    //     }\n    // }\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self {\n        Self {\n            owner,\n            npk_m_hash,\n            max_value,\n            randomness: unsafe { random() },\n            header: NoteHeader::empty()\n        }\n    }\n}"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"359":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"360":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"70":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod types;\n\n#[aztec]\ncontract ZImburseEscrowRegistry {\n    use dep::aztec::prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map};\n    use dep::aztec::macros::{storage::storage, functions::{private, public, view, initializer}};\n    use dep::aztec::note::{\n        note_viewer_options::NoteViewerOptions, note_getter_options::NoteGetterOptions,\n        note_getter::{get_notes, view_notes}, constants::MAX_NOTES_PER_PAGE\n    };\n    use dep::aztec::oracle::{get_contract_instance::get_contract_instance, header::get_header_at_oracle};\n    use dep::aztec::keys::getters::get_public_keys;\n    use dep::aztec::utils::comparison::Comparator;\n    use dep::aztec::encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note_unconstrained, encode_and_encrypt_note};\n    use dep::address_note::address_note::AddressNote;\n    use dep::z_imburse_escrow::ZImburseEscrow;\n    use dep::z_imburse_dkim_registry::{ZImburseDkimRegistry, BULK_KEY_LENGTH};\n    use crate::types::{\n        escrow_registry_definition::EscrowRegistryDefinition,\n        participant_note::{ParticipantNote, NAME_LENGTH}\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        // todo: decentralize dkim registry functionality\n        definition: SharedImmutable<EscrowRegistryDefinition, Context>,\n        managed_escrows: PrivateSet<AddressNote, Context>,\n        participants: Map<AztecAddress, PrivateSet<ParticipantNote, Context>, Context>,\n        participant_escrows: PrivateSet<AddressNote, Context>,\n        contract_registration: Map<AztecAddress, SharedImmutable<bool, Context>, Context>\n    }\n\n    /**\n     * Initialize the Z-Imburse registry contract by setting the class ID of the escrow contract\n     *\n     * @param contract_class_id - The class ID of the escrow contract that all escrows must be instances of\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        dkim_registry: AztecAddress,\n        usdc: AztecAddress,\n        escrow_contract_id: Field,\n    ) {\n        let definition = EscrowRegistryDefinition::new(\n            dkim_registry,\n            usdc,\n            escrow_contract_id\n        );\n        storage.definition.initialize(definition);\n    }\n\n    // /**\n    //  * Entrypoint for registering a DKIM key in bulk in the DKIM registry\n    //  * @dev the DKIM registry is separate from escrow registry so both can import it\n    //  *\n    //  * @param dkim_verifier_ids - the verifier IDs to register the DKIM keys to\n    //  * @param dkim_key_hashes - the hashes of the DKIM keys\n    //  */\n    // #[public]\n    // fn register_dkim_bulk(\n    //     dkim_verifier_ids: [Field; BULK_KEY_LENGTH],\n    //     dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    // ) {\n    //     // check admin is sender\n    //     let definition = storage.definition.read_public();\n    //     assert(context.msg_sender() == definition.admin, \"Only admin can update dkim\");\n    //     // forward call to DKIM registry\n    //     ZImburseDkimRegistry::at(definition.dkim_registry)\n    //         .register_dkim_bulk(dkim_verifier_ids, dkim_key_hashes)\n    //         .call(&mut context);\n    // }\n\n    // /**\n    //  * Entrypoint for registering a DKIM key in the DKIM registry\n    //  * @dev the DKIM registry is separate from escrow registry so both can import it\n    //  *\n    //  * @param dkim_verifier_id - the verifier ID to register the DKIM key to\n    //  * @param dkim_key_hash - the hash of the DKIM key\n    //  */\n    // #[public]\n    // fn register_dkim(dkim_verifier_id: Field, dkim_key_hash: Field) {\n    //     // check admin is sender\n    //     let definition = storage.definition.read_public();\n    //     assert(context.msg_sender() == definition.admin, \"Only admin can update dkim\");\n    //     // forward call to DKIM registry\n    //     ZImburseDkimRegistry::at(definition.dkim_registry)\n    //         .register_dkim(dkim_verifier_id, dkim_key_hash)\n    //         .call(&mut context);\n    // }\n\n    /**\n     * Check the authenticity and deployment status of an escrow contract and register it in the Z-Imburse registry\n     * @dev the header will not include the contract address and the contract \n     *\n     * @param escrow_contract - the address of the escrow contract to register\n     */\n    #[private]\n    fn register_escrow(escrow_contract: AztecAddress) {\n        // check that the contract has not already been registered\n        let registration_status = storage.contract_registration.at(escrow_contract).read_private();\n        assert(!registration_status, \"Escrow contract has already been registered\");\n\n        // check that the contract admin is the sender of the message\n        let escrow_admin = ZImburseEscrow::at(escrow_contract).get_admin_private().view(&mut context);\n        assert(escrow_admin == context.msg_sender(), \"Escrow contract admin does not match sender of message\");\n        // todo: check that dkim registry matches\n\n        // check that the contract has been deployed\n        let header = context.historical_header;\n        header.prove_contract_initialization(escrow_contract);\n\n        // check the contract class ID\n        // THIS IS NOT CONSTRAINED THE ORACLE CAN JUST LIE ://////\n        let contract_class_id = get_contract_instance(escrow_contract).contract_class_id.to_field();\n        let expected_class_id = storage.definition.read_private().escrow_contract_id;\n        assert(\n            contract_class_id == expected_class_id, \"Escrow contract class ID does not match expected class ID\"\n        );\n\n        // privately add the escrow contract to the list of managed escrows\n        let admin_keys = get_public_keys(context.msg_sender());\n        let mut escrow_note = AddressNote::new(escrow_contract, admin_keys.npk_m.hash());\n        // use unconstrained - why would you lie here\n        storage.managed_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, context.msg_sender())\n        );\n\n        // publicly add the escrow contract to the list of participant escrows\n        ZImburseEscrowRegistry::at(context.this_address()).set_contract_registered(escrow_contract).enqueue(&mut context);\n    }\n\n    /**\n     * Publicly set the contract registration status\n     *\n     * @param escrow_contract - the address of the escrow contract that has privately been constrained to be valid\n     */\n    #[public]\n    #[internal]\n    fn set_contract_registered(escrow_contract: AztecAddress) {\n        storage.contract_registration.at(escrow_contract).initialize(true);\n    }\n\n    #[private]\n    fn check_and_register_participant(participant: AztecAddress, participant_name: str<60>, escrow: AztecAddress) {\n        // check that the sender is the admin\n        let escrow_admin = ZImburseEscrow::at(escrow).get_admin_private().view(&mut context);\n        assert(escrow_admin == context.msg_sender(), \"Sender is not the admin of the escrow contract\");\n        // check that the escrow address is registered\n        let registration_status = storage.contract_registration.at(escrow).read_private();\n        assert(registration_status, \"Escrow contract has not been registered\");\n        // check if the participant has already been registered\n        let options = NoteGetterOptions::new().select(AddressNote::properties().address, Comparator.EQ, participant).set_limit(1);\n        let participant_exists = storage.participants.at(escrow).get_notes(options).len() == 0;\n        // if the participant has not been registered, enqueue a private call to register the participant\n        // do this instead of if statement here to make adding first time expensive but cheap if already registered\n        if participant_exists {\n            ZImburseEscrowRegistry::at(context.this_address()).register_participant(participant, participant_name, context.msg_sender(), escrow).call(&mut context);\n        }\n    }\n\n    #[private]\n    #[interal]\n    fn register_participant(\n        participant: AztecAddress,\n        participant_name: str<60>,\n        admin: AztecAddress,\n        escrow: AztecAddress\n    ) {\n        let admin_keys = get_public_keys(admin);\n        let participant_keys = get_public_keys(participant);\n        // add escrow to the participant's set of escrows\n        let mut escrow_note = AddressNote::new(escrow, participant_keys.npk_m.hash());\n        storage.participant_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note(\n                &mut context,\n                admin_keys.ovpk_m,\n                participant_keys.ivpk_m,\n                participant\n            )\n        );\n        // add the participant to the admin set of participants\n        let mut participant_note = ParticipantNote::new(\n            participant,\n            participant_name,\n            admin_keys.npk_m.hash()\n        );\n        storage.participants.at(escrow).insert(&mut participant_note).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                admin_keys.ovpk_m,\n                admin_keys.ivpk_m,\n                admin\n            )\n        );\n    }\n\n    // todo: add ability to remove participant\n    // todo: add ability to remove participant escrows by looking up nullifications\n\n    /** Get the class ID that all escrow contracts must match */\n    #[public]\n    #[view]\n    fn get_escrow_class_id() -> Field {\n        storage.definition.read_public().escrow_contract_id\n    }\n\n    /** Get the registration status of an escrow contract */\n    #[public]\n    #[view]\n    fn get_contract_registration_status(escrow_contract: AztecAddress) -> bool {\n        storage.contract_registration.at(escrow_contract).read_public()\n    }\n\n    /**\n     * Get a page of the list of escrows administrated by a given address (private)\n     *\n     * @param admin - the address of the admin\n     * @param page_index - the index of the page to retrieve\n     * @return managed_escrows - the list of managed escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_managed_escrows(\n        admin: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], bool, u32) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.managed_escrows.view_notes(options);\n        let mut managed_escrows: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                managed_escrows[i] = notes.get_unchecked(i).address;\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (managed_escrows, page_limit_reached, notes.len())\n    }\n\n    /**\n     * Get a page of the list of escrows participated in by a given address (private)\n     *\n     * @param admin - the address of the participant\n     * @param page_index - the index of the page to retrieve\n     * @return participant_escrows - the list of enrolled escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participant_escrows(\n        participant: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.participant_escrows.view_notes(options);\n        let mut participant_escrows: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                participant_escrows[i] = notes.get_unchecked(i).address;\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (participant_escrows, page_limit_reached)\n    }\n\n    /**\n     * Get a page of the list of of participants in an escrow (private)\n     *\n     * @param admin - the address of the escrow\n     * @param page_index - the index of the page to retrieve\n     * @return participants - the list of participating addresses\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participants(\n        escrow: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], [[u8; NAME_LENGTH]; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.participants.at(escrow).view_notes(options);\n        let mut participants: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        let mut participant_names: [[u8; NAME_LENGTH]; MAX_NOTES_PER_PAGE] = [[0; NAME_LENGTH]; MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                let participant_note = notes.get_unchecked(i);\n                participants[i] = participant_note.address;\n                participant_names[i] = participant_note.get_name();\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (participants, participant_names, page_limit_reached)\n    }\n}\n\n"},"71":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow_registry/src/types/escrow_registry_definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal ESCROW_REGISTRY_DEFINITION_LENGTH: u32 = 3;\n\npub struct EscrowRegistryDefinition {\n    dkim_registry: AztecAddress,\n    usdc: AztecAddress,\n    escrow_contract_id: Field\n}\n\nimpl Serialize<ESCROW_REGISTRY_DEFINITION_LENGTH> for EscrowRegistryDefinition {\n    fn serialize(self: Self) -> [Field; ESCROW_REGISTRY_DEFINITION_LENGTH] {\n        [self.dkim_registry.to_field(), self.usdc.to_field(), self.escrow_contract_id]\n    }\n}\n\nimpl Deserialize<ESCROW_REGISTRY_DEFINITION_LENGTH> for EscrowRegistryDefinition {\n    fn deserialize(fields: [Field; ESCROW_REGISTRY_DEFINITION_LENGTH]) -> Self {\n        EscrowRegistryDefinition {\n            dkim_registry: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            escrow_contract_id: fields[2]\n        }\n    }\n}\n\nimpl EscrowRegistryDefinition {\n    /**\n     * Create a new definition for a Z-Imburse escrow registry contract\n     *\n     * @param dkim_registry The address of the DKIM registry\n     * @param usdc The address of the USDC token\n     * @param escrow_contract_id The ID of the escrow contract\n     * @return The new escrow registry definition\n     */\n    pub fn new(\n        dkim_registry: AztecAddress,\n        usdc: AztecAddress,\n        escrow_contract_id: Field\n    ) -> Self {\n        EscrowRegistryDefinition { dkim_registry, usdc, escrow_contract_id }\n    }\n}\n "},"73":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow_registry/src/types/participant_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator, traits::{Serialize, Deserialize}\n},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\nuse dep::compressed_string::CompressedString;\n\nglobal NAME_LENGTH: u32 = 60;\nglobal NAME_SERIALIZED_LENGTH: u32 = 2;\n\n#[note]\npub struct ParticipantNote {\n    address: AztecAddress,\n    name: [Field; 2],\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n\nimpl NullifiableNote for ParticipantNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for ParticipantNote {\n    // does not check for participant name\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl ParticipantNote {\n    pub fn new(address: AztecAddress, name: str<NAME_LENGTH>, npk_m_hash: Field) -> Self {\n        let randomness = unsafe { random()};\n        let name_serialized: CompressedString<NAME_SERIALIZED_LENGTH, NAME_LENGTH> = CompressedString::from_string(name);\n        ParticipantNote { address, name: name_serialized.value, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_name(self) -> [u8; NAME_LENGTH] {\n        CompressedString::<NAME_SERIALIZED_LENGTH, NAME_LENGTH> { value: self.name }.to_bytes()\n    }\n}\n"},"75":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe { random() };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"89":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"90":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"92":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"93":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"96":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"98":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"}}}