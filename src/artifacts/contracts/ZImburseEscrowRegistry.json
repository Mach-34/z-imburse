{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseEscrowRegistry","functions":[{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"7Z3djuy2tYTfZV/7QiQX//wqBweBkziBAcMOYucAB0HePT0zW+yekbZotailGrJuEjvRCGt91ZKqKIr895e//vjnf/39Tz/98rdff/vy/f/8+8vPv/7lh99/+vWX27/9+z/fffnzP3/6+eef/v6nx//5y/TyH+n18N/+8cMvL//22+8//PP3L99L+O7Lj7/89cv33tz++G8//fzjl+/j9J///e5L3ne4TDuO/25xYLY2fT0025DLwca+nd2cenZ76tndqWeXU8/uTz172PkbizuP3/mTl52/eT/tPN7sPN7uPN7tPF52Hn/s12CmKF8PNWYK5WBr3OvZw6lnj6eePR06e7L565FJ5OHcae1YE+djvXt37EsdGaOOMIHUYUDqsCB1OJA6BKQOD1JHAKlD7/7ho5vPGuVjHVHvevFpPtbntKhD73oJMusSwkKXKCB1eJA6AkgdEaSOBFJHxqgjTSB1GJA6Dt5Pv/nMWHPKOdydsv/olJODqURgKgFxIQnEhaQIUgdIqksgqS6DpLrsMFxqDhguNYO4kAziQjKICzETiA0xE4gPMZNFKQQk2ZlJUAoByXa34VUUY3Yb9cUpJeGUAuJHbsWhFAIyzmwMyECzMSAjzcYISiERw7XeXr5i2FZjUVyJRXElFsWVWBRXYlFciQUZcjYWJO0ZCxL3jEXJe27S82jZ29mj5XA/sclvHs0ZnFIsTinH7q8m2jILJDqpHOyNmQ/27qEWH1aOFmvmX6FYe39WvkyVWvkZJjM/4cPt5/vu6Nc+RbNPXw72KVX6NGJnOY28nG8+OvrVS3OeP5Yep4/djn3t0g/RZRiiyzhEl2mILvMIXR6c8Xxql8bfuzTLys2nrdx+2srdp61cPm3lwP6gUjnwM79SOfBzvAxGGT/V7v02zebdTfea/VvOE+DHeLsmgZ/izZr0wA/xXU3KfFXaEBfjEh74gd+wS2Bz0LBLYCOxq8s4O3GblyNpuz5N+rxd4hqUx8Eru3zMe9wnoE/3ynOuRrxWr/c87uPyIiIB99l6FRHc5/BVRHCf2VcRwX2+X0VESOQDEWDfcBER3AGTq4jgDsRcRYSe9SMRetYPRCI960ci9KwfidCzfiRCz/qRiJDIByL0rB+J0LN+JELP+pEIPesHImnAp+/29xxpwDvr9oclacA76/bM9DTgnbVCZMA7a4XIgKMB20TygKMBFSIDjgZUiAzoRypEBhwNqBAREvlApBfPuufjNBun+cw2PRwd8huTXlxrSya9+NaWTHpxrnuYOFc+7HTil0x68a7tmNipF/fakkkv/nUPE5nuH73ZacmkFwfbkkkvHrYlExmRiS9LYcnDR6CFyYg+tsZkRB9bYzKij/Xl+2njxSyZjOhja0xG9LEVJmbAdxebb/xu/0UiH4gM+O5im4gd8d1F+Wgt2LAkMuK7i20iI7672CYy4ruLbSIyIJHpTiQuiQw436ZCZMT5NttERpxvs01kxPk220RGnG+zScSN6Fm3iQzoWTfndlo34vzfbSIDetYKESGRD0Q4R/wjkQE9a4XIiOOs20RGHGfdJjLiOOsmEeBlgK8iQs/6kQg960ci9KwfiQiJfCBCz/qRCD3rByL+KiLZV4jEML+djfH+VsV/LTt+zrI1/XDw5RcVHtbB/cb2OT7PE04kmHvh69vnZFtmnGQbFtvnWNW1PC/sU3WFziv7NIP0aQfp0w3Sp8D2GbwvfcZpWbn/tJWHT1t5xK3chnvlpnJVPFqQu11xb5tP24DrQVp2qepA4r3LbGtdpvLCUtLDG8v1LncVUrsdqi7O+GmgGEJZQrGEsoTiCGUJRQhlCcUPCMXdYv/Xg517mAhrXF479WTK9HszWXP/yMXk8AYxEOJxiJEQj0NMhHgc4oiOvDXENKKDbw5xRMffHOKICaE5xBETRXOIQojHITKxNIDIxNIAIhNLA4hMLA0gMrEch5iZWBpAZGJpAJGJpQFEJpYGEIUQj0NkYmkAkYmlAUQmlgYQmVgaQGRiOQzRTUwsdYjW5DtEZ99BXDnemHnmpTHhXsqtqlfijDfaxJmFtIkzODUnLvm+ZnSOC+JC4srEGcm0iTO/NSce7ocHCQviDHvaxJkMtYkzRioTN8yc2sSZObWJM3NqE2fm1CYuJK5MnJlTmzgzpzZxZk5t4syc2sSZOZWJW2ZObeLMnNrEmTm1iTNzahMXEm9OPJQdVcPD2q0zcWZObeLMnNrEmTm1iTNzahNn5lQm7pg5tYkzc2oTZ+bUJs7MqU2cfvwPEH/80CT5d8RfIdJ+1CHeLu4C0Ums/GxtTPMkfBsftlH5+rMV2o/WxE0sZzcxLiYoC+2HNnHaD23iHA5sTjxFOx+esnkkvjw4ufmen9zyls9RlUvFuZ2wGMnJm4U89EDXyrP91aKnYYKWh+4KWh5aMWh5OGwELY9QHmR5mHqg5eEILbQ8nF6hKM8rcQ4EaBNntm/+fmOa5tEUe3uj95F4YFzXJs4Erk1cNVRbdyfuK8RvVOajbTSpcnR9IULdXbov7VSG6dQP02kYptM4TKdpmE7zKJ3qbgp+aadmmE6H8UhxGI+ku9H2pZ0O45HiMB4pDuOR4jAeKQ7jkdIwHikN45HSMB4pDeORdLcCvrTTYTxSGsYjpW48UtOdM1I3hqotlm7cV1MsuRur1nSjiNyNr2uLpRsT2BZLN46x6Upbuvu2fh4s3XjRtli6Ma5tsYzqcitYRnW5FSyjutxNLDKN6nIrWEZ1uRUso7rcCha63FUsQixrWOhyV7HQ5a5ioctdxUKXu4qFLncNi6HLXcUyrMvdWpNQzLAudxvLsC53G4sQyxqWYV3uNpZhXe42lmFd7jaWYV3uNpZhXe4mFjusy93G0o9v2V4HWmw3D5eWizWL7ebh0nK1WbHdPFzaYunm4dIUi+smFF+0gLC4bhLRZav8ihv0CddwxTBxoz4OWzIc9dnZkuGoD9qGDKWbyHchw27eglzIkO7wOMNuxikuZChkuFxAU4TRYxXLqONlmwsjigwaEGpYBvX8NSyaNj6WUm7DVe5doy+1qO4yU6vFANWiac/S/QmdZKr9GH0sp/bpPmb28ln7a+Wapijd3yOlFCqV38YA5mfLLco+9Lm6LG7IYS4k5JjfHf3ap2j2KfHeZ+12cXurNLcZzFIfr/rLknvdefkrD0C1RKBajj247O0JNN//TU6VWux9aWmbH64h51aO9rmc2ufqNeSjm899+0e7vIbyGH0eXJz98/RpBunTDtKnG6TP2EufPpU+/dKzxG7uQ8WD+pimZZ/A9yFfXOU0+UqfJvsyGpIfvJzJb14uAt+HmvYJfB9q2qco9ulc8aBO8rs+X2vxQLUEoFo0Pas35ffiXar8FoMzc0oMzuVavjUlJt7+MS7uoUnzt3i7oZfBs8np9qmY+3zZl8dbqab4MqVWrE21LpOZRwhDsssnv+ZKer4MVnpfGwiVuzpiHqpY7zJZPx+dbErLLo9dm9nJXHl2YXn6gwvMVU+/52n++gdu3x/4gxOr8+13ODdgw+JHdvtNn3t6f+7pw7mnj+eePp17+rzzp+amvX9g9v6B3fsHey8XJ3v/wO/9g7D3D+LePzjtxv969nzm2c+bK/V69mMh8faUnR9Fcj+3fXmZtzy2GJb08K7n5djXQixKIQ6lEEEpxKMUElAKiSiFJJRCMkghXu8+4st3bbe3wctC9K6a2xvoMmyYloXoXTWhvKENYUWaiFJIQikkgxRy8N1cw0IMSiEWpRCHUoigFHLwzvrN58eKe57u64Sbh5Htr/NI/MFNXpuWEnFKURxny26uO/uHcc3zRxO96hap032uzORUR0295gapuViqnGtqGltGEm/vqGoj4MmUd1TJ5Ljs0lzR5U3M922+lmJxSnE4pYheKU0nSXrN/TwbX/rhzLGn8/bEfD37qWN+B1+ABp+n4nCsrVwYdn5hluPDy6GXKTzLsn15b/94k3uZi79ywZUpzzmG9/txLY92JWSKu18Rq187WRvm7qyNafvgW/szCeseD33BfHDjSWL+g5gNMWtgtsTcCHN5BR58XGB2xKyBWYhZA7MnZg3MgZg1MEdi1sCciPkZzK/sGO2eZpeZ155nxxD2PDsmq+fZMS49z07I7ml2DDbPs2NaeZ4dI8jz7JgrnmfHXPEsuzAxVzzPjrnieXbMFc+zY654np2Q3dPsmCueZ0d/t8HOTYWdM+YjO8Pn7Aa7b+91tOvgV9B8KDcCvb15TjB8giuBFoLWAc2xn1agW20wFSyz/RWabG9ZFSzdzCWqbG4UcSNJVQBVoU9CVEWoCqAqHJ1BVIXvkxFVYVpBVIVjpIiq8O36+aq8gHaM60qgmcAbgd7eCiw4hmol0MzJSqBFD7SZ5GExIFdDbby7P8WnSh15XoIhmkcN3VuTfoQmwwhNxhGabBgbfKUSY1IZ27ePa+nMtWScWmRSrOW67ZWCmEH6tIP06QbpUwbp0w/SZ+qlz81t3oLv5n67uc1b8MD324bbggUPfL9t2ifw/bZpn5r32+3tzIIPQLVEnFqCpje/bpu3EDXvoddt8xYOrkRa2bsrHFwutHr6Pc7l9Q927tcUkubKu1ctXB2S4qK+Fy5cHQ4uUPc5Fq4OyV/R5doSzSEFnFIiTimau076XPakCVPtpxWTnV85xCTLG246c2OzkKdTz25OPfuxB0WWVN5OeVMrJZTFyE2coupgwcG1gT5PnzJIn36QPsMgfcYh+owH1/8A6nNz0DJO3dxvNwct4wR8v90zyJXiXHJK92OjeWsS+GbbrkngO227JuOZAxvx4KoL1dOfuiF8NNO5pzfnnt6ee3p37unl3NP7c0+/cx/vaHaOAMaDX7FWNoSPBz/HrJ7enXt6Off0/tzTh3NPv/e3aXf/NneOTsddM+9f/8Ds/QO79w/c3j+QvX/g9/7BmXuWRRdPPXs69ewge3RHmVAKMSiFWJRCHEohglKIRykkoBQSQQrxevcRX97x+CjLQvSuGp/uwzBpWYjeVbO5R3f0HqWQgFJIRCkkoRSSQQoJE0ohBqUQi1LIwTtru13tYxCcUjxOKZpzPq6aMhWD4nSSC6dMxaA4V+WyKVMx5Cu6XJscFOOEU4rBKUVxHmbTKVMxujNHcKKcenZ/6tkPjtdGMx+a4wP4bwzujrrHeIyRmDUwJ2LWwJyJuRHmje2CY5qIWQOzIWYNzJaYNTA7YtbALMSsgdkT8zOYX9kx2j3PjnnteXYMYc+zY7J6ml1mXHqeHTPQ8+wYbJ5nx7TyPDshu6fZMVc8z4654nl2zBXPs2OueJ4dc8Wz7NLEXPE8O+aK59kxVzzPjv5ug52bCjv38HX/zI7P2Q12u/YD+fbBr6D5UG4Eent/8WT4BFcCzce9Emgh6Eag9+x2mNx84uQWt3PDbH+FJmZyZSebyS/cjKGbuUSVzX1Bk6H1AVTF0ichqkJThagKR2cQVeH7ZERVhKoAqsIxUkRV+Hb9fFVeQTOuK4FmAm8Eent/8WQZqnVAO+ZkJdCK0feqLciTsyM06UZoUkZosmFseHixtd7kdZubJBcG6TMO0mcapM88Rp8yDdKn66XPzU2WknRzv93cZCkJ8P12z9Y83s7LPnr3sEf52z7iSYDvtg27BL7XtuvSA99pn+zyYf3b0qUZostTN1ZK3p17ejn39P7c04dzTx/PPX069/SnboeWwnTu6Y9dVmX8/OHGcbNIr2d2p51ZTjuzP+3M4bQzx9POnE47cz7rzAcXQN46szntzKddg/G0azCedg3G067BeNo1GE+7BuNp12A87RpMp12D6bRrMJ12DabTrsF02jWYTrsG02nXYDrtGkynXYPptGswn3YN5tOuwXzaNZhPuwbzaddgPu0azKddg/m0azCfdg3ms67BPE2nndmcdmZ72pndaWeW087sTztzOO3M8bQzp9POfNo1aE67Bs1p16A57Ro0p12D5rRr0Jx2DZrTrkFz2jVoTrsGzWnXoD3tGrSnXYP2tGvQnnYN2tOuQXvaNWhPuwbtadegPe0atKddgw74JWHDyRi55ZzUS/tMpkyuSQ/zi0uf3UyuKfuBrvcpvfSZ3L1PWzk6S1kaIktcodLNVNbNKUe5n6mslT67mcpa6bObqayVPruZyrrdZz9TWSt9duOeKn324p5qfXbjnip9yiB9DuKHBplqnpGnmjftcxA/hDzdvGWfyBPOm/bJ1YpejwVaxTMfnWJOTZ7SxExlTXIzmaUqXKwFURWu7IKoCpeBuUaVrXWIc+CaMYiqcG1VRFW4tiqiKkwriKoIVQFUhWurIqrCtVURVWG2v0YVX9YhnkJaqMJsj6gKsz2gKpHZHlEVZntEVZjtEVVhtkdURajK1XllRRVme8AUGZntEVVhtkdUhdkeURVme0BVErM9oirM9oiqMNsjqsJsj6iKUBVAVZjtEVVhtkdUhSkSURWmSEBVMlMkoipMkYiqCFX5tirOzsdat/x6MXO8fYtd+ZFal6YFO/qZ59nRdTzL7uVrPsJ7Hh6f4QfgccD2ADyOqx6AJ4T3PDyOUh6Ax8HEA/CYLw7AY8A4AI8J43l4hgnjADwmjAPwmDAOwGPC2IJXtjC4cawNOZtShTFBlqSFpBuRtmWA2liJS9LMLlqkGXS0SDMVaZFmhGpGOpSSbVo+ES1dbyvSUvbmuf3j8jdtaZG1SNNPa5EWkm5EOpjyRAwSlqTpp7VI009rkaaf1iJNP61Fmu8vlEg7vuzQIs2MqEWaGVGLNDOiFmkhaSXSzIhapJkRtUgzI2qRZkZsRjqUD99CSkvSzIhKpIUZUYs0M6IWaWZELdLMiFqk6fJakZapkBYbtw/e2iHXTJ4PzytE2V424eV/oiyIsvCxfIkslRnf3HsdUxahLIiycAQZUhYON0PKwtQCKQsHsiFl4ag3oiyBKR9SFqZ8SFmY8iFlYco/X5Y30kLSSqSZxbVIM15rkWZi1iLNEKxFmrm2GWlxhbRfzlCMjKpapJk+tUgzUGqRZkbUIi0krUSaGVGLNDOiFmlmRC3SzIhapJkRlUhzH3c10syIWqSZEZuR3l7Pjnuoq5EWklYizeTyFOk3eAwjB+AxXxyAx8jwPLxMx9Ts6dLse9JMc3WFKC8bz84HT2ZFFvoDSFnoPCBloae5Rpbtr6+5MTmiLIZbnmPKwqFbSFmYWiBlYW6BlEUoC6IsnJIEKQtT/jWy+PLh4hTSUhamfEhZmPIhZWHKR5TFMOVDysKUDykLUz6kLEz5l+eWNVmEsgDGScOUDykLUz6kLEz5kLIw5UPKwpSPKItlyoeUhSkfUhamfEhZmPIhZRHKgigLUz6kLIyTkLIwTkLKwjiJKItjnISU5ZhBTnbuMYmUQ61JK8f6OK964eP7Y98qEZhKPEwlQa2SYObrINiwUkmEqSTBVJJRKjm47/muSqZ7JXGlEgNTiYWpxMFUIjCVeJhKAkwlevdYX7yJz2mlkgRTSUapxE8wlRiYSixMJQ6mEoGpxMNUEmAqgbnHeph7rIe5xwaYe2yAuccGmHvs0R2qJJVhGW8qB5uQ7DxuEaeHgRnn1grP4V55vg+2GDuthu4y2nL7x/zu6LdGQyeNphIbfbJmpdHYi6JlTcRvNJp6aTS5e6O2cnSWMviXJa5hyb1giVKu6DQtGz26ldDnadSM0qgdpVE3SqMySqPd+Khao734qGqj3fioWqPd+Khao6M4ozSKM0qjOKM0ijNKozijo5snfJ5Gjz1Hg8/zYq4h+KnS6K2audEwuUqjwZn56OBcrjQabjlsPvp241lpNPXSqA/bjeZeGi0DL8Fku2w0T6M0akZp1I7SqBulURmlUT9Ko6GXRsXeG3WVo7OXWAxdSitYuvFR38by1mg3PqrWaDc+artRO3Xjo2qNqj51TQl13iXVrGMn6aXR7axjJ99Lo9tPXTuFURqNozSaRmk0D9KomUZp1IzSqO2l0ZZZx5pufFTFMB5cGvMTNdqNj6o12o2PqjWq+dS1JY8Ym0Ol0bYzh62dOmm0MnPYWtOLotszh621vTTacuawta4XLNuvpO3Bpao+UaN+lEbDKI3GURpNozTajY+qNOp68VHVRrvxUbVGu/FRtUZHcUYHF2z6RI2O4ozcKM7IjeKM3CjOSBo+Rx/S8fp86k+3vGBM84ltzHn7YJNiGShM2WwfnNx84uTenfdNFEtRLhDFTNPMzUxmRRZPWRBlCZQFUZZIWS6RZXPhWiuJsiDKkikLoCx+oiyIsjC1QMrC3AIpi6MsiLIIZUGUhSn/Glk29523nikfUhamfEhZmPIhZWHKR5QlMOVDysKUDykLU/7luWVNFqZ8xDgZhLIgysKUDykLUz6kLEz5kLIw5UPKwpSPKEtkyoeUhSkfUhamfEhZmPIhZRHKgigL4ySkLIyTkLIwTkLKwjiJKEuiQd6QxZXtk61b+cIxcfh9C175mVqXpiU8upoD8Og9DsCjQzgAj8/x5+FlDt4egMch1gPw6PMOwONw5QF4QnjPw2PCOACPCeMAPCaMA/CYMA7AY8J4Gp6bmDAOwGPC2IJXdj+4cawNO5tShTFBlqQZR1qRtmWM+mW1qiVpZhct0kLSSqSZirRIM0I1Ix3u6+OmlSciXW8r0lI29bn94/I3bWiRtUjTT2uRpp9uRTqY8kQMEpak6ae1SAtJK5Gmn9YiTT+tRZrvL7RI82WHFmlmRCXSlhlRizQzohZpZkQt0syIWqSFpJVIMyNqkWZGbEY6lI/fQkpL0syIWqSZEbVIMyMqkXbMiFqkmRG1SNPltSItUyEtNm4fvLmRrnN8eF4hSmXpBOf4pEWURfhYvkSWyoxvbtGOKQsHhSFl4QgypCxCWRBlYWqBlIUD2ZCycNQbUhamfEhZmPIRZfFM+ZCyMOWfL8sbaQZ3LdLM4lqkhaSVSDMxa5FmCNYizVzbjLS4QtovZyh6RlUt0kyfSqQDA6UWaWZELdLMiFqkmRG1SAtJK5FmRtQizYyoRZoZUYs0M6IWaWZEJdLce70d6e317LiduhppZkQt0kLSz5B+g8cwcgAe88UBeIwMz8NLdEzNni7NvidNNFdXiGKmaeZmJrMii1AWRFnoPCBloae5Rpbtr6+5MTmmLByNhZSFQ7eIsnCbdkxZmFsgZeEIMqQsnJIEKYtQlktk8eXDxSksF77LTPmQsjDlQ8rClA8pC1M+pCxM+YCyyMSUDykLU/7luWVNFqZ8wDgpE1M+pCxCWRBlYcqHlIUpH1IWpnxIWZjyIWVhykeUxTDlQ8rClA8pC1M+pCxM+ZCyME5CysI4CSkL4ySkLIyTiLLYYwY52bnHJFIOtSatHOvjvOqFj++PfavEwlTiYCoRtUqCma+DYMNKJR6mkgBTSYSpJOlVMt0riSuVZJRKDu6b3bISA1OJhanEwVQiMJXo3WN98SY+p5VKAkwlEaaSBFNJRqlEJphKDEwlFqYSB1OJwFQCc48VmHuswNxjBeYeKzD3WA9zjz24Q5U1YT69NQ/nXz3Y+BjncYswPQy1OLdmrJyZjw7uYSkiY1fHkkwsPswk8+7ot0all0Z92G7U99JocqXRbFcaDaM0GkdpNI3SaB6k0YNb43yiRs0ojdpRGu3GGdUalVEaHcUZhVGcURjFGYVRnFEYxRnFUZxRHMUZxVGcUezGGYm9N+oqR2cv87mzT2kFi/SP5a3RbnxUrdFufFSt0W58VKXRpPrUNXMxxrvUuNHKcHcyvTRaGe5OtpdGK0/d5EZpVEZp1I/SaBil0ThKo2mURnMvjTbNOrkbH1UxjLkbH1VrtBsfVWu0Gx9Va1TzqWtLHjE2h0qjPof7pKQ8VRr1sXxIdfvHvNJo7KTRVL4I8cmuZJ2celG0bHf6jUZzL40We3Fr1NaeulK+68sSl1j8NPWCJUq5otO00qgZpVE7SqNulEZllEb9KI1246Nqjfbio6qNduOjao1246MqjZpRnJEZxRmZUZyRGcUZGRml0VGc0cH1f0y08/lNdFI5ONg5St/4+Hsxfm2dHuvzfPQNUKocbSbnysknJ49rBq0en2IZ1ku5srRPcvP6Qskt9qL2JhNhFWFlQ29/cJkhQnyF6AjxOEQhxD8AcXP9Mn9wXSpCfIUYCPE4xEiIxyHSJTaASJ94HOLB5eMI8RWiIcTjEJlY/gjEze0evWNiaQBRCPE4RCaWBhCZWBpAZGJpAJGJpQFEJpadPnEFojCxHDfbwsTSACITSwOITCwNIAohHofIxNIAIhNLA4hMLA0gMrE0gMjEchyiZ2JpAJGJpQFEmu0GEIUQj0Ok2W4AkWa7AcR+LI65T8R0DzMxXyC+thr6MSLVVvuxC9VW+xmGrLbaj3+ptirjtNqPF6i22s8Tu9pqP4NY1Vb7GWqqtjqOW4rjuKU4jluK47ilOI5bOrjQ/KdqtRu3ZMuSZ7dWp/etrhxvTJlcZYIscnzsxlrt5GLL1qfGPgydFC7d+LDGXLoxbY25dOPw2nJJ3djBvVzCfTmNtLzvpm5cxk4ucj9c8srvRchllcuo/qXGZVT/Eky57wYJSy6j+pcal1H9S43LqP6lwiWP6l9qXLoZ+2rMpZuBssZcRvW7NS5CLqtcRvW7NS70u+tc6HfXudDvrnOh313jEqZh/W4o8x1DSksuw/rdCpdh/W6Fy7B+t8JFyGWVy7B+t8Jl1Oe0TIWL2Hfj3suDN1cGD2bUW/QehJXvHYIZ9n1dS4ij3vx3QdyesRPMsG8CW0IcdRilKcRRx1yaQhx1gKYpRLrE4xDtqEM/TSGOOk7UFCITSwOITCwNIAohHofIxPIR4hsXhpB1LswV61wYFda50P2vculnl5rGXIb16FJqEb9899/PXjKNuQzrpCtchFxWuQzrdytchvW7FS7D+t0Kl2H9boXLsH53m0s/e5w05kK/u86FfnedC/3uOhfhN9gr32CHfrYAacxlWL9b4TKEr3trdQir9tpqP/s11FsdwlC9tTrsM6/Z/Ot+Fu0/derwdF/Bz6xA5LuvBhD5ouw4xH62A7jwS4B+Nhq4EiKnyTWAyGlyDSAKIR6HSJ/YACLn1DWAyAl4DSAysfwRiL5MHZ7C8vPvfjbOuBBiP1tyXAmRiaUBRCaWBhCZWBpAFEI8DpGJZadPXIPIxHLcbA+7XUtTiEwsDSAysRyHOOyuMU0hMrE0gMjE0gAiE0sDiEKIxyEysTSAyMTSACITSwOINNvHIQ67xVFTiDTbDSDSbDeAqGpxorlDtBUskqb5aEkPbRp7uBB3E+jrwc7Z+6db5mU+9hpC5+76PGxb+w19UrTz4SmbbX22J4Pr7t9DdZYn357dq7svDPXZqU/U3Z+G+uzWx1Cfa/XZdAdRd78e6rNbH0d9oPUR6gOtD9MPtj7MP9j6ROoDrU+iPtD6cPzgYn02p6xGw/EDbH04foCtD8cPsPXh+AG2PkJ9oPXh+AG2Phw/wMk/a/pw/AA6nxqOH2Drw/EDaH0sxw+w9eH4AbY+HD/A1ofjB9j6CPWB1ofjB9j6cPwAWx+OH2Drw/EDaH0c8ym2Psyn2Pown2Lrw3yKrQ/99R/Qx9y/oXJmuetSdHTBLSjSq7agyDdSDSgKfXkLinTPLSjS47agSCdap7hzHRRjyuQvE2RhLnU3YB4DubXz2Y2VuETO9xnqyBmh1JEzb6kjZzhrjzyUNm1aPj493XNz5Ntb3UdPq62OnL5cHbkQeWvkwZTHZ5CwRE5fro6cvlwdOX25OnL6cnXkfMOijTzwdYw6cqZPdeRMn+rImT7VkQuRayNn+lRHzvSpjpzpUx0502d75KHM2A1puWJLYPrURh6ZPtWRM32qI2f6VEfO9KmOnCax/evmHdvhbW63FhOftJeqU/tcLPGxjK0Pn+HX6lOZEZ/4wMfWR6gPtD4cyMbWh6Pe2Pow/WDrw/F0bH04+A6tT+b4AbY+HD/A1ofjB9j6cPxAUZ835ELk2siZ8tWRM7irI2cWV0fOeK2OnIm5PXIp64WKX0zKTBNDsDpy5lp15Iyq6siZPtWRC5FrI2f6VEfO9KmOnOlTHTnTpzpypk9t5IbpUx0506c6cqbP9sg3Vy1MhulTHbkQuTZyRqFjyN8oMt20oMjA0oIiM0gDipaG69KZaZvf7SZLb3bxd6HTffsjs6IPXQW2PvQr2PrQCV2sz+Z378nSY0Hrw23uwfXhCDK2Pkw/2Pow/2DrI9QHWh/OucLWh+MHF+vjy3ehU0hLfTh+gK0Pxw+w9eH4AbQ+wvEDbH04foCtD8cPsPXh+AFO/lnTR6gPcj4Vjh9g68PxA2x9OH6ArQ/HD7D14fgBtD6e4wfY+nD8AFsfjh9g68PxA2x9hPpA68PxA2x9mE+x9WE+xdaH+RRan8B8iq3PMX+d7Nzo7U1SOdSatHKsj/PCIz6+P/atEoGpxMNUEtQqCWa+GsLDL/ZeSYSpJMFUklEqiZNeJdO9krhSiYGpxMJU4mAqEZhKPEwlAaYSvXusT/OxPqeVShJMJRmlkjTBVGJgKrEwlTiYSgSmEg9TSYCpBOYem2DusQnmHpth7rEZ5h6bYe6xGSYX5wBTSYSpBCYXZ5RcnKcJphIDUwlKLs4TSi7Ok8BUgpKL84SSi/MUYSpJMJWgeLZsUDxbNiieLRsUz5YNSi7ORmAqQcnF2aDk4mxQcnE2KLk4G5h7rIW5x1qYe6yFucdamHushbnHWpRcnG2CqSSjVOJgcrGDycXOwlTiYCoRlLzjYHKxg8nFDiYXO5hc7DJKJYIyJycLjGcTGM8mMJ5NBKYSmFwsMLlYYHKxwORigcnFHiYXe5h7rIe5x3qYe6yHucd6mHush7jH/uf2r//3wz9/+uHPP//42+1PXv7ff/3yl99/+vWXr//6+///4+3/uR38Xw==","brillig_names":["public_dispatch"],"assert_messages":{"451":"Initialization hash does not match","189":"attempt to add with overflow","573":"Not initialized","1469":"Array index out of bounds","1847":"Array index out of bounds","1329":"attempt to add with overflow","1250":"Array index out of bounds","1183":"attempt to add with overflow","476":"SharedImmutable already initialized","1427":"attempt to add with overflow","1933":"attempt to add with overflow","970":"Array index out of bounds","775":"Function get_contract_registration_status can only be called statically","1226":"Array index out of bounds","1543":"Array index out of bounds","1671":"Array index out of bounds","1860":"attempt to add with overflow","1208":"Array index out of bounds","245":"attempt to add with overflow","757":"attempt to add with overflow","1397":"Array index out of bounds","1720":"Array index out of bounds","227":"Array index out of bounds","1891":"attempt to add with overflow","1117":"Array index out of bounds","1757":"Array index out of bounds","1172":"Array index out of bounds","1556":"attempt to add with overflow","1873":"Array index out of bounds","1739":"Array index out of bounds","1477":"attempt to add with overflow","1733":"attempt to add with overflow","124":"attempt to add with overflow","691":"Function get_escrow_class_id can only be called statically","234":"Array index out of bounds","1130":"attempt to add with overflow","100":"attempt to add with overflow","1258":"Array index out of bounds","1514":"attempt to add with overflow","1819":"attempt to add with overflow","1831":"Array index out of bounds","1880":"Array index out of bounds","978":"Array index out of bounds","1679":"Array index out of bounds","76":"attempt to add with overflow","1161":"attempt to add with overflow","1027":"Array index out of bounds","1216":"attempt to add with overflow","637":"Storage slot 0 not allowed. Storage slots must start from 1.","771":"Not initialized","1143":"Array index out of bounds","1405":"Array index out of bounds","1009":"Array index out of bounds","1527":"Array index out of bounds","1771":"attempt to add with overflow","1192":"Array index out of bounds","1704":"Array index out of bounds","1905":"Array index out of bounds","223":"attempt to add with overflow","991":"attempt to add with overflow","1503":"Array index out of bounds","1692":"attempt to add with overflow","1923":"attempt to add with overflow","1101":"Array index out of bounds","1418":"attempt to add with overflow","1485":"Array index out of bounds","1869":"attempt to add with overflow","1089":"attempt to add with overflow","1150":"Array index out of bounds","1912":"Array index out of bounds","949":"attempt to add with overflow","1266":"Array index out of bounds","559":"attempt to add with overflow","687":"Not initialized","1449":"attempt to add with overflow","1589":"Array index out of bounds","1315":"Array index out of bounds","1571":"Array index out of bounds","1839":"Array index out of bounds","1955":"attempt to add with overflow","1431":"Array index out of bounds","657":"SharedImmutable already initialized","1041":"attempt to add with overflow","1297":"Array index out of bounds","1937":"Array index out of bounds","578":"Function set_contract_registered can only be called internally","834":"Storage slot 0 not allowed. Storage slots must start from 1.","962":"Array index out of bounds","1279":"attempt to add with overflow","1535":"Array index out of bounds","1139":"attempt to add with overflow","1200":"attempt to add with overflow","1389":"Array index out of bounds","938":"Array index out of bounds","1651":"attempt to add with overflow","1663":"Array index out of bounds","1377":"attempt to add with overflow","1438":"Array index out of bounds","1712":"Array index out of bounds","1901":"attempt to add with overflow","1109":"Array index out of bounds","1237":"attempt to add with overflow","1493":"attempt to add with overflow","1944":"Array index out of bounds","457":"Initializer address is not the contract deployer","1603":"attempt to add with overflow"}},{"name":"get_participant_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_participant_escrows"]},{"name":"get_managed_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"boolean"},{"kind":"integer","sign":"unsigned","width":32}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"5Z3bblw3EkX/Rc9+YJHFIplfGQwCO3ECAYYc2M4AA8P/Pq1LX+wjNUf06ZxVzZdAig/Ve6uP1i5ddvXXm9/fv/v7z19v7/74+Pnml399vfnw8be3X24/3u3e+/rtzc27T7cfPtz++evp/74J9/+R9nD957/e3t2/+/nL209fbn6REvXNzfu73+/fTLr7CH/cfnh/80sJ394sLi4tPV1bRQ6XiqRnrs0xP12bczhea/bt329uYvhpLVX319bdxzyvRVN7ulatLrTIz2tp8nRtC7mjxcL+82LRFlriT2tpce+1aexpqeHp2hKWz1F6VktQ2ZvdvZ3yqZr7Uzp0Kg+dsqFT5YVTuRxPNTn/WVbR/ZeCSj35Wkj1ueekHD7RrbTjE9geP9GVJqjBBKVAEyQ0QZEmKNEEKU1QpgkymiAaqRON1IlGaqWRWmmkVhqplUZqpZFaaaRWGqmVRmqlkVpppM40UmcaqTON1JlG6kwjdaaROtNInWmkzjRSZxqpjUZqo5HaaKQ2GqmNRmqjkdpopDYaqY1GaqORutBIXWikLjRSFxqpC43UhUbqQiN1oZG60EhdaKSuNFJXGqkrjdSVRupKI3WlkbrSSF1ppK40UlcaqRuN1I1G6kYjdaORutFI3WikbjRSNxqpG43UjUZqCTRUS6CxWgIN1hJotN49HE4RjdcSaMCWQCO2BBqyJeCYLThmC47ZgmO24JgtOGYLjtmCY7bgmC04ZguO2RHH7IhjdsQxO+KYHXHMjjhmRxyzcf1FwRUYBddgFFyFUXAdRsGVGAXXYhRcjVFwPUbBFRkF12QUXJVRcF1GwZUZBddmFFydUXB9RsEVGgXXaBRcpVFwnUbBlRoF12oUXK1RcL1GwRUbBddsFFy1UXDdRsGVGwXXbhRcvVFw/UbBFRwF13AUXMVRcB1HwZUcBddyFFzNUXA9R8EVHQXXdBRc1VFwXUfBlR0F13YUXN1RcH1HwRUeBdd4FFzlUXCdR8GVHgXXehRc7VFwvUfBFR8F13wUXPVRcN1HwZUfBdd+FFz9UXD9R8EVIAXXgBRcBVJwHUjBlSAF14KULWqQTevxY5+88MhO0vLqWHSvf/fmiZBH+c2z/LhFw3JN+eJbfvQtP/mWr3D5mu3wMkNNj+Tc/YT7matTCnslyU5k31/9YDfPZdfmslvmskufGla2S58y1rUr9KlkZbv0KWZlu/SpZ2W79ClpZbs6l925piqZa6qSuaYqmWuqkrmmqjjXVBXnmqriXFNVnGuq2mKzwpZ255qq4lxTVZxrqopzTVVxrqkqzTVVpbmmqjTXVJXmmqq22H2ypd25pqo011SV5pqq0lxTVZprqtK5piqda6rSuaYqnWuq2mI70ZZ255qqdK6pSueaqnSuqUrnmqryXFNVnmuqynNNVXmuqWqL/WFb2p1rqspzTVV5rqkqzzVV5bmmKsNPVc3sYLfkpQH8nNQzgJ98egbws8ypgRqXBtS7Afy80TNAnyBySHsDeadqaYA+E3QN0FO+a4Ce2z0DhX8LmR4MPDNKVPookWuKewM129IAfZToGqCPEl0D9FGia0D/cQO7D5j0+MHzdw4eNGWgJgNqKkBNFaip8TRtsBisr0mAmiJQUwJqAnK8ATnegBxvQI43IMcbj+Mp8DieAo/jKfA4ngKP4ynwOJ4Cj+Mp8DieAo/jKfA4ngKQ4wLkuAA5LkCOC5DjAuS4ADkuQI4LkOMC5LgAOR6BHI9AjkcgxyOQ4xHI8QjkeARyPAI5HoEcj0COJyDHE5DjCcjxBOR4AnI8ATmegBxPQI4nIMcTkOMK5LgCOa5AjiuQ4wrkuAI5rkCOK5DjCuS4AjmegRzPQI5nIMczkOMZyPEM5HgGcjwDOZ6BHM9AjhuQ4wbkuAE5bkCOG5DjBuS4ATluQI4bkOMG5HgBcrwAOV6AHC9AjhcgxwuQ4wXI8QLkeAFyvAA5XoEcr0COVyDHK5DjwD5nAvY5E7DPmYB9zgTscyZgnzMB+5wJ2OdMwD5nAvY5E7DPmYB9zgTscyZgnzMB+5wJ2OdUYJ9TgX1OBfY5Fdjn1MDjuAL7nArscyqwz6nAPqcC+5wK7HMqsM+pwD6nAvucCuxzKrDPqcA+pwL7nArscyqwz6nAPqcC+5wK7HMqsM+pwD6nAvucCuxzKrDPqcA+pwL7nArscyqwz6nAPqcC+5wK7HMqsM+pwD6nAvucuk3X7fDCKLu3qy00bfHc5XTUlLUtNBWgphcyOJd0OGYhnGp6ONaGjr3UhOodk7FjcexYGjumY8fy2DEbO1bGjo3dJXnsLrGxu8TG7hIbu0ts7C6xsbvExu4SG7tLbOwusbG7xMbukjJ2l5Sxu6SM3SVl7C4pY3dJGbtLythdUsbukjJ2l7z0h5WmJ8eyLo698JmsYodjNebFsfx/HNPlo9nYsTJ07KW/B7ISj5+SWhbH8tixF7yVeJxeilpverFynF5OLn58iHL5h6iXf4h26YfIL/2lxZoPIZd/iHj5h0iXfwi9/EPkyz+EXf4hyuUfol7+IS7/1S2X/+p+6dfpJRwTp8QfEye/9Bvv3rE0dkzHjuWxYzZ2rIwdq2PH2tCxl34T2Ds2dpfEsbskjj3dcezpjmNPdxx7ujf5Ef5uTDj+6EeOmh5/9JM3+RF+T1MEakpATQrUlIGaDKipADVVoKbG06RAjiuQ4wrkuAI5rkCOb/NrqnyiyZaaKlBT42naZNVgT5MANUWgpgTUpEBNGajJgJqAHM9Ajmcgxw3IcQNy3IAcNyDHDchxA3LcgBw3IMcNyHEDcrwAOV6AHC9AjhcgxwuQ4wXI8QLkeAFyvAA5XoAcr0COVyDHK5DjFcjxCuR4BXK8AjlegRyvQI5XIMcbkOMNyPEG5HgDcrwBOd6AHG9AjjcgxxuQ443HcQs8jlvgcdwCj+MWeBy3wOO4BR7HLfA4boHHcQs8jlsAclyAHBcgxwXIcQFyXIAcFyDHBchxAXJcgBwXIMcjkOMRyPEI5HgEcjwCOR6BHI9AjkcgxyOQ4xHI8QTkeAJyfJue4survF55+YOFRLdg9XC11fxDhd22qUCuqD871w/bsPdq/bBtfK/WX53rb3z9bR8C1iT+oH+bKuiK+sW5fnwEd/Q7yN+z+h3k71n9DvL3rH4H+XtWv4P8PavfQf6e1e88f7Pz/M3O8zc7z9/sPH+3qWavqN95/mbn+Zud5292nr/Zef6a8/w15/lrzvPXnOfvNpX6FfU7z19znr/mPH/Nef6a8/wtzvO3OM/f4jx/i/P83WYVwor6nedvcZ6/xXn+Fuf5W5znb3Wev9V5/lbn+Vud5+82KyxW1O88f6vz/K3O87c6z9/qPH+b8/xtzvO3Oc/f5jx/t1k9sqJ+5/nbnOdvc56/zXn+Nt/5W4Lv/C3Bd/6W4Dt/S/CdvyX4zt8SfOdvCb7ztwTf+VuC7/wtwXn+ivP8Fef5K87zV5zn7zarflbU7zx/xXn+ivP8Fef5K87zNzrP3+g8f6Pz/I3O83ebFU0r6neev9F5/kbn+Rud5290nr+Jn78tHvafNF3o5+fvef38/D2vn5+/5/Xz8/e8fn7+ntcPy68HTbBMetAEy5l7TbTdTQ+a/nketab1+LFFzn855J3sp6uzSD1+bHv8gthgIc0rDaR6MKBiSwPFu4Hq3UBzbmCDpTQrGxDvBqJ3A/gc6BlQvAGLZw1k7wb4SdwxwE/ijgF8EqseDZgsDeCTuGPA8EncM4BP4p4BfBL3DOCTuGcAn8Q9A/gkzsH2BnJ8xgA+iXsG8EncM4BP4p4BfhK3djQQFwYKP4k7BvhJ3DHAT+KOAX4Sdwzwk7hjAJ/EPQP4JP7OQFsawCdxzwD/e+KOAXwS735NuTdQwtJAxSdxzwA+iXsG8EncM4BPYrN0MCDhOwPP/FZW6n743r1ZDldHSY928bm9rl18yq9rFz8TrGsXP0Gsaxc/b6xqt/Gz8TV2c9nLzrWdmH38Y5l2XVy2cPhD12BLs9dF5Y7Z62Jyx+x1EbljFs/jcvgLvVyqdMyq7i/WnI6i86NX/LeKq3mtAf9d5Ype8SG7olf896oresV/W7uiV53IK350WtErfnJa0St+cNpN7YfvX34YnB4M4Iehmg5/mnH64t0HA/gJp2NA8GNLzwB+FukZwA8YPQP4qaFnQL0bwOd7zwA+tHsG8EncM+A9icV7EkfvSRy9J3H0nsTRexJvsE1nZQPekzh6T+LoPYmj9ySO3pM4eU/i5D2Jk/ckTt6TeIO9Oisb8J7EyXsSJ+9JnLwncfKexOo9idV7Eqv3JOYvlOoZ8J7E6j2J+Su9ega8JzF/pVfPgPck5q/06hnwnsT8lV49A96TmL/Sq2fAexLzV3r1DHhPYv5Kr54B70nMX+nVM+A9ifkrvXoGvCcxf6VXz4D3JOav9OoZ8J7E/JVePQPek5i/0qtnwHsS81d69Qx4T2L+Sq+eAe9JzF/p1TPgPYn5K716BrwnMX+lV8+A9yTmr/TqGfCexPwlXT0D3pOYv0irZ8B7EvOXXfUMeE/i5j2J+QvEega8J3HznsT8tWw9A96TmL8+rWfAexLz15z1DDhP4sZfSNYz4DyJG391WM+A8yRuwXkSN/7mrp4B50nc+Du2egacJ3HzvmOred+x1bzv2GreV1Q17yuqmvcVVc37iqrGX5C03mb8xl+m9LqV4rK/2GJamr2u1zzomOW/dtCKZq/rdYY6ZvEZ98qXAWgHs7o0e22vZnHW7LW9msVZs9f2ahZnzV7Xqwt1zF7XBHXeLH8J1ppmr2yCOvcKNI2/XGtNs1c2QZ03qzOZnej1wBp/GdiaZid6PbDGXzK2ptlrm6DOmeUvL1vT7EwTFH8p2ppmZ5qg+MvW1jQ70wTFX+K2ltlvu3f/8/bT7dt3H95/3h25/9e/7377cvvx7undL//96/Ffdhf/Dw==","brillig_names":["get_managed_escrows"]},{"name":"register_participant","is_unconstrained":false,"custom_attributes":["private","interal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"set_contract_registered","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["set_contract_registered"],"assert_messages":{"180":"attempt to add with overflow","369":"Array index out of bounds","14":"Not initialized","139":"SharedImmutable already initialized","206":"Array index out of bounds","238":"Array index out of bounds","357":"attempt to add with overflow","398":"attempt to add with overflow","188":"Array index out of bounds","217":"attempt to add with overflow","246":"Array index out of bounds","19":"Function set_contract_registered can only be called internally","112":"Storage slot 0 not allowed. Storage slots must start from 1.","377":"Array index out of bounds","295":"Array index out of bounds","196":"attempt to add with overflow","385":"Array index out of bounds","277":"Array index out of bounds","309":"attempt to add with overflow","172":"Array index out of bounds","230":"Array index out of bounds","259":"attempt to add with overflow"}},{"name":"register_escrow","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_nullifier_membership_witness","get_contract_instance_internal","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]},{"name":"get_participants","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"array","length":10,"type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_participants"]},{"name":"get_escrow_class_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQQKAAIGBAUhAAAPAAU6AQAAHgALAAQkAAcBBgoABwQGBSEAABQABToBAAAqAAAEJAAEBAUAAAQABQAkAQQBBAAABAQCBSoABQckAAcACCoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBAUAAAQFAgUqAgUEKgAABQAABAACACoCBAUkAAQBCCQABAMEJAAEAAcqAAcDIAArDAAEAwQHIQAANAAHIAAuKgEFBCQABAIFAAAEBAIGAAAEBgUHKgEHAyMqAQUHHAAHAwkAAAcGCQosAAAAAAoAAAAJJAAEAwsMAAQDCwwhAAA8AAw6AQAAKwAABwgDJQAEAAQIBCIAAABKKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMICQ4ABAMJByEAAEcABzoBAAAqAgoFKgAJAyAAKysBCAMIBgsABAgGAAIIByEAAE4IByAAUCsACAMIBSAAXisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABcCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAFMlAQQAAQgFIABeIysAGMoYyg==","debug_symbols":"1ZrdbvIwDIbvJcccxHGc2NzKp09T2WCqVJUJ2KQJce9rt7Z0K0q1Mab4BLXwJn7Ij9/U6tE8rFfPj3dlvdnuzfLf0VTb++JQbuvm7nhamNWurKry8W78tbHtB7/L909F3d7tD8XuYJYQnV+Ydf3QXqJvOtiU1dosoz0tJmLB2GmF4iAFChe03oF0Yu8cn9XuUs+BATt1YCef1P8XRq5GBwuD2I7EfwAP9vqBj30AkbmBB+d7MTiRGXYG6jEYxn137PCL7M3Af4ZvA7hbB8BbB/C3DkBXByCSPgIFO7cmIjvq1JE9T9ZE+CZP2yb+oA3/oI18v427uD/FMwzJDmAmuzT7fghgRzOIeGk2JPTZhUTszGxQxB6kuXRfZ8OBanqnmh5V03vV9KSaPqimj6rpWTW9aKZH1V6Lqr0WVXstqvZaVO21qNprUbXXomqv9bnvWuKBniaVG5/7yol+oGc7of/7lTPUkoK1NEPPMfSFJz5rI7yjs150UYtOVi967mebZJ6hzLMkw5Dj2cGE3mc+9hJS9LmfbRjP9G5GLR77dSY+Tv+raj+j3E9Cafrcqw5p+tyrDkn6kHvVIU2fe9UhTZ+7M6fpc39+SdPn7sxp+tydOU2v2muDaq8Nqr02qPbaqNpro2KvPTW3L8WuLFbVunsZbPNc34/eDTu8Pn380ojfAA==","brillig_names":["get_escrow_class_id"],"assert_messages":{"14":"Not initialized","59":"Array index out of bounds","70":"attempt to add with overflow","19":"Function get_escrow_class_id can only be called statically"}},{"name":"get_contract_registration_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_contract_registration_status"],"assert_messages":{"311":"Array index out of bounds","180":"Array index out of bounds","20":"Function get_contract_registration_status can only be called statically","113":"Storage slot 0 not allowed. Storage slots must start from 1.","148":"Array index out of bounds","299":"attempt to add with overflow","340":"attempt to add with overflow","159":"attempt to add with overflow","188":"Array index out of bounds","319":"Array index out of bounds","237":"Array index out of bounds","327":"Array index out of bounds","219":"Array index out of bounds","251":"attempt to add with overflow","15":"Not initialized","172":"Array index out of bounds","201":"attempt to add with overflow"}},{"name":"check_and_register_participant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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tTE2rY2xaW2MTWtjbFobY9PaqE1rozatjdq0NmrT2qhNa6M2rY3atDZq09qoTWujNq0Na1ob1rQ2rGltWNPasKa1YU1rw5rWhjWtDWtaG9a0NqamtTE1rY2paW1MTWtjalobU9PamJrWxtS0NqamtTE1rY25aW3MTWtjblobc9PamJvWxty0NuamtTE3rY25aW3MTWtjaVobTXnRsSkvOjblRcemvOjYlBcdm/KiY1NedGzKi45NedGxKS86NuVFx6a86NiUFx2b8qJjU150bMqLjk150bEpLzo25UXHprzo2JQXHZvyomNTXnRsyouOTXnRsSkvOjblRcemvOjYlBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF61NedHalBetTXnR2pQXrU150dqUF7WmvKg15UWtKS9qTXlRa8qLWlNe1JryotaUF7WmvKg15UWtKS9qTXlRa8qLWlNe1JryotaUF7WmvKg15UWtKS9qTXlRa8qLWlNe1JryotaUF7WmvKg15UWtKS9qTXlRa8qLWlNe1JryotaUF7WmvKg15UWtKS9qTXlRa8qLWlNe1JryotaUF7WmvKg15UWtKS9qTXlRa8qLWlNe1JryotaUF7WmvKg15UWtKS9qTXlRa8qLWlNe1JryotaUF7WmvKg15UWtKS9qTXlRa8qLWlNe1JryotaUF7WmvKg15UWtKS9qTXlRa8qLWlNe1JryotaUF7WmvKg15UWtKS9qTXlRa8qL2k5edHl6um+j/amp0/eGB4/r/fiwLb994m+HWN8/xPb2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rZK1bZVsbatka1slW9sq2dpWyda2Sra2VbK1rZKtbZVsbatka1kle2eh/K+Vtq+NbV+rbV+ztq9NbV+b2762tH1tbfta2yopbauktK2S0rZKStsqKW2rpLStktK2SkrbKiltq6S0rZKxbZWMbatkbFslY9sqGdtWydi2Ssa2VTK2rZKxbZWMbauktq2S2rZKatsqqW2rpLatktq2SmrbKqltq6S2rZLatkqsbZVY2yqxtlVibavE2laJta0Sa1sl1rZKrG2VWNsqmdpWydS2Sqa2VTK1rZKpbZVMbatkalslU9sqmdpWydS2Sua2VTK3rZK5bZXMbatkblslc9sqmdtWydy2Sua2VTK3rZKlbZUsbatkaVslS9sqWdpWydK2Spa2VbK0rZKlbZUsbatkbVsla9sqWdtWydq2Sta2VbK2rZK1bZWsbatkbVsla9sq2dpWyda2Sra2VbK1rZKtbZVsbatka1slW9sq2dpWSVvutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+61tOVeS1vutbTlXktb7rW05V5LW+51bMu9jm2517Et9zq25V7Httzr2JZ7Hfdyr+uzRfwwmPja0va1te1rW9PX9nKv3tdK29fGtq/Vtq9Z29emtq+1rZLStkpK2yopbatkbFslY9sqGdtWydi2Ssa2VTK2rZKxbZWMbatkbFslOmFlw1ifXxvV1yQSe2SAP7722BmKr81tX1vavrY2fW3aQVKfXxtsFl+rbV+ztq9NbV+b2762tH1tbfva1vQ1nZ3xv1bavta2Sua2VTK3rZK5bZXMbatk3pm3dX5+bRPPkmVo+1pp+9rY9rXa9jVr+9rU9rW57WtL29fWtq+1rZK1bZWsbatkbVsla9sqWdtWydq2Sta2VbK2rZK1bZWsbatka1slW9sq2dpWyda2Sra2VbK1rZKtbZVsbatka1slW9MqqcPQ9rXS9rWx7Wu17WvW9rWp7Wtz29eWtq+tbV9rWyWlbZWUtlVS2lZJaVslpW2VlLZVUtpWSWlbJaVtlZS2VTK2rZKxbZWMbatkbFslY9sqGdtWydi2Ssa2VTK2rZKxbZXUtlVS21ZJbVsltW2V1LZVUttWSW1bJbVtldS2VVLbVom1rRJrWyXWtkqsbZVY2yqxtlVibavE2laJta0Sa1slU9sqmdpWydS2Sqa2VTK1rZKpbZVMbatkalslU9sqmdpWydy2Sua2VTK3rZK5bZXMbatkLxu6lOfX1j//PeB7n+p5Gz98yOfNPlvGL38MMXcYYq3PIdZp/jbE8v4h1vcPsb19iL28cs8hyvuHGHsMsQ3PRVu+Ldq93HbPIez9Q0zvH2J+/xDL+4dY3z/E9vYh1uH9Q5T3D/H+u3t9/929vv/uXt9/d6/vv7vX99/d6/vv7vX9d/f2/rt7e//dvb3/7t7ef3dv77+7t/ff3dv77+7t/Xf39v67e3v73W3D8P4hyvuHGN8/RH3/EPb+Iab3DzG/f4jl/UOs7x/i/Xd3ef/dXd5/d5f3393l/Xd3ef/dXd5/d5f3393l/Xd3ef/dXd5/d4/vv7vH99/d4/vv7vH9d/f4/rt7fP/dPb7/7h7ff3eP77+7x/ff3fX9d3d9/91d33931/ff3fX9d3d9/91d33931/ff3fX9d3d9/91t77+77f13t73/7rb33932/rvb3n932/vvbnv/3W3vv7vt/Xf39P67e3r/3T29/+6e3n93T++/u6f3393T++/u6f139/T+u3t6/909v//unt9/d8/vv7vn99/d8/vv7vn9d/f8/rt7fv/dPb//7p7ff3cv77+7l/ff3e8/q2bvP6tm7z+rZsvbT6Jal7NqzhDL+4dY3z/E9vYhupxVc4bQd/eLXif/8Euf/n2Q8fggr4+72s5pta5D2PuHmN4/xPz+IZb3D7H2GOLls3bntFrPIXZOq3Udorx/iPH9Q9T3D2HvH2J6/xDz+4dY3j/E++/urcfd/fLVOg3D+4co7x9ifP8Q9f1D2PuHaOpRNw1L29fWtq/98rL/x8e/tt8+q/8gV8o4/fHVUqZPKGUtv42o/8TmfWlt+dL2y1/6z8c//99/+p///E//9V/++78/vvTb//q//vW//cc//9u//vHP//j//sfv/8vjw/8/","brillig_names":["pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_notes_internal","get_collapse_hints","pack_arguments_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":23,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"dkim_registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow_contract_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"7Z3dbhw3EoXfRde+aJLFv7zKYhE4iRMIMOwgdhZYBHn3jEbq7lF6SHrgGrHIOjeBnTA9dT61uk7VsIt/Pfzy4ac/f/vx8dOvn788/PCfvx4+fv75/dfHz59Of/vr73cPP/3x+PHj428/Xv7rh+XpH2Y5r//y+/tPT3/98vX9H18ffjDR0ruHD59+efqjo9MVfn38+OHhh7j8/e642BuzLvbObIuND1dWkzX5ZTVZm/bV9tq1QzLuZXVINr9a/d93D8YwRO+3xT6lRvSGbFxX09P11tXRX1mdbHpZnEJ+tfYpdjtw7G7g2Gng2P3AsYeBY49vHrvxe+zmEE8SFk+WFY9dhMVjhMVjhcXjhMXz9jki5W310npW2bQaLrfssft0Dt2PG3oYN/QoO3Ra73Yb4rbWmufY08Cx53Fjd8vAsRvZscfV+dnsDrHbgWN3A8f+5kn1sjFhD0neeVnx0Jv/bH3a48m5WSCtN0IievWzvbLWrPdB8of7gEiJTq9EZ1CiMyrRmZTozDp0+kWJTqNEp1WiU4kf8qREpxI/5JX4Ia/ED3klfsgr8UNBiR8KSvxQUOKHghI/FObJKz6uu5d8pH/rjPM8h/zWJPY5HXTO8xwKtN63IRzu2zjPc6iuc57nUF0nKdE5T11W1zlPXVbXOU/+rOucpy6r65ynLqvqTML9UNGzXrmyjct6ZZsuVod8VircETEqFe6JGJUKd0W3KHXOrld25A9KSY1S4c6IUalwb3SLUlr2bf92OSgV7o4YlQr3R4xKhTukm5T6sCm9eBHlRWmeyCM1lE7kkRpKJ/JIfnuLyngyB6UTeaSGUtKi1CzztD2r7XqzzNP3bAgVfvPyCZ2o87ltLQ82HIVO1PqsC52o91kXOlHzsy50ou7nsgs9vFFlzDxfBzeETvR9cF3oRF8I14VO9I1wXShpETqRM6oLnccZVTfhGDPRrqq60HmcUUPoPM6oLtQq2Shn7DzOqCF0op5RXehEPaO6UNIidB5n1BCqxRlZLc7IanFGVoszclqckdPijIhZaPYNoTGs35DEuHdf/Us0VlQ0DGYq+O3HGi7GWhVmFfu8fk9KwezxXJ9VnO32RWm24TirmGPuTc/w/djhh7HDj2OHn8YOP791+MH7LfzL2cUvAXHMdOENyEgLyL55QDbsAZnGHXeZ6Pak6Ix7Dt6NHDxHnot78Nm2gk9bi5/SRY//evA3BdJ6MHDMNBlGa1CkNSrSmhRpzXq0csw5kaLVWb9Wzc5d7BIyLl+79GK2fX9msWbf4mpyeGZjwKbIxoJNkY0DmyIbApsim4l8IjubiXwlO5uJfCg7m4l8KzubiXwuN5sIX1xmA19cZgNfXGYDX1xmQ2BTZANfXGYDX1xmA19cZgNfXGYDX1xkk+CLy2zgi8ts4IvLbOCLy2wIbIpsFPtia/LOxtlXbK6sT24bT5P8xXga83JSumIXzUxSsedmJqnYod9IkvI+Oi3vgZ+iOoNUbOdZQWbF3p8XpOJC4UaQYV8eKBxAKq4qeEEqLkF4QRJA8oBEccMEErUNE0iUNkwgUdkwgURlwwLSLqhsmECismECicqGCSQqGyaQBJA8IFHZMIFEZcMEEpUNE0hUNkwgUdl8M8iwfY0YLiZWvYA0qGyYQKKyYQKJyoYJJCobJpAEkDwgUdkwgURlwwQSlQ0TSFQ2PCCtZh95uaE5+Vcgz2wUJ2LndjaOYusmq64/s1Sci29kGbermxjj4RdWcS7mBak4F7OCdIp7OjeCTNGuy1M2lyCPi5NbZ8Umlw/MFRfbd2R+uuBmlhZvDtQJ1O9B3Zj1Vjen7vuBOqxDD+rwGT2ow5T0oK64m9CRuuIvVftRJ7j1HtQVt9k6Ulf83S4b9TNIlJtMIAkgvw2kXZa1FLenrzwOIFEUMoFEnccEkqN0s24H2Tp38CR2XW2jaR4O2ZrfY1nOO+sqIA8ugOWEtK4CzOgC7OgC3OgCaHQBfnQBYXQBo2diP3om9qNn4jB6Jg6jZ+IweiYOo2dilrOxugoYPROH0TNxGD0Th9EzcRg9E8fRM3EcPRNH6ZmYddCtjdLzNrNc6VmeWa50T8A52dVG6QaCV610t8GrVro1YZ3AEKX7GFa1Sbrp4VUr3SHxqp3MTjXUTuamGmpJldrJvFRD7WReqqF2Mi/VUKvKSyVVXiqr8lJZlZfKqrxUVuWlWI6uGEetKi+VZ/NS1RkreTYvVVc7m5eqq53NS9XUumU2L1VXO5uXqqudzUvV1c7mpepqSZXa2bxUXa34fFsfs+aM9Mcs8yw0Z6Q/aTnHQzkj/UnLq1b6k5ZXrfTKptN8LmelG+VuQ7ScnexxzzevwNnJEgMnmsmyCCeayVIOJxrplUBHNNJbsB3RKHY1LTTSi82OaKR3gjkH2TinxuCe1c7lWeuTTJyby4a21M7lLFtq6fvVxu0TTu0B9yr+80f4+39EuP9HMJiAtCeMREvrB+3jdmmf9o7C0ytZ54AYUm/aO8kphUZA5NL6TCSXL8K/Oqgp5LAGEnLMr1afw2dIj4niHn7rF4fs+vYEBXOgyTEGMxnaw8mHO4hj5mPrI+z9P+Lq49GennPrU8bk1PgIu88Hs/nitnPuymqft0v73LztfHTrtU9/tIfb7vrAvXHC92OHH8YOP44dfho7/Dx0+NeHuY0Tvhk7fDt2+GNnXT921vVjZ10v/cHp0xa+P1YKQfqv7lan+ZiWY/hv/6vrt8prWXwjfJP91unKF4WRyc+FUaCxw/djh89gmE89nvUjTh7qVfjnj4j3/4h094+IDM84b7afhXep8XMOzqzNh+BcbnVDzNZ9OP0xHh4SieE2PT2Itqbj4t42/O/vRfltCri31GzlbBsmydrUCj6ZtWEakj3mF4bXH/3WkvW+1e6lnSWZi+0w14NP1q+rk03pEHw2wm+c7dkZTp2lY/hWePg+VMN3wsNP251v8tEYZho7fOkPzUb4Yezw49jhp7HDzyOHT8sydvjSs24jfOlZtxH+0FmXlqGzLi1DZ11ahs66tAyddWkZOuvSMnbWNWNnXSM965Ldw3eN1ac24Xrt7I+FPRnpObos9hy+9BzdCF96jm6ELz1HN8JPwpu51aYWGem96GpTi+wiPPx6lrBm7PDt2OG7scOnscP3Y4cfxg4/Cg+f059a6Tm6bjGs9BxdD99Jz9GN8KXn6Eb4DFmi34YqcsK3syWzbQVI9uhPnfRN5NsxHdfDl76JfEtyp/BtK0vQNtsjU7wiVvqW8+rePXLSd07WwyfpW84b4Uvfct4If+h9qyT+Ra9G+NJzdCN86VvOG+FLz9GN8KXn6Eb4Y2dd8S961cMX/6JXI/yxs674F70a4Y+ddb3iKVK1AZDkNc+QWpZlu7Y5oAmqZ2PW0WiejdlAo3k2ZnWiKgXNszEbaAhoSmg0z8ZsoNE8G7OBRrWvqaPRPBuzgUbNbMyb0UTVbthvA/KWkA5oVLvhOhrVbriORrUbrqMhoCmhUe2G62hUu+E6GrjhIhq44aLlgxsuoUk4N6mIRrUbrqNBb7iIBr3hIhoCmhIa9IaLaNAbLqKBGy6igRsuooEbLqHJsHxFNLB8RTSwfEU0BDQlNOKTt9m3B7mL/UEvp6pTFp9iWwLEJ8K6AL+Ib960BIjPty0B4rNiS4D43NUSID7DtASIL/1bAsQX6C0Bg2divwyeif0yeiY2o2diM3omNqNnYiM9E9tt7MJJwPJawLVSaa9+kr88D9Q/y5Wet2+Ua+36lpexF3Xkc7HnjfQkz6tWuiPgVSvdPvCqle41blUb9nc5E/1brZWeFm9US/vyUwPqoFZ6DuVVO1nCbaidLN+G7YQqEygc1E6WbxtqJ8u3DbWT5duG2snybUOt9EYAq1onvWvAq3YyL9VQO5mXaqidzEs11JIqtaq8lFPlpZwqL+Vm81Jha7GGlA5qZ/NSVbU0m5eqq53NS9XVzual6mpn81J1tZNlIFo2tWRfdeGOi2sD7byf7IF2C5j61knvZ+vKM6KZrYV/CxpjtnfHT/bvgGa2fj8jGgKaEprJql9ONJOVypxoFLuaFprJinBONJNV7IxoxM8w7ohGsxtuoIEbLqJR44bPakmVWjWe9axWjQ09q1XjLM9q1ZjFs9rZ/B9tsZA/fBsnfhAvr9rZXFpd7WzGq652Ni9VV0uq1M7mpepqZ/NSdbWzeam62tm8VF2tKi8lfowrr1pVXkr8sFXW95TEz0/lVUuq1I7sLs4CRjYMZwEje4CzgJHT+pMA8XMUe+13Ez9F8a6bumpHcfqseaNFA43mjRYNNJo3WtR3SYqf/NgNTRA/U7IjGmw7LqLRvNGigUa1r6mjIaApodG87biBRrUbrh2PF8RPMu2IRrUbrqNR7YaraMTPde2IRrUbrqNR7YbraOCGi2gIaAqWb7bxuZxoVLvhOhrVbriOBr3hIhr0hktoLHrDRTToDRfRoDdcRAM3XERDQFNCAzdcRAPLV0QDy1dEA8tXQjPbiGpONBzJO5odjW2IpbSsqyldBG/s1WvfEog7YX9Z7Jzdt6Cbp31618Dc79jc2ibBwDJ5GcyPF6/tJAssU4JB/VbqCdQ7UM+gfhfq1VzKMr0Z1G+lbkC9A3UL6h2ow633oE6g3oG6B/UO1AOod6CO2vQ+1KvbuAi1aQ/qqE07UPeoTXtQR23agzpq0x7UUZv2oE6g/nBnv36FOmrTDlWSR23agzpq0x7UUZv2oI7atAP1gNq0B3XUpj2oozbtQR21aQ/qBOodqKM27UEdtWkP6qiSelBHldSBekSV1IM6qqQe1EkxdbPv7HfmMHs9RM3+rsVGswtrsdHcx2+x0ewjW2w0u70Gm6TZk7XYKHZON77PnXYzlC7MkDX+maTinvGNJK1dr24s/fvoppAUt4F5QRJA8oBUbOZ5QSp2/reCDJtMm+gAUrHd4zwnMGTF3pAXJIwkE0j4yG8FGcyWbAKFA0j4SCaQBJA8IOEjmUDCRzKBVNxu5gWpuDfNCxKVDQvIuKCyYQKJyoYJJCobJpCobJhAEkDygERlwwQSlc03gwzb97EhpQNIVDZMIFHZMIFEZcMD0qCyYQKJyoYJJOzPt4K85VSM2vkM0SAv3YN5fc9/NEhiHahbZLy7UDdmm9p1KsYO1JEee1BHl7AHdbQUe1AnUO9AHW69B3V0NntQRxu0B3XUpj2oozbtQN2hNu1BHbXp91M/g0S5yQQSFSQTSAJIHpCo85hAonRjAolq7JtB0jbWivxhm5TmA6t5QaJm4gGp+VhpXpCobJhAorJhAonKhgkkASQPSFQ2TCBR2TCBRGXDBBKVDRNIVDY8IDUfSsw52SdqPmeYFyQqGyaQBJDXQJ7ZwGOX2cA2l9nACRfZaD5Dstd7UppPkLzrGzvLPlndHKkjs/agjpzdgzrcwH2oV98JDPAZPaijPdeDOnp5HahrPsuwI3X49R7U0VLsQR07K3pQJ1C/C3W/vbGzhMOMIM0ngnakjtq0B3XUpj2oozbtQR21aQfqms907Ugdtend/foV6qhNO1RJOIa2C3UC9Q7UUZv2oI7atAd11KY9qKM27UEdtWkH6jhTugt11KY9qKM27UEdtWkP6qiSelBHldSDOqqkHtRRJb019b9Pf/vf+z8e3//08cOX0//z9B///PTz18fPn17++vX/vz//l9PifwA=","brillig_names":["constructor"],"assert_messages":{"509":"Array index out of bounds","119":"Array index out of bounds","695":"Array index out of bounds","494":"attempt to add with overflow","677":"Array index out of bounds","415":"attempt to add with overflow","671":"attempt to add with overflow","473":"Array index out of bounds","342":"Initializer address is not the contract deployer","601":"Array index out of bounds","336":"Initialization hash does not match","589":"attempt to add with overflow","74":"attempt to add with overflow","650":"Array index out of bounds","452":"attempt to add with overflow","769":"Array index out of bounds","757":"attempt to add with overflow","431":"attempt to add with overflow","108":"attempt to add with overflow","617":"Array index out of bounds","541":"attempt to add with overflow","407":"Array index out of bounds","465":"Array index out of bounds","785":"Array index out of bounds","709":"attempt to add with overflow","130":"attempt to add with overflow","642":"Array index out of bounds","441":"Array index out of bounds","630":"attempt to add with overflow","112":"Array index out of bounds","368":"SharedImmutable already initialized","423":"Array index out of bounds","481":"Array index out of bounds","609":"Array index out of bounds","798":"attempt to add with overflow","658":"Array index out of bounds","527":"Array index out of bounds","777":"Array index out of bounds"}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000082f07638"},{"kind":"string","value":"EntitlementReceiptNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"owner","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"revocation_npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000082f07638"},{"kind":"string","value":"EntitlementReceiptNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"owner","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"revocation_npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b3dd3286"},{"kind":"string","value":"ParticipantNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseDkimRegistry"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrow"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"recurring_entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"entitlement_receipts","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"entitlement_nullifiers","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrowRegistry"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"managed_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"participants","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"participant_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"contract_registration","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseEscrowRegistry::get_escrow_class_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseEscrowRegistry::get_escrow_class_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow_contract_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseEscrowRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::set_contract_registered_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::set_contract_registered_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::get_contract_registration_status_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseEscrowRegistry::get_contract_registration_status_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::register_escrow_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::register_escrow_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::check_and_register_participant_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::check_and_register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::register_participant_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::register_participant_abi"}]}},"file_map":{"100":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"102":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"105":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"108":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"109":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"112":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"113":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"115":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"116":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"120":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"132":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"133":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"138":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"139":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"148":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"150":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"154":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::{NoteInterface, NullifiableNote}}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = unsafe {\n            get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier)\n        };\n\n        // 2) First we prove that the tree leaf in the witness is present in the nullifier tree. This is expected to be\n        // the leaf that contains the nullifier we're proving inclusion for.\n        assert(\n            self.state.partial.nullifier_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n\n        // 3) Then we simply check that the value in the leaf is the expected one. Note that we don't need to perform\n        // any checks on the rest of the values in the leaf preimage (the next index or next nullifier), since all we\n        // care about is showing that the tree contains an entry with the expected nullifier.\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, let N: u32>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N> + NullifiableNote;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, let N: u32>(\n        self,\n        note: Note,\n        context: &mut PrivateContext\n    ) where Note: NoteInterface<N> + NullifiableNote {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"156":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"159":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LTE, rhs), \"Expected lhs to not be less than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n    }\n}\n"},"160":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"162":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"165":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"166":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"167":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"170":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"171":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"172":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n"},"173":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"175":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"176":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"178":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"179":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"180":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"181":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"193":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"195":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"196":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"205":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"211":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"212":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"213":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"215":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"216":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"218":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"238":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"240":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"243":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"269":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"290":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"294":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"313":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"335":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n  value: [Field; N]\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n"},"339":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/entitlement_receipt_note.nr","source":"use dep::aztec::protocol_types::{\n    address::AztecAddress,\n    traits::{Serialize, Deserialize},\n    constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_bytes},\n    utils::field::field_from_bytes\n};\nuse dep::aztec::note::utils::compute_note_hash_for_nullify;\nuse dep::aztec::oracle::random::random;\nuse dep::aztec::macros::notes::note_custom_interface;\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, NoteInterface, PrivateContext};\nuse dep::aztec::keys::getters::{get_public_keys, get_nsk_app};\nuse dep::aztec::generators::{Ga1, Ga2, Ga3, Ga4, G_slot};\nuse dep::compressed_string::CompressedString;\nuse std::embedded_curve_ops::multi_scalar_mul;\nuse std::hash::from_field_unsafe;\n\n// serializes verifier_id and max_value into one field element\nglobal ENTITLEMENT_RECEIPT_NOTE_LENGTH: u32 = 4;\n\n#[note_custom_interface]\npub struct EntitlementReceiptNote {\n    // the user that is allowed to use this entitlement\n    recipient: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // the type of receipt verifier that this entitlement can be used for\n    verifier_id: u8,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // blinding factor for the note\n    randomness: Field,\n}\n\nimpl NoteInterface<ENTITLEMENT_RECEIPT_NOTE_LENGTH> for EntitlementReceiptNote {\n    \n    fn serialize_content(self) -> [Field; ENTITLEMENT_RECEIPT_NOTE_LENGTH] {\n        // serialize max_value and verifier_id together\n        let max_value_bytes: [u8; 16] = self.max_value.to_le_bytes();\n        let mut packed_bytes: [u8; 32] = [0; 32];\n        for i in 0..16 {\n            packed_bytes[i + 16] = max_value_bytes[i];\n        };\n        packed_bytes[1] = self.verifier_id;\n        let packed_verifier_and_max_value = field_from_bytes(packed_bytes, true);\n        // return serialized content\n        [\n            self.recipient.to_field(),\n            self.npk_m_hash,\n            packed_verifier_and_max_value,\n            self.randomness\n        ]\n    }\n\n    fn deserialize_content(serialized_note: [Field; ENTITLEMENT_RECEIPT_NOTE_LENGTH]) -> EntitlementReceiptNote {\n        // unpack verifier_id and max_value\n        let packed_verifier_and_max_value = serialized_note[2];\n        let packed_bytes: [u8; 32] = packed_verifier_and_max_value.to_be_bytes();\n        let verifier_id = packed_bytes[1];\n        let mut max_value_bytes: [u8; 16] = [0; 16];\n        for i in 0..16 {\n            max_value_bytes[i] = packed_bytes[i + 16];\n        }\n        let max_value = U128::from_le_bytes(max_value_bytes);\n        // return deserialized note\n        EntitlementReceiptNote {\n            recipient: AztecAddress::from_field(serialized_note[0]),\n            npk_m_hash: serialized_note[1],\n            verifier_id,\n            max_value,\n            randomness: serialized_note[3],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn to_be_bytes(self, storage_slot: Field) -> [u8; ENTITLEMENT_RECEIPT_NOTE_LENGTH * 32 + 64] {\n        let serialized_note = self.serialize_content();\n        let mut buffer: [u8; ENTITLEMENT_RECEIPT_NOTE_LENGTH * 32 + 64] = [0; ENTITLEMENT_RECEIPT_NOTE_LENGTH * 32 + 64];\n        let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n        let note_type_id_bytes: [u8; 32] = EntitlementReceiptNote::get_note_type_id().to_be_bytes();\n        for i in 0..32 {\n            buffer[i] = storage_slot_bytes[i];\n            buffer[32 + i] = note_type_id_bytes[i];\n        }\n        for i in 0..serialized_note.len() {\n            let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n            for j in 0..32 {\n                buffer[64 + i * 32 + j] = bytes[j];\n            }\n        }\n        buffer\n    }\n\n    fn get_note_type_id() -> Field { \n        comptime {\n            let bytes = \"EntitlementReceiptNote\".as_bytes();\n            let hash = poseidon2_hash_bytes(bytes);\n            let hash_bytes = hash.to_be_bytes::<4>();\n            field_from_bytes(hash_bytes, true)\n        }\n    }\n\n     fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn compute_note_hash(self) -> Field {\n        let serialized = self.serialize_content();\n        std::embedded_curve_ops::multi_scalar_mul(\n            [Ga1, Ga2, Ga3, Ga4, G_slot],\n            [\n            from_field_unsafe(serialized[0]),\n            from_field_unsafe(serialized[1]),\n            from_field_unsafe(serialized[2]),\n            from_field_unsafe(serialized[3]),\n            from_field_unsafe(self.get_header().storage_slot)\n        ]\n        ).x\n    }\n}\n\nimpl NullifiableNote for EntitlementReceiptNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for EntitlementReceiptNote {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient)\n            & (self.max_value == other.max_value)\n            & (self.randomness == other.randomness)\n            & (self.verifier_id == other.verifier_id)\n    }\n}\n\nimpl EntitlementReceiptNote {\n    /**\n     * Entitlement Receipt, shadows an entitlement send to a recepient\n     * Cannot be used to claim a reimbursement, but can be used to nullify the sent entitlement\n     *\n     * @param recipient - the address of the recipient of the entitlement (NOT THE OWNER OF THE NOTE)\n     * @param npk_m_hash - the nullifying public key hash of the escrow admin (NOT THE RECIPIENT OF THE ENTITLEMENT)\n     *                     note: this is a bit confusing but it is different because nullifcation of reads\n     * @param verifier_id - the type of verifier that the entitlement can be used for\n     * @param max_value - the maximum value that can be withdrawn from the escrow using the entitlement\n     * @param randomness - blinding factor for the note (inputted since must be same between the two notes)\n     */\n    fn new(\n        recipient: AztecAddress,\n        npk_m_hash: Field,\n        verifier_id: u8,\n        max_value: U128,\n        randomness: Field\n    ) -> Self {\n        Self {\n            recipient,\n            npk_m_hash,\n            max_value,\n            verifier_id,\n            randomness,\n            header: NoteHeader::empty()\n        }\n    }\n\n    /**\n     * Constrained computation of revocation nullifier\n     */\n    fn compute_revocation_nullifier(self) -> Field {\n        // get npk_m_hash for escrow owner from oracle\n        // incentivized to not lie on oracle call here since revocation would just fail\n        let recipient_npk_m_hash = get_public_keys(self.recipient).npk_m.hash();\n        // hash note noramlly, relying on \"randomness\" as blinding factor\n        let serialized = self.serialize_content();\n        poseidon2_hash_with_separator(\n            [\n                serialized[0],\n                recipient_npk_m_hash,\n                serialized[1],\n                serialized[2],\n                serialized[3]\n            ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"341":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/recurring_entitlement_note.nr","source":"use dep::aztec::protocol_types::{\n    address::AztecAddress,\n    traits::{Serialize, Deserialize},\n    constants::{GENERATOR_INDEX__NOTE_NULLIFIER, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_bytes},\n    utils::field::field_from_bytes,\n};\nuse dep::aztec::{note::utils::compute_note_hash_for_nullify, oracle::random::random};\nuse dep::compressed_string::CompressedString;\nuse dep::aztec::macros::notes::note_custom_interface;\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, NoteInterface, PrivateContext};\nuse dep::aztec::keys::getters::get_nsk_app;\nuse dep::aztec::generators::{Ga1, Ga2, Ga3, Ga4, Ga5, G_slot};\nuse std::embedded_curve_ops::multi_scalar_mul;\nuse std::hash::from_field_unsafe;\n\n// serializes verifier_id and max_value into one field element\nglobal RECURRING_ENTITLEMENT_NOTE_LENGTH: u32 = 5;\n\n#[note_custom_interface]\npub struct RecurringEntitlementNote {\n    // the user that is allowed to use this entitlement\n    owner: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // The nullifying public key hash of the note issuer who can revoke the entitlement\n    // constrain inclusion here since they could lie in oracle response\n    revocation_npk_m_hash: Field,\n    // the type of receipt verifier that this entitlement can be used for\n    verifier_id: u8,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // blinding factor for the note\n    randomness: Field,\n}\n\nimpl NoteInterface<RECURRING_ENTITLEMENT_NOTE_LENGTH> for RecurringEntitlementNote {\n    \n    fn serialize_content(self) -> [Field; RECURRING_ENTITLEMENT_NOTE_LENGTH] {\n        // serialize max_value and verifier_id together\n        let max_value_bytes: [u8; 16] = self.max_value.to_le_bytes();\n        let mut packed_bytes: [u8; 32] = [0; 32];\n        for i in 0..16 {\n            packed_bytes[i + 16] = max_value_bytes[i];\n        };\n        packed_bytes[1] = self.verifier_id;\n        let packed_verifier_and_max_value = field_from_bytes(packed_bytes, true);\n        // return serialized content\n        [\n            self.owner.to_field(),\n            self.npk_m_hash,\n            self.revocation_npk_m_hash,\n            packed_verifier_and_max_value,\n            self.randomness\n        ]\n    }\n\n    fn deserialize_content(serialized_note: [Field; RECURRING_ENTITLEMENT_NOTE_LENGTH]) -> RecurringEntitlementNote {\n        // unpack verifier_id and max_value\n        let packed_verifier_and_max_value = serialized_note[3];\n        let packed_bytes: [u8; 32] = packed_verifier_and_max_value.to_be_bytes();\n        let verifier_id = packed_bytes[1];\n        let mut max_value_bytes: [u8; 16] = [0; 16];\n        for i in 0..16 {\n            max_value_bytes[i] = packed_bytes[i + 16];\n        }\n        let max_value = U128::from_le_bytes(max_value_bytes);\n        // return deserialized note\n        RecurringEntitlementNote {\n            owner: AztecAddress::from_field(serialized_note[0]),\n            npk_m_hash: serialized_note[1],\n            revocation_npk_m_hash: serialized_note[2],\n            verifier_id,\n            max_value,\n            randomness: serialized_note[4],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn to_be_bytes(self, storage_slot: Field) -> [u8; RECURRING_ENTITLEMENT_NOTE_LENGTH * 32 + 64] {\n        let serialized_note = self.serialize_content();\n        let mut buffer: [u8; RECURRING_ENTITLEMENT_NOTE_LENGTH * 32 + 64] = [0; RECURRING_ENTITLEMENT_NOTE_LENGTH * 32 + 64];\n        let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n        let note_type_id_bytes: [u8; 32] = RecurringEntitlementNote::get_note_type_id().to_be_bytes();\n        for i in 0..32 {\n            buffer[i] = storage_slot_bytes[i];\n            buffer[32 + i] = note_type_id_bytes[i];\n        }\n        for i in 0..serialized_note.len() {\n            let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n            for j in 0..32 {\n                buffer[64 + i * 32 + j] = bytes[j];\n            }\n        }\n        buffer\n    }\n\n    fn get_note_type_id() -> Field { \n        comptime {\n            let bytes = \"RecurringEntitlementNote\".as_bytes();\n            let hash = poseidon2_hash_bytes(bytes);\n            let hash_bytes = hash.to_be_bytes::<4>();\n            field_from_bytes(hash_bytes, true)\n        }\n    }\n\n     fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn compute_note_hash(self) -> Field {\n        let serialized = self.serialize_content();\n        std::embedded_curve_ops::multi_scalar_mul(\n            [Ga1, Ga2, Ga3, Ga4, Ga5, G_slot],\n            [\n            from_field_unsafe(serialized[0]),\n            from_field_unsafe(serialized[1]),\n            from_field_unsafe(serialized[2]),\n            from_field_unsafe(serialized[3]),\n            from_field_unsafe(serialized[4]),\n            from_field_unsafe(self.get_header().storage_slot)\n        ]\n        ).x\n    }\n}\n\nimpl NullifiableNote for RecurringEntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for RecurringEntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.owner == other.owner)\n            & (self.max_value == other.max_value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n            & (self.verifier_id == other.verifier_id)\n            & (self.revocation_npk_m_hash == other.revocation_npk_m_hash)\n    }\n}\n\nimpl RecurringEntitlementNote {\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        revocation_npk_m_hash: Field,\n        verifier_id: u8,\n        max_value: U128,\n        randomness: Field\n    ) -> Self {\n        Self {\n            owner,\n            npk_m_hash,\n            revocation_npk_m_hash,\n            max_value,\n            verifier_id,\n            randomness,\n            header: NoteHeader::empty()\n        }\n    }\n\n    /**\n     * Compute the monthly recurring nullifier for this entitlement to be used recurringly\n     * @dev timestamp must be constrained to output from the verifier circuit\n     *      should compute the same unix timestamp according only to the month/ year\n     * @dev weaker guarantees around nullificaiton as note read nullification must come before\n     *\n     * @param timestamp - the timestamp of the month to nullify\n     */\n    fn compute_recurring_nullifier(\n        self,\n        timestamp: Field,\n    ) -> Field {\n        let serialized = self.serialize_content();\n        poseidon2_hash_with_separator(\n            [\n                serialized[0],\n                serialized[1],\n                serialized[2],\n                serialized[3],\n                serialized[4],\n                timestamp\n            ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    /**\n     * Compute the revocation nullifier that the escrow admin can emit to prevent further use of the entitlement\n     *\n     * @return the revocation nullifier\n     */\n    fn compute_revocation_nullifier(self) -> Field {\n        let serialized = self.serialize_content();\n        poseidon2_hash_with_separator(\n            serialized,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"357":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"358":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"70":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod types;\n\n#[aztec]\ncontract ZImburseEscrowRegistry {\n    use dep::aztec::prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map};\n    use dep::aztec::macros::{storage::storage, functions::{private, public, view, initializer}};\n    use dep::aztec::note::{\n        note_viewer_options::NoteViewerOptions, note_getter_options::NoteGetterOptions,\n        note_getter::{get_notes, view_notes}, constants::MAX_NOTES_PER_PAGE\n    };\n    use dep::aztec::oracle::{get_contract_instance::get_contract_instance, header::get_header_at_oracle};\n    use dep::aztec::keys::getters::get_public_keys;\n    use dep::aztec::utils::comparison::Comparator;\n    use dep::aztec::encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note_unconstrained, encode_and_encrypt_note};\n    use dep::address_note::address_note::AddressNote;\n    use dep::z_imburse_escrow::ZImburseEscrow;\n    use dep::z_imburse_dkim_registry::{ZImburseDkimRegistry, BULK_KEY_LENGTH};\n    use crate::types::{\n        escrow_registry_definition::EscrowRegistryDefinition,\n        participant_note::{ParticipantNote, NAME_LENGTH}\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        // todo: decentralize dkim registry functionality\n        definition: SharedImmutable<EscrowRegistryDefinition, Context>,\n        managed_escrows: PrivateSet<AddressNote, Context>,\n        participants: Map<AztecAddress, PrivateSet<ParticipantNote, Context>, Context>,\n        participant_escrows: PrivateSet<AddressNote, Context>,\n        contract_registration: Map<AztecAddress, SharedImmutable<bool, Context>, Context>\n    }\n\n    /**\n     * Initialize the Z-Imburse registry contract by setting the class ID of the escrow contract\n     *\n     * @param contract_class_id - The class ID of the escrow contract that all escrows must be instances of\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        dkim_registry: AztecAddress,\n        usdc: AztecAddress,\n        escrow_contract_id: Field,\n    ) {\n        let definition = EscrowRegistryDefinition::new(\n            dkim_registry,\n            usdc,\n            escrow_contract_id\n        );\n        storage.definition.initialize(definition);\n    }\n\n    // /**\n    //  * Entrypoint for registering a DKIM key in bulk in the DKIM registry\n    //  * @dev the DKIM registry is separate from escrow registry so both can import it\n    //  *\n    //  * @param dkim_verifier_ids - the verifier IDs to register the DKIM keys to\n    //  * @param dkim_key_hashes - the hashes of the DKIM keys\n    //  */\n    // #[public]\n    // fn register_dkim_bulk(\n    //     dkim_verifier_ids: [Field; BULK_KEY_LENGTH],\n    //     dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    // ) {\n    //     // check admin is sender\n    //     let definition = storage.definition.read_public();\n    //     assert(context.msg_sender() == definition.admin, \"Only admin can update dkim\");\n    //     // forward call to DKIM registry\n    //     ZImburseDkimRegistry::at(definition.dkim_registry)\n    //         .register_dkim_bulk(dkim_verifier_ids, dkim_key_hashes)\n    //         .call(&mut context);\n    // }\n\n    // /**\n    //  * Entrypoint for registering a DKIM key in the DKIM registry\n    //  * @dev the DKIM registry is separate from escrow registry so both can import it\n    //  *\n    //  * @param dkim_verifier_id - the verifier ID to register the DKIM key to\n    //  * @param dkim_key_hash - the hash of the DKIM key\n    //  */\n    // #[public]\n    // fn register_dkim(dkim_verifier_id: Field, dkim_key_hash: Field) {\n    //     // check admin is sender\n    //     let definition = storage.definition.read_public();\n    //     assert(context.msg_sender() == definition.admin, \"Only admin can update dkim\");\n    //     // forward call to DKIM registry\n    //     ZImburseDkimRegistry::at(definition.dkim_registry)\n    //         .register_dkim(dkim_verifier_id, dkim_key_hash)\n    //         .call(&mut context);\n    // }\n\n    /**\n     * Check the authenticity and deployment status of an escrow contract and register it in the Z-Imburse registry\n     * @dev the header will not include the contract address and the contract \n     *\n     * @param escrow_contract - the address of the escrow contract to register\n     */\n    #[private]\n    fn register_escrow(escrow_contract: AztecAddress) {\n        // check that the contract has not already been registered\n        let registration_status = storage.contract_registration.at(escrow_contract).read_private();\n        assert(!registration_status, \"Escrow contract has already been registered\");\n\n        // check that the contract admin is the sender of the message\n        let escrow_admin = ZImburseEscrow::at(escrow_contract).get_admin_private().view(&mut context);\n        assert(escrow_admin == context.msg_sender(), \"Escrow contract admin does not match sender of message\");\n        // todo: check that dkim registry matches\n\n        // check that the contract has been deployed\n        let header = context.historical_header;\n        header.prove_contract_initialization(escrow_contract);\n\n        // check the contract class ID\n        // THIS IS NOT CONSTRAINED THE ORACLE CAN JUST LIE ://////\n        // need to compute the full contract address to prove it uses the correct class\n        let contract_class_id = get_contract_instance(escrow_contract).contract_class_id.to_field();\n        let expected_class_id = storage.definition.read_private().escrow_contract_id;\n        assert(\n            contract_class_id == expected_class_id, \"Escrow contract class ID does not match expected class ID\"\n        );\n\n        // privately add the escrow contract to the list of managed escrows\n        let admin_keys = get_public_keys(context.msg_sender());\n        let mut escrow_note = AddressNote::new(escrow_contract, admin_keys.npk_m.hash());\n        // use unconstrained - why would you lie here\n        storage.managed_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, context.msg_sender())\n        );\n\n        // publicly add the escrow contract to the list of participant escrows\n        ZImburseEscrowRegistry::at(context.this_address()).set_contract_registered(escrow_contract).enqueue(&mut context);\n    }\n\n    /**\n     * Publicly set the contract registration status\n     *\n     * @param escrow_contract - the address of the escrow contract that has privately been constrained to be valid\n     */\n    #[public]\n    #[internal]\n    fn set_contract_registered(escrow_contract: AztecAddress) {\n        storage.contract_registration.at(escrow_contract).initialize(true);\n    }\n\n    #[private]\n    fn check_and_register_participant(participant: AztecAddress, participant_name: str<60>, escrow: AztecAddress) {\n        // check that the sender is the admin\n        let escrow_admin = ZImburseEscrow::at(escrow).get_admin_private().view(&mut context);\n        assert(escrow_admin == context.msg_sender(), \"Sender is not the admin of the escrow contract\");\n        // check that the escrow address is registered\n        let registration_status = storage.contract_registration.at(escrow).read_private();\n        assert(registration_status, \"Escrow contract has not been registered\");\n        // check if the participant has already been registered\n        let options = NoteGetterOptions::new().select(AddressNote::properties().address, Comparator.EQ, participant).set_limit(1);\n        let participant_exists = storage.participants.at(escrow).get_notes(options).len() == 0;\n        // if the participant has not been registered, enqueue a private call to register the participant\n        // do this instead of if statement here to make adding first time expensive but cheap if already registered\n        if participant_exists {\n            ZImburseEscrowRegistry::at(context.this_address()).register_participant(participant, participant_name, context.msg_sender(), escrow).call(&mut context);\n        }\n    }\n\n    #[private]\n    #[interal]\n    fn register_participant(\n        participant: AztecAddress,\n        participant_name: str<60>,\n        admin: AztecAddress,\n        escrow: AztecAddress\n    ) {\n        let admin_keys = get_public_keys(admin);\n        let participant_keys = get_public_keys(participant);\n        // add escrow to the participant's set of escrows\n        let mut escrow_note = AddressNote::new(escrow, participant_keys.npk_m.hash());\n        storage.participant_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note(\n                &mut context,\n                admin_keys.ovpk_m,\n                participant_keys.ivpk_m,\n                participant\n            )\n        );\n        // add the participant to the admin set of participants\n        let mut participant_note = ParticipantNote::new(\n            participant,\n            participant_name,\n            admin_keys.npk_m.hash()\n        );\n        storage.participants.at(escrow).insert(&mut participant_note).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                admin_keys.ovpk_m,\n                admin_keys.ivpk_m,\n                admin\n            )\n        );\n    }\n\n    // todo: add ability to remove participant\n    // todo: add ability to remove participant escrows by looking up nullifications\n\n    /** Get the class ID that all escrow contracts must match */\n    #[public]\n    #[view]\n    fn get_escrow_class_id() -> Field {\n        storage.definition.read_public().escrow_contract_id\n    }\n\n    /** Get the registration status of an escrow contract */\n    #[public]\n    #[view]\n    fn get_contract_registration_status(escrow_contract: AztecAddress) -> bool {\n        storage.contract_registration.at(escrow_contract).read_public()\n    }\n\n    /**\n     * Get a page of the list of escrows administrated by a given address (private)\n     *\n     * @param admin - the address of the admin\n     * @param page_index - the index of the page to retrieve\n     * @return managed_escrows - the list of managed escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_managed_escrows(\n        admin: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], bool, u32) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.managed_escrows.view_notes(options);\n        let mut managed_escrows: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                managed_escrows[i] = notes.get_unchecked(i).address;\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (managed_escrows, page_limit_reached, notes.len())\n    }\n\n    /**\n     * Get a page of the list of escrows participated in by a given address (private)\n     *\n     * @param admin - the address of the participant\n     * @param page_index - the index of the page to retrieve\n     * @return participant_escrows - the list of enrolled escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participant_escrows(\n        participant: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.participant_escrows.view_notes(options);\n        let mut participant_escrows: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                participant_escrows[i] = notes.get_unchecked(i).address;\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (participant_escrows, page_limit_reached)\n    }\n\n    /**\n     * Get a page of the list of of participants in an escrow (private)\n     *\n     * @param admin - the address of the escrow\n     * @param page_index - the index of the page to retrieve\n     * @return participants - the list of participating addresses\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participants(\n        escrow: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], [[u8; NAME_LENGTH]; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.participants.at(escrow).view_notes(options);\n        let mut participants: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        let mut participant_names: [[u8; NAME_LENGTH]; MAX_NOTES_PER_PAGE] = [[0; NAME_LENGTH]; MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                let participant_note = notes.get_unchecked(i);\n                participants[i] = participant_note.address;\n                participant_names[i] = participant_note.get_name();\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (participants, participant_names, page_limit_reached)\n    }\n}\n\n"},"71":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow_registry/src/types/escrow_registry_definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal ESCROW_REGISTRY_DEFINITION_LENGTH: u32 = 3;\n\npub struct EscrowRegistryDefinition {\n    dkim_registry: AztecAddress,\n    usdc: AztecAddress,\n    escrow_contract_id: Field\n}\n\nimpl Serialize<ESCROW_REGISTRY_DEFINITION_LENGTH> for EscrowRegistryDefinition {\n    fn serialize(self: Self) -> [Field; ESCROW_REGISTRY_DEFINITION_LENGTH] {\n        [self.dkim_registry.to_field(), self.usdc.to_field(), self.escrow_contract_id]\n    }\n}\n\nimpl Deserialize<ESCROW_REGISTRY_DEFINITION_LENGTH> for EscrowRegistryDefinition {\n    fn deserialize(fields: [Field; ESCROW_REGISTRY_DEFINITION_LENGTH]) -> Self {\n        EscrowRegistryDefinition {\n            dkim_registry: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            escrow_contract_id: fields[2]\n        }\n    }\n}\n\nimpl EscrowRegistryDefinition {\n    /**\n     * Create a new definition for a Z-Imburse escrow registry contract\n     *\n     * @param dkim_registry The address of the DKIM registry\n     * @param usdc The address of the USDC token\n     * @param escrow_contract_id The ID of the escrow contract\n     * @return The new escrow registry definition\n     */\n    pub fn new(\n        dkim_registry: AztecAddress,\n        usdc: AztecAddress,\n        escrow_contract_id: Field\n    ) -> Self {\n        EscrowRegistryDefinition { dkim_registry, usdc, escrow_contract_id }\n    }\n}\n "},"73":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow_registry/src/types/participant_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator, traits::{Serialize, Deserialize}\n},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\nuse dep::compressed_string::CompressedString;\n\nglobal NAME_LENGTH: u32 = 60;\nglobal NAME_SERIALIZED_LENGTH: u32 = 2;\n\n#[note]\npub struct ParticipantNote {\n    address: AztecAddress,\n    name: [Field; 2],\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n\nimpl NullifiableNote for ParticipantNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for ParticipantNote {\n    // does not check for participant name\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl ParticipantNote {\n    pub fn new(address: AztecAddress, name: str<NAME_LENGTH>, npk_m_hash: Field) -> Self {\n        let randomness = unsafe { random()};\n        let name_serialized: CompressedString<NAME_SERIALIZED_LENGTH, NAME_LENGTH> = CompressedString::from_string(name);\n        ParticipantNote { address, name: name_serialized.value, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_name(self) -> [u8; NAME_LENGTH] {\n        CompressedString::<NAME_SERIALIZED_LENGTH, NAME_LENGTH> { value: self.name }.to_bytes()\n    }\n}\n"},"75":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe { random() };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"89":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"90":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"92":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"93":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"96":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"98":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"}}}