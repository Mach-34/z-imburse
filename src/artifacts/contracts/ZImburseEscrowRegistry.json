{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-aarch64","name":"ZImburseEscrowRegistry","functions":[{"name":"register_escrow","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_nullifier_membership_witness","get_contract_instance_internal","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"451":"Initialization hash does not match","189":"attempt to add with overflow","573":"Not initialized","1469":"Array index out of bounds","1847":"Array index out of bounds","1329":"attempt to add with overflow","1250":"Array index out of bounds","1183":"attempt to add with overflow","476":"SharedImmutable already initialized","1427":"attempt to add with overflow","1933":"attempt to add with overflow","970":"Array index out of bounds","775":"Function get_contract_registration_status can only be called statically","1226":"Array index out of bounds","1543":"Array index out of bounds","1671":"Array index out of bounds","1860":"attempt to add with overflow","1208":"Array index out of bounds","245":"attempt to add with overflow","757":"attempt to add with overflow","1397":"Array index out of bounds","1720":"Array index out of bounds","227":"Array index out of bounds","1891":"attempt to add with overflow","1117":"Array index out of bounds","1757":"Array index out of bounds","1172":"Array index out of bounds","1556":"attempt to add with overflow","1873":"Array index out of bounds","1739":"Array index out of bounds","1477":"attempt to add with overflow","1733":"attempt to add with overflow","124":"attempt to add with overflow","691":"Function get_escrow_class_id can only be called statically","234":"Array index out of bounds","1130":"attempt to add with overflow","100":"attempt to add with overflow","1258":"Array index out of bounds","1514":"attempt to add with overflow","1819":"attempt to add with overflow","1831":"Array index out of bounds","1880":"Array index out of bounds","978":"Array index out of bounds","1679":"Array index out of bounds","76":"attempt to add with overflow","1161":"attempt to add with overflow","1027":"Array index out of bounds","1216":"attempt to add with overflow","637":"Storage slot 0 not allowed. Storage slots must start from 1.","771":"Not initialized","1143":"Array index out of bounds","1405":"Array index out of bounds","1009":"Array index out of bounds","1527":"Array index out of bounds","1771":"attempt to add with overflow","1192":"Array index out of bounds","1704":"Array index out of bounds","1905":"Array index out of bounds","223":"attempt to add with overflow","991":"attempt to add with overflow","1503":"Array index out of bounds","1692":"attempt to add with overflow","1101":"Array index out of bounds","1418":"attempt to add with overflow","1485":"Array index out of bounds","1869":"attempt to add with overflow","1089":"attempt to add with overflow","1150":"Array index out of bounds","1923":"attempt to add with overflow","1912":"Array index out of bounds","949":"attempt to add with overflow","1266":"Array index out of bounds","559":"attempt to add with overflow","687":"Not initialized","1449":"attempt to add with overflow","1589":"Array index out of bounds","1315":"Array index out of bounds","1571":"Array index out of bounds","1839":"Array index out of bounds","1955":"attempt to add with overflow","1431":"Array index out of bounds","657":"SharedImmutable already initialized","1041":"attempt to add with overflow","1297":"Array index out of bounds","1937":"Array index out of bounds","578":"Function set_contract_registered can only be called internally","834":"Storage slot 0 not allowed. Storage slots must start from 1.","962":"Array index out of bounds","1279":"attempt to add with overflow","1535":"Array index out of bounds","1139":"attempt to add with overflow","1200":"attempt to add with overflow","1389":"Array index out of bounds","938":"Array index out of bounds","1651":"attempt to add with overflow","1663":"Array index out of bounds","1377":"attempt to add with overflow","1438":"Array index out of bounds","1712":"Array index out of bounds","1901":"attempt to add with overflow","1109":"Array index out of bounds","1237":"attempt to add with overflow","1493":"attempt to add with overflow","1944":"Array index out of bounds","457":"Initializer address is not the contract deployer","1603":"attempt to add with overflow"}},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"dkim_registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow_contract_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"509":"Array index out of bounds","119":"Array index out of bounds","695":"Array index out of bounds","494":"attempt to add with overflow","677":"Array index out of bounds","415":"attempt to add with overflow","671":"attempt to add with overflow","473":"Array index out of bounds","342":"Initializer address is not the contract deployer","601":"Array index out of bounds","336":"Initialization hash does not match","589":"attempt to add with overflow","74":"attempt to add with overflow","650":"Array index out of bounds","452":"attempt to add with overflow","769":"Array index out of bounds","757":"attempt to add with overflow","431":"attempt to add with overflow","108":"attempt to add with overflow","617":"Array index out of bounds","541":"attempt to add with overflow","407":"Array index out of bounds","465":"Array index out of bounds","785":"Array index out of bounds","709":"attempt to add with overflow","130":"attempt to add with overflow","642":"Array index out of bounds","441":"Array index out of bounds","630":"attempt to add with overflow","112":"Array index out of bounds","368":"SharedImmutable already initialized","423":"Array index out of bounds","481":"Array index out of bounds","609":"Array index out of bounds","798":"attempt to add with overflow","658":"Array index out of bounds","527":"Array index out of bounds","777":"Array index out of bounds"}},{"name":"check_and_register_participant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"7b3bjvRKcqX5LnWtCx6Mp36VgTBQ9/QMBAhSo6UeYNDQu0/sQ0ZmVS6G1e+0YJJm342wf1VEOO1zJ7nc0s3W//7L//Xf/+v/+n/+z3/+1//73/79L//l//jff/mXf/tv//Qf//xv//r41//+y2K////+/X/807/+9s9//49/+p//8Zf/0i+D/cNf/vu//l+//edo//kPf/m///lf/vtf/ssy/uc/fPvwsEwfHx6WZX5+uJ828enRxunPT49Ttzqf7rtlHD+upFvs89fHXn7euvXj4zYsn5829eG+/7iUvp/t64f/8R/+skyQ2SEzQ2aHzAKZHTIrZHbIbJDRZNYOMjtkesjskBkgs0NmhMwOGYPMDhk08B4ZNPAeGTTwHhk08B4ZNPAOmQ0NvEcGDbxHBg28RwYNvEfGILNDBg28RwYNvEcGDbxHBg28RwYNvEOm7xDBu2hQwbtokMG7aNDBu2gMNHtoUMK7aJDCu2jQwrtoEMO7aFDDe2h61PAuGtTwLhrU8C4a1PAuGgPNHhrU8C4a1PAuGtTwLhrU8C4a1PAemgE1vIsGNbyLBjW8iwY1vIvGQLOHBjW8iwY1vIsGNbyLBjW8iwY1vIdmRA3vokEN76JBDe+iQQ3vojHQ7KFBDe+iQQ3vokEN76JBDe+iQQ3voTHU8C4a1PAuGtTwLhrU8C4aA80eGtTwLhrU8C4a1PAuGtTwLhrU8B6aCTW8iwY1vIsGNbyL5vJqeOk+0azmoVmX4ePj69YfQ2Og2UNzeTX8c2gur4Z/Ds1xNTyu48ejb1yXzw9v6x8jrG8f4bg264dx/vjwsPRfJmwVn97G7oPpNg7D1+sRK2ec1o+rf4zSL397+XN378uXGmde5+3Pb83b0L2+fJuW/s8P27R93lzbJD78eTnzMH5GOsx/XM1w/Grm4eNutHl2rubxbNmeL/5p++1+/Rs849UuyM6+oG1aPi9o/Xb7ztPVLmg+fkGLfTyibZn71xe0DR8/vNnn7/72YBcX8XGjLP389aO/X/dy2ete5g/iyza8/ug4TB8/O46D96btu/GLTh9tOfHdOa/wPpX3Bu8zeS/ddXnbrHn/ft1akWxT/7zudfl63b9/SQqHpX9e0+OB278Odhs+Bti+ajCt2J4X029f5rRT0/T4tadeW+bRWQHj+nHFNnav539Y1um5qdk2Z7FErqwR2OfBtsOw++55v/WPp5CH+5HB+rwe5wkxb/a8jK/zOPxx7dONr32+8bUvN7721b32dXCyPY+szXPP++Vd8dsQ4mW0PJ8YX7Zbj4Cu9j7fACPBaEMgwPTaD+iNYPruKaQfD431r9D8fkHD1S5ovNoF2dUuaLraBc1Xu6Dlahe0Xu2Ctotd0NZd7YLOf1IPn/JuHr5f0HC1Czr9ST0vzylbvgpg+Zq355+4bPry0h7k3teee99p+qvP/h6oVQl0qhLonCfQuXtmV0SgS5VA1yqBbnkCXZ+Bfk3f/RHo0HVVAu2rBDoker18ni/quu+R5pFGj/iex2a6wb6HanVCzSOP3FATCaQvt+owfY/04gpp+7iOaZu8SN/2l7Zx+jyxtngZ0LiD20N3cVVXe3IurkQvMTk/9Dfqob+4eq49ORdX/EGT83uo52v+6csx78kJ9cuxp/nzl4d5/ePixztfvN354qc7X/x854tf7nzx650vfrvxxQ/dnS++v/PF3/kNO9z5DTvc+Q073PkNO9z5DTvc+Q073PkNO9z5DTve+Q073vkNO975DTve+Q073vkNO975DTve+Q073vkNO975DTve+Q1rd37D2p3fsHbnN6zd+Q1rd37D2p3fsHbnN6zd+Q1rd37D2p3fsNOd37DTnd+w053fsNOd37DTnd+w053fsNOd37DTnd+w053fsNOd37Dznd+w853fsPOd37Dznd+w853fsPOd37Dznd+w853fsPOd37Dznd+wy53fsMud37DLnd+wy7XfsOv88eF12b5f/LXfsM7FX/sNu83PLhtfS0l/u/rvH7b52ejKls7ra5+vcmK5tuBgLn9lLq+tv5jLX5nLa8tR5vJX5vLa6py5/IW5XK+9WWEuf2Uur713Yy5/ZS6vvZVlLn9lLq+9s2cuf2UujblMM5fkffLMJXmfPHNJ3ifPXJL3yTOX5H3SzOVG3ifPXJL3yTOX5H3yzCV5nzxzacxlmrkk75NnLsn75JlL8j555pK8T565JO+TZS7HjrxPnrkk75NnLsn75JlL8j555tKYyzRzSd4nz1yS98kzl+R98swleZ88c0neJ81c9uR98swleZ88c0neJ89ckvfJM5fGXKaZS/I+eeaSvE+euSTvk2cuyfvkmUvyPmnm8uK2y8zlr8wleZ88c0neJ89ckvfJM5fGXKaZS/I+eeaSvE+euSTvk2cuyfvkmUvyPmnmciTvk2cuyfvkmUvyPnnmkrxPnrk05jLNXJL3yTOX5H3yzCV5nzxzSd4nz1yS90kzl0beJ89ckvfJM5fkffLMJXmfPHNpzGWauSTvk2cuyfvkmUvyPnnmkrxPnrkk75NmLifyPnnmkrxPnrkk75NnLsn75JlLYy7TzCV5nzxzSd4nz1yS98kzl+R98swleZ80czmT98kzl+R98swleZ88c0neJ89cGnOZZi7J++SZS/I+eeaSvE+euSTvk2cuyfukmcuFvE+euSTvk2cuyfvkmUvyPnnm0pjLNHNJ3ifPXJL3yTOX5H3yzCV5nzxzSd4nzVyu5H3yzCV5nzxzSd4nz1yS98kzl8ZcpplL8j555pK8T565JO+TZy7J++SZS/I+aeZyI++TZy7J++SZS/I+eeaSvE+euTTmMs1ckvfJM5fkffLMJXmfPHNJ3ifPXJL3yTKX1pH3yTOX5H3yzCV5nzxzSd4nz1wac5lmLsn75JlL8j555pK8T565JO+TZy7J+6SZy568T565JO+TZy7J++SZS/I+eebSmMs0c0neJ89ckvfJM5fkffLMJXmfPHNJ3ifNXA7kffLMJXmfPHNJ3ifPXJL3yTOXxlymmUvyPnnmkrxPnrkk75NnLsn75JlL8j5p5nIk75NnLsn75JlL8j555pK8T565NOYyzVyS98kzl+R98swleZ88c0neJ89ckvdJM5dG3ifPXJL3yTOX5H3yzCV5nzxzacxlmrkk75NnLsn75JlL8j555pK8T565JO+TZi4n8j555pK8T565JO+TZy7J++SZS2Mu08wleZ88c0neJ89ckvfJM5fkffLMJXmfNHM5k/fJM5fkffLMJXmfPHNJ3ifPXBpzmWYuyfvkmUvyPnnmkrxPnrkk75NnLsn7pJnLhbxPnrkk75NnLsn75JlL8j555tKYyzRzSd4nz1yS98kzl6fnfaZt3ZvL3y/o7OTFMA7D56d7Z3H1w/BcisOXWR1+++a3T8/j0P/56Xk0+7IW1XKZ5w8y47zMnx+e1IcfS+7jw+Mwff3w7xQ3KB6nuHZQDKDYQzGA4gDFv4ei2cdVjzat3yiOUAygaFD8uyguy5PiNrz+8LCtz1/+K9kqPzyuHxp3sG78Nj8T8/Oz82PTU84/FO3rD0/dx2ensf8a3u9TOTOVWaZyYSqzTCWb1J+eyu3jl4dp6I5MJTvlLFO5sV3/4amcn9MzzF/n5w9ZupEIuPb8kGK49vyQvLj2/Bjz87Pzs4zPtMiyTK8//PjT2fOvaFv/LYeykUNJNJlkUW40mUNnHwEO3Zc/WTfsCEi51Jx38jM1551kzq3mffmYl6HvhvZ5nzoyPzXnnYxS+LyP3fOix250fvn1H6KnjozSD89P1J+8po7kU5qpNKbyh6cy6E9ej/+NqcwyleSofngqX2b3p45c0rXnh5zPteeH3Myl56cnh/LD8xP3B6+pJzGSaDLJotxoMsP+mjH1pFxqzrsx7yXnnWTOreY96q9YPZmfmvNORil+3h9T8vHhfjyou8koXXt+yCj97PzESZ+B5FOaqST1lGYqSTylmUpyST89lVHbhsGYyixTScbn75rKaRo/PjzNztG3wEZK00Bm5ofnJ+zQ40CyJc1UkpdJM5WkcH56KqPOr46kcNJMJSmcH57K10f1RvIy154fki3Xnh9jfi49P6RFfnh+Ak+vjuRQEk0mWZQbTWbcn49GUi415538TMl5N5I5t5r3qD9IGpmfmvNORil83iMbKRkZpR+en7A/eZkxlVmmkjzVT09l1J+8jCxVmqkkR/XDU/k6u2/kkq49P+R8Lj0/E7mZa88POZQfnp/AP3hNJEYSTSZZlBtNZtxfMyZj3kvOO/mZmvNOMudW8x71V6yJzE/NeSejFD/vgY16JjJKl56fmYzSz85PnPSZST6lmUpST2mmksRTmqk0pvKHpzJq2zCTHkozladnfKz/IDjYl5+++FSO/QeQcRymb/uABYoBFFcoBlDcoHic4tJB8e/qFWjPt5ZN6zeKPRQDKA5QjO5bGdnscBmZn5+dn7DChMWYyixTOTGVWaaSTepPT2VUjcnCTjnNVLJd/+GpfH2cfiERcOn5WUkxXHt+SF5ce35Ii/zw/ARWmKzkUBJNpjGZ95nMuCMeKymXmvNOfqbmvJPMudW8Rx0aWsn81Jx3Mkrh8x7Z7HAjo/TD8xP2J6+N5FOaqSRP9dNTGfUnr40sVZqpNKbyZ6fydXZ/I5d07fkh53Pt+SE3c+35IYfyw/MT+AevjcRImsmcO7IoN5rMsL9mzB0pl5rzTn6m5ryTzLnVvAf9FWvujHkvOe9klOLnPa6Z3tyRUbr2/JBR+tn5CZQ+JJ/STCWppyxT2ZN4SjOV5JJ+eiqjtg096aE0U0nG5++ayveZtL88vzr3xvz87PxEHXqce5ItaaaSvEyaqSSF89NTGXR+de5J4aSZSlI4PzyVL4/qzQN5mWvPD8mWa88PGZRrzw9pkR+en8DTq4MxmXkmkyzKjSYz7s9HAymXmvNOfqbmvJPMudW8R/1BciDzU3LeRzJK4fMe2EjpsUdmfn52fsL+5DWSfEozleSpfnoqo/7kNRpTmWUqyVH98FS+zu6P5JKuPT/kfK49P+Rmrj0/5FB+eH4C/+BlJEYSTSZZlBtNZtxfM4yUS815Jz9Tc96Neb/TvEf9FcvI/NScdzJK8fMe2KjHyChde37IKP3s/ARKH5JPWaZyIvWUZipJPKWZSnJJPz2VUduGifRQmqm0s6dy7p+ffvzF76+m8vcLmq52Qafvkaf1ObmPP6N9v6Dlahd0+i5oGcfPbIm4oO1iFzR3V7ug/moXFKAOpueHh2nqnQuaho9Tc9OXh/7YLX9cznity7FrXc50rcuZr3U5y7UuZ73W5WyXupylu9bl6Ofy0H1I1GX4csR3+ePZuehnp20fKniZ+uV1DNtTA2/L1wikvJ76Z0p0+RKBqd9d+un5w/Nn/nTsN6WBnzrDvsj20eT7ZH0eJVu27fWH+3V5ZnHXrXc+3D8vue+/7HgfH/4d9gjs82DbYdh9Z/NzhC/1YTu4++eW7XE9nTOP00eg2/xl37D+ee3Tja99vvG1Lze+9tW99i+pATnAuDzv63H9ullb1f1n3fpxPfbIlTw//XE927WuZ+0udj39xa5nuNj1jBe7HrvY9UwXu575YtezXOx6LvZ8Xi/2fN4u9nzeLvZ83i72fN4u9nzeLvZ83i72fN4u9nzeLvZ83i72fN6u9Xxeums9n5fuWs/npbvW83nprvV8XrprPZ+X7lrP56W71vN56a71fF66az2fl+5iz+f+Ys/n/mLP5/705/PYdc8s+ZdkvfzwtDz71U3rOLz+8Dp9XPO6fEkEjvMfgY5VArUqgU5VAp2rBLpUCXStEuhWJNChqxJoXyXQKspoqKKMhirKaKiijIYqymioooyGKspoqKKMxirKaKyijMYqymisoozGKsporKKMxirKaKyijMYqymisooysijKyKsrIqigjq6KMrIoysirKyKooI0ukjLZnfd+XkrbfAv3+2d7WZ6+SR6zfsSTSUZFYEqmuQCxTIo0WiSWRoovEkkj/RWJJpBYjsRhYFJZESjQSSyLdGokFlSuxoHIlFlSuwjKjciUWVK7EgsqVWFC5EouBRWFB5UosqFyJBZUrsaByJRZUrsKyoHIlFlSuxILKlVhQuRKLgUVhQeVKLKhciQWVK7GgciUWVK7CsqJyJRZUrsSCypVYULkSi4FFYUHlSiyoXIkFlSuxoHIlFlSuwrKhciUWVK7EgsqVWFC5EouBRWFB5UosqFyJBZUrsaByJRZUrsCydqhciQWVK7GgciUWVK7EYmBRWFC5EgsqV2JB5UosqFyJBZWrsPSoXIkFlSuxoHIlFlSuxGJgUVhQuRILKldiQeVKLKhciQWVq7BkcgiKxILKlVhQuRILKldiMbAoLKhciQWVK7GgciUWVK7EgspVWDK5PUViQeVKLKhciQWVK7EYWBQWVK7EgsqVWFC5EgsqV2JB5SosmZy7IrGgciUWVK7EgsqVWAwsCgsqV2JB5UosqFyJBZUrsaByFRa8zzQWVK7EgsqVWFC5EouBRWFB5UosqFyJBZUrsaByJRZUrsKC95nGgsqVWFC5EktRlTsN8weWydbvWKwklqFbP7AMvfXfsdRUucM4f3x4GNfuO5aaKtfFUlPlulhqqlwXS02VO9g6fmCx7fubqKj3mYulpsp1sdRUuS6WmirXxWI1sUzrx1UMk8JSVOV6WIqqXA9LUZXrYSmqcj0sRVWug6Wo95mLpajK9bAUVbkelqIq18NiYFFYULkSCypXYkHlSiyoXIkFlauwFPU+c7GgciUWVK7EgsqVWAwsCgsqV2JB5UosqFyJBZUrsaByBZatqPeZiwWVK7GgciUWVK7EYmBRWFC5EgsqV2JB5UosqFyJBZWrsBT1PnOxoHIlFlSuxILKlVgMLAoLKldiQeVKLKhciQWVK7GgchWWot5nLhZUrsSCypVYULkSi4FFYUHlSiyoXIkFlSuxoHIlFlSuwlLU+8zFgsqVWFC5EgsqV2IxsCgsqFyJBZUrsaByJRZUrsSCylVYinqfuVhQuRILKldiQeVKLAYWhQWVK7GgciUWVK7EgsqVWFC5CktR7zMXCypXYkHlSiyoXInFwKKwoHIlFlSuxILKlVhQuRILKldhKep95mJB5UosqFyJBZUrsRhYFBZUrsSCypVYULkSCypXYkHlKixVvc88LKhciQWVK7GgciUWA4vCgsqVWFC5EgsqV2JB5UosqFyFBe8zjQWVK7GgciUWVK7EYmBRWFC5EgsqV2JB5UosqFyJBZWrsOB9prGgciUWVK7EgsqVWAwsCgsqV2JB5UosqFyJBZUrsaByBZa+w/xshws6V3NB6GouKF3NxeAiuaB1NRfEruaC2tVckLuaC3pXcsEGbYcLeldzQe9qLuhdzcXgIrmgdzUX9K7mgt7VXNC7mgt6V3LBEG2HC3pXc0Hvai7oXc3F4CK5oHc1F/Su5oLe1VzQu5oLeldywRpthwt6V3NB72ou6F3NxcpzmbvJ+fQyjx80lvn52Wn9E2FVaTwNnwgXsbSqSmOPS1Vp7HGpKo09LlWlscOlrJ+ax6WmNB4fYD6ueex6waWmNPa5FJXG1n+ousGmzfm09fPycc39+ikClz8ZGgwPMyyqo8f548PDuHbi/iyqo10uRXW0y6Wojrb181mkUh1VDds8LlUd21wuRVPMLpeiKWaXCylmmWLGtW2HC0cqNBeOVGguHKnQXDhSoblwpEJywbtthwtHKjQXjlRoLuhdzcXgIrmgdzUX9K7mgt7VXNC7mgt6V3LBxW2HC3r36NHHspZvzhGcsp5vHheDi+TCEWLNhSPEmgtHiDWXotJ46z6uedimQXApKo09LlWt31wuRaWxy6Wo3nW5FNW7LheDi+RSU++6R/GLGsD5XGrq3bEbPrIvY2cihVXUAs7nUvWob2A5RlXDuFCGVY8QRzKsetw4kiElfscZGgwPM6TET5ZsVbXEc7lQ4qe5FM1zu1wo8VOlSX1VVzyXCyV+mgslfppLVR3tcTGOmEkuHHnWXDjyrLlw5Flz4ciz5sKRZ8kFV7wdLhx51lwo8dNcKPHTXAwukgt6V3NB72ou6F3NBb2ruaB3JRdc8Xa4oHc1F/TuwdLHvqyB3usSnL6sgZ7HhRI/zYUSP82FEj/NBZcQzYUSP1Vq0lc10HO5UOKnuVDip7lQ4qe5GFwkl6J61+VCiZ8q8euLuuL5XCjxUyV+fVFXPJdLVVe8wDKVvqiDXixDyvaOM6Rs7zhDg+FhhkW1fChDSvxUyVaPi98OF0r8NJeieW6PCy5+ujQJF78dLpT4aS6U+GkuBhfJhSPP8ogZLn47XDjyrLlw5Flz4ciz5IKL3w4XjjxrLhx51lwo8dNcDC6SC3pXc0Hvai7oXc0Fvau5oHclF1z8drigdzUX9K7mgt49WvqIi58uwcHFb4cLJX6aCyV+mgslfppLVWnscMHFT5ea4OK3w4USP82FEj/NxeAiuVDip7kU1bsuF0r8ZIlfVRc/lwslfrLEr6gzn8+Fsr3DZSq47QUwpGzvOEOD4WGGlO0dZ1hUy4cypMRPlmzh4rfDhRI/xWWo6uLncqHET5UmDbj47XChxE9zMbhILlV1tMeFI8+T5MKRZ82FI8+aC0eeJRdc/Ha4cORZc+HIs+bCkWfNxeAiuVDip7mgdzUX9K7mgt7VXNC7kgsufjtc0LuaC3pXc0Hvai5G6eOx0scBFz9ZgjPg4rfDhRI/zYUSP82FEj/JpaqLn8uFEj9VajLg4rfDhRI/zcXgIrlQ4qe5UOKnuRTVuy4XSvxUid9Q1cXP41LUxc8r8RuKOvP5XCjbO1qmMuC2F8DQYHiYIWV7xxlStnecYVEtH8qQEj9ZsoWLn+ZS1cXP5VI0z+1yocRPlibh4rfDxeAiuVDip7lU1dEeF448yyNmuPjtcOHIs+SCi98OF448ay4cedZcOPKsuRhcJBdK/DQXSvw0F/Su5oLe1VzQu5ILLn47XNC7mgt6V3NB72ouBhfJBb17tPQRFz9dgoOL3w4XSvw0F0r8JJeqLn4ul6rS2ONCiZ8sNcHFb4eLwUVyocRPc6HET3OhxE9zKap3XS6U+MkSv6oufi4XSvxkiV9RZz6fC2V7h8tUcNsLYEjZ3nGGlO0dZ0jZ3nGGRbV8KENK/FTJ1oiL3w4XSvw0l6J5bpcLJX6qNOmxSYKL5EKJn+ZCiZ/mUlVHe1w48jxJLhx5llxw8dvhwpFnzYUjz5oLR541F4OL5MKRZ82FEj/NhRI/zQW9q7mgdyUXXPx2uKB3NRf0ruaC3tVcDC6SC3pXc0HvHix9HHHxkyU4Iy5+O1wo8ZNccPHb4UKJn+ZSVRp7XCjxU6UmIy5+O1wo8dNcKPHTXCjx01wo8dNciupdj0tVFz+nxG+s6uLncqHET5X4jUWd+XwuRpnKwTKVEbe9AIaU7R1nSNnecYaU7R1nWFTLRzLExU+XbOHit8OFEj/NpWie2+VilCapow64+O1wocRPc6HET3OpqqM9Lhx5lkfMcPHb4cKRZ82FI8+aC0eeNReDi+TCkWfNhSPPmgslfpoLJX6aC3pXcsHFb4cLeldzQe9qLuhdzcXgIrmgdzUX9K7mgt49WvqIi58uwcHFT3PBxW+HCyV+mgslfppLVWnscTFKTVSpCS5+O1wo8dNcKPHTXCjx01wo8ZNcirr4+Vwo8ZMlflVd/FwulPjJEr+iznw+F8r2Dpep4LYXwJCyveMMKds7zpCyvaMMraozXyhDSvxUyZbh4rfDhRI/zcXgIrlQ4qdKkwwXvx0ulPhpLpT4aS5VdbTDBRc/ecTMcPHb4cKRZ82FI8+ai8FFcuHIs+bCkWfNhSPPmgslfpoLJX6SCy5+O1zQu5oLeldzQe9qLgYXyQW9q7mgdzUX9K7mgt49WPpouPjJEhzDxW+HCyV+mgslfpoLJX6ai8FFcqHET5WaGC5+O1wo8dNcKPHTXCjxk1yKuvj5XIrqXZcLJX6qxM+quvi5XIwSP1HiZ0Wd+XwulO0dLlPBbS+AIWV7xxlStneYYVW3vVCGRbV8KENK/GTJFi5+O1wMLpJL0Ty3y4USP1mahIvfDhdK/DQXSvwkl6oufi4XjjzLI2a4+O1w4ciz5mJwkVw48qy5cORZc+HIs+bCkWfNhRI/yQUXvx0u6F3NBb2ruaB3NReDi+SC3tVc0LuaC3pXc0Hvai7o3aOlj7j46RIcXPx2uFDip7lQ4qe5GFwkl6rS2ONCiZ8sNcHFb4cLJX6aCyV+kgsufjtcKPHTXIrqXZcLJX6yxK+qi5/LhRI/WeJX1JnP50LZ3uEyFdz2AhhStneU4YTbXgBDyvaOMyyq5UMZUuKnSramzuAiuVDip7kUzXO7XCjxU6VJEy5+O1wo8ZNcqrr4uVyq6miPC0eeJ8mFI8+ai8FFcuHIs+bCkWfNhSPPmgtHnjUXjjxLLrj47XChxE9zQe9qLuhdzcXgIrmgdzUX9K7mgt7VXNC7mgt6V3Ipa80XVvo44eInS3AmXPx2uFDip7kYXCQXSvw0l6rS2ONCiZ8qNZlw8dvhQomf5IKL3w4XSvw0F0r8NJeietflYpT4iRK/qaqLn8uFEj9V4jcVdebzuVC2d7hMBbe94wxx2wtgSNnecYaU7R1nWFTLhzI0SrZUyRYufjtcKPHTXIrmuV0ulPjJ0iRc/DQXXPx2uFDip7lU1dEeF448yyNmuPjtcOHIs+bCkWfNhSPPmgtHnjUXjjxLLrj47XChxE9zocRPc0Hvai4GF8kFvau5oHc1F/Su5oLe1VzQu5JLWWs+jwt692jpIy5+ugQHF78dLgYXyYUSP82FEj/Npao09rhQ4idLTXDx01xw8dvhQomf5kKJn+ZCiZ/mYnCRXCjxkyV+VV38XC6U+MkSv6LOfD4XyvaOlqnMuO0FMKRs7zhDyvaOM6Rs7zhDg+FhhpT4qZKtGRe/HS6U+GkuRfPcLhdK/FRp0oyL3w4XSvw0F0r8NJeqOtrjYhwxk1w48qy5cORZc+HIs+bCkWfNhSPPkgsufjtcOPKsuVDip7lQ4qe5GFwkF/Su5oLe1VzQu5oLeldzQe9KLrj47XBB72ou6N2DpY8zLn6yBGfGxW+HCyV+mgslfpoLJX6aS1Vp7HGhxE+Vmsy4+O1wocRPc6HET3OhxE9zMbhILkX1rsuFEj9V4jdXdfFzuVDip0r85qLOfC4X3PaOl6ngthfAkLK94wwp2zvO0GB4mGFRLR/KkBI/WbKFi98OF0r8NJeieW6PCy5+ujQJF78dLpT4aS6U+GkuBhfJhSPP8ogZLn47XDjyrLlw5Flz4ciz5IKL3w4XjjxrLhx51lwo8dNcDC6SC3pXc0Hvai7oXc0Fvau5oHclF1z8drigdzUX9K7mgt49WvqIi58uwcHFb4cLJX6aCyV+mgslfppLVWnscMHFT5ea4OK3w4USP82FEj/NxeAiuVDip7kU1bsuF0r8ZIlfVRc/lwslfqrEbynqzOdzoWzvaJnKgtteAEPK9o4zNBgeZkjZ3nGGRbV8KENK/FTJ1oKL3w4XSvwkl6oufi4XSvxUadKCi98OF0r8NBeDi+RSVUd7XDjyPEkuHHnWXDjyrLlw5FlywcVvhwtHnjUXjjxrLhx51lwMLpILJX6aC3pXc0Hvai7oXc0FvSu54OK3wwW9q7mgdzUX9K7mYpQ+Hit9XHDxkyU4Cy5+O1wo8dNcKPHTXCjxk1yquvi5XCjxU6UmCy5+O1wo8dNcDC6SCyV+mgslfppLUb3rcqHET5X4LVVd/DwuRV383BK/os58PhfK9g6XqeC2F8DQYHiYIWV7xxlStnecYVEtH8qQEj9ZsoWLn+ZS1cVv9LgUzXO7XCjxk6VJuPjtcDG4SC6U+GkuVXW0x4Ujz/KIGS5+O1w48iy54OK3w4Ujz5oLR541F448ay4GF8mFEj/NhRI/zQW9q7mgdzUX9K7kgovfDhf0ruaC3tVc0Luai8FFckHvHi19xMVPl+Dg4rfDhRI/zYUSP8mlqoufy6WqNPa4UOInS01w8dvhYnCRXCjx01wo8dNcKPHTXIrqXZcLJX6qxG+t6uLncrm03p0fKZU/PzwPX877Pz78x9VfWpXO0/ABf54WZ1b7+Xn4+Dcvse+hXlpoxoZqdUK9tBz8tVCXL6Fu4l69tMKLDfXSoi021EvrsHla549QHy+Q1x8euuXjw0M/TQ6Xbv6A2Ped88uPax6f19x/FrkN6pU9Dc/q82mw/uuH/yB+aYWXkfi1neBSEr+2Ks1I/OJKOiHxiwv6hMQN4icTv/j2JiHxi++yEhK/+GYvIXH2nGcTZ895MvFruzGmJM6e82zi7DnPJs6e82ziBvGTibPnPJs4e86zibPnPJs4e86zibPnPJn4tR1RUxJnz3k2cfacZxNnz3k2cYP4ycTZc55NnD3n2cTZc55NnD3n2cTZc55M/NpWwymJs+c8mzh7zrOJs+c8m7hB/GTi7DnPJs6e82zi7DnPJs6e82zi7DlPJn5tu++UxNlznk2cPefZxNlznk3cIH4ycfacZxNnz3k2cfacfwfxefpoC2TzvHyHyDYyACI7w+MQr+3xfheI7N/+DohL99FD3ZZeQGRLFgCRXVYARAPicYjshQIgsr0JgMiOJQAiO5YAnciO5TjEhR1LAER2LAEQ2bEEQGTHEgDRgHhY4izsWAIgsmMJgMiOJQAiO5YAiOxYjkNc2bEEQGTHEgCRHUsARHYsARANiMchsmMJgMiOJQAiO5YAiOxYAiCyYzkOcWPHEgCRHUsARHYsx/88sLFjCYBoQDwOkR1LAER2LAEQ2bEEQGTHEiBx2LEchrh17FgCILJjCYDIjiUAIjuWAIgGxOMQ2bEEQGTHEgCRHUsARHYsARDZsRyH2LNjCYDIjiUAIjuWAIjsWAIgGhCPQ2THcjizvfXsWAIgsmMJgMiOJQAiO5bjEAd2LAEQ2bEclzgDO5YAiOxYAiAaEI9DZMcSAJEdSwBEdiwBENmxBEBkx3Ic4siOJQAiO5YAiOxYAiCyYwmAaEA8DpEdSwBEdiwBENmxBEBkx3I8sz2yYzkO0dixBEBkxxIAkR1LAER2LAEQDYiHJY6xYwmAyI4lACI7lgCI7FgCILJjOQ5xYscSAJEdSwBEdiwBENmxBEA0IB6HyI4lACI7lgCI7FgCILJjCYDIjuU4RDzvIyCyYzme2cbzPgIiO5YAiAbE4xDZsQRAZMcSAJEdS4DEYccSAJEdy3GIeN5HQGTHEgCRHUsARHYsARANiMchsmMJgMiOJQAiO5YAiOxYAiCyYzkOEc/7CIjsWAIgsmMJgMiOJQCiAfFwZhvP+wiI7FgCILJjCYDIjiUAIjuW4xDxvA+QOHjeR0BkxxIAkR1LAEQD4nGI7FgCILJjCYDIjiUAIjuWAIjsWI5CHDo87yMgsmMJgMiOJQAiO5YAiAbE4xDZsQRAZMcSAJEdy9HM9gMiO5YAiOxYjkPE8z4CIjuWAIjsWAIgsmM5LnHwvI+AyI4lACI7lgCI7FgCILJjCYDIjuU4RDzvIyCyYwmAyI4lACI7lgCIBsTjENmxBEBkxxIAkR1LAER2LAEQ2bEch4jnfUBmG8/7CIjsWAIgsmMJgGhAPA6RHUsARHYsARKHHUsARHYsARDZsRyHiOd9BER2LAEQ2bEEQGTHEgDRgHgcIjuWAIjsWAIgsmMJgMiOJQAiO5bjEPG8j4DIjiUAIjuWAIjsWI5ntvG8j4DIjiUAIjuWAIjsWAIgsmMJgMiO5bjEwfM+AiI7lgCI7FgCILJjCYBoQDwOkR1LAER2LAEQ2bEEQGTHEgCRHctxiHjeR0BkxxIAkR1LAER2LAEQDYjHIbJjCYDIjuV4ZhvP+wiI7FgCILJjOQ4Rz/sIiOxYAiCyYzkucfC8j4BoQDwOkR1LAER2LAEQ2bEEQGTHEgCRHctxiHjeR0BkxxIAkR1LAER2LAEQDYjHIbJjCYDIjiUAIjuWAIjsWAIgsmM5nNnu8byPgMiOJQAiO5YAiOxYAiAaEI9DZMdyWOL0eN5HQGTHEgCRHUsARHYsxyHieR8BkR1LAER2LAEQ2bEEQDQgHofIjiUAIjuWAIjsWAIgsmMJgMiO5ThEPO8jILJjCYDIjuV4ZhvP+wiIBsTjENmxBEBkxxIAkR1LAER2LAEShx3LcYh43kdAZMcSAJEdSwBEdiwBEA2IxyGyYwmAyI4lACI7lgCI7FgCILJjOQ4Rz/sIiOxYAiCyYwmAyI4lAKIB8ThEdizHM9t43kdAZMcSAJEdSwBEdizHIeJ5HwGRHctxiYPnfQREdiwBEA2IxyGyYwmAyI4lACI7lgCI7FgCILJjOQ4Rz/sIiOxYAiCyYwmAyI4lAKIB8ThEdiwBENmxBEBkxxIAkR3L8cw2nvcBEPG8j4DIjiUAIjuWAIjsWAIgGhAPSxw87yMgsmMJgMiOJQAiO5YAiOxYjkPE8z4CIjuWAIjsWAIgsmMJgGhAPA6RHUsARHYsARDZsQRAZMcSAJEdy3GIeN5HQGTHcjyzjed9BER2LAEQDYjHIbJjCYDIjiUAIjuWAInDjiUAIjuWwxAHPO8jILJjCYDIjiUAIjuWAIgGxOMQ2bEEQGTHEgCRHUsARHYsARDZsRyHiOd9BER2LAEQ2bEEQGTHEgDRgHg0sz3geR8BkR1LAER2LAEQ2bEEQGTHchwinvcBEgfP+wiI7FgCILJjCYBoQDwOkR1LAER2LAEQ2bEEQGTHEgCRHctxiHjeR0BkxxIAkR1LAER2LAEQDYjHIbJjCYDIjiUAIjuW45ltPO8jILJjOQ4Rz/sIiOxYAiCyYwmAyI7luMTB8z4CIjuWAIjsWAIgsmMJgMiOJQAiO5bjEPG8j4DIjiUAIjuWAIjsWAIgGhCPQ2THEgCRHUsARHYsARDZsQRAZMdyHCKe9wGZbTzvIyCyYwmAyI4lAKIB8ThEdiwBENmxBEgcdiwBENmxBEBkx3IcIp73ERDZsQRAZMcSAJEdSwBEA+JxiOxYAiCyYwmAyI4lACI7lgCI7FiOQ8TzPgIiO5YAiOxYAiCyYzme2cbzPgIiO5YAiOxYAiCyYwmAyI4lACI7luMSB8/7CIjsWAIgsmMJgMiOJQCiAfE4RHYsARDZsQRAZMcSAJEdSwBEdiyHIY543kdAZMcSAJEdSwBEdiwBEA2IxyGyYwmAyI7lcGZ7xPM+AiI7lgCI7FiOQ8TzPgIiO5YAiOxYjkscPO8jIBoQj0NkxxIAkR1LAER2LAEQ2bEEQGTHchwinvcRENmxBEBkxxIAkR1LAEQD4nGI7FgCILJjCYDIjiUAIjuWAIjsWI5ntvG8j4DIjiUAIjuWAIjsWAIgGhCPQ2THclzi4HkfAZEdSwBEdiwBENmxHIeI530ERHYsARDZsQRAZMcSANGAeBwiO5YAiOxYAiCyYwmAyI4lACI7luMQ8byPgMiOJQAiO5bjmW087yMgGhCPQ2THEgCRHUsARHYsARDZsQRIHHYsxyHieR8BkR1LAER2LAEQ2bEEQDQgHofIjiUAIjuWAIjsWAIgsmMJgMiO5ThEPO8jILJjCYDIjiUAIjuWAIgGxOMQ2bEcz2zjeR8BkR1LAER2LAEQ2bEch4jnfQREdizHJQ6e9xEQ2bEEQDQgHofIjiUAIjuWAIjsWAIgsmMJgMiO5ThEPO8jILJjCYDIjiUAIjuWAIgGxOMQ2bEEQGTHEgCRHUsARHYsxzPbeN4fh2h43kdAZMcSAJEdSwBEdiwBEA2IRyWO4XkfAZEdSwBEdiwBENmxBEBkx3IcIp73ERDZsQRAZMcSAJEdSwBEA+JxiOxYAiCyYwmAyI4lACI7lgCI7FiOQ8TzPgIiO5bjmW087yMgsmMJgGhAPA6RHUsARHYsARDZsQRIHHYsARDZsRyHiOd9BER2LAEQ2bEEQGTHEgDRgHgcIjuWAIjsWAIgsmMJgMiOJQAiO5bjEPG8j4DIjiUAIjuWAIjsWAIgGhAPZ7bxvI+AyI4lACI7lgCI7FgCILJjOQ4Rz/sAiYPnfQREdiwBENmxBEA0IB6HyI4lACI7lgCI7FgCILJjCYDIjuU4RDzvIyCyYwmAyI4lACI7lgCIBsTjENmxBEBkxxIAkR3L8cw2nvcRENmxHIeI530ERHYsARDZsQRAZMdyXOLgeR8BkR1LAER2LAEQ2bEEQGTHEgCRHctxiHjeR0BkxxIAkR1LAER2LAEQDYjHIbJjCYDIjiUAIjuWAIjsWAIgsmM5DhHP+4DMNp73ERDZsQRAZMcSANGAeBwiO5YAiOxYAiQOO5YAiOxYAiCyYzkMccLzPgIiO5YAiOxYAiCyYwmAaEA8DpEdSwBEdiwBENmxBEBkxxIAkR3LcYh43kdAZMcSAJEdSwBEdiyHM9sTnvcRENmxBEBkxxIAkR1LAER2LAFvZ3YsxyHieR8BkR1LAER2LAEQ2bEEQDQgHofIjiUAIjuWAIjsWI7vWPC8j4DIjuU4RDzvIyCyYwmAyI7l+NsZz/sIiAbE4xDZsQRAZMcSAJEdSwBEdiwBENmxHIeI530ERHYsx3cseN5HQGTHEgDRgHgcIjuWAIjsWAIgsmMJkDjsWAIgsmM5DhHP+wiI7FgCILJjCYDIjiUAogHxOER2LAEQ2bEEQGTHEgCRHUsARHYsxyHieR8BkR1LAER2LH8HxHVYP655HbvvEBPtWPrnh4dh6hwu3fhxFd32ecnjpq5iHD5ysvNo9pWhoDHPH8DHeZk/PzypD4/9E904TF8//MfsGLNz4dlJtMdKODuJNm8JZyfRrjDh7CTabiacnUT72HyzsyTaICecnUQ774Szk2hLf8PZMftIuIw2rd9nh1zBlWfHmJ0Lzw65gh+dnWV5zs42vP7wsK3PX+66zvnw+AnjEev3eScLkXPebZqe876srz88dR+fncb+a3h/LBFSISwRZ4mQj2GJOEuEpFDSJbJ9/PJvTUSPLJGVzBRLxFkipMdyLpH5Oe3D/HXe/9ymrCTeas47Kb2a827Me8l5Jw1Zc95JQ9acd3KLNeedhGHNeScLWHLeN1J7NeedfF3NeSdfV3PeydfVnHdj3kvOO/m6mvNOvq7mvJOvqznv5Otqzjv5uorzPnfk62rOO/m6mvNOvq7mvJOvqznvxryXnHfydTXnnXxdzXknX1dz3snX1Zx38nUl570nX1dz3snX1Zx38nU15518Xc15N+a95LyTr6s57+Tras47+bqa806+rua8k68rOe8D+bqa806+rua8k6+rOe/k62rOuzHvJeedfF3NeSdfV3PeydfVnHfydTXnnXxdyXkfydfVnHfydTnnfRmfMJZlev3hft0+vBP7rR+/LxKSeywSd5GQCWSRDJ19BDh0s73+8EsnpAcf1hPrKXA9kblkPUWuJzKirKehWz5mcOi74dB6ItPKeopcT2Rw77Kexm6w53oanV92DO/nkQxuznkPs6qejWQvS8RZIuSFky6RKKvq2cgKs0ScJUJOOOcScf6qaMa8l5x3cqw1551caM15J2eZc94jDwYYiUgWibtIyFqySAL/OjuR4mQ9Ra4n8qGsp8j1RPKU9RT41/6JTCvrKXI9GevpLuvpMdUfH+7Hg/uwiQxuzXkng5ty3iMlK8leloizREj1skScJUKilyXyeonM5G6TLpGw7elMOpYl4iwRMqw/uUSm6eMyxml2jqL/Wj2VU/8ykwnNOe9xxQ2zsURYIq+XCHlQloizREiZJl0iYfUvMylTloizREiZ5lwiztH5mTxoyXlfSG7WnHcyljXnnTRkznmPrH5ZyFmySNxFYiyS8osk8M/sCylO1lPkeiIfynqKXE8kT1lPgQdCFjKtrKfI9UQG9y7rKbTB7koGN+e8xx0NWEn2skScJUJeOOkSCTsasJIVZok4S8RYIimXiPNXxZXcbc15J8dac97Jhdacd3KWNeed3GLJed/ILdacdxKGNeedLGDNeSe1V3PejXkvOe/k62rO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TWtjbFob1rQ2rGltWNPasKa1YU1rw5rWhjWtDWtaG9a0NqxpbUxNa2NqWhtT09qYmtbG1LQ2pqa1MTWtjalpbUxNa2NqWhtz09qYm9bG3LQ25qa1MTetjblpbcxNa2NuWhtz09qYm9bG0rQ2mvKiQ1NedGjKiw5NedGhKS86NOVFh6a86NCUFx2a8qJDU150aMqLDk150aEpLzo05UWHprzo0JQXHZryokNTXnRoyosOTXnRoSkvOjTlRYemvOjQlBcdmvKiQ1NedGjKiw5NedGhKS86NuVFx6a86NiUFx2b8qJjU150bMqLjk150bEpLzo25UXHprzo2JQXHZvyomNTXnRsyouOTXnRsSkvOjblRcemvOjYlBcdm/KiY1NedGzKi45NedGxKS86NuVFx6a86NiUFx2b8qJjU150bMqLjk150bEpLzo25UXHprzo2JQXHZvyomNTXnRsyouOTXnRsSkvOjblRcemvOjYlBcdm/KiY1NedGzKi45NedGxKS86NuVFx6a86NiUFx2b8qJjU150bMqLjk150bEpLzo25UXHprzo2JQXHZvyomNTXnRsyouOTXnRsSkvOjblRcemvOjYlBcdm/KiY1NedGzKi45NedGxKS86NuVFx6a86NiUFx2b8qJjU150bMqLjk150bEpLzo25UXHprzo2JQXHZvyomNTXnRsyouOTXnRsSkvOjblRcemvOjYlBcdm/KiY1NedGzKi45NedGxKS86NuVFx6a86NiUFx2b8qLWlBe1pryoNeVFrSkvak15UWvKi1pTXtSa8qLWlBe1pryoNeVFrSkvak15UWvKi1pTXtSa8qLWlBe1pryoNeVFrSkvak15UWvKi1pTXtSa8qLWlBe1pryoNeVFrSkvak15UWvKi1pTXtSa8qLWlBe1pryoNeVFrSkvak15UWvKi1pTXtSa8qLWlBe1pryoNeVFrSkvak15UWvKi1pTXtSa8qLWlBe1pryoNeVFrSkvak15UWvKi1pTXtSa8qLWlBe1pryoNeVFrSkvak15UWvKi1pTXtSa8qLWlBe1pryoNeVFrSkvak15UWvKi1pTXtSa8qLWlBe1pryoNeVFrSkvak15UdvJiy5PT/dtsL9q6vS94cHjej8+bMs2fx9iff8Q29uH2EnPhg7Rv3+I4f1DjMeHmOaPnp72tb19Pwzi0+P49Fp4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tlWyta2SrW2VbC2rZO8slP+1vu1rQ9vXxravWdvXpravzW1fW9q+trZ9rW2V9G2rpG9bJX3bKunbVknftkr6tlXSt62Svm2V9G2rpG9bJUPbKhnaVsnQtkqGtlUytK2SoW2VDG2rZGhbJUPbKhnaVsnYtkrGtlUytq2SsW2VjG2rZGxbJWPbKhnbVsnYtkrGtlVibavE2laJta0Sa1sl1rZKrG2VWNsqsbZVYm2rxNpWydS2Sqa2VTK1rZKpbZVMbatkalslU9sqmdpWydS2Sqa2VTK3rZK5bZXMbatkblslc9sqmdtWydy2Sua2VTK3rZK5bZUsbatkaVslS9sqWdpWydK2Spa2VbK0rZKlbZUsbatkaVsla9sqWdtWydq2Sta2VbK2rZK1bZWsbatkbVsla9sqWdtWyda2Sra2VbK1rZKtbZVsbatka1slW9sq2dpWyda2Stpyr31b7rVvy732bbnXvi332rflXvu23Gvflnvt23KvfVvutW/LvfZtude+Lffat+Ve+7bca9+We+3bcq99W+61b8u99m25174t99q35V77ttxr35Z77dtyr31b7rVvy732bbnXvi332rflXvu23Gvflnvt23KvfVvutW/LvfZtude+Lffat+Ve+7bca9+We+3bcq99W+61b8u99m25174t99q35V77ttxr35Z77dtyr31b7rVvy732bbnXvi332rflXvu23Gvflnvt23KvfVvutW/LvfZtude+Lffat+Ve+7bca9+We+3bcq99W+61b8u99m25174t99q35V77ttxr35Z77dtyr31b7rVvy732bbnXvi332rflXvu23Gvflnvt23KvfVvutW/LvfZtude+Lffat+Ve+7bca9+We+3bcq99W+61b8u99m25174t99q35V77ttxr35Z77dtyr31b7rVvy732bbnXvi33OrTlXoe23OvQlnsd2nKvQ1vudWjLvQ57udf12SK+60x8bWn72tr2ta3pa3u5V+9rfdvXhravjW1fs7avTW1fa1slfdsq6dtWSd+2Soa2VTK0rZKhbZUMbatkaFslQ9sqGdpWydC2Soa2VaITVtYN4/Nrg/qaRGKPDPDH1x47Q/G1ue1rS9vX1qavTTtIxufXOpvF18a2r1nb16a2r81tX1vavra2fW1r+prOzvhf69u+1rZK5rZVMretkrltlcxtq2Tembd1fn5tE8+SpWv7Wt/2taHta2Pb16zta1Pb1+a2ry1tX1vbvta2Sta2VbK2rZK1bZWsbatkbVsla9sqWdtWydq2Sta2VbK2rZKtbZVsbatka1slW9sq2dpWyda2Sra2VbK1rZKtbZVsTatk7Lq2r/VtXxvavja2fc3avja1fW1u+9rS9rW17Wttq6RvWyV92yrp21ZJ37ZK+rZV0retkr5tlfRtq6RvWyV92yoZ2lbJ0LZKhrZVMrStkqFtlQxtq2RoWyVD2yoZ2lbJ0LZKxrZVMratkrFtlYxtq2RsWyVj2yoZ21bJ2LZKxrZVMratEmtbJda2SqxtlVjbKrG2VWJtq8TaVom1rRJrWyXWtkqmtlUyta2SqW2VTG2rZGpbJVPbKpnaVsnUtkqmtlUyta2SuW2VzG2rZG5bJXPbKpnbVsleNnTpn19b//rvAd/7VM/b8OFDPm/22TJ++XOIOWCIdXwOsU7ztyGW9w+xvn+I7e1D7OWVI4fo3z/EEDHE1j0Xbf9t0e7ltiOHsPcPMb1/iPn9QyzvH2J9/xDb24dYu/cP0b9/iPff3ev77+71/Xf3+v67e33/3b2+/+5e3393r++/u7f3393b++/u7f139/b+u3t7/929vf/u3t5/d2/vv7u399/d29vvbuu69w/Rv3+I4f1DjO8fwt4/xPT+Ieb3D7G8f4j1/UO8/+7u33939++/u/v33939++/u/v13d//+u7t//93dv//u7t9/d/fvv7uH99/dw/vv7uH9d/fw/rt7eP/dPbz/7h7ef3cP77+7h/ff3cP77+7x/Xf3+P67e3z/3T2+/+4e3393j++/u8f3393j++/u8f139/j+u9vef3fb++9ue//dbe+/u+39d7e9/+6299/d9v67295/d9v77+7p/Xf39P67e3r/3T29/+6e3n93T++/u6f3393T++/u6f139/T+u3t+/909v//unt9/d8/vv7vn99/d8/vv7vn9d/f8/rt7fv/dPb//7l7ef3cv77+7339Wzd5/Vs3ef1bNlrefRLWQs2rOEMv7h1jfP8T29iFCzqo5Q+i7+0Wvk3/4pU//MchwfJDXx11t57Ra6BD2/iGm9w8xv3+I5f1DrBFDvHzW7pxWixxi57Ra6BD9+4cY3j/E+P4h7P1DTO8fYn7/EMv7h3j/3b1F3N0vX61T171/iP79QwzvH2J8/xD2/iGaetRN3dL2tbXta7+87P/x8a/tt8/qP8j1/TD9+dW+nz6h9MPvI+o/sXlfWlu+tP3yl/7z8c//95/+5z//03/9l//+748v/fa//q9//W//8c//9q9//vM//r//8cf/8vjw/w8=","brillig_names":["pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_notes_internal","get_collapse_hints","pack_arguments_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_escrow_class_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQQKAAIGBAUhAAAPAAU6AQAAHgALAAQkAAcBBgoABwQGBSEAABQABToBAAAqAAAEJAAEBAUAAAQABQAkAQQBBAAABAQCBSoABQckAAcACCoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBAUAAAQFAgUqAgUEKgAABQAABAACACoCBAUkAAQBCCQABAMEJAAEAAcqAAcDIAArDAAEAwQHIQAANAAHIAAuKgEFBCQABAIFAAAEBAIGAAAEBgUHKgEHAyMqAQUHHAAHAwkAAAcGCQosAAAAAAoAAAAJJAAEAwsMAAQDCwwhAAA8AAw6AQAAKwAABwgDJQAEAAQIBCIAAABKKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMICQ4ABAMJByEAAEcABzoBAAAqAgoFKgAJAyAAKysBCAMIBgsABAgGAAIIByEAAE4IByAAUCsACAMIBSAAXisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABcCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAFMlAQQAAQgFIABeIysAGMoYyg==","debug_symbols":"1ZrfbuowDMbfJddcxEkc27zK0dFUNpgqVWUCdqQjxLuv3dqs61DQxpjiG9TCl/hH/vhLrR7Nw3r1/HhXt5vt3iz/HE2zva8O9bbt7o6nhVnt6qapH++mXxvbf/CrfP9Utf3d/lDtDmYJ5MLCrNuH/tKHroNN3azNkvxp8UksngatICUpIJ/RBgcyiINznNRCZ8SRwQ/iyE6m4r8LI1eDg4UkthPxzdHBXj/oNPYvcmnQwYVRDE4kT86AIwXDpOuBHH6QvBv0j+h9AHfrAP7WAcKtA+DVARBljIDRXlgRxA4HMXHg+YqIX6Tp29A32vA32sjX27ize1MCQ0pyABfySrflUwA7mT9y5+ZC4phXUMTm5wLJjxzdpZvNhQPF7E4xu1fMHhSzo2L2qJidFLOzYnbRy+4V+6pX7Ktesa96xb7qFfuqV+yrXrGvesW+Ggrfq8iJHef1mFD4mqGQ2NnO2X9/zaQCUbQW8+xMcSwm8buU4JWc1ZKLVnK0askLP8fk8guWnRsZUl5nB3P2UPa4S8ywF36OYf/O7vJiCX5cYBLo0x9VbGBY+KEny154MSHLXngxIcceCy8mZNkLLyZk2Qs34Sx74Q8oWfbCTTjLXrgJZ9kV+2pU7KtRsa9Gxb5Kin2V1Prqqbv7V+3qatWsh/e1Ns/t/eT1rcP/p7dfOvEL","brillig_names":["get_escrow_class_id"],"assert_messages":{"14":"Not initialized","59":"Array index out of bounds","70":"attempt to add with overflow","19":"Function get_escrow_class_id can only be called statically"}},{"name":"get_contract_registration_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7d3bbts4EAbgd/F1Lng+5FUWiyJp08JAkBRJusAiyLuvnVq0ShrUWiOPRfC/KZKWlqdfbHF+xhLfN98e7n/9+LJ9+v78urn9633z+Pz17m37/LT77v3jZnP/sn183P74Mv7rjdj/ET+Hv/68e9p/9/p29/K2uZVemZvNw9O3/Zfa7A7wffv4sLn1+uOmGBy1P4yN1qeh0oYTY42S8TDYKBXS6OhPDHZB6sNgF1QcD/77ZiMFuXIpZBosRoMvX7ukq/vh+DFOqUtlhsFSxVivPEg7VBHk6NCHytWCle/Q/yx9/wT60k9gLv0E9tJP4MhPYG0cnsE6MfGK8EHZw2AfTMhfEf7MavaPCTMeE89/jBIzHnPyvRm9dMP7zY8MTv/4lExj5fGnd/ocZIex4zebFubky0LadGCnj6NlPDFah3S60uI49tSBlXLiMFYpH+qDnVLDmU3p8dA9ngLefDwNvPl4Bnjz8Szw5uM54M3H88CbjxeANx8vAm82nhbAm4+HhEHAQ8Ig4CFhEPAM8ObjIWEQ8JAwJvDsIOFGv4I44CFhEPCQMAh4SBjz8QwSBgEPCYOAh4SRiyA25CIGIpkIGvxcBF17LoJWPBdBf52LoGnORCw64VwE7W0ugp41F0HPmosYiGQi6FlzEfSsuQh61lwEPWsugp41E3HoWXMR9Ky5CHrWXAQ9ay5iIJKJoGfNRdCz5iLoWXMR9Ky5CHrWTMSjZ81F0LPmIuhZcxH0rLmIgUgmgp41Ewk9vmu0SCJaylykxy7eh+HAyo/uy3Hu4D1fjy3/OXzS2+HA0vv8M3+hx3ywIF+PYWI5vthjV3kWX/DD1TEyRFkfHPRw4KDz02TssRO5mLQUOgyDhc1n9IgZfUlrmUqW0pncGtM/nzV6BT5rNBZs1lL0uAB6Newe11avho0GmxG7x7Wtq2EbYM/F/vRDIKT5IeTR/BDcJgYLMawxKKFKP4Qxmh8CFslP0jPTbg53aYYXekpQWn3sB0T90C4ON7r2cvyjUb9rlw3XrhquXTdcu5msffTrjdPVuJBmRC/8H09RjrbRDW9sG+Ox9pN3qrdeD+eX3ZdqPPizeNty8a7l4n3LxYeWi48NF69Ey8XLlotXLRevWy6+5RlWtTzDqpZnWLXy87wNqXhbbIelV3628SYVH0RRPP/ZJu3Q5YSwE8WrYXc2q90ocR9qNw3Xbhuu3TVSuzFl7b7h2kO7tZuV95PVM7xZ9xk+yDS3htEi31D8yvvJ6GrFr7yfDPpYvKoPjiZ93jAaX/5PV958VrsIs/Lms178ypd36sWvfHmnXvzK2/5q8Xblyzv14lc+HdeLbzlw2ZVPx/XiVz4d14tveYa1Lc+wtuUZ1rY8w9qWZ1jX8gzb5e2wrnJZnOzyPlsXvC4uXekuhSyx8Zk/Rmx8QJARG58mXBS7dnmt7PJ+VVfDxuVajNi4XIsRG102I7YBNh82ru1ixMaFYIzYSJCLYtt0ia1wocBGgmTERoLkww5IkIzYSJCM2EiQjNhIkIzYBtgX6rNPYCNB8oUa3AGaExsJkhEbCZIRGwmSDzsiQTJiI0EyYiNBMmIjQTJiG2DzYSNBMmIjQTJiI9QwYiPUsGEr3AefExuhhhHb9LjtoBrGKl1c+aK6vAGzTi8ppYMoSHqc2SdIepx/6ySyx1lygqTHuWyCpMdltAmSLvf+rZMYkOQkPS4cTZD0uLwzQYLutSBB91qQoHvNSRS614IE3WtBgu61IOmye033Nt3pTC3BVTfsU//j9u6d+6m0XieV8YVfl33xgn5dNtEL+nXZcS/o12V7fpafSyWrUMwfussu7Rw/k26HvfuyeP3pLlu6Bf3Q/9H8DPzqfk6m+cMZV/ih/6P5of+j+aH/o/mh/6P5dbmWu5yf6XLhd0E/5A+aH/IHzQ/5g+Zn4EfyQ/6g+SF/0PyQP2h+yB9Tfi5dQuBCKPyQP0h+FvmD5of8QfND/qD5IX/Q/NC/TPgZkfyM8vXBtU2dlMNUsyD1xKWVDvMSIzYmsSWx659Y7HIbvqthG2DzYWMtjxEbC3+M2OiyGbGxpMiIjfVHPuwut5i8GjYSJCM2EiQjNhLkbOxPPwM/kh9yHs0P0Y3mhzRG80PAovkhM035GZ38bPGZoS73SVzSD8mG5oewQvND/qD5GfiR/JA/aH7IHzQ/5A+aH/IHzQ/5g+TX5S57S/ohf9D8kD+m/Kr3fOlye7sl/Qz8SH7onwsStMQFCbrcggSNa0aiBXqBqXPxQtfvaIG2YUFqKYQYBgtZYmOOZMTG7MuIjXl9UezalWm6z43iroTd5xZ018LGIhojNrpsRmz02YzYBth82PjgASM2EuSi2DZdUiJcKLCRIBmxkSAZsZEg+bD73AbyWthIkIzYSJCM2EiQl+qzT2AbYLOFGmy3yYmNBMmIjQTJiI0EyYiNBMmHrZEgGbGRIBmxkSAZsZEgGbENsPmwkSAZsRFqGLERahixEWr4sLFJLhf2x+67f+5etnf3jw+vu8fs//HX09e37fPT4du3f3/+/pfd4P8A","brillig_names":["get_contract_registration_status"],"assert_messages":{"311":"Array index out of bounds","180":"Array index out of bounds","20":"Function get_contract_registration_status can only be called statically","113":"Storage slot 0 not allowed. Storage slots must start from 1.","148":"Array index out of bounds","299":"attempt to add with overflow","340":"attempt to add with overflow","159":"attempt to add with overflow","188":"Array index out of bounds","319":"Array index out of bounds","237":"Array index out of bounds","327":"Array index out of bounds","219":"Array index out of bounds","251":"attempt to add with overflow","15":"Not initialized","172":"Array index out of bounds","201":"attempt to add with overflow"}},{"name":"register_participant","is_unconstrained":false,"custom_attributes":["private","interal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_participant_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/+1dW4gkVxmu7p6evsz2dO/O/bo9sy8GjPRsZnYXjLCb9RYwK4pKAgrO7kyyi7sz6+yMyYq+JZA8CUbxAl7A+KSQgIKixgcNxDeDyZuCYhBECArx/qDO6alv+utvTl26qs+2CVUwVHf1fzvff+o/5//PqZqcd3Ac2//L+Z+L/jnvHT1Ac94/t9IdK32U1XJpZ66PdubJxiphXdj/G/LxH97/K+3/lff/Kj7dCPmqzTxEzNpwjxjiCjeCL1jk/I2+LPnn9d3dzRs3d5u7280be9d3r928frv56LXdq83tT23uPHx9+1EW8C/6MuOfL+zsrN9uXtva2Hysub2329x+uHl5e29r4xYzctN6YqwR4/xRk9c3NoKtncqnbO5cUqvfklbzW1M0u5XU6rMplL49qdL7Uih9d1KlD6RQ+oGkSh9MofSjSZVeSaH0kaRKt1Io3Umq9DYxnvDPN/duXQ3meDztXfpkUlufTgHQl5Iq/UYKpd9KqvQ7KZQ+m1TpD1Io/XFSpT9PofTFpEp/mULpy0mV/jqF0t+n4P1z2vv19RTK/5EUrf+kUJovJFR6rJBc6d3EmwjmlaRW35vC6vNJlb43hdL3JVX6oRRKH0yq9OMplG4kVXo9hdKbSZU+lkLpZ5IqfTyF0ieTKv18CqVfScH7taQGP5OU8dkerT3MfF/2GU2GzCm7yaLP+99b6Y6VChnaV9nn1lpGdtGN3aeN7GE3slumMnGxfCAL9kOXcck7/d9whv6a/7tH/DWvUyUBvTmdINuhw/NpIQM+d9bWc6trRnbJhexWa72Nh+DYxqPcjam5VvSvwRbz9XuFzu/vL3fwMcfY/t+7/Gtclhr1Pz+yuXvf9e0rn7i0d+Py5g7fjoykJy3Xw0g80ZF4cXtrd2f9yu6FjY2dzVtdN3nJItULkFgliVfXr23dv8Fc5WSSPrK5c+va9hZzVWJKqpEkL4CH0eF+OUL0/ew7DbJphOw8JnZV/Ov9t2FtJQwD6KySTf2OzTnSA/3HxAfm91GxyWBSJ5v6WTpukD7WMSp2joqdxqYG0Zx3YE+jB3syvmA/HSf6fo6rbNPxhG2pJ+TLfNxfvsx/mf8yPDP/ZXzJ+DL/Zf7L8Mz8l/El48v8l/kvw3Pw/jP+QN2J62Bat6pZZIG+RmfmgyxPZHkWWWpDnWxlu+K0EfSjZBfzmcPUSbiG38c6yWpYm6GzSja5qDueiMDJYDImNhlMxsmmfP9sateOoI91jImdY2JnP/nU531sX3sdjm3qk9wzxk8TXvdhdE1SO+5U34XOKtnkou9Oin7o4r47JTY16BrHxCmRNSWy+snnzi8bqzWxCfqm3ehbC+sH0Fklm1z0g2kv3Aem/TOO8M6RbOifkfYbn8zKNcM3538u+nygmSH7QTNHfEX6/rp/bhA/909c80QHsDGrpK8RvWKp44GtvTaa2Rg0c0IzYaGZjyFnIQbNYgyakzFomjFoloRG+6PpD8te92H66CmScafuUeiskk0u7tFTon9ZMDFzMayI769yX9re3Txcd2f+V+gazto+0DToGo+5PD9Afy/QtRnLtVnLtTnLtXnLtQXLtUXLtZOWa025Zo4R+nycPvNcjscX9EcbLh7R5b2jeOI629TP3z2Hsvv9O64NBXzOy/Wwvmmbe+s9YZtfgIfzMvRn0Bbo87jYVCAZLLtAtJrvOMyBrPM4Gw6az02KrXVqD2gdzn/PVbzuvCzXR0zcjQWt9j6wJTey7zGym25kn27vHfNloe+buct4rqMP8RPzKdCP0HXQ/CHfkTHly6jT76gzRNU90M64dQ/bvqa65wKz1bNh4z50ut7XVBf9tn1NNbGJ6zw8l41Ta8r4wvmOv0HszPyQ4Zn5IfNDhued5cv8kPkh48v8kPkh48v88P/Lx/U/5M2cx2veXbfI4j0Uni+b+SDLE1meRZbaUPOO1jriygIf2uju2a/WqpG96Eb2GSN7wY3sswaPZcHJ1LJ+RPUwrEWgHgZ6roeBpkH1sOepHoY1jjqd4/jatH3WTdsvh/Uj6HRd19L1TVtda0ZsatA1vu+D1o/zGd+bls/cQ+gX3E+j1us5PuK3mvBBlieyPIsstcHIQkzguPI7iitoC+LKPLUJ10Hzp1xHxqsUV/B7leytkq08ZjGedQtfnb4zJgWhrXkdHCBnJEGbXqM2VfNH28Rxb5psZ7kYFxyuUbV4/RCYTor+ItH8nXyMtUC8zXFa+AzNhMgGD487EyKb1zw9wsDN/qDVM9yWorRliq6D5t8hdrIstBvjY9iaLXig1/SVSbFB91T2sR+s56St3A8Zm0Mf5IMxaN9X/kaNGbJ9qOzE9stG7E/p/RDAsEj6FG++50CjfgPP4fyHaHivoO7b4nveFvshj9fLmZdpOOaAZjQCe+XV2IzfEW+WpU0O52XteDNHWPD4NUltBc10/ihGBcGIY+OMyAbPMsmeEdlB8WbOCQZrLW6L3mu83w808yF2siy0G+vT3Ld1H92hbP/Mcw22AdeWaO7/W/LJG6kv3eWwL90V4SOds9liAOzUGDBracvdEX3XzV7eg76r8yCNf4zLSgQuGhttfVf7t86hOAfldgdh3rToD8McNOcGiLmOzTbMQXNvBOY6FsbBfEpw4blsHMyXLPrDMAfNxQFiPkH2BGEOmvdEYD4huMTBfEJw4f1rcTCvWfSHYQ6aSwPEXOfhNsxB88EIzHU+FwfzccGlTrjEwfyURX8Y5qB5aICYj5E9QZiD5mMRmOuzVHEwHxNceL9qHMwXLfrDMAfNxgAxr5A9QZiD5moE5hWvG5c4mFcElzrhEgfzBYv+MMxBsx2BOb+nzvWce5b04jpobvVhzq1+mRZcDObzYkNQzS/I9hGL7Z8Osb3uddcYgnTWySa2A89fYL4PGq5VuXoXp5GHdytiTj4s+otE80S+2w5zYL5fFr6c19kLPER/aBNkF0V2UD92g8FBrapE9nBbhi0YPBWzTjNNtrup06ye1TrNIa6kr0T2cf/i+2pYaPg9oeZoEA3n8HrPgj4sBwMN33+g+cJA6gf2PjAt7eU+8OWIWBYHc60flASXBtEgLzA+LhMekKU5H2SwH3RMmRbZPKZ8cyBjit0PXO/EddA806MfONZ6nn1MKQkuDaJBrsA1UX6jrOaBkMF+4NjCNJyPgua7EX5g3a79MCXtZT8816MfbLXistCUBJcG0SB/4PVenmNpbggZYfXhKZHN4/8PBzKvtftBcyf2w0969IOumdpieklwaRANcgrjB+DHz3xrvggZ7AetF02IbK4XvRDhBzfPm9v9MC7tZT/8okc/6LPKtpheElx4fRt5hvED8OO1Pc0hbc8cag1pXGRzDemlCD+4XFdUP4xJe9kPr/ToB9uz8BrTS4JLwzu6rmX8APz4XRz6XD1yBPaD5tuzIpvz7d+EtI/3h3GfOSbygtYfYOOyxUad0y1bbATNqxHz5WWLPbyfKuj5Qo4PoPkjral8rtCRgXpGXmSgtlQh/S5yLOREyIG0tlUkmr+QL/j59yFqB9fEgtZrinSeE9lB94P6vul/5noQ7BwWmnlLW/4aESfc7NM7eD8I42Crs/Ba3D97XGtCn81bcAGN3rfmXlwUG+KuYynmtnoQaP47kByq+50sWlPhHOrwPQ+FYDtt458Nc82hbOtYC2JDgei0/xW8o++DAc+CyAaPi3WxWgg2vB/BI/me2ICD952BD2MSrzlNWGyFLNveOtBzboo4zHvYJigO67t3QL9E10HzxUJHxnShYy94+L6at7RB4zmvq2sbmFb7lK0Oqf4Gz3GLTbMhfDbZir3OEXhtdiaEr5d13ybJ1rq57fl81qdjKu9TcFMnaHXVnjHuVUQ/529voz6I+VtBMOB9CmWRzXNOnMsiexBrHkG1EltueDoipqBueZJsd1O3XFvpV90yKFfl2s3hHi/i03dO2eo0kKV1Gp6PguYdEX3Azf+Asq/BwD7uG6C5EDHmBq1p5S24gGZacGkQDedDWscLW2djP3BewDRcDwTN/RF+cDPHt/uhIhiwHx7o0Q+2Oo3O1Xm9wRw83mO84DGaxw4d8yAjrE4DGtvc7sMRfnBTp7H7QcdK9sNDPfohznit6wZcp+F98sDvJMnSuAQZ7AfIGBYajkugWY/wg5t9hOFxiee7oNnsQ1zSuZUtLoGG6/hzhAdkxYlLWj+2xSXQ3BjgHEHzYNjH/gHNJyP8EDTvDRuTdU8Aj8nIhzkucX4aJy5BRlhcAs3tCD+4eSbR7oc5wYD98Nke/WCLS/ruTc3FG0TD9eM7EZeeGGBcYryD4hJonorwg2IcJy4tCi4cl1BjsMUlfg6Z669c51Q/IV8Ju1+KYg+3/+mInEF5+d1wnKfyvCsoT7U9v6Wx1TaGfzWiL7nJQQ/qXbwWGrRWDZqvR/QlXf+01bt0XCoLLrwXqUJnN+vErXty3tF9d/AVYwOab8fMQbnvO3rGaVVz0MO+RfoUb9s8XP2m8ZPXrXmcD5pbhq2znBQ5XC97LgRbzgVs9Tq+3ybo/2KX3GDfjsNl+t/FQ6QL+OeJpkx2FOn78xT7KuSIdi0X//PYP5t7Y9j/XCkH8w0JX4Nohrk+IXwlshtYft+3b0T0FyxyUGsaFjlFovkZ1URfoL5bFLnm919ZfseR6/7aVS9G+9ux06H/q+J/6Bqi9oOmKv7H95fI/yMB/q+Q/9FvRsrBfEXhaxBNOaTfVCz+f9G3r+p1x5U+YrnCvjb97H9pUM0h848AAA==","debug_symbols":"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","brillig_names":["get_participant_escrows"]},{"name":"get_participants","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"array","length":10,"type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_participants"]},{"name":"set_contract_registered","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAAQIRAAAJAAEAQQkAAQABR8AAAAABQAAAAQAAAhDKwAIQwADIgAAAAg5AAAACEQAAAAAHgAAAAUeAAAABjAAAAAABQAAAAYAAAAHJAACAQYKAAIHBgUhAAAPAAU6AQAAHgACAAceAAAABgoABwcGBSEAABQABToBAAAkAAcABioAAAckAAQEBQAABAAFACQBBAEHAAAEBwIFKgAFCCoCBggAAAQIAggqAgYIAAAECAIIKgIGCCoBBwUAAAQFAgUqAgUHKgEHBQAABAUCBSoCBQcqAQcFAAAEBQIFKgIFByoBBwUAAAQFAgUqAgUHKgAABQAABAACACoCBwUqAAAHJAAEBQgAAAQACAAkAQQBBwAABAcCCCoACAkqAgYJAAAECQIJKgIGCQAABAkCCSoCBgkAAAQJAgkoAAcAAAAAAAAAAgAAAAAAAAAAAAoqAgoJKgEHCAAABAgCCCoCCAcqAAAIAAAEAAIAKgIHCCoAAAcAAAQAAgAkAAQACioCCgcqAAAJAAAEAAIAJAABAAsqAgsJJAAHBwwkAAQEDSQABAMOJAAEAg8kAAQBECoACgQgAFIMAAQEDxEhAAEGABEgAFUqAQkMCgABDAsEIQAAWQAEOgEAACoACg8gAFsMAAQPDgwhAADdAAwgAF4qAQgOKgAADCQABAUHAAAEAAcAJAEEAQwAAAQOAgckAAQEBQAABAwCBD4DAAAABwAAAAQqAgwIJAABAQgqAggJAAAEDAIIAAAECAoNKgENCQoABwkGDAoAAQwLCCEAAHEACDoBAAAmAAc7msoAAAsAAAcLCQwqAAALJAAEAggAAAQACAAkAQQBCwAABAsCCCoACA0qAgYNKgELCAAABAgCCCoCCAsqAAAIAAAEAAIAKgILCCoACg8gAIIKAAQPCg4hAADHAA4gAIUqAQgOAAAEDgINAAAEDQoLKgELCAoABwgGDiEAAIwADjoBAAAlAAferQAGKgAACCQABAIOAAAEAA4AJAEEAQgAAAQIAg4qAA4NKgIGDSoACg8gAJYKAAQPCg4hAAC3AA4gAJkkAAcBDioAAA0kAAQCDAAABAAMACQBBAENAAAEDQIMKgAMCyoCDgsqAAoPIACjCgAEDwoMIQAApwAMIACmIxwABw8MAAAHCQwLJAAEAQgMAAQPCAchAACtAAc6AQAAAAAEDQIHAAAEBw8IKgEIDC0AAAAADAAAAAsAAAQPEAwOAAQPDAshAAC1AAs6AQAAKgAMDyAAoxwABw8OAAAHDA4NJAAEAQsMAAQPCwchAAC9AAc6AQAAAAAECAIHAAAEBw8LKgELDi0AAAAADgAAAA0AAAQPEA4OAAQPDg0hAADFAA06AQAAKgAODyAAlioBCA4cAAcPDQAABwwNCywAAAAACwAAAA0kAAQBBwwABA8HBSEAAM8ABToBAAArAAAOCAMlAAQAAggEIgAAAZErAAgFAAsAAAQLAgUAAAQFDwcqAg0HAAAEDxAODgAEDw4NIQAA2gANOgEAACoCCwgqAA4PIACCKgEHDAwABA8MBCEAAOEABCABACoBCAwqAQgEJAAEBBEMAAQPERIhAADnABI6AQAAAAAEBAISAAAEEg8RKgERAyoBBQQkAAQDEQwABA8REyEAAO8AEzoBAAAAAAQEAhMAAAQTDxEqARESAAAHAxIEJAAEBBIMAAQPEhMhAAD3ABM6AQAAKwAADAgDJQAEAAUIBCIAAAGRKwAIBQADAAAEAwITAAAEEw8SKgIEEioCAwggAQAAAAQPEAwOAAQPDAQhAAEEAAQ6AQAAKgAMDyAAWwwABAQPESEAAQkAESABYioAABEkAAQDEgAABAASACQBBAERAAAEEQISKgASEyoCDBMAAAQTAhMqAgMTJAAEAhMMAAQEExQhAAEWABQ6AQAAAAAEEQIUAAAEFAQTKgETEioBCREKAAERCxQhAAEdABQ6AQAAKgEHEQoABBEOFCEAATkAFCABISoBBREqAQcTKgEHFCQABAMWDAAEFBYXIQABKAAXOgEAACsAABEIAyUABAAECAQiAAABkSsACAUAFQAABBUCFwAABBcUFioCEhYqARURAAAEEQIRKgIRFQAABBMQEQ4ABBMREiEAATYAEjoBAAAqAhUFKgIRByABYioAChEgATsMAAQRDhMhAAFoABMgAT4qAQURKgEIEyoAABQkAAQFFQAABAAVACQBBAEUAAAEEwIVJAAEBBYAAAQUAhc+AwAAABUAAAAXKgEREwIABBMCEyoCExEqARETAAAEEwITKgITESoBFBMAAAQTAhMqAhMUKwAAEQgDJQAEAAQIBCIAAAGRKwAIBQATAAAEEwIXAAAEFwoWKgISFioBExIAAAQSAhIqAhITKgEUEgAABBICEioCEhQqAhMFKgIUCCoCEAcgAWIAAAQEEBEOAAQEERIhAAFmABI6AQAAKgARBCAAUioBBxMMAAQRExQhAAFsABQgAYsqAQgTKgEIFCQABAQWDAAEERYXIQABcgAXOgEAAAAABBQCFwAABBcRFioBFhUqAQUUJAAEAxYMAAQRFhghAAF6ABg6AQAAAAAEFAIYAAAEGBEWKgEWFwAABxUXFCQABAQVDAAEERUYIQABggAYOgEAACsAABMIAyUABAAFCAQiAAABkSsACAUAFwAABBcCGAAABBgRFSoCFBUqAhcIIAGLAAAEERATDgAEERMUIQABjwAUOgEAACoAExEgATsrAQgDCAYLAAQIBgACCAchAAGVCAcgAZcrAAgDCAUgAaUrAAAACAUBAAQAAAgEAAAlAAQAAAgJDQAECAkIBAgKFwAICggKIQABowgKAQAECAMICQgLKwEICwgIAQAECAUICQgLKwIICAgLAQAECAkAAggJIAGaJQEEAAEIBSABpSMrABjKGMo=","debug_symbols":"7Z3dbts4EIXfxde54PBPZF9lsSjSNi0CBEnRpAssirz7yqlFO6SXqk16TILnpkiaiXT8RdacQ4vkr82Xu08/v328f/z69Lz58NevzcPT59uX+6fH+btfrzebTz/uHx7uv308/O+N2P7j3sqfv98+br97frn98bL5QJPUN5u7xy/bL5WeD/D1/uFu82FSrzdJsVfTrtabKZSScUdqtSS/K9ZSulDtpyPF1pHaFVsn/WHx3zcbXyycBIVicVB8cekkyqFPy/G9X4NOUi/FJL3PK3dkFhWODg69U04Vlc/Q30vfnkBe+gTq0ifQlz6BKT6BVk4u17LyYuVa9nY5svVTci3bcjUV31nTiWq2v+PO+B1/+u/Io+96a7xYXo+VcuXCkLS86yfaXxfH725mqT18Gyuhj15wZMKBrdpXkz9SrVz4c6n9taOOHVhKu7w6KSeXL55f/kJCqsPSLTwCvPPhScA7H54CvPPhacA7H54BvPPhWcA7H94EeOfDc4B3PjwPeGfDU0gYBfCQMArgIWEUwEPCKICnAe98eEgYK/CMXUgcfLaxg4eEUQAPCaMAHhJGATwkjPPhaSSMAnhIGDERxIaYCLJATESDSEQErj0mAiseE4G/jonANMdE4IQjIgb2NiYCzxoTgWeNicCzxkQ0iERE4FljIvCsMRF41pgIPGtMBJ41ImLhWWMi8KwxEXjWmAg8a0xEg0hEBJ41JgLPGhOBZ42JwLPGROBZIyITPGtMBJ41JgLPGhOBZ42JaBB5T8SN+K5RIhBRRDGREV385JYDy+lgxY9Ti7f4RrT8p+CjySwHpmmKn/lzI+aDivhGDBP18PkRXeVJ+Ny0zI4h5ylf7NRyYKfi26TXIF2PNAnllmJh4o7u0dFrsqYgmcjqmDXaPx9reAU+1jAWfKxHHP+8EmsSIw6tXg02/DUj7BGHtq4Ge8Sx5kqw3/hp8Cvih4xXxg+5baVYiGWIQQqZ8kMWK+OHfFXGrzwzzT3Ihg4v1BpBMmrvB0T+0NYv61xPdPinkb/XiBcda6eOtcuOta/7TbNyAiIXBo3l4bL5yyn05U9hyk8hp3Ark96+O0Vabbxdbk/Gry3kbya1HHr+Uh4Wv4m3PYufehbvehbvOxb/B3syNCyeehYvexavehavexbfc4eVPXdY2XOHVY3f540L4k2yp5Fq/G4z6SDeiUQ8/90mbGBmhTB58eRNGEXz9iCFi51607V627X6CjccpcKGXEr7JK8pd/lT+IufwlS4uRkKfwuj3Mqf2Spatny0Sq1sKGjntrcUz1dTfH+wFW5u8y1oEW/fDVpcXPzUtvjw3rXkKBHv2ha/X0n1mHjftngXNikkn7iRSfQsnnoWL3sW3/itMi9e9yze9Czeti1ey714lS+e7eV+r2nnklfaeDv+31f6Jr7xdpwX33g7zop3jbfjvHjVtvnPWlCn2xaftaDOtC0+2xSc7Vn81LN417N437F43/g4SV489Sxeti2+ngX1jbfjrJf4g0msDYtvvB3nxTfejvPiG38CJPfhmhRtfzLoKHys6SQl4ht/AsTbnPjGnwAJHW0WL1eagg7z1b2e0lfa8Qe4UuiexTf+uEhefOOPi+TFN/64SF584w9k5sU33o6z4qnxB3Xy4htvx3nxjbfjvPieO2yNiQnXE99zh219ykNefM8dtvUpD1nxEss+5IurLasmJRZ9qIiaRFgplQSlsDHpnhE2ZugzwsZ0/qqwc8szSom5/4ywsbgaH2yFxdUYYcNlM8KGz2aEjcXVGGFrwOaDjQRZFbYJazQK6xLYSJCMsJEgGWEjQTLCRoLkg62RIBlhI0EywkaCvJTPPgIbCZIv1GgN2HywkSAZYSNBMsJGgmSEjQTJCBsJkg+2QYJkhI0EyQgbCZIRNhIkI2wN2HywEWoYYSPUMMJGqGGEjVDDB9uOaP2UXGqlSme+2BEHQlW4pKRyIkEyYmdfQTJi/11BMmKXXEEyYi/LI5lGHEZbQTLiYNcKkiF9SR7JiANHK0g0kMRI4F4TJHCvCRK41wQJ3GuCBO41RuLgXhMkQ7rXsLbpTGdtCI6CCiKrE35DWt1T+MkwXkdSTwm/IX1xRX4a/Ir4Dem4K/Ib0p6fxM/u11tzaf8Y0qWdwk+H5bDnL5Przw9p6Sryg/8r4wf/t8LPUugfVtuEH/xfGT8NfkX84P/K+MH/lfEbciy3Ir8hB34r8kP+KOGnBPJHGT/kjzJ+yB9l/JA/yvhp8Cvih/xRxg/5Y42fDVMIrHMJP+SPMn7IH2X8kD+K+BHyRxk/5I/XIn7wLyv8tAj8tJzyxblNnRSh1VREnZ9aOQsHbDbYEk2sJuzsE4tqyG34rgYbw3OMsDGWxwhbAzYfbLhsRtgYUmSEjfFHRthIkIywkSD5YA+5xeTVYCNBng37jR9CYRk/5Lwyfhr8ivghjZXxQ8Aq44fMtMZPq8DPJM8MDblPYk1+SDZF/IbczbAmP+SPMn7IH2X8kD/K+GnwK+KH/FHGD/mjjB/yRxk/5I8yfsgfRfyG3Auv3povasjt7WryQ/4o46fBL0YCS5wggctNkMC4xkgsvMDavbjW/B0L21ARNQmxcCNBKWz0SEbY6L6MsNHXq8LOzkwbc6O4a8HGuBgjbAyi8cEec9u8a8GGz2aEjbE8Rth48IARtgbsmrBNmFIibLKMzJgbH14LNhIkI2wkSEbYSJCMsJEg+WCPuXXltWAjQV7KZx+BjQTJF2qw3SYnbA3YfLCRIBlhI0EywkaCZISNBMkIGwmSDzZ2yuWEjQTJCBsJkhE2EiQjbIQaRtgINYywEWoYYSPUMMF+nb/75/bH/e2nh7vn+Xe2P/z5+Pnl/ulx9+3Lv99//2Qu/g8=","brillig_names":["set_contract_registered"],"assert_messages":{"180":"attempt to add with overflow","369":"Array index out of bounds","14":"Not initialized","139":"SharedImmutable already initialized","206":"Array index out of bounds","238":"Array index out of bounds","357":"attempt to add with overflow","398":"attempt to add with overflow","188":"Array index out of bounds","217":"attempt to add with overflow","246":"Array index out of bounds","19":"Function set_contract_registered can only be called internally","112":"Storage slot 0 not allowed. Storage slots must start from 1.","377":"Array index out of bounds","295":"Array index out of bounds","196":"attempt to add with overflow","385":"Array index out of bounds","277":"Array index out of bounds","309":"attempt to add with overflow","172":"Array index out of bounds","230":"Array index out of bounds","259":"attempt to add with overflow"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":19,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"get_managed_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"boolean"},{"kind":"integer","sign":"unsigned","width":32}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_managed_escrows"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"owner","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"owner","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b3dd3286"},{"kind":"string","value":"ParticipantNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseDkimRegistry"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrow"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrowRegistry"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"managed_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"participants","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"participant_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"contract_registration","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::register_participant_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow_contract_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseEscrowRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::check_and_register_participant_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::check_and_register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseEscrowRegistry::get_escrow_class_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseEscrowRegistry::get_escrow_class_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::get_contract_registration_status_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseEscrowRegistry::get_contract_registration_status_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::register_escrow_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::register_escrow_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseEscrowRegistry::set_contract_registered_parameters"}}],"kind":"struct","path":"ZImburseEscrowRegistry::set_contract_registered_abi"}]}},"file_map":{"102":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"103":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"105":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"118":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"119":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"120":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"121":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"122":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"123":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"124":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"125":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"126":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"128":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n"},"131":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"132":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"134":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"136":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"139":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LTE, rhs), \"Expected lhs to not be less than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n    }\n}\n"},"140":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"153":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"155":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"156":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::{NoteInterface, NullifiableNote}}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = unsafe {\n            get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier)\n        };\n\n        // 2) First we prove that the tree leaf in the witness is present in the nullifier tree. This is expected to be\n        // the leaf that contains the nullifier we're proving inclusion for.\n        assert(\n            self.state.partial.nullifier_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n\n        // 3) Then we simply check that the value in the leaf is the expected one. Note that we don't need to perform\n        // any checks on the rest of the values in the leaf preimage (the next index or next nullifier), since all we\n        // care about is showing that the tree contains an entry with the expected nullifier.\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, let N: u32>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N> + NullifiableNote;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, let N: u32>(\n        self,\n        note: Note,\n        context: &mut PrivateContext\n    ) where Note: NoteInterface<N> + NullifiableNote {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"158":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"159":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"162":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"164":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"165":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"172":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"173":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"184":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"213":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"226":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"235":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"268":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"281":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"301":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"303":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"304":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"306":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"307":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"310":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"311":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"313":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"314":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"319":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"320":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"323":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"334":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n  value: [Field; N]\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"342":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/recurring_entitlement_note.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator};\nuse dep::aztec::{note::utils::compute_note_hash_for_nullify, oracle::random::random};\nuse dep::compressed_string::CompressedString;\nuse dep::aztec::macros::notes::note;\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, PrivateContext};\nuse dep::aztec::keys::getters::get_nsk_app;\n\n// unique ids for each verifier type\nmod HOSTING_VERIFIER_TYPE {\n    global LINODE: u8 = 1; // supported\n    global HEROKU: u8 = 2; // todo: supported\n    global AWS: u8 = 3; // todo: supported\n    global GCP: u8 = 4; // not supported in mvp\n    global AZURE: u8 = 5; // not supported in mvp\n    global HETZNER: u8 = 6; // not supported in mvp\n    global DIGITAL_OCEAN: u8 = 7; // not supported in mvp\n}\n\n// trait OwnedNote {\n//     fn new(\n//         owner: AztecAddress,\n//         external_nullifier_hash: Field,\n//         npk_m_hash: Field,\n//         max_value: U128,\n//         verifier_type: u8,\n//     ) -> Self;\n// }\n\ntrait OwnedNote {\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self;\n}\n\n#[note]\npub struct RecurringEntitlementNote {\n    // the user that is allowed to use this entitlement\n    owner: AztecAddress,\n    // // the external nullifier that the admin can use to nullify the note\n    // external_nullifier_hash: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // // the type of email verifier that should be used for this entitlement\n    // verifier_type: u8,\n    // random entropy to make the note private\n    randomness: Field,\n}\n\nimpl NullifiableNote for RecurringEntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for RecurringEntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.owner == other.owner)\n            & (self.max_value == other.max_value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for RecurringEntitlementNote {\n    // fn new(\n    //     owner: AztecAddress,\n    //     external_nullifier_hash: Field,\n    //     npk_m_hash: Field,\n    //     max_value: U128,\n    //     verifier_type: u8,\n    //     randomness: Field\n    // ) -> Self {\n    //     Self {\n    //         owner,\n    //         external_nullifier_hash,\n    //         npk_m_hash,\n    //         max_value,\n    //         verifier_type,\n    //         randomness: unsafe_rand()\n    //         header: NoteHeader::empty()\n    //     }\n    // }\n    fn new(\n        owner: AztecAddress,\n        npk_m_hash: Field,\n        max_value: U128,\n    ) -> Self {\n        Self {\n            owner,\n            npk_m_hash,\n            max_value,\n            randomness: unsafe { random() },\n            header: NoteHeader::empty()\n        }\n    }\n}"},"345":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"346":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"70":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_escrow_registry/src/types/participant_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator, traits::{Serialize, Deserialize}\n},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\nuse dep::compressed_string::CompressedString;\n\nglobal NAME_LENGTH: u32 = 60;\nglobal NAME_SERIALIZED_LENGTH: u32 = 2;\n\n#[note]\npub struct ParticipantNote {\n    address: AztecAddress,\n    name: [Field; 2],\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n\nimpl NullifiableNote for ParticipantNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for ParticipantNote {\n    // does not check for participant name\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl ParticipantNote {\n    pub fn new(address: AztecAddress, name: str<NAME_LENGTH>, npk_m_hash: Field) -> Self {\n        let randomness = unsafe { random()};\n        let name_serialized: CompressedString<NAME_SERIALIZED_LENGTH, NAME_LENGTH> = CompressedString::from_string(name);\n        ParticipantNote { address, name: name_serialized.value, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_name(self) -> [u8; NAME_LENGTH] {\n        CompressedString::<NAME_SERIALIZED_LENGTH, NAME_LENGTH> { value: self.name }.to_bytes()\n    }\n}\n"},"71":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_escrow_registry/src/types/escrow_registry_definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal ESCROW_REGISTRY_DEFINITION_LENGTH: u32 = 3;\n\npub struct EscrowRegistryDefinition {\n    dkim_registry: AztecAddress,\n    usdc: AztecAddress,\n    escrow_contract_id: Field\n}\n\nimpl Serialize<ESCROW_REGISTRY_DEFINITION_LENGTH> for EscrowRegistryDefinition {\n    fn serialize(self: Self) -> [Field; ESCROW_REGISTRY_DEFINITION_LENGTH] {\n        [self.dkim_registry.to_field(), self.usdc.to_field(), self.escrow_contract_id]\n    }\n}\n\nimpl Deserialize<ESCROW_REGISTRY_DEFINITION_LENGTH> for EscrowRegistryDefinition {\n    fn deserialize(fields: [Field; ESCROW_REGISTRY_DEFINITION_LENGTH]) -> Self {\n        EscrowRegistryDefinition {\n            dkim_registry: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            escrow_contract_id: fields[2]\n        }\n    }\n}\n\nimpl EscrowRegistryDefinition {\n    /**\n     * Create a new definition for a Z-Imburse escrow registry contract\n     *\n     * @param dkim_registry The address of the DKIM registry\n     * @param usdc The address of the USDC token\n     * @param escrow_contract_id The ID of the escrow contract\n     * @return The new escrow registry definition\n     */\n    pub fn new(\n        dkim_registry: AztecAddress,\n        usdc: AztecAddress,\n        escrow_contract_id: Field\n    ) -> Self {\n        EscrowRegistryDefinition { dkim_registry, usdc, escrow_contract_id }\n    }\n}\n "},"73":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_escrow_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod types;\n\n#[aztec]\ncontract ZImburseEscrowRegistry {\n    use dep::aztec::prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map};\n    use dep::aztec::macros::{storage::storage, functions::{private, public, view, initializer}};\n    use dep::aztec::note::{\n        note_viewer_options::NoteViewerOptions, note_getter_options::NoteGetterOptions,\n        note_getter::{get_notes, view_notes}, constants::MAX_NOTES_PER_PAGE\n    };\n    use dep::aztec::oracle::{get_contract_instance::get_contract_instance, header::get_header_at_oracle};\n    use dep::aztec::keys::getters::get_public_keys;\n    use dep::aztec::utils::comparison::Comparator;\n    use dep::aztec::encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note_unconstrained, encode_and_encrypt_note};\n    use dep::address_note::address_note::AddressNote;\n    use dep::z_imburse_escrow::ZImburseEscrow;\n    use dep::z_imburse_dkim_registry::{ZImburseDkimRegistry, BULK_KEY_LENGTH};\n    use crate::types::{\n        escrow_registry_definition::EscrowRegistryDefinition,\n        participant_note::{ParticipantNote, NAME_LENGTH}\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        // todo: decentralize dkim registry functionality\n        definition: SharedImmutable<EscrowRegistryDefinition, Context>,\n        managed_escrows: PrivateSet<AddressNote, Context>,\n        participants: Map<AztecAddress, PrivateSet<ParticipantNote, Context>, Context>,\n        participant_escrows: PrivateSet<AddressNote, Context>,\n        contract_registration: Map<AztecAddress, SharedImmutable<bool, Context>, Context>\n    }\n\n    /**\n     * Initialize the Z-Imburse registry contract by setting the class ID of the escrow contract\n     *\n     * @param contract_class_id - The class ID of the escrow contract that all escrows must be instances of\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        dkim_registry: AztecAddress,\n        usdc: AztecAddress,\n        escrow_contract_id: Field,\n    ) {\n        let definition = EscrowRegistryDefinition::new(\n            dkim_registry,\n            usdc,\n            escrow_contract_id\n        );\n        storage.definition.initialize(definition);\n    }\n\n    // /**\n    //  * Entrypoint for registering a DKIM key in bulk in the DKIM registry\n    //  * @dev the DKIM registry is separate from escrow registry so both can import it\n    //  *\n    //  * @param dkim_verifier_ids - the verifier IDs to register the DKIM keys to\n    //  * @param dkim_key_hashes - the hashes of the DKIM keys\n    //  */\n    // #[public]\n    // fn register_dkim_bulk(\n    //     dkim_verifier_ids: [Field; BULK_KEY_LENGTH],\n    //     dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    // ) {\n    //     // check admin is sender\n    //     let definition = storage.definition.read_public();\n    //     assert(context.msg_sender() == definition.admin, \"Only admin can update dkim\");\n    //     // forward call to DKIM registry\n    //     ZImburseDkimRegistry::at(definition.dkim_registry)\n    //         .register_dkim_bulk(dkim_verifier_ids, dkim_key_hashes)\n    //         .call(&mut context);\n    // }\n\n    // /**\n    //  * Entrypoint for registering a DKIM key in the DKIM registry\n    //  * @dev the DKIM registry is separate from escrow registry so both can import it\n    //  *\n    //  * @param dkim_verifier_id - the verifier ID to register the DKIM key to\n    //  * @param dkim_key_hash - the hash of the DKIM key\n    //  */\n    // #[public]\n    // fn register_dkim(dkim_verifier_id: Field, dkim_key_hash: Field) {\n    //     // check admin is sender\n    //     let definition = storage.definition.read_public();\n    //     assert(context.msg_sender() == definition.admin, \"Only admin can update dkim\");\n    //     // forward call to DKIM registry\n    //     ZImburseDkimRegistry::at(definition.dkim_registry)\n    //         .register_dkim(dkim_verifier_id, dkim_key_hash)\n    //         .call(&mut context);\n    // }\n\n    /**\n     * Check the authenticity and deployment status of an escrow contract and register it in the Z-Imburse registry\n     * @dev the header will not include the contract address and the contract \n     *\n     * @param escrow_contract - the address of the escrow contract to register\n     */\n    #[private]\n    fn register_escrow(escrow_contract: AztecAddress) {\n        // check that the contract has not already been registered\n        let registration_status = storage.contract_registration.at(escrow_contract).read_private();\n        assert(!registration_status, \"Escrow contract has already been registered\");\n\n        // check that the contract admin is the sender of the message\n        let escrow_admin = ZImburseEscrow::at(escrow_contract).get_admin_private().view(&mut context);\n        assert(escrow_admin == context.msg_sender(), \"Escrow contract admin does not match sender of message\");\n        // todo: check that dkim registry matches\n\n        // check that the contract has been deployed\n        let header = context.historical_header;\n        header.prove_contract_initialization(escrow_contract);\n\n        // check the contract class ID\n        // THIS IS NOT CONSTRAINED THE ORACLE CAN JUST LIE ://////\n        // need to compute the full contract address to prove it uses the correct class\n        let contract_class_id = get_contract_instance(escrow_contract).contract_class_id.to_field();\n        let expected_class_id = storage.definition.read_private().escrow_contract_id;\n        assert(\n            contract_class_id == expected_class_id, \"Escrow contract class ID does not match expected class ID\"\n        );\n\n        // privately add the escrow contract to the list of managed escrows\n        let admin_keys = get_public_keys(context.msg_sender());\n        let mut escrow_note = AddressNote::new(escrow_contract, admin_keys.npk_m.hash());\n        // use unconstrained - why would you lie here\n        storage.managed_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, context.msg_sender())\n        );\n\n        // publicly add the escrow contract to the list of participant escrows\n        ZImburseEscrowRegistry::at(context.this_address()).set_contract_registered(escrow_contract).enqueue(&mut context);\n    }\n\n    /**\n     * Publicly set the contract registration status\n     *\n     * @param escrow_contract - the address of the escrow contract that has privately been constrained to be valid\n     */\n    #[public]\n    #[internal]\n    fn set_contract_registered(escrow_contract: AztecAddress) {\n        storage.contract_registration.at(escrow_contract).initialize(true);\n    }\n\n    #[private]\n    fn check_and_register_participant(participant: AztecAddress, participant_name: str<60>, escrow: AztecAddress) {\n        // check that the sender is the admin\n        let escrow_admin = ZImburseEscrow::at(escrow).get_admin_private().view(&mut context);\n        assert(escrow_admin == context.msg_sender(), \"Sender is not the admin of the escrow contract\");\n        // check that the escrow address is registered\n        let registration_status = storage.contract_registration.at(escrow).read_private();\n        assert(registration_status, \"Escrow contract has not been registered\");\n        // check if the participant has already been registered\n        let options = NoteGetterOptions::new().select(AddressNote::properties().address, Comparator.EQ, participant).set_limit(1);\n        let participant_exists = storage.participants.at(escrow).get_notes(options).len() == 0;\n        // if the participant has not been registered, enqueue a private call to register the participant\n        // do this instead of if statement here to make adding first time expensive but cheap if already registered\n        if participant_exists {\n            ZImburseEscrowRegistry::at(context.this_address()).register_participant(participant, participant_name, context.msg_sender(), escrow).call(&mut context);\n        }\n    }\n\n    #[private]\n    #[interal]\n    fn register_participant(\n        participant: AztecAddress,\n        participant_name: str<60>,\n        admin: AztecAddress,\n        escrow: AztecAddress\n    ) {\n        let admin_keys = get_public_keys(admin);\n        let participant_keys = get_public_keys(participant);\n        // add escrow to the participant's set of escrows\n        let mut escrow_note = AddressNote::new(escrow, participant_keys.npk_m.hash());\n        storage.participant_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note(\n                &mut context,\n                admin_keys.ovpk_m,\n                participant_keys.ivpk_m,\n                participant\n            )\n        );\n        // add the participant to the admin set of participants\n        let mut participant_note = ParticipantNote::new(\n            participant,\n            participant_name,\n            admin_keys.npk_m.hash()\n        );\n        storage.participants.at(escrow).insert(&mut participant_note).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                admin_keys.ovpk_m,\n                admin_keys.ivpk_m,\n                admin\n            )\n        );\n    }\n\n    // todo: add ability to remove participant\n    // todo: add ability to remove participant escrows by looking up nullifications\n\n    /** Get the class ID that all escrow contracts must match */\n    #[public]\n    #[view]\n    fn get_escrow_class_id() -> Field {\n        storage.definition.read_public().escrow_contract_id\n    }\n\n    /** Get the registration status of an escrow contract */\n    #[public]\n    #[view]\n    fn get_contract_registration_status(escrow_contract: AztecAddress) -> bool {\n        storage.contract_registration.at(escrow_contract).read_public()\n    }\n\n    /**\n     * Get a page of the list of escrows administrated by a given address (private)\n     *\n     * @param admin - the address of the admin\n     * @param page_index - the index of the page to retrieve\n     * @return managed_escrows - the list of managed escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_managed_escrows(\n        admin: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], bool, u32) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.managed_escrows.view_notes(options);\n        let mut managed_escrows: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                managed_escrows[i] = notes.get_unchecked(i).address;\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (managed_escrows, page_limit_reached, notes.len())\n    }\n\n    /**\n     * Get a page of the list of escrows participated in by a given address (private)\n     *\n     * @param admin - the address of the participant\n     * @param page_index - the index of the page to retrieve\n     * @return participant_escrows - the list of enrolled escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participant_escrows(\n        participant: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.participant_escrows.view_notes(options);\n        let mut participant_escrows: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                participant_escrows[i] = notes.get_unchecked(i).address;\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (participant_escrows, page_limit_reached)\n    }\n\n    /**\n     * Get a page of the list of of participants in an escrow (private)\n     *\n     * @param admin - the address of the escrow\n     * @param page_index - the index of the page to retrieve\n     * @return participants - the list of participating addresses\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participants(\n        escrow: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], [[u8; NAME_LENGTH]; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.participants.at(escrow).view_notes(options);\n        let mut participants: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        let mut participant_names: [[u8; NAME_LENGTH]; MAX_NOTES_PER_PAGE] = [[0; NAME_LENGTH]; MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                let participant_note = notes.get_unchecked(i);\n                participants[i] = participant_note.address;\n                participant_names[i] = participant_note.get_name();\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (participants, participant_names, page_limit_reached)\n    }\n}\n\n"},"75":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe { random() };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"81":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"82":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"84":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"87":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"88":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"91":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"95":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"96":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"97":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"98":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"}}}