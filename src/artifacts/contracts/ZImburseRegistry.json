{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseRegistry","functions":[{"name":"set_contract_registered","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["set_contract_registered"],"assert_messages":{"180":"attempt to add with overflow","369":"Array index out of bounds","14":"Not initialized","139":"SharedImmutable already initialized","206":"Array index out of bounds","238":"Array index out of bounds","357":"attempt to add with overflow","398":"attempt to add with overflow","188":"Array index out of bounds","217":"attempt to add with overflow","246":"Array index out of bounds","19":"Function set_contract_registered can only be called internally","112":"Storage slot 0 not allowed. Storage slots must start from 1.","377":"Array index out of bounds","295":"Array index out of bounds","196":"attempt to add with overflow","385":"Array index out of bounds","277":"Array index out of bounds","309":"attempt to add with overflow","172":"Array index out of bounds","230":"Array index out of bounds","259":"attempt to add with overflow"}},{"name":"get_escrow_class_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQQKAAIGBAUhAAAPAAU6AQAAHgALAAQkAAcBBgoABwQGBSEAABQABToBAAAqAAAEJAAEBAUAAAQABQAkAQQBBAAABAQCBSoABQckAAcACCoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBAUAAAQFAgUqAgUEKgAABQAABAACACoCBAUkAAQBCCQABAMEJAAEAAcqAAcDIAArDAAEAwQHIQAANAAHIAAuKgEFBCQABAIFAAAEBAIGAAAEBgUHKgEHAyMqAQUHHAAHAwkAAAcGCQosAAAAAAoAAAAJJAAEAwsMAAQDCwwhAAA8AAw6AQAAKwAABwgDJQAEAAQIBCIAAABKKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMICQ4ABAMJByEAAEcABzoBAAAqAgoFKgAJAyAAKysBCAMIBgsABAgGAAIIByEAAE4IByAAUCsACAMIBSAAXisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABcCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAFMlAQQAAQgFIABeIysAGMoYyg==","debug_symbols":"1ZrdTsMwDIXfJde7SJw4sfcqCKEONlSp6tA2kNC0d6eFJhQ6pWIwEd9My3ZSf82PT2r1qB7Wq+fHu7rdbPdqeXNUzfa+OtTbtmsdTwu12tVNUz/ejX9Wuv+gd/n+qWr71v5Q7Q5qaQK4hVq3D/1X67oLbOpmrZYO9WkxUbMNg5gxJG3AM1IHhgetA6AkNprOqD0ZO6g9AX9R3y4U/x7daJPUeqS+PrzRfzDwIUZgnhl4Ay5qDTDPsJPBiEFmdOnIbv6SvRv4L/B9ALh2AHvtAO7aAfD3ARA5RkCv5xZFIMBBHcjRZFH4nwL1ncIlneiSTnxBJzi/SbvN5GMvA8HPJZlu/6cg+nMi+204nRP2Mckgs56ZEwzWRHWw8H1OwAjnB+H8Vji/E86Pwvm9cP4gnJ+E87Nsfivcf61w/7XC/dcK918r3H+tcP+1wv3XCvdfV/7+RUr8OCnyuPLXT3CJn/SE/z/WTyo9ea1xriaRChikYYQB7/Qkmp4l06MWTV/+uSebd7D4vEkm5X0CM+F3xY8/+xx/+ecesp/8MKNmZ+NqYxemdyvc5bD8U1Kev/wqRZ6//CpFlt+XX6XI85dfpcjzl+/Wef7yn3Ly/OW7dZ6/fLfO8wv3Xy/cf71w//XC/TcI998g2n9PXfOl2tXVqlkPb5ttntv70ctnh9enj3868Rs=","brillig_names":["get_escrow_class_id"],"assert_messages":{"14":"Not initialized","59":"Array index out of bounds","70":"attempt to add with overflow","19":"Function get_escrow_class_id can only be called statically"}},{"name":"register_participant","is_unconstrained":false,"custom_attributes":["private","internal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow_contract_id","type":{"kind":"field"},"visibility":"private"},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["constructor"],"assert_messages":{"768":"Array index out of bounds","1536":"Array index out of bounds","1274":"attempt to add with overflow","951":"Array index out of bounds","756":"attempt to add with overflow","1530":"attempt to add with overflow","933":"Array index out of bounds","1311":"attempt to add with overflow","1628":"Array index out of bounds","153":"Array index out of bounds","787":"attempt to add with overflow","1104":"Array index out of bounds","1616":"attempt to add with overflow","1226":"Array index out of bounds","775":"Array index out of bounds","903":"Array index out of bounds","1025":"Array index out of bounds","1476":"Array index out of bounds","763":"attempt to add with overflow","629":"Storage slot 0 not allowed. Storage slots must start from 1.","1013":"attempt to add with overflow","1324":"Array index out of bounds","1568":"attempt to add with overflow","733":"Array index out of bounds","861":"attempt to add with overflow","727":"attempt to add with overflow","404":"SharedImmutable already initialized","1117":"attempt to add with overflow","142":"attempt to add with overflow","1300":"Array index out of bounds","648":"SharedImmutable already initialized","837":"Array index out of bounds","965":"attempt to add with overflow","1282":"Array index out of bounds","1489":"attempt to add with overflow","1501":"Array index out of bounds","1075":"attempt to add with overflow","1386":"Array index out of bounds","1636":"Array index out of bounds","1368":"Array index out of bounds","1234":"Array index out of bounds","911":"Array index out of bounds","1033":"Array index out of bounds","1088":"Array index out of bounds","570":"DKIM key has already been registered","1332":"Array index out of bounds","1460":"Array index out of bounds","552":"Storage slot 0 not allowed. Storage slots must start from 1.","1064":"Array index out of bounds","1448":"attempt to add with overflow","1247":"attempt to add with overflow","924":"attempt to add with overflow","1509":"Array index out of bounds","845":"attempt to add with overflow","1290":"attempt to add with overflow","1144":"Array index out of bounds","821":"attempt to add with overflow","882":"attempt to add with overflow","1266":"Array index out of bounds","108":"attempt to add with overflow","1400":"attempt to add with overflow","1126":"Array index out of bounds","803":"Array index out of bounds","1644":"Array index out of bounds","474":"Array index out of bounds","1041":"Array index out of bounds","1096":"Array index out of bounds","1218":"Array index out of bounds","895":"Array index out of bounds","1340":"Array index out of bounds","377":"Initializer address is not the contract deployer","1206":"attempt to add with overflow","371":"Initialization hash does not match","1468":"Array index out of bounds","1517":"Array index out of bounds","810":"Array index out of bounds","871":"Array index out of bounds","164":"attempt to add with overflow","481":"Array index out of bounds","1054":"attempt to add with overflow","1657":"attempt to add with overflow","853":"Array index out of bounds","146":"Array index out of bounds","463":"Array index out of bounds","1554":"Array index out of bounds","1353":"attempt to add with overflow","1158":"attempt to add with overflow"}},{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim"],"assert_messages":{"329":"Array index out of bounds","637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","50":"Sender is not registry admin","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","713":"attempt to add with overflow","457":"attempt to add with overflow","137":"Storage slot 0 not allowed. Storage slots must start from 1."}},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/+1dB3wUxRc+7hJIKKGjYguoCKh4m3qxoqKCFXsXL8mFIJAgCdUGKoqKBSv2hihWrNjFigXFLlixiwWxK7b/e8kumaybcHf7XtzPv/v7fbm7yc7s9+bN+3Zmdna3Vah+K84MhTbKqP/eihCxP8OEXFea82l+b+2xX3uPtByPtE4eaV080tYiDHSlbeixX65HWi+PtN4eaX3sNHNrZX8OtD/zo0UFBYnivISVb8WjeSWlscJoQWFpUcyKWYWxwvK8WH5+IlYQKy4pLSmOllgF+QmrorAkvyJavw0ON5QV9bXllWnyHCLGMxrV5Llb+jzz3AnMrQchw+DK/vrT/r5pqOH7ECN9N/u7k293+r0HYU/CXuGGdGcLu+og6m+z+gjW595yfrfM2OJyc5XrweTutx6GKtXD0PCaNSbqb7MyBNtDczz9lr2PXB0XesXuPmnE7r70ez/C/oQD7NjNtNEq9PdN2nf7CuquyffAsCJhLly63IPCso1Yw+6Dwg0VLFRuswEX9bc1qtOoz605nn79dbAYT6tYk+ch6fPMdyd4CdjBhlAxnO/7GumHuATsUPp9GOFwwhGGgHEnPRz6+ybdxrqHdNpYSIan5Xwx6+JI+8ewcKjxiID/8Z4rbZjHGTyiWIlpNtI8u5FaRwoK6TAlAZHuCUrafJRHWaXRsvJCq7SovNhKxAtjZWUl+ZaVFy+KF5XmxSoSpYVWrDBGZZbF82J0uLx4mZWIxosSLdmTOEqpJxEPKxKOK/QkSgPek2C7S5V6EtJnvGE2V6mAdcqV9FGZcMN3hJ/L7RWqD2DeWuJsqiW40jwPFeTZ2uBZbldywv6ssD+H25+Vtl70tfcfQb+PJowkjCKMJlQRqgljCMcQxhJqCLWEcYTxhAmEiYRJhMmEYwnHEY4nnEA4kTCFMJVwEuFkwimEaYRTCacRphNOJ5xBOJMwg3AW4WzCOYRz3b2LSrsn0ZJnhYTSWWFmWJHwTIWzwnkBPyuw3ecpnBVasrFVKDW288OKhM9XaGwXBLyxsd0XgDe24UqN7cKwIuELFRrbRQFvbGz3RS3U34362+rOEheE5fvRF4cxg6xSKchmhRUJz1IIsksCHmRs9yUgQcZicLFCkF3aQoMnvzwvS59ngTvBaxqZu5LOdHGF8b3S+H5ZuPE08uX0+wrClYSrwn+/hi094yl49rYuF4zNq4UFz+2bqw0fXGF8v9L4fpXLN9fQ72sJ1xFmhxuXJ9kuWT8uVYjL6wV9bUicZx1E/W1WuaD/nUmKOVTmDYQbCXMJNxFuJtxCuJVwG+F2wjzCHYQ7CXcR7ibcQ7iXMJ9wH+F+wgOEBwkPER4mPEJ4lLCA8BjhccIThCcJTxGeJiwkPEN4lvAc4XnCIsIL4fqJLXOeYk7472u+bvBIu9Ejba5H2k0eaTd7pN3ikXarR9ptHmm3e6TN80i7wyPtTo+0uzzS7vZIu8cj7V6PtPkeafd5pN3vkfaAR9qDHmkPeaQ97JH2iEfaox5pCzzSHvNIe9wj7QmPtCc90p7ySHvaI22hR9ozHmnPeqQ955H2vEfaIo+0Fww9dDZHfwfan1F/WyPN8au1cwTKSlTUbzcI8uqZodM3c/vCp83lN8rVX8lcubKsmwR9sS6ELxLWzWL1V2bdIlZWzLpV0BfrQfgiat0mVX+JqHW7VFllUWueoC/WR/BFLGrdIVV/dO65U6isBJV1l6AvNgDwRRnZfLdQ/cWorHuEyiKTrXsFfbFh8H2RYJvny9RfGZd1n0xZMS7rfkFf5AbfF1y09YBI/SXqynpQpKyyurIeEvRFr8D7IlZn88Mi9VdH03pEoqxEfVmPCvqid9B9UVZv8wKJ+ovVl/WYRFn1JluPC/pio4D7oty2+QkBm0vtsp4UKKvYLuspQV9sHGxfrF61/LR/my2nrIW+y4pVOGU9I+iLTQLti1ipY/Oz/uvPsdl6zndZxavLel7QF30C7YvC1TYv8m2ztbqsF8Jyc5bmfJ5fX2zaQr6I+tsswXkzS3Dex1pf0Bd9QXwhOD9gCY5vrVxBX/QD8YXgOMgS7MdbGwn6oj+ILwT7e5Zgf8XqI+iLzUB8IXheswR12eon6IvNlXwhvd5IMH4twfZnadVf2FV/Qbiu7JT1omA/lMuQXgPE6614zZL0OqjFYVlfS9vNN1PNUbB7YEaw7eb2uFjB7h1aSBv98nxJMB4FfW3tEPB2w/HyokK7GRRwu+coxcvOIPHysmC8CPrakqw/9q177TLrhLNG+eVwcs9XeoV+v0p4jfB6uOm1y1F/m8U3Ad+g0CYHK8eiX35s8ysKdg8BGWO9ItgvfUMwrgXbjYXii6MFffFmWCeGgxQXXhr7hqGlbyapsUvo91LCW4S3FTWWH7Jwo4LW7BFwjWWblyjYvSdIXC8RjMV3BDVWsN1YKL4YKeiLd8M6MRykuPDS2HcMLX03SY19j36/T1hG+EBRY/khNnMVtGZowDWWbX5Pwe59QOL6PcFY/FBQYwXbjYXii1GCvvgorBPDQYoLL4390NDSj5LU2I/p9yeETwmfKWosPyTsJgWt2T/gGss2f6xg9wEgcf2xYCx+Lqixgu3GQvHFaEFfLA/rxHCQ4sJLYz83tHR5khr7Bf3+kvAV4WtFjeWHMN6soDUHB1xj2eYvFOw+BCSuvxCMxRWCGivYbiwUX1QJ+uKbsE4MBykuvDR2haGl3ySpsSvp97eE7wjfK2osP+T2FgWtOTzgGss2r1Sw+wiQuF4pGIs/CGqsYLuxUHxRLeiLH8M6MRykuPDS2B8MLf0xSY39iX7/TPiF8KuixvJDxG9V0JqjAq6xbPNPCnbHQeL6J8FYXCWosYLtxkLxxRhBX/wW1onhIMWFl8auMrT0tyQ19nf6/QenEf5S1Fh+ScNtClpTHnCNZZt/V7A7ARLXvwvGIi/ylOIl2G4sFF8cI+iLVhGdGA5SXHhpLLfB1a/viySnsWHaL0LIIGRG9DSWX4Jzu4LWVAZcY9lmrmPpckeAxHVYMBZbC2qsYLuxUHwxVlBj20R0YjhIceGlsa0NXW2TpMZm0X7ZhLaEdooayy8Zm6egsaMCrrFsc5aCxo4GiesswVhsL6ixgu3GQvFFjaDGdojoxHCQ4sJLY9sbutohSY3Nof06EjoROitqLL/E8Q4FjR0TcI1lm3MUNPYYkLjOEYzFLoIaK9huLBRf1ApqbNeITgwHKS68NLaLoatdk9TYbrRfd0IPwlqKGssvyb1TQWNrA66xbHM3BY0dBxLX3QRjcW1BjRVsNxaKL8YJauw6EZ0YDlJceGns2oaurpOkxvak/dYlrEdYX1Fj+SXkdylo7MSAayzb3FNBYyeBxHVPwVjcQFBjBduNheKL8YIau2FEJ4aDFBdeGruBoasbJqmxubRfL0JvwkaKGjsh3PDOPrNcv3V6XMA1lm3OVdDY40HiOlcwFjcW1FjBdmOh+GKCoMZuEtGJ4SDFhZfGbmzo6iZJamwf2m9TQl9CP0WNnRhueAeqWa7fOp0ScI1lm/soaOxUkLjuIxiL/QU1VrDdWCi+mCiosZtFdGI4SHHhpbH9DV3dLEmN3Zz224IwgLClosZOCje8U9os12+dnhJwjWWbN1fQ2Gkgcb25YCxGBTVWsN1YKL6YJKixVkQnhoMUF14aGzV01UpSY/Nov3xCAaFQUWMn03HnK2js9IBrLNucp6Cxp4PEdZ5gLBYJaqxgu7FQfDFZUGOLIzoxHKS48NLYIkNXi5PU2BjtV0LYirC1osYeS8e9T0FjZwRcY9nmmILGngUS1zHBWNxGUGMF242F4otjBTV224hODAcpLrw0dhtDV7dNUmO3o/225/oi7KCoscfRce9X0NhzA66xbPN2Cho7EySutxOMxR0FNVaw3VgovjhOUGN3iujEcJDiwktjdzR0dackNXYQ7bczYRfCrooaezwd9wEFjb0g4BrLNg9S0NgLQeJ6kGAsDhbUWMF2Y6H44nhBjR0S0YnhIMWFl8YONnU1SY3djfbbnbAHYU9FjT2BjvuggsbOCrjGss27KWjsJSBxvZtgLO4lqLGC7cZC8cUJghq7d0QnhoMUF14au5ehq3snqbFDab99CPsS9lPU2BPpuA8paOzlAddYtnmogsZeARLXQwVjcX9BjRVsNxaKL04U1NgDIjoxHKS48NLY/Q1dPSBJjT2Q9juIcDDhEEWNnULHfVhBY68OuMayzQcqaOw1IHF9oGAsHiqosYLtxkLxxRRBjT0sohPDQYoLL4091NDVw5LU2MNpvyMIRxKGKWrsVDruIwoaOzvgGss2H66gsdeDxPXhgrF4lKDGCrYbC8UXUwU1Nh7RieEgxYWXxh5l6Go8SY0tpf3KCOWEhKLGnkTHfVRBY28MuMayzaUKGjsXJK5LBWOxQlBjBduNheKLkwQ1dnhEJ4aDFBdeGlth6OrwJDW2kvYbQTiaMFJRY0+m4y5Q0NhbAq6xbHOlgsbeChLXlYKxOEpQYwXbjYXii5MFNXZ0RCeGgxQXXho7ytDV0UlqbBXtV00YQzhGUWNPoeM+pqCx8wKusWxzlYLG3gES11WCsThWUGMF242F4otTBDW2JqITw0GKCy+NHWvoak2SGltL+40jjCdMUNTYaXTcxxU09u6AayzbXKugsfeAxHWtYCxOFNRYwXZjofhimqDGToroxHCQ4sJLYycaujopSY2dTPsdSziOcLyixp5Kx31CQWPvC7jGss2TFTT2fpC4niwYiycIaqxgu7FQfHGqoMaeGNGJ4SDFhZfGnmDo6olJauwU2m8q4STCyYoaexod90kFjX0o4BrLNk9R0NiHUdYLCcbiKYIaK9huLBRfnCaosdMiOjEcpLjw0thTDF2dlqTGnkr7nUaYTjhdUWOn03GfUtDYBQHXWLb5VAWNfQyl7yQYi2cIaqxgu7FQfDFdUGPPjOjEcJDiwktjzzB09cwkNXYG7XcW4WzCOYoaezod92kFjX0y4BrLNs9Q0NinQOJ6huSzQwQ1VrDdWCi+OF1QY2dGdGI4SHHhpbHnGro6M0mNPY/2O59wAeFCRY09g467UEFjnwm4xrLN5ylo7LMgcX2eYCxeJKixgu3GQvHFGYIae3FEJ4aDFBdeGnuRoasXJ6mxs2i/SwiXEi5T1Ngz6bjPKGjsooBrLNs8S0FjXwCJ61mS97ULaqxgu7FQfHGmoMZeEdGJ4SDFhZfGXm7o6hVJauyVtN9VhKsJ1yhq7Aw67rMKGvtSwDWWbb5SQWNfBonrKwVj8VpBjRVsNxaKL2YIaux1EZ0YDlJceGnstYauXpekxs6m/a4nzCHcoKixZ9Fxn1PQ2NcCrrFs82wFjX0dJK5nS95zKaixgu3GQvHFWYIaOzeiE8NBigsvjb3R0NW5SWrsTbTfzYRbCLcqauzZdNznFTR2ScA1lm2+SUFjl4LE9U2CsXiboMYKthsLxRdnC2rs7RGdGA5SXHhp7G2Grt6epMbOo/3uINxJuEtRY8+h4y5S0Nh3Aq6xbPM8BY19FySu50neDySosYLtxkLxxTmCGntPRCeGgxQXXhp7t6Gr9ySpsffSfvMJ9xHuV9TYc+m4Lyho7LKAayzbfK+Cxn4AEtf3CsbiA4IaK9huLBRfnCuosQ9GdGI4SHHhpbEPGLr6YJIa+xDt9zDhEcKjhsY6W1jYz51DcvX5UESnbUdcNvt+tnRYrv4SgnGyQLD+MqmMzFDDucTcpM/XkrxNvo9FFAk/FpEv93FBodOy+/FIQwULlRt1Glo4pN/YBIM3qskzEdYJiieMdiv/NBfBXhNzi9gcHdKZdiNpCVWSdIDZsJ+0A+gptknDAU8oKNMTwqdmLbvDinb7vrVGuQ6j/jaLG+bTCsPHhcKnd0cUuNwpdrnSdfGUUl08o1QXzyjWBQuhRl18HPRHOii1gU/+WbvL1sBPre1/qjR14R7eRf1tlmC7tAR9bUnWX6Zdb1497lCK9bmm9mSWqXHOkqoTs1P5bHO95Ki/zXpa6SRgkk6Rs7Wm4zDnZxVE4YuAzGem0nnzvaYvEkyB+SJDp10+Z3RO0vXPmupc0j/PG2VZ+fkUG+XFVkV5RX5hcUleqVWUX1RUUVBRXBQrKK8oLIiXFyesgnh+XkmiOFphxRKJ4sL8suKiipLysqIKU7St8vz8gvKS0jKrMK8oXhqNlefHoxUFxfl50Xh5fnF5eX6sqCien19eFKuIlcTy8uIV+bFoYXFxSbQoL78kT8s/z9v+acnRteQ0jHkSW2T3Bl5AEXAtfosUxPpFpRPXi4qjF66LFxTqYrFSXSxWrItDlUZyXwX9oSZK8fB1wEdyWm1/BchITrBdWoK+tlb8N5Jzb9YipZHcS4gjuZeUR3IvKYjCd/+HI7mXI8EUmO+URgovg43kXhEcya0QHMlp+ecVYyTX1EkhyFNwmjy1TjCvIp5gXlU+wbyqcIL5oYVOMJLXeQN0rajRCcYvrx9baATg+9ZQwRO0YPuzflQ6AbyWxAna9y2yEbkTYaPp0QCdoH9Q8s/r/6Kp1jfsYH3TayFT1N9mNbWgR3KFmu/36giKi4bjnTqUFlWtOvR9j2rA/cEBs0ShY7RUqZO4VHEq+k2lunhLqS7eUp6W16iLXwI+La8VD78GfFpeq+2vApmWF2yXlqCvrVX/Tcu7t7pzllSdmJ3dtzVnTZYonQTeVpw1Yc5vK4jCnyDT8ksEO4LvRIIpMH8qjSrfaYFpeUn/vCs4Lb9KcNSv5Z93/4FRv9btS+/ZvYH3UQRci997CmK9TOnEtUxx9MJ18b5CXXygVBcfRHRvldHo2bNySNWFl90SMy8a8dDqn7V7jSM5rbYfztTptEmP5ATbpSXoa0uy/v4tI7n3lEZyHyKO5D5UHsl9qCAKrZVEIcgjuY8iwRQYSV+Y7fIjsJHcx4IjOVO0/Y7ktPzz8T+wwEpyCk6Tp9YJ5hPEE8wnyieYTxROMFktdIKRvM4boGtFjU4wfnllt9AIwPdN/YInaMH2Z2UrnQA+bYEFVp8JLrBalRHME3SWkn8+8/CP9KjXXFDl19fDBcv6XPBc1pLP//tcqeOwPKJIeHlEvtwvBE9sWnZ/EWmoYKFyW/T5f2bARX1umjwlV22aQfFlc71p30/zkByuhxpU3SH9b1g2+5UdQF97LZuVcMCXCsr0pfIFOSm7w4p2+75rOuAXNblhrlAYVn6jNMT+RvFC3tdKdbFSqS5WKi9P1aiL9gG/qKkVDx0CflFTq+3ngFzUFGyXlqCvrZz/Lmq6t7pzllSdmJ3KbzXnnFconQS+VZxzZs7fKohCF5CLmisEO4LfRYIpMF2U5uS+a4GLmpL++V7womaO4Jypln++/weWp0pOw5gnsR/s3sCPKAKuxe8HBbH+SenE9ZPi6IXr4keFuvhZqS5+VqyL4UojuW4BH8lpxUP3gI/ktNp+D5CRnGC7tAR9bfX4byTn3qwflEZyvyCO5H5RHsn9oiAKPf8PR3K/RoIpMD2VRgq/go3kVgmO5HoIjuS0/LPqH1ieKjkFp8lT6wTzG+IJ5jflE8xvCieY9UCWp0oKWAelHqxfXuuDLE/9XfAELdj+rPWVTgC/t8Dy1D8El6c2mh4N0Al6PSX//PEvmmr90w7Wv7wWMkX9bVZTC3okV6j5LUtwUZTK8+acOpQWVa069L3kNSPY/qgLmAyFu+SVHlvC5U6xy5Wui7+U6iKsVBfhDN1peY26yA34tLxWPPQK+LS8VtvvDTItL9guLUFfW73/m5Z3b3XnLKk6MTu7kQzFWZOQ0knAJC09a8KcIwqi0AdkWj4k+HaCjIxgCkwfpVFlRob+tLykfzIFb0rtLTjq1/JPZsa/56n/re2G1QZFwLX4tVYQ6yylE1eW4uiF66KNQl1kK9VFtmJdHKo0kusb8JGcVjz0C/hITqvt9wcZyQm2S0vQ11b//0Zy7s1qLaynztYWcSTXVnkk11ZBFAb8H47k2mUEU2AGKI0U2oGN5NoLjuT6C47ktPzTPqPlF1hJTsFp8tQ6wXRAPMF0UD7BdFA4wURBFlhJClgvpR6sX14WyAKrHMETtGD7syylE0BOEidov3XaUfCVJr0zg3mCjir5p2MzszsS617Y2e41SVF/myWpZ50CPnN6EVXeJWF533QO+LsO+Z2pSxQeUCX5LNwuAa9DbtvsZ+lZLMGYsToLxnLXgPuD20tXhX5oN+V1fH758Sx/NwW7CzKDrd0JJbsLlfq60lor6B+rUHiGOiMkM0O9Jt5160LtsqTbF7etirA450ZtQpx0hVJQdBeemOgRahio8O/BxPtP+zsfy/k+xEjfzf7u5OtBX9YirE1YJ6Mh3dnCwnUg6ae+oZYRGd+LuQVt7gdic1jQ5v4gNkcEbd5MyWZprdw8JKsNTfkm6m+zthDkuXsYo3MzQNDmHhkY7XHLEAbPKAhPC4RnHgjPfBCeBSA8C0F4FoHwLAbhGQPhWQLCcysQnluD8NwGhOe2IDy3A+G5PQjPgSA8dwDhuSMIz51AeA4C4bkzCM9dQHjuCsJzMAjPISA8dwPhuTsIzz1AeO4JwnMvEJ57g/AcCsJzHxCe+yrxDPK10P1ayOaov83aX7D+9g5jtMcDQhg8DwTheRAIz4NBeB4CwvNQEJ6HgfA8HITnESA8jwThOQyE51EgPOMgPEtBeJaB8CwH4ZkA4VkBwnM4CM9KEJ4jQHgeDcJzJAjPUSA8R4PwrALhWQ3CcwwIz2NAeI4F4VkDwrMWhOc4EJ7jQXhOAOE5EYTnJBCek0F4HgvC8zgQnseD8DwBhOeJIDyngPCcCsLzJBCeJ4PwPAWE5zQQnqeC8DwNhOd0EJ6ng/A8A4TnmSA8Z4DwPAuE59kgPM8B4XkuCM+ZIDzPA+F5PgjPC0B4XgjC8yIQnheD8JwFwvMSEJ6XgvC8DITn5SA8rwDheSUIz6tAeF4NwvMaEJ7XgvC8DoTnbBCe14PwnAPC8wYQnjeC8JwLwvMmEJ43g/C8BYTnrSA8bwPheTsIz3kgPO8A4XknCM+7QHjeDcLzHhCe94LwnA/C8z4QnveD8HwAhOeDIDwfAuH5MAjPR0B4PgrCcwEIz8dAeD4OwvMJEJ5PgvB8CoTn0yA8F4LwfAaE57MgPJ8D4fk8CM9FIDxfAOH5IgjPxSA8XwLh+TIIz1dAeL4KwvM1EJ6vg/B8A4TnmyA8l4DwXArC8y0Qnm+D8HwHhOe7IDzfA+H5PgjPZSA8PwDh+SEIz49AeH4MwvMTEJ6fgvD8DITn5yA8l4Pw/AKE55cgPL8C4fk1CM8VIDy/AeG5EoTntyA8vwPh+T0Izx9AeP4IwvMnEJ4/g/D8BYTnryA8V4Hw/A2E5+8gPP8A4fknCM+/QHhygQg8W4HwDIPwjIDwzADhmQnCszUIzzYgPLNAeGaD8GwLwrMdCM/2IDw7gPDMAeHZEYRnJxCenUF4dgHh2RWEZzcQnt1BePYA4bkWCM+1QXiuA8KzJwjPdUF4rgfCc30QnhuA8NwQhGcuCM9eIDx7g/DcCITnxiA8NwHh2QeE56YgPPuC8OwHwrM/CM/NQHhuDsJzCxCeA0B4bgnCMwrC0wLhmQfCMx+EZwEIz0IQnkUgPItBeMZAeJaA8NwKhOfWIDy3AeG5LQjP7UB4bg/CcyAIzx1AeO4IwnMnEJ6DQHjuDMJzFxCeu4LwHAzCcwgIz91AeO4OwnMPEJ57gvDcC4Tn3iA8h4Lw3AeE574gPPcD4bk/CM8DQHgeCMLzIBCeB4PwPASE56EgPA8D4Xk4CM8jQHgeCcJzGAjPo0B4xkF4loLwLAPhWQ7CMwHCswKE53AQnpUgPEeA8DwahOdIEJ6jQHiOBuFZBcKzGoTnGBCex4DwHAvCswaEZy0Iz3EgPMeD8JwAwnMiCM9JIDwng/A8FoTncSA8jwfheQIIzxNBeE4B4TkVhOdJIDxPBuF5CgjPaSA8TwXheRoIz+kgPE8H4XkGCM8zQXjOAOF5FgjPs0F4ngPC81wQnjNBeJ4HwvN8EJ4XgPC8EITnRSA8LwbhOQuE5yUgPC8F4XkZCM/LQXheAcLzShCeV4HwvBqE5zUgPK8F4XkdCM/ZIDyvB+E5B4TnDSA8bwThOReE500gPG8G4XkLCM9bQXjeBsLzdhCe80B43gHC804QnneB8LwbhOc9IDzvBeE5H4TnfSA87wfh+QAIzwdBeD4EwvNhEJ6PgPB8FITnAhCej4HwfByE5xMgPJ8E4fkUCM+nQXguBOH5jBLPsItnfrSooCBRnJew8q14NK+kNFYYLSgsLYpZMaswVlieF8vPT8QKYsUlpSXF0RKrID9hVRSW5FfYZfcRtPnZFrI56m+znmslV39Dwxjt8XmQuFkEwvMFEJ4vgvBcDMLzJRCeL4PwfAWE56sgPF8D4fk6CM83QHi+CcJzCQjPpSA83wLh+TYIz3dAeL4LwvM9EJ7vg/BcBsLzAxCeH4Lw/AiE58cgPD8B4fkpCM/PQHh+DsJzOQjPL0B4fgnC8ysQnl+D8FwBwvMbEJ4rQXh+C8LzOxCe34Pw/AGE548gPH8C4fkzCM9fQHj+CsJzFQjP30B4/g7C8w8Qnn+C8PwLhGcIZL1NKxCeYRCeERCeGSA8M0F4tgbh2QaEZxYIz2wQnm1BeLYD4dkehGcHEJ45IDw7gvDsBMKzMwjPLiA8u4Lw7AbCszsIzx4gPNcC4bk2CM91QHj2BOG5LgjP9UB4rg/CcwMQnhuC8MwF4dkLhGdvEJ4bgfDcGITnJiA8+yjxDLt4+r0POlPQ5k1BbG4taHNfEJvbCNrcD8TmLEGb+4PYnC1o82YgNrcVtHlzEJvbCdq8BYjN7QVtHgBicwdBm7cEsTlH0OYoiM0dBW22QGzuJGhzHojNnQVtzgexuYugzQUgNncVtLkQxOZugjYXgdjcXdDmYhCbewjaHAOxeS1Bm0tAbF5b0OatQGxeR9DmrUFs7ilo8zYgNq8raPO2IDavJ2jzdiA2ry9o8/YgNm8gaPNAEJs3FLR5BxCbcwVt3hHE5l6CNu8EYnNvQZsHgdi8kaDNO4PYvLGgzbuA2LyJoM27CtrM6wEy7LL6Gva3susgYv+fr5/z9WS+vsrXG/n6G1+P4uszfL2C5+95Ppvnd3m+k+f/eD6M54d4voTnD3g8zeNLHm/x+IP749w/5f4a91/4fM7nt1wC6x/rAccHtxeuP34W/KYGx9xwA+9+hP6EzQibE7YgDCBsyXVEsAh57EdCAaGQUEQoJsQIJYStCFsTtiFsS9iOsL3ttx0IOxJ2Igwi7EzYhbArYTBhCGE3wu6EPQh7EvYi7E0YStiHsC9hP8L+hAMIBxIOIhxMOIRwKOEwwuGEIwhHEoYRjiLECaWEMkI5IUGoIAwnVBJGEI4mjCSMIowmVBGqCWMIxxDGEmoItYRxhPGECYSJhEmEyYRjCccRjiecQDiRMIUwlXAS4WTCKYRphFMJpxGmE04nnEE4kzCDcBbhbMI5hHMJMwnnEc4nXEC4kHAR4WLCLMIlhEsJlxEuJ1xBuJJwFeFqwjWEawnXEWYTrifMIdxAuJEwl3AT4WbCLYRbCbcRbifMI9xBuJNwF+Fuwj2EewnzCfcR7ic8QHiQ8BDhYcIjhEcJCwiPER4nPEF4kvAU4WnCQsIzhGcJzxGeJywivEB4kbCY8BLhZcIrhFcJrxFeJ7xBeJOwhLCU8BbhbcI7hHcJ7xHeJywjfED4kPAR4WPCJ4RPCZ8RPicsJ3xB+JLwFeFrwgrCN4SVhG8J3xG+J/xA+JHwE+Fnwi+EXwmrCL8Rfif8QfiT8BeBxaAVIUyIEDIImYTWhDaELEI2oS2hHaE9oQMhh9CR0InQmdCF0JXQjdCd0IOwFmFtwjqEnoR1CesR1idsQNiQkEvoRehN2IiwMWETQh/CpoS+hH6E/oTNCJsTtiAMIGxJYJGzCHmEfEIBoZBQRCgmxAglhK0IWxO2IWxL2I6wPd93TtiBsCNhJ8Igws6EXQi7EgYThhB2I+xO2IOwJ2Evwt6EoYR9CPsS9iPsTziAcCDhIMLBhEMIhxIOIxxOOIJwJGEY4ShCnFBKKCOUExKECsJwQiVhBOFowkjCKMJoQhWhmjCGcAxhLKGGUEsYRxhPmECYSJhEmEw4lnAc4XjCCYQTCVMIUwknEU4mnEKYRjiVcBphOuF0whmEMwkzCGcRziacQziXMJNwHuF8wgWECwkXES4mzCJcQriUcBnhcsIVhCsJVxGuJvB75Pkd7fz+c363OL+3m9+Jze+b5nc583uS+R3E/H5ffncuv5eW3/nK71Pld5Xye0D5HZv8/kp+NyS/d5HfacjvC+R38fF77vgdcvx+Nn73Gb9XjN/Zxe/DWkDg9zjxO5L4/UP8bh9+bw6/k4bf98LvUuF3i/B7O/g9FvyOCH7/Ar/bgN8bwM/k5+fd87Pk+Tnt/Ax0fr44P7ubn4vNz5zm5znzs5L5OcT8jF9+fi4/m5af+7qMwM8r5WeB8nM2+RmW/HxIfvYiP9eQnxnIz+PjZ93xc+T4GW38/DN+thg/t4uficXPm+JnOfFzkvgZRPx8H352Dj+Xhp/5ws9T4WeV8HNA+Bkb/PwKfjYEP3eBOwL8vAC+F5/vc+d7yPn+bL73me8r5nt2+X5YvteU7+PkeyT5/kO+t4/vm+N70vh+L76Xiu9T4nuA+P4avneF7wvhey74fga+V4DX4fMad14/zmuzed0zn+d5vS6vheV1pryGk9dH8tpDXovHa9N4rRavXeK1PLy2hdd68NoHXgvA18b5WjFfO+VriXxtja818bUXvhbBc/M8V81ztzyXyXN7PNfFcz91cyEEHivz2JHHUjy24L429z25L8bnO2frYnxfz/6M19YmRo+pza2tzo2Xl+dOGFFbmVs9PjG2YlQ1n37r+kep5ulu5NnR/txlXFVZ7YjqqtyyykTZyGHlI0eMHjYyMWlYZbymctiYsSPGx2sTuWXxqtzqqlGTckv5+6hRifLcmtp47Qj+zp2Auh6Zs21jf+5XWz02PjyRWzOqujY3mltFf2n36gmJ8gG55v9qckePq6nlAsfW5laMrR6da3EnrE4lnW0T+3Po2OrxI6qG544ZVzpqRFnu+PiocYncEVVlo8bVsA0V8RHEjXfcx8jskGO2dXVTU5MYWztsdHzisNIRtcNqRkxO1PFNPcvhqWc5MvUs8dSzlKWeZVTqWapSz1KbepbxqWeZnHqW41LPMi31LKelnuWM1LPMSD3LhalnuTj1LFeknuWq1LPMTT3LzalnuTv1LPemnuX+1LM8mHqWJ1PP8nTqWRalnuXF1LO8knqW11LP8m7qWd5PPcuHqWf5OPUsX6ee5ZvUs/yYepafU8/yh5Flc/tzaH1noTxeG8+tHZvgDkN5YmJueXWipmrT2tzR8dqySu4sVSVqeKajrgvrt4y/fJbB2fvZ+Y5oKCqprp6ZN27kXcf+3GHs2Pgk++DV42pzqytyS6vHVZU3Omhluhlr0mC7h11beUbeXn/PWzOutHZsvKy26QKKUmXtZNw23Yx7pGHuXnbeAake1Mm4tY+Dbp/uQfdK46AH23kLjbwpOdYpoCRV1k7Ggelm3DsNc4el69hhPhw7LF3HDvPh2Eq/jq1M17GV6Tq20odjq/2aW52uudXpmlvtw9wJ6bbjCT7a8YR02/EEH+14ql/HTk3XsVPTdexUH46dnq5jp/tw7PR0HTvdh2Nn+nXszHQdOzNdx8704dhZfs2dla65s9I1d5YPc2f77TDOTrfDODvdDuNsHx3GOemG7RwfYTsn3bCd4yNs5/ltx/PSbcfz0m3H83y04/npOna+D8fOT9ex8304doFfxy5I17EL0nXsAh+OXejX3IXpmrswXXMX+jB3cbrteLGPdrw43Xa82Ec7XurXsUvTdezSdB271Idjl6Xr2GU+HLssXccu8+HY5X4duzxdxy5P17HLfTh2pV9zV6Zr7sp0zV2Zprl16w95u9j+5HWI9jLAujWLGSG5dZbZBjnRsmPFeVx2pg7vurJb65Rd93ydnbLqy3L4O8eKGP9zPp3jd7D/b/6vQ6hh7ekgO40/eoQa/r9zVkPZTtoudlqGkbarixOnDc5qzI/ThthpbYz6Mf2cYXPgzWlXzlpX056B9u+ony1WEOey22mUHc2L1dV5VoMNq+vcTmtrpGXaaQ4X/jnB/s5reB0/bGHkceo1ZNRTGx1bEq1cx8owvjvHbBtSa/e8fHD1cZzjO8dy2gmvg17b/j48UVt/jWgQXSLan64QHdRwMcjh55S3hZHmfLrt3cJ1LN4iLj7u/7cKNa6nbOO3tC4kUz+8T5ZrnzbGd946GnZlGbx12lW9X7OT4N3WtY+Tp43B2+Hb1uCdrcObl7KujtXmeLd37dPO4Obwdvi21+ed78XJi3cH1z7tPXg7tjj7Roz93JoaMfKax4941ImTR7EeCrxs9KqHHNc+HTzqwbEnx6gPs007ZYVcZYVcx8sONeY0UMbWqHNviLll29wdboLnipLmbHWO2dbgpKEpHV3Hz/Go60469vNy9tVlO8fv5LKffdLZlcb5nPWrmXY+Z59OBn9nny5Gvkzj9yAjT2fjeM6+TlrIdQynbjgOtjPKcNpyjsG3oyvNq847usrt5CojFFJthzE9H0cL6/pshq1Ove3hOl4o1ODLTJftmcY+hxhl7G3s18aoJyfN7Q/zHGpqJ29edW/2RR1OZl/U0cH2RprDM8tIc763MdKc7+2Mz45GfpOnux1mGlydfZw23dq1j5PXbPdH2p/mGvCQcdyuRrmC7YxvB1m9htwdt12NdGef0mZ4mmU59eJ1Xurq2sfJY2pKFxeHbGM/Dc3r6qoDx1dm3Tj7jGimDsxxk9luMrJUuJdwsScZx17dtozjuevbrZlefjPrg7dOxj6mdndx5XP2d/e5eXPHgft8wVut63/mZuq5eW5wl2dqWV3/X6Xu68ctWVmNbXCO5dR/2Ngny+CRafyeGmpIzzYGOXV9T2fOwf7k2GjtjMuzms6X4crXydintZGvjStfG4N33b6h+ns8eWvnOn7Eo5wMG61d5WQa+5xqlD3d/m7OI0SMuZeLPP7vbM311TKMuYtsRf+3dfnfOVaGYb+zT1uX/53fFxj2tGvC/9mG/5120y6r6XyZrnydjH2ymmk32R7+P9P+3jbUWFck+72mr7mdOf0IzDnagqJ/4xxtKvOwZp/MPQ9rzgm2MvysYpNVP4Y055ec42VpHC+aZzWnS+Y8j+a8VFNzZU4s8fmzm+GT1i5+uU5m0+lBqryIyvG9Ky/SROWZHZsmK889053sbIo529pKzsC6Jwq3dh3bHBGlwrOTka9Rb9coQ845VoXirFpU7UqNfaZpp+PPurLbq/DOi5q9a6feue1sYhzPSXePnNob6c4+mxll9LW/dww1f6Zx/uf0Pp2yzCtt7plNp4flpG9plD/Eg7tTbxmuY5ozre7Ri7mvs0++/dnUKF5n1jAvas5gre6J2r9zjHRnn+JmeJplOXa6zx5es8vmrFjI/t3BxUG7DjolUQfOPtutoQ7cs6CRJOqgk2GnUwdes43ZRh6z/Zqzju6yWrn472x/utu0aatX2ab+5xhpTjy1a6Jc95Uu9+xbc7FiaoSzz572Z1OzKM3pzj7G/1BHBxmKvJVGHo1GB26t9BoduEcCgzxWZOzsKq+rsZ/ZH1KxyR4dtOBqBAthNYJ7dOCe1ct1MpuBGjIIN2Wg6VBzVDFQxri6zq3Dx2xkbdLg2MnIZ5YVSdPeLHl7rU4h7yUPOqMzK9pSHXCxOrLqy9VZJhW1zOkP80TV2zieu4PsvhxldpD7G2U4J7uOoYYANS/DuYPS5OIlyk4Z7o60eaLtoFJP9Z2znCbqoYOR7uzjdNib6py5O17JLAPJMb6HQo2XP5jLQJz9zKUe5r5m/HcwjuuVz/ye7cpjalV7j+O0acYWdxsy21nrUNP16+zjPJwpCAMV9yDBHKgMbIan10AlmWUw5jKGUMj7snQk9PdBpXvfiCvdOa5XPvN7e1ce8zyTncJxnP+3NcqJuPbzqiOnXZia2FTbMX3l7ONMzTfVcXfnNfXwQPvzv2n9v23/yml98ziZxr7mOdPUOcmJsUzj2PsaXMzJCJV+kj2ocC+j05tgbH5Q0db4VOq71R2/qWWuTQ0q3Etec53MTV1y+KcrT/OSg7vy1nTJodnKS2cqX/uSg/syQYdQY6OT5dnJyKd/yUF39KA3dV8/UtPpzUcrzCkT8xpYX9fxeHN6ee6FeeainwFGGc4lAnMBoblwzz3q4Tz7G3mcMp02YvbMzTZijjbyjLK8FkE6383pTSc9x0gz7fQa1ThPGWiq1620mNRzatyrh+fss1UzPM2yQiFvpffqdXYyvjvHbcEFtXV10DmJOnD22WENdeBeABpJog46G9+d47oXV5vtzrk8YE7TO8dwl9XKxX+w/elu06atXmWbWm2OUJx4atNEuRkuW83ZBmefpmLF1Apnn6H2Z1OjjOb0Z0060dTlxX72d9DRSeG/cXSS6o2han2BWEGBYv1aerO29Td8uaf8HTvMc2sqS1WCcqnCnD0xZzJbsi5be9RlxONG49WLco20TFe755/rmHns7+YxNra/myPukGF70Bc8bxRqSA/iguee9vd2Tp6Q61ihxnnMGXpzNiPTlc+9jKJ9qOH8OCZeNnLfRO24sVU1ZtiZxZlb2Phudj3c8mnu5zSHsEd5TMM5Nenda1Evc911yo6abnL4dzdsMutC6phm/ZvuNte9e12gayXPxTKKrDum28fmfSCtPDgprX7LUxxCN/K5w7+dhx8yPGw3v4dDjbt87v97pXXwOE5Xj7T/ARZyBLoNrgMA","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"register_escrow","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/+xdB5gURRNdLt+RJSmKHEpQQNnZvbCniEhSUJCoEgT2bncByQdIRhRFxCzmnBNGzGIEI2bMOeecs/7VxzTXjHXH7kzVOfW7832PW2qme151db2e7pmdrRfYtE1sGgjc1WDT53qATPtvBqDQYdN/zc9ZiC0HKdsAsTVCbE0Q2zaIrRWgp8PWFjmuELG1Q2w7IbaOts3c6tl/e9p/w8GSoqJ4aShuha1oMFRWHikOFhWXl0SsiFUcKY6FIuFwPFIUKS0rLysNlllF4biVKC4LJ4Kbtv0yqusKetpCFZw8+5PxDAY5eQ5wzzPkNChuLQOb+rjmquL1l/25U6D6c3/DPsD+rMvtD/8/ADAQMCij2q63DEcbBL1tVkfC9jyQLu6WmVuq3kLmdjC5e22HwUztMDiDX2OGkHG3Sjl5DiVsY06ew9zzDDsNmMYMMbREQX8eatiHOTRmOPx/BOAgwMG2xmQHNo2nGYF/bs42CXrbrBYBnvEhQMPT0h/MtjjE/s/IjMCWA7/a8ZbDNhJJ1EzGRnTZSUN2J7UOIRS/kUyDP7XgU/o8CqmrPFgRK7bKS2KlVjxaHKmoKAtbVihaEi0pD0US8fJiK1IcgToroqEInC4UrbDiwWhJXCVi00B10pkbdSKOIoyVyXd0BiNhVTl1vWMIOwOX32MMOSKqF+VKIQCKK1XC6nopY3QoccfXwq/qVTPGbLvuuhhNuQSXmudwQp45Bs+xdiOPs/+Ot/9G7b/ltl7sYh9fAf+PAeKABGACYCJgEuAwwGTAFMBUwDTAdMAMwExAJWAWYDZgDuBwwFzAPMB8wALAQsAiwGLAEsARgKWAIwFHAZYBjgYcA1gOOBawAnAcYKXz6qLcvpKoy1FhHNOocHwGI+HjGUaFE3w+Kii/T2AYFeqys41n6mwnZjASPpGhs53k886m/D5JeGeLMnW2kzMYCZ/M0NlO8XlnU36fUkfXu0FvW9UocVIG/XX0qRkyk6ycKclOy2AkfBpDkq3yeZIpv1cJSTIlBqcyJNnpdTR58srzDPc8i5wGbBlZXUrq5eLxxudy4/MZGVsuI58J/z8LcDbgnIx/3qqiXvEkHL2tMwlz81xiwXPG5lwjBmcZn882Pp/jiM158P/zARcALszYsj7Kfqn043SGvLyIMNaGxKFtEPS2WWMJ468XKS6GOi8BXAq4DHA54ArAlYCrAFcDrgFcC1gNuA5wPeAGwI2AmwA3A9YAbgHcCrgNcDvgDsCdgLsAdwPWAu4B3Au4D3A/4AHAg4B1gPWAhwAPAx4BPJqxaWHLXKe4OOOfj3ZcgtguRWyXIbbLEdsViO1KxHYVYrsasV2D2K5FbKsR23WI7XrEdgNiuxGx3YTYbkZsaxDbLYjtVsR2G2K7HbHdgdjuRGx3Iba7EdtaxHYPYrsXsd2H2O5HbA8gtgcR2zrEth6xPYTYHkZsjyC2Rw091JvW357236C3bQvN8aq1FxPUFU9s2i4h5HV8A55rM2csPPocu5Su/couo6vLupwwFieIiEXcuoKs/SqsK8nqilhXEcbiRBGxCFpXU7VfPGhdQ1VXRdC6ljAWJ0mIRSRoraZqPxh7riOqKw51XU8Yi5MFxKICfL6BqP0iUNeNRHWBy9ZNhLE4xf+xiCufb6ZpvwpV1xqauiKqrlsIY3Gq/2OhqrZuJWm/eFVdt5HUVVFV1+2EsTjN97GIVPl8B0n7VdG07qSoK76prrsIY7HK77Go2OTz3RTtF9lU11qKuja5bN1DGIvTfR6LmO3zvQQ+l9t13UdQV6ld1/2EsTjD37HY/NTyA959tnRdD3quK5LQda0jjMWZvo5FpFz7vN57+2mfrYc811W6ua6HCWNxlq9jUbzZ50c8+2xtruvRDLo1S3M9z2sszq6jWAS9bRbhuplFuO5jnUQYi3OExIJwfcAinN9apxLG4lwhsSCcB1mE1/HW6YSxOE9ILAiv9yzC6xXrLMJYnC8kFoTjmkWoy9a5hLG4gCkW1M8bEeavRdj/LK72y3C0nx/uK+u6HiO8DlV1UD8DpJ63Us8sUT8H9XgGbayp/VZfprqYwe+bG/jbb9UfH2fwe00daaNXnhsI85Ew1tYan/cblS+PMfSb23zu98VM+XK7kHx5gjBfCGNtUbafiq3z2WWlE/oZ5ScyknsF0pPw/6cATwOeyaj52eWgt81SXwK+hKFP3sWci175KZ+fZPD7biFzrCcJr0ufJcxrwn5jSYlFjDAWz2Xw5LCf8gLT2GcNLX0uSY3dCP9/HvAC4EVGjVUvWbiUQWvu9bnGKp83Mvh9n5C83kiYiy8Raixhv7GkxCJOGIuXM3hy2E95gWnsS4aWvpykxr4C/38V8BrgdUaNVS+xuYxBax70ucYqn19h8HudkLx+hTAX3yDUWMJ+Y0mJRYIwFm9m8OSwn/IC09g3DC19M0mNfQv+/zbgHcC7jBqrXhJ2OYPWPOxzjVU+v8Xg9yNC8votwlx8j1BjCfuNJSUWEwhj8X4GTw77KS8wjX3P0NL3k9TYD+D/HwI+AnzMqLHqJYxXMGjN4z7XWOXzBwx+bxCS1x8Q5uInhBpL2G8sKbGYSBiLTzN4cthPeYFp7CeGln6apMZ+Bv//HPAF4EtGjVUvub2SQWue8rnGKp8/Y/D7aSF5/RlhLn5FqLGE/caSEotJhLH4OoMnh/2UF5jGfmVo6ddJauw38P9vAd8BvmfUWPUS8asYtOY5n2us8vkbBr83Csnrbwhz8QdCjSXsN5aUWBxGGIsfM3hy2E95gWnsD4aW/pikxv4E//8Z8AvgV0aNVT/ScDWD1rzoc41VPv/E4PdLQvL6J8Jc/I1QYwn7jSUlFpMJY/F7Bk8O+ykvMI39zdDS35PU2D/g/38qG+BvRo1VP4JzDYPWvOpzjVU+/8Hg92tC8voPwlxUD9JT8SLsN5aUWEwhjEW9TJ4c9lNeYBqr+uDmn0jNTE5jM+C4TEAWIDuTT2PVj4xdy6A1b/pcY5XPqo2p631LSF5nEOZiDqHGEvYbS0osphJqbG4mTw77KS8wjc0xdDU3SY3Ng+PyAQWA+owaq37EcTWDxr7rc41VPucxaOx7QvI6jzAXGxBqLGG/saTEYhqhxjbM5MlhP+UFprENDF1tmKTGNoLjGgOaAJoyaqz6kdzrGDT2Q59rrPK5EYPGfiQkrxsR5uI2hBpL2G8sKbGYTqixzTJ5cthPeYFp7DaGrjZLUmObw3EtAC0BrRg1Vv0I+fUMGvupzzVW+dycQWM/E5LXzQlzcVtCjSXsN5aUWMwg1NjtMnly2E95gWnstoaubpekxraG47YH7ABow6ixMzOqf7PPrNdrm37pc41VPrdm0NivhOR1a8Jc3JFQYwn7jSUlFjMJNbZtJk8O+ykvMI3d0dDVtklqbCEc1w6wE2BnRo2tzKj+DVSzXq9t+q3PNVb5XMigsd8JyetCwlxsT6ixhP3GkhKLSkKN7ZDJk8N+ygtMY9sbutohSY3tCMd1AuwC2JVRY2dlVP+mtFmv52ehfa6xyueODBr7k5C87kiYi50JNZaw31hSYjGLUGO7ZPLksJ/yAtPYzoaudklSY7vCcbsBdgd0Y9TY2XDemxk09lefa6zyuSuDxv4mJK+7EuZikFBjCfuNJSUWswk11srkyWE/5QWmsUFDV60kNTYEx4UBRYBiRo2dA+ddw6Cxf/pcY5XPIQaN/UtIXocIc7GEUGMJ+40lJRZzCDW2NJMnh/2UF5jGlhi6WpqkxkbguDLAHoA9GTX2cDjvLQwaW6+hvzVW+Rxh0NiMhjLyOkKYi90JNZaw31hSYnE4ocbulcmTw37KC0xjuxu6uleSGtsDjttbtRdgH0aNnQvnvZVBY7N9rrHK5x4MGpsjJK97EOZiL0KNJew3lpRYzCXU2N6ZPDnsp7zANLaXoau9k9TYPnBcX0A/wL6MGjsPznsbg8bm+1xjlc99GDS2QEhe9yHMxf0INZaw31hSYjGPUGP7Z/LksJ/yAtPY/UxdTVJjB8Bx+wMOAAxk1Nj5cN7bGTS2oc81Vvk8gEFjGwnJ6wGEuTiIUGMJ+40lJRbzCTX2wEyeHPZTXmAaO8jQ1QOT1NjBcNwQwFDAMEaNXQDnvYNBY5v6XGOVz4MZNHYbIXk9mDAXhxNqLGG/saTEYgGhxo7I5MlhP+UFprHDDV0dkaTGHgTHHQw4BDCSUWMXwnnvZNDYFj7XWOXzQQwa21JIXh9EmIujCDWWsN9YUmKxkFBjR2fy5LCf8gLT2FGGro5OUmPHwHGHAsYCxjFq7CI4710MGrudzzVW+TyGQWNbC8nrMYS5OJ5QYwn7jSUlFosINTaayZPDfsoLTGPHG7oaTVJjy+G4CkAMEGfU2MVw3rsZNLaNzzVW+VzOoLE7CsnrcsJcTBBqLGG/saTEYjGhxk7I5MlhP+UFprEJQ1cnJKmxE+G4SYDDAJMZNXYJnHctg8a287nGKp8nMmjsTkLyeiJhLk4h1FjCfmNJicUSQo2dmsmTw37KC0xjpxi6OjVJjZ0Gx00HzADMZNTYI+C89zBobAefa6zyeRqDxnYUktfTCHOxklBjCfuNJSUWRxBq7KxMnhz2U15gGltp6OqsJDV2Nhw3B3A4YC6jxi6F897LoLG7+lxjlc+zGTS2s5C8nk2Yi/MINZaw31hSYrGUUGPnZ/LksJ/yAtPYeYauzk9SYxfAcQsBiwCLGTX2SDjvfQwau5vPNVb5vIBBY3eX8rwQYS4uIdRYwn5jSYnFkYQae0QmTw77KS8wjV1i6OoRSWrsUjjuSMBRgGWMGnsUnPd+Bo21fK6xyuelDBobknLtRJiLRxNqLGG/saTE4ihCjT0mkyeH/ZQXmMYebejqMUlq7HI47ljACsBxjBq7DM77AIPGFvtcY5XPyxk0tkRIXi8nzMWVhBpL2G8sKbFYRqixx2fy5LCf8gLT2JWGrh6fpMaeAMedCDgJcDKjxh4N532QQWPLfK6xyucTGDR2DyF5fQJhLp5CqLGE/caSEoujCTX21EyeHPZTXmAae4qhq6cmqbGnwXGrAKcDzmDU2GPgvOsYNHYvn2us8vk0Bo3tISSvTyPMxTMJNZaw31hSYnEMocaelcmTw37KC0xjzzR09awkNfZsOO4cwLmA8xg1djmcdz2Dxu7jc41VPp/NoLG9hOT12YS5eD6hxhL2G0tKLJYTauwFmTw57Ke8wDT2fENXL0hSYy+E4y4CXAy4hFFjj4XzPsSgsX19rrHK5wsZNLafkLy+kDAXLyXUWMJ+Y0mJxbGEGntZJk8O+ykvMI291NDVy5LU2MvhuCsAVwKuYtTYFXDehxk0tr/PNVb5fDmDxg4QkteXE+bi1YQaS9hvLCmxWEGosddk8uSwn/IC09irDV29JkmNvRaOWw24DnA9o8YeB+d9hEFjB/pcY5XP1zJo7CAheX0tYS7eQKixhP3GkhKL4wg19sZMnhz2U15gGnuDoas3JqmxN8FxNwPWAG5h1NiVcN5HGTR2iM81Vvl8E4PGDhWS1zcR5uKthBpL2G8sKbFYSaixt2Xy5LCf8gLT2FsNXb0tSY29HY67A3An4C5DY/WWQRznpgG69rw9k6dvZzp89vxu6Qy69htHmCd3E7ZfNtTRNFA9lpgb9XhNydvkuzaTkfDaTPp67yEUOi6/78msbmCieqs6m+KaEeDvbITJG+TkOS6DJynuNfot/dtcCK+aFLdMm6MmnW13krpQJcoAmB37PjuB7lc+cQTgXgZlupd4aObyO4PRb89frWFuw6C3zVId8wGG6eODxMO7FgVV71K7Xuq2uJ+pLdYxtcU6xrZQQsjRFiP8/koHpj5w0L/rd8VW+LH1/YOZli6c07ugt80i7JcWYawtyvbLttsNu+IOpNieW+tPZp0cYxZVm5gXletru0oOetusB5gGAZN0ipytrZ1HcV7PIAqjfbKemcrFm+dn+jL9KTCjG/L0y4eMixO38dlam1PG52GjLischtyIlVqJWCJcXFoWKrdKwiUliaJEaUmkKJYoLorGSuNWUTQcKouXBhNWJB4vLQ5XlJYkymIVJQlTtK1YOFwUKyuvsIpDJdHyYCQWjgYTRaXhUDAaC5fGYuFISUk0HI6VRBKRskgoFE2EI8Hi0tKyYEkoXBbiis/DdnzqcnZNuQxjDmKP2FcDj0oRcC5+jzCI9WNMA9djjLMX1RaPMrTF40xt8ThjWwxnmskd6veXmjDlw1ifz+S4+v44ITM5wn5pEcbaGpeeyTk36xGmmdwGiTO5DcwzuQ0MolDxH5zJPZHpT4GpYJopPCFsJvck4UxuHOFMjis+TxozuZoGBT8vwXHy5BpgnpI4wDzFPMA8xTDAxOtogKG8z+uje0VbDDBeeSXqaAbglefThAM0Yf+zEkwDwNNJDNBe2/SZTLqBcIvlUR8N0HGm+Dzzf7TU+qydrM9hDzIFvW1WTQ/0UD6h5vl3dQjFhSPwug2pRZWrDb3WtdHn8VAJs5Hhwuh5povE5xmXop9jaosXmNriBeZleY62mOTzZXmufDjM58vyXH1/spBlecJ+aRHG2pqcXpZ3blVjFlWbmBe7L3KummxkGgReZFw1UZxfZBCF6UKW5TcSXgi+lOlPgZnONKt8qQ6W5Snj8zLhsvxkwlk/V3xe/hdm/VxfX3rFvhp4VYqAc/F7hUGsX2MauF5jnL2otniVoS1eZ2qL1zN5vyrDcWU/0+czOa58qPT5TI6r788SMpMj7JcWYaytWemZnHOzXmGayb0hcSb3BvNM7g0GUZj7H5zJvZnpT4GZyzRTeFPYTO4twpncLMKZHFd83voXHrCiXILj5Mk1wLwtcYB5m3mAeZthgJkv5AErSgE7jOkK1iuvBUIesHqHcIAm7H/WAqYB4J06eMDqXcIHrCY39OcAPZ8pPu8i8aGe9ZoPVHmNdZSwrvcIx7K6fP/fe0wXDu9nMhJ+P5O+3g8IBzYuvz/IrG5gonrr9P1/ZsIFPW6cPCmf2jST4sParqa9droPCK8GTFXXpP8fHpv9yE6gj7HHZikC8CGDMn3IfEOOyu8MRr+9cvzE5zc1Vcf8hGFa+SnTFPtTxht5HzO1xWdMbfEZ8+OpHG2x2Oc3NbnyYYnPb2py9f0jhNzUJOyXFmGsrSPSNzWdW9WYRdUm5kXl55xrzp8wDQKfM645K86fM4jCMiE3NT8hvBD8ItOfArOMaU3uizq4qUkZny8Jb2oeQbhmyhWfL/+Fx1Mpl2HMQewr+2rgaykCzsXvKwax/oZp4PqGcfai2uJrhrb4lqktvmVsiyjTTO4Yn8/kuPJhuc9nclx9/1ghMznCfmkRxto6Nj2Tc27WV0wzue8kzuS+Y57JfccgCsf/B2dy32f6U2COZ5opfC9sJvcD4UzuWMKZHFd8fvgXHk+lXILj5Mk1wPwocYD5kXmA+ZFhgDlRyOOplAK2hOkK1iuvk4Q8nvoT4QBN2P+sk5gGgJ/q4PHUnwkfTz2ioT8H6BOZ4vPz/9FS6y92sv6KPcgU9LZZNT3QQ/mEmte6CB+KYnnfnG5DalHlakOvdf3m83iohPmN4cLod6aLxN8Zl6J/ZWqLP5ja4g/mZXmOtjjV58vyXPlwms+X5bn6/iohy/KE/dIijLW1Kr0s79yqxiyqNjEvdv/kXDX5jWkQ+JNx1URx/pNBFM4Ssiz/G+GF4F+Z/hSYs5hmlX/VwbI8ZXz+JlyWX0U46+eKz9//wqyf6+tLumPVyxIi4Fz8Aln0Yp2RxdMBVb1LGWNVj6EtMpnaIjOL96syHFf25/h8JseVD+f6fCbH1ffPEzKTI+yXFmGsrfPSMznnZgWI9VRvWVIuBMxBwCTNMZPLYhCFi/6DM7nsLH8KzEVMM4XsLFkzuZwsupnceYQzOa745GTV/QNWv2Ty5L2UASZX4gCTyzzA5DIMMJcIecCKUsBOY7qC9crrUiEPWOURDtCE/c+6lGkAyMvif8AqP4tuIFzV0J8D9CVM8cmvZXWH4rmX3zLpXzJEqWcFWbS6QT3engKNtyqDPjb1mf2m+M3UjQx9h/JduA183oaqb6s4U69iEeaMZfZDr/429Hk8VH9pyHAd2ogwHhx+q1X+Rgx+X9HQ39o9jsnvK5mudam1ljA+FpfP1LFpTJeLIcWtZaD6eln9fwgE6S/7c9WjDPZfdV79eZh9jC7XBD40BWwDaJa1yZ7tiHltbRL0tlkjM+omdkFvm9WEcPzIMXg2twPRwv7b0v7byv67ra0Ru9jHbwf/bw3YHrADoA1gR0BbQCGgHWAnwM6A9oAOgI6AToBdALsCOgO6ALoCdgPsDugGCAIsQAgQBhQBigElgFJABFAG2AOwJ6A7YC9AD8Deqn2y7IbXEwhFvtDuUHX1AuwWTCtn+2QxEt4ni77eXoRXT1x+98qqbmCieuv0bestmTpb7yxGwr0ZOlsfn3c25Xcf4Z2tFVNn65vFSLgvQ2fr5/POpvzux9DZOLj2shOD+lp33yyZSbYtU5Ltl8VIeD+GJOvv8yRTfvcXkmRKDPZlSLIBxJ3VOaFsYUwcWxqftzU+n+GYUO4PHw4ADAQMyqq26416wZFwVLT2J+zzBzLH5kAjBgcYnwcanwdlbRmbwfBhCGAoYFjWlvVR9kuVlwMY+vtwwlg7Fzeoc745Yfz15H8E1HkQ4GDAIYCRgFGA0YAxgEMBYwHjAOMBUUA5oAIQA8QBCcAEwETAJMBhgMmAKYCpgGmA6YAZgJmASsAswGzAHMDhgLmAeYD5gAWAhYBFWdXfx9Dz/xFZ1YtR2nYQYjsYsR2C2EYitlGIbTRiG4PYDkVsYxHbOMQ2HrFFEVs5YqtAbDHEFkdsCcQ2AbFNRGyTENthiG0yYpuC2KYitmmIbTpim4HYZiK2SsQ2C7HNRmxzENvhiG0uYpuH2OYjtgWIbSFiW2Tood60/va0/wa9bVtojletHUFQVzyxaTuIkNc1Pn+wyvY5djBd+5UdQleXNZIwFteKiEXcGkXWfhXWaLK6ItYYwlisFhGLoHUoVfvFg9ZYqroq4IYsYSyukxCLSNAaT9V+6sUrRHXFoa5ywlhcLyAWFeBzBVH7RaCuGFFd4LIVJ4zFDf6PRVz5nKBpvwpV1wSauiKqromEsbjR/7FQVVuTSNovXlXXYSR1VVTVNZkwFjf5PhaRKp+nkLRfFU1rKkVd8U11TSOMxc1+j0XFJp+nU7RfZFNdMyjq2uSyNZMwFmt8HouY7XMlgc/ldl2zCOoqteuaTRiLW/wdi5D+2vcc7z5buq7DPdcVSei65hLG4lZfxyJSrn2e5739Nn+df77nuko317WAMBa3+ToWxZt9XujZZ2tzXYuy6NYsryH8ot/tPvlW/1Y2i3DdzCJc97GuI4zFHUJiQbg+YBHOb60bCWNxp5BYEM6DLMLreGsNYSzuEhILwus9i/B6xbqNMBZ3C4kF4bhmEeqydSdhLNYKeU0XYf5ahP3P4mq/DEf7+eG+sq5rMeF1qKqD+hkg9bzV8Cz656CWZNHGmtpv9SWlEQx+P+PzL3Wq/riEwe9nhbzA5AjCfCSMtfWsz/uNypfFDP3meZ/7PYIpX14Qki9LCfOFMNYWZfup2DqfXVY6oZ9RXmp87p9R/XlAxpbPLh8JH44CLAMcnVXzs8tBb5ulvlx7EEOffNnnrx1WPh/J4PcrQuZYRxJelx5DmNeE/caSEovWhLFYnsWTw37KC0xjjzF0dXmSGnssfFgBOA6wklFj1csLDmbQmtd9rrHK52MZ/H5DSF4fS5iLxxNqLGG/saTEYnvCWJyQxZPDfsoLTGOPN3T1hCQ19kT4cBLgZMApjBqrXg5zCIPWvO1zjVU+n8jg9ztC8vpEwlw8lVBjCfuNJSUWOxDG4rQsnhz2U15gGnuqoaunJamxq+DD6YAzAGcyaqx6+dZIBq153+caq3xexeD3B0LyehVhLp5FqLGE/caSEos2hLE4O4snh/2UF5jGnmXo6tlJauw58OFcwHmA8xk1Vr3ccBSD1nzsc41VPp/D4PcnQvL6HMJcvIBQYwn7jSUlFjsSxuLCLJ4c9lNeYBp7gaGrFyapsRfBh4sBlwAuZdRY9fLY0Qxa87nPNVb5fBGD318IyeuLCHPxMkKNJew3lpRYtCWMxeVZPDnsp7zANPYyQ1cvT1Jjr4APVwKuAlzNqLGFWdXvoDLr9dqmX/tcY5XPVzD4/Y2QvL6CMBevIdRYwn5jSYlFIWEsrs3iyWE/5QWmsdcYunptkhq7Gj5cB7gecAOjxqofPziUQWu+97nGKp9XM/j9g5C8Xk2YizcSaixhv7GkxKIdYSxuyuLJYT/lBaaxNxq6elOSGnszfFgDuAVwK6PGqh+XGcugNT/7XGOVzzcz+P2LkLy+mTAXbyPUWMJ+Y0mJxU6Esbg9iyeH/ZQXmMbeZujq7Ulq7B3w4U7AXYC7GTVW/XjXOAat+d3nGqt8voPB7z+E5PUdhLm4llBjCfuNJSUWOxPG4p4snhz2U15gGrvW0NV7ktTYe+HDfYD7AQ8waqz6ccTxDFrzt881Vvl8L4PfgUYy8vpewlx8kFBjCfuNJSUW7QljsS6LJ4f9lBeYxj5o6Oq6JDV2PXx4CPAw4BFGjVU/Phtl0JrMRv7WWOXzega/s4Tk9XrCXHyUUGMJ+40lJRYdCGPxWBZPDvspLzCNfdTQ1ceS1NjH4cMGwBOAJxk1Vv24dzmD1uT6XGOVz48z+J0nJK8fJ8zFpwg1lrDfWFJi0ZEwFk9n8eSwn/IC09inDF19OkmNfQY+PAt4DrCRUWM7ZVX/Zp9Zr9c2re9zjVU+P8PgdwMhef0MYS4+T6ixhP3GkhKLToSxeCGLJ4f9lBeYxj5v6OoLSWrsi/DhJcDLgFcYNXaXrOrfQDXr9dqmjX2uscrnFxn8biIkr18kzMVXCTWWsN9YUmKxC2EsXsviyWE/5QWmsa8auvpakhr7Onx4A/Am4C1Gjd01q/o3pc16vbZpM59rrPL5dQa/mwvJ69cJc/FtQo0l7DeWlFjsShiLd7J4cthPeYFp7NuGrr6TpMa+Cx/eA7wP+IBRYztDxQkGrWnlc41VPr/L4Pe2QvL6XcJc/JBQYwn7jSUlFp0JY/FRFk8O+ykvMI390NDVj5LU2I/hwyeATwGfMWpsF6h4AoPWbO9zjVU+f8zg9w5C8vpjwlz8nFBjCfuNJSUWXQhj8UUWTw77KS8wjf3c0NUvktTYL+HDV4CvAd8wamxXqHgig9a09bnGKp+/ZPC7UEhef0mYi98Saixhv7GkxKIrYSy+y+LJYT/lBaax3xq6+l2SGvs9fPgB8CPgJ0aN3Q0qnsSgNTv7XGOVz98z+N1eSF5/T5iLPxNqLGG/saTEYjfCWPySxZPDfsoLTGN/NnT1lyQ19lf48Bvgd8AfjBq7O1R8GIPWdPK5xiqff2Xwexchef0rYS7+SaixhP3GkhKL3Qlj8VcWTw77KS8wjf3T0NW/ktTYv9WHbNgHyMjm09huUPFkBq3p4nONVT7/zeB3VyF5/TdhLmZmE65NEmqslFh0I4xFVjZPDvspLzCNVX1Qa2lWdnIamw3H5QByAXmMGhuEiqcwaE03n2us8lm1MXW9QSF5nU2Yi/mEGkvYbywpsQgSamxBNk8O+ykvMI3NN3S1IEmNrQ/HNQA0BDRi1FgLKp7KoLFhn2us8rk+g8YWCcnr+oS52JhQYwn7jSUlFhahxjbJ5slhP+UFprGNDV1tkqTGNoXjtgE0AzRn1NgQVDyNQWNLfa6xyuemDBobEZLXTQlzsQWhxhL2G0tKLEKEGtsymyeH/ZQXmMa2MHS1ZZIa2wqO2xawHaA1o8aGoeLpDBq7p881VvncikFjuwvJ61aEubg9ocYS9htLSizChBq7QzZPDvspLzCN3d7Q1R2S1Ng2cNyOgLaAQkaNLYKKZzBo7N4+11jlcxsGje0pJK/bEOZiO0KNJew3lpRYFBFq7E7ZPDnsp7zANLadoas7JamxO8Nx7QEdAB0ZNbYYKp7JoLG9fa6xyuedGTS2j5C83pkwFzsRaixhv7GkxKKYUGN3yebJYT/lBaaxnQxd3SVJjd0VjusM6ALoyqixJVBxJYPG7utzjVU+78qgsftJeQ8JYS7uRqixhP3GkhKLEkKN3T2bJ4f9lBeYxu5m6OruSWpsNzguCLAAIUaNLYWKZzFo7P4+11jlczcGjT1AyjOZlPefCTWWsN9YUmJRSqixRdk8OeynvMA0NmzoalGSGlsMx5UASgERRo2NQMWzGTT2QJ9rrPK5mEFjB0uZnxLmYhmhxhL2G0tKLCKEGrtHNk8O+ykvMI0tM3R1jyQ1dk84rjtgL0APRo0tg4rnMGjsMJ9rrPJ5TwaNHS4kr/ekvDdCqLGE/caSEosyQo3tmc2Tw37KC0xj9zZ0tWeSGrsPHNcL0BvQh1Fj94CKD2fQ2IN9rrHK530YNPYQIXm9D2Eu9iXUWMJ+Y0mJxR6EGtsvmyeH/ZQXmMb2NXS1X5Iauy8ctx+gP2AAo8buCRXPZdDY0T7XWOXzvgwaO0ZIXu9LuW5HqLGE/caSEos9CTX2gGyeHPZTXmAau7+hqwckqbED4bhBgAMBgxk1tjtUPI9BY8f5XGOVzwMZNHa8kLweSJiLQwg1lrDfWFJi0Z1QY4dm8+Swn/IC09ghhq4OTVJjh8FxwwEjAAcxauxeUPF8Bo2t8LnGKp+HMWhsTEheD6OcUxJqLGG/saTEYi9CjT0kmyeH/ZQXmMYebOjqIUlq7Eg4bhRgNGAMo8b2gIoXMGjsBJ9rrPJ5JIPGThSS1yMJc/FQQo0l7DeWlFj0INTYsdk8OeynvMA09lBDV8cmqbHj4LjxgCignFFj94aKFzJo7GSfa6zyeRyDxk4RktfjKK93CDWWsN9YUmKxN6HGxrJ5cthPeYFpbIWhq7EkNTYOxyUAEwATGTW2J1S8iEFjp/tcY5XPcQaNnSEkr+OEuTiJUGMJ+40lJRY9CTX2sGyeHPZTXmAaO8nQ1cOS1NjJcNwUwFTANENj9ZZBHOemAcLxL5unb2c6fPb8rs0suvZrQZgn0wnbD6oKNA1UjyXmRj1eU/I2+c7IZiQ8I5u+3pmEQsfl98zs6gYmqreqsymuGQH+zkaYvEFOni2yeJKi0ui39G9zIbxqUtwybY6adLbdSepClSgDYHbsWXYCzVY+cQSgkkGZKomHZi6/Mxj99vzVGuY2DHrbLNUx5zBMHw8nHt61KKh6l9r1UrfFbKa2mMvUFnMZ20IJIUdbzPL7Kx2Y+sDsf9fviq3wY+v7c5iWLpzTu6C3zSLslxZhrC3K9su22w274g6k2J5b609mnRxjFlWbmBeV82q7Sg5626w5TIOASTpFztbWzqM4z2MQhfk+Wc9M5eLNs8/Z/hSY+Y14+uV84+LEbXy21uaU8Vlg1GWFw5AbsVIrEUuEi0vLQuVWSbikJFGUKC2JFMUSxUXRWGncKoqGQ2Xx0mDCisTjpcXhitKSRFmsoiRhirYVC4eLYmXlFVZxqCRaHozEwtFgoqg0HApGY+HSWCwcKSmJhsOxkkgiUhYJhaKJcCRYXFpaFiwJhctCXPFZYMenLmfXTZhm1wvt2fUiKQLOxW8hg1gvZhq4FjPOXlRbLGJoiyVMbbGEsS2aMM3kFvr9pSZM+bDI5zM5rr6/WMhMjrBfWoSxthanZ3LOzVrINJM7QuJM7gjmmdwRDKJw5H9wJrc0258CcyTTTGGpsJnckYQzucWEMzmu+BxpzORqGhT8vATHyZNrgDlK4gBzFPMAcxTDALOsjgYYyvu8PrpXtMUA45XX0XU0A/DcZwgHaML+Zx3NNAAsS2KA9hz7bLqBcIvlUR8N0MuY4nP0/9FS6zH2Uuty7EGmoLfNqumBHson1Dz/rg6huHAEXrchtahytaHXuo71eTxUwhzLcGG0gukicQXjUvRyprY4jqktjmNeludoi2N9vizPlg8+X5Zn6/tCluUJ+6VFGGvruPSyvHOrGrOo2sS82F3JuWpyLNMgsJJx1URxXskgCicKWZY/lvBC8PhsfwrMiUyzyuPrYFmeMj4nEC7LH0c46+eKzwn/wqyf6+tLJ9qz/pOkCDgXvxMZxPpkpoHrZMbZi2qLkxja4hSmtjiF+asyHFf2J/t8JseVD6f4fCbH1fdPFTKTI+yXFmGsrVPTMznnZp3INJM7VeJM7lTmmdypDKJwxn9wJndatj8F5gymmcJpwmZyqwhncqcSzuS44rPqX3jA6phsnryXMsCcLnGAOZ15gDmdYYA5S8gDVpQCtoLpCtYrr7OFPGB1BuEATdj/rLOZBoAz6uABqzMJH7A6rpE/B+izmOJzJhIf6llvE8J39rUirOsswrFMXeDU1fv/zmK6cDg7m5Hw2dn09Z5DOLBx+X1OdnUDE9Vbp+//ayXk/X+UT22aSXFubVfTXjvdOYRXA6aqa9L/D4/Nnmcn0PnYY7MUATiXQZnOZb4hR+V3BqPfXjle4PObmqpjXsAwrbyQaYp9IeONvPOZ2uIipra4iPnxVI62OM/nNzW58uF8n9/U5Or7Fwi5qUnYLy3CWFsXpG9qOreqMYuqTcyLyos515wvYBoELmZcc1acL2YQhUuE3NS8gPBC8JJsfwrMJUxrcpfUwU1NyvhcSnhT8wLCNVOu+Fz6Lzye2oppdn2ZPbu+XIqAc/G7jEGsr2AauK5gnL2otricoS2uZGqLKxnbohXTTO4yn8/kuPLhcp/P5Lj6/hVCZnKE/dIijLV1RXom59ysy5hmcldJnMldxTyTu4pBFK75D87krs72p8BcwzRTuFrYTO4awpncFYQzOa74XPMvPJ56XjZP3ksZYK6VOMBcyzzAXMswwKwW8ngqpYCdz3QF65XXdUIeT11NOEAT9j/rOqYBYHUdPJ56HeHjqRc08ucAvZopPtf9Hy21Xm8vtd6APcgU9LZZNT3QQ/mEmte6CB+KYnnfnG5DalHlakOvdd3o83iohLmR4cLoJqaLxJsYl6JvYGqLm5na4mbmZXmOtrjR58vybPng82V5tr4vZFmesF9ahLG2bk4vyzu3qjGLqk3Mi901nKsmNzINAmsYV00U5zUMonCbkGX5GwkvBG/J9qfA3MY0q7ylDpblKeNzK+Gy/M2Es36u+Nz6L8z6ub6+dJs9679dioBz8buNQazvYBq47mCcvai2uJ2hLe5kaos7mb8qw3Flf4fPZ3Jc+XCnz2dyXH3/LiEzOcJ+aRHG2rorPZNzbtZtTDO5uyTO5O5insndxSAK9/4HZ3J3Z/tTYO5lmincLWwmt5ZwJncX4UyOKz5r/4UHrK7P5sl7KQPMPRIHmHuYB5h7GAaY+4U8YEUpYDcxXcF65fWAkAes7iUcoAn7n/UA0wBwbx08YHUf4QNWNzfy5wB9P1N87qtldYfiuZcbs+lfMkSpZ/f7fOW0HyRL/yz62DzA7DfFb6Yey9B3KN+F+6DP21D17Qey6VexCHPGeoAwHut8Hg/VX9YxXIeuZ36Ozys/tcq/nsPvRv7W7hZMfj/EdK1LrbWE8bG4fCaPDV0uhhW3loHq62X1/yEQpL/szwr6szqv/jzMPkaXexj2PQJ4FPBY9iZ7tiPmtbVJ0NtmjcyQsSDzMOH4kWPwfNxu7A323yfsv0/af5+yNWIX+/in4f/PAJ4FPAfYCHge8ALgRcBLgJcBrwBeBbwGeB3wBuBNwFuAtwHvAN4FvAd4H/AB4EPAR4CPAZ8APgV8Bvgc8AXgS8BXgK8B3wC+BXwH+B7wA+DHbLvh9QRCkS+0O1RdvQB7A9PK2U/ZjIR/yqav92fCqycuv3/Orm5gonrr9G3rTzB1tl+yGQn/wtDZfvV5Z1N+/yq8sz3J1Nl+y2Yk/BtDZ/vd551N+f07Q2fj4PqznRjU17p/ZMtMsqeYkuzPbEbCfzIk2V8+TzLl919CkkyJwR8MSfY3cWd1Tig3GBPHJ4zPTxmfz3BMKAMwu6kHyABk5hh2e6NecCQcFS3FnSo2WTm8sVH1b57sG58zjM+ZOVvGJhv+nwPIBeTlbFkfZb9Uefk3Q3/Pp2tTy7m4QZ3zjxPmpp78F4D/9QENAA0BjQCNAU0ATQHbAJoBmgNaAFoCWgG2BWwHaA3YHrADoA1gR0BbQCGgHWAnwM6A9oAOgI6AToBdALsCOgO6ALoCdgPsDugGUCsaVk719zH0/F/xreew1UdsDRBbQ8TWCLE1RmxNEFtTxLYNYmuG2JojthaIrSVia4XYtkVs2yG21ohte8S2A2Jrg9h2RGxtEVshYmuH2HZCbDsjtvaIrQNi64jYOiG2XRDbroitM2Lrgti6IrbdENvuiK0bYgsiNiunWmP0lurTiKlojletLSAYC+OJTVt9wnH1UZ8/WGX7HGtA135lDenqshoRxuIxEbGIW43J2q/CakJWV8RqShiLx0XEImhtQ9V+8aDVjKquiqDVnDAWGyTEIgI3oanaD8aelkR1xdVLXAhj8YSAWFSAz9sStV8E6tqOqC5w2WpNGIsn/R+LuPJ5e5r2q1B17UBTV0TV1YYwFk/5PxaqamtHkvaLV9XVlqSuiqq6Cglj8bTvYxGp8rkdSftV0bR2oqgrvqmunQlj8YzfY1Gxyef2FO0X2VRXB4q6NrlsdSSMxbM+j0XM9rkTgc/ldl27ENRVate1K2EsnvN3LEL6a9+dvfts6bq6eK4rktB1dSWMxUZfxyJSrn3ezXv7bf46/+6e6yrdXFc3wlg87+tYFG/2OejZZ2tzXRbhfZhHCb/o94JPvtW/lc0iXDezCNd9rA2EsXhRSCwI1wcswvmt9RRhLF4SEgvCeZBFeB1vPUsYi5eFxILwes8ivF6xnieMxStCYkE4rlmEumy9RBiLV4W8poswfy3C/mdxtV+Go/38cF9Z1xUivA5VdVA/A6Set8rPoX8OKpxDG2tqv9WXlAoY/P7S51/qVP0xzOD3V0JeYFJEmI+Esba+8nm/UfkSYug33/rc7wKmfPlOSL4UE+YLYawtyvarei4ysOWzxkon9DPKxcbn/hnVnwdkbPnscgkcVwqIAMpyan52Oehts9SXa+sz9Mkfff7aYeVzCYPfPwmZY5UQXpfuQZjXhP3GkhKLZwifY90zhyeH/ZQXmMbuYejqnklqbHc4bi9AD8DejBqrXl7QgEFrfvW5xiqfuzP4/ZuQvO5OmIs9CTWWsN9YUmLxLKHG7pPDk8N+ygtMY3saurpPkhrbC47rDegD6MuoserlMA0ZtOZPn2us8rkXg99/CcnrXoS52I9QYwn7jSUlFs8Rauy+OTw57Ke8wDS2n6Gr+yapsfvBcf0BAwD7M2qsevlWIwatqdfY3xqrfN6Pwe+MxjLyej/CXDyAUGMJ+40lJRYbCTV2YA5PDvspLzCNPcDQ1YFJauwgOO5AwGDAEEaNVS83bMygNdk+11jl8yAGv3OE5PUgwlwcSqixhP3GkhKL5wk1dlgOTw77KS8wjR1q6OqwJDV2OBw3AnAQ4GBGjVUvj23CoDX5PtdY5fNwBr8LhOT1cMJcPIRQYwn7jSUlFi8QauzIHJ4c9lNeYBp7iKGrI5PU2FFw3GjAGMChjBqrXs7dlEFrGvpcY5XPoxj8biQkr0cR5uJYQo0l7DeWlFi8SKix43J4cthPeYFp7FhDV8clqbHj4bgooBxQwaix6scPtmHQmqY+11jl83gGv7cRktfjCXMxRqixhP3GkhKLlwg1Np7Dk8N+ygtMY2OGrsaT1NgEHDcBMBEwiVFj1Y/LNGPQmhY+11jlc4LB75ZC8jpBmIuHEWosYb+xpMTiZUKNnZzDk8N+ygtMYw8zdHVykho7BY6bCpgGmM6oserHu5ozaM12PtdY5fMUBr9bC8nrKYS5OINQYwn7jSUlFq8QauzMHJ4c9lNeYBo7w9DVmUlqbCUcNwswGzCHUWPVjyO2YNCaNj7XWOVzJYPfOwrJ60rCXDycUGMJ+40lJRavEmrs3ByeHPZTXmAae7ihq3OT1Nh5cNx8wALAQkaNVT8+25JBa9r5XGOVz/MY/N5JSF7PI8zFRYQaS9hvLCmxeI1QYxfn8OSwn/IC09hFhq4uTlJjl8BxRwCWAo5k1Fj1496tGLSmg881Vvm8hMHvjkLyeglhLh5FqLGE/caSEovXCTV2WQ5PDvspLzCNPcrQ1WVJauzRcNwxgOWAYxk19o3s6t/sM+v12qa7+lxjlc9HM/jdWUheH02YiysINZaw31hSYvEGocYel8OTw37KC0xjVxi6elySGrsSjjsecALgREaNfTO7+jdQzXq9tuluPtdY5fNKBr93F5LXKwlz8SRCjSXsN5aUWLxJqLEn5/DksJ/yAtPYkwxdPTlJjT0FjjsVcBpgFaPGvpVd/ZvSZr1e29TyucYqn09h8DskJK9PIczF0wk1lrDfWFJi8Rahxp6Rw5PDfsoLTGNPN3T1jCQ19kw47izA2YBzGDX2bYjv9gxaU+xzjVU+n8ngd4mQvD6TMBfPJdRYwn5jSYnF24Qae14OTw77KS8wjT3X0NXzktTY8+G4CwAXAi5i1Nh3IL47MGhNmc81Vvl8PoPfewjJ6/MJc/FiQo0l7DeWlFi8Q6ixl+Tw5LCf8gLT2IsNXb0kSY29FI67DHA54ApGjX0X4tuGQWv28rnGKp8vZfC7h5C8vpQwF68k1FjCfmNJicW7hBp7VQ5PDvspLzCNvdLQ1auS1Nir4bhrANcCVjNq7HsQ3x0ZtGYfn2us8vlqBr97Ccnrqwlz8TpCjSXsN5aUWLxHqLHX5/DksJ/yAtPY6wxdvT5Jjb0BjrsRcBPgZkaNfR/i25ZBa/r6XGOVzzcw+N1PSF7fQJiLawg1lrDfWFJi8T6hxt6Sw5PDfsoLTGPXGLp6S5IaeyscdxvgdsAdjBr7AcS3kEFr+vtcY5XPtzL4PUBIXt9KmIt3EmosYb+xpMTiA0KNvSuHJ4f9lBeYxt5p6OpdSWrs3XDcWsA9gHsZNfZDiG87Bq0Z6HONVT7fzeD3ICF5fTdhLt5HqLGE/caSEosPCTX2/hyeHPZTXmAae5+hq/cnqbEPwHEPAtYB1jNq7EcQ350YtGaIzzVW+fwAg99DheT1A4S5+BChxhL2G0tKLD4i1NiHc3hy2E95gWnsQ4auPpykxj4Cxz0KeAzwOKPGfgzx3ZlBa0b4XGOVz48w+H2QkLx+hDAXNxBqLGG/saTE4mNCjX0ihyeH/ZQXmMZuMHT1iSQ19kk47inA04BnGDX2E4hvewatGelzjVU+P8ng9yghef0kYS4+S6ixhP3GkhKLTwg19rkcnhz2U15gGvusoavPJamxG+G45wEvAF5k1NhPIb4dGLTmUJ9rrPJ5I4PfY4Xk9UbCXHyJUGMJ+40lJRafEmrsyzk8OeynvMA09iVDV19OUmNfgeNeBbwGeJ1RYz+D+HZk0JqozzVW+fwKg9/lUt69T5iLbxBqLGG/saTE4jNCjX0zhyeH/ZQXmMa+Yejqm0lq7Ftw3NuAdwDvMmrs5xDfTgxaE/e5xiqf32LwOyHlPSSEufgeocYS9htLSiw+J9TY93N4cthPeYFp7HuGrr6fpMZ+AMd9CPgI8DGjxn4B8d2FQWsm+Vxjlc8fMPh9mJRnMglz8RNCjSXsN5aUWHxBqLGf5vDksJ/yAtPYTwxd/TRJjf0Mjvsc8AXgS0aN/RLiuyuD1kz1ucYqnz9j8HualPkpYS5+RaixhP3GkhKLLwk19uscnhz2U15gGvuVoatfJ6mx38Bx3wK+A3zPqLFfQXw7M2jNTJ9rrPL5Gwa/K4Xk9TeEufgDocYS9htLSiy+ItTYH3N4cthPeYFp7A+Grv6YpMb+BMf9DPgF8Cujxn4N8e3CoDVzfK6xyuefGPw+XEhe/0SYi78Raixhv7GkxOJrQo39PYcnh/2UF5jG/mbo6u9JauwfcNyf6ljA34wa+w3EtyuD1sz3ucYqn/9g8HuBkLz+gzAXA7l0vAj7jSUlFt8Qamy9XJ4c9lNeYBqr+qDW0nq5yWlsBhyXCcgCZOfyaey3EN/dGLRmsc81Vvms2pi63iVC8jqDMBdzCDWWsN9YUmLxLaHG5uby5LCf8gLT2BxDV3OT1Ng8OC4fUACoz6ix30F8d2fQ2CN9rrHK5zwGjT1KSF7nEeZiA0KNJew3lpRYfEeosQ1zeXLYT3mBaWwDQ1cbJqmxjeC4xoAmgKaMGvs9xLcbg8Ye43ONVT43YtDY5ULyuhFhLm5DqLGE/caSEovvCTW2WS5PDvspLzCN3cbQ1WZJamxzOK4FoCWgFaPG/gDxDTJo7HE+11jlc3MGjV0pJK+bE+bitoQaS9hvLCmx+IFQY7fL5clhP+UFprHbGrq6XZIa2xqO2x6wA6ANo8b+CPG1GDT2RJ9rrPK5NYPGniQkr1sT5uKOhBpL2G8sKbH4kVBj2+by5LCf8gLT2B0NXW2bpMYWwnHtADsBdjY0Vm8ZxHFuGqBrz8Jcnr6d6fDZ87s2s+nabwNhnrQnbD+gFWgaqB5LzI16vKbkbfLtkMtIuEMufb0dCYWOy++OudUNTFRvVWdTXDMC/J2NMHmDnDw3ZPMkRSej39K/zYXwqklxy7Q5atLZdiepC1WiDIDZsXexE2hX5RNHADoxKFMn4qGZy+8MRr89f7WGuQ2D3jZLdczODNPHLsTDuxYFVe9Su17qttiVqS26MrVFV8a2UELI0Ran+v2VDkx94LR/1++KrfBj6/urmJYunNO7oLfNIuyXFmGsLcr2y7bbDbviDqTYnlvrT2adHGMWVZuYF5W71XaVHPS2WZ2ZBgGTdIqcra2dR3HejUEUzvLJemYqF2+en+nL9afAnNWYp1/ublycuI3P1tqcMj7djLqscBhyI1ZqJWKJcHFpWajcKgmXlCSKEqUlkaJYorgoGiuNW0XRcKgsXhpMWJF4vLQ4XFFakiiLVZQkTNG2YuFwUaysvMIqDpVEy4ORWDgaTBSVhkPBaCxcGouFIyUl0XA4VhJJRMoioVA0EY4Ei0tLy4IloXBZiCs+3ez41OXs+mGm2XXQnl1bUgSci1+QQaxDTANXiHH2otrCYmiLMFNbhBnb4mGmmdw5fn+pCVM+nOvzmRxX3z9PyEyOsF9ahLG2zkvP5JybFWSayRVJnMkVMc/kihhE4aL/4EyuONefAnMR00yhWNhMroRwJnce4UyOKz4lxkyupkHBz0twnDy5BphSiQNMKfMAU8owwFxSRwMM5X1eH90r2mKA8crr0jqaAXjlGSEcoAn7n3Up0wAQSWKA9tqmZbl0A+EWy6M+GqAvYYpP2f/RUuse9lLrntiDTEFvm1XTAz2UT6h5/l0dQnHhCLxuQ2pR5WpDr3V193k8VMJ0Z7gw2ovpInEvxqXoPZnaogdTW/RgXpbnaIsrfL4sz5UPV/p8WZ6r718lZFmesF9ahLG2rkovyzu3qjGLqk3Mi929OVdNujMNAnszrpooznsziMJqIcvy3QkvBHvm+lNgVjPNKnvWwbI8ZXz2IVyWv4pw1s8Vn33+hVk/19eXetmz/t5SBJyLXy8Gse7DNHD1YZy9qLbozdAWfZnaoi/zV2U4ruyv9/lMjisfbvD5TI6r798oZCZH2C8twlhbN6Zncs7N6sU0k+sncSbXj3km149BFG75D87k9s31p8DcwjRT2FfYTG4/wpncjYQzOa747PcvPGC1Ry5P3ksZYPpLHGD6Mw8w/RkGmNuEPGBFKWBXMl3BeuV1u5AHrAYQDtCE/c+6nWkAGFAHD1jtT/iA1VWN/TlA38YUn/2R+FDPeh8mfGffk4R1HUA4ltXl+/8OYLpwGJjLSHhgLn29gwgHNi6/B+VWNzBRvXX6/r8nhbz/72Gm9/8dWNvVtNdON4jwasBUdU36/+Gx2cF2Ag3BHpulCMCBDMp0IPMNOSq/Mxj99spxqM9vaqqOOZRhWjmMaYo9jPFG3hCmthjO1BbDmR9P5WiLu3x+U5MrH+72+U1Nrr6/VshNTcJ+aRHG2lqbvqnp3KrGLKo2MS8qR3CuOQ9lGgRGMK45K84jGEThfiE3NYcSXggelOtPgbmfaU3uoDq4qUkZn4MJb2quJVwz5YrPwf/C46lPMs2uD7Fn1yOlCDgXv0MYxHoU08A1inH2otpiJENbjGZqi9GMbfEk00zuQZ/P5LjyYZ3PZ3JcfX+9kJkcYb+0CGNtrU/P5JybdQjTTG6MxJncGOaZ3BgGUXj0PziTOzTXnwLzKNNM4VBhM7mxhDO59YQzOa74jP0XHk8dnMuT91IGmHESB5hxzAPMOIYB5nEhj6dSCtjdTFewXnltEPJ46njCAZqw/1kbmAaA8XXweGqU8PHUtY39OUA/zhSf6P/RUmu5vdRagT3IFPS2WTU90EP5hJrXuggfimJ535xuQ2pR5WpDr3XFfB4PlTAxhgujONNFYpxxKbqCqS0STG2RYF6W52iLp3y+LM+VD0/7fFmeq+8/I2RZnrBfWoSxtp5JL8s7t6oxi6pNzIvdCZyrJjGmQWAC46qJ4jyBQRSeF7IsHyO8EJyY60+BeZ5pVjmxDpblKeMziXBZ/hnCWT9XfCb9C7N+rq8vHWbP+idLEXAufocxiPUUpoFrCuPsRbXFZIa2mMrUFlOZvyrDcWX/os9nclz58JLPZ3Jcff9lITM5wn5pEcbaejk9k3Nu1mFMM7lpEmdy05hnctMYROH1/+BMbnquPwXmdaaZwnRhM7kZhDO5lwlnclzxmfEvPGBVnsuT91IGmJkSB5iZzAPMTIYB5k0hD1hRCtjTTFewXnm9JeQBq0rCAZqw/1lvMQ0AlXXwgNUswgesnmnszwH6Tab4zKpldYfiuZdYLv1Lhij1bLbPV05/hyunv7LpYzOH2W+K30ztztB3KN+Fe7jP21D17Tm59KtYhDljzSGMx1yfx0P1l7kM16HzmJ/j88pPrfLPY/D73cb+1u4NTH6/x3StS621hPGx3iNeoc4K1M1t5U4B2us2zTHb/jwf+tcCwELAIsDi3K045LXzLSETG6tccWsZqJ4QqP+r+v+yP883Pi8yPp+RsemzLneEuogFHAk4KrfarjfqAXABoeAeQTgALiNenHHGZpkRg6XG5yONz0flbhmbo+H/xwCWA47NrU682uK+0Ph8tPF5mCPuK2DfcYCVgOORuFP3/RPo2jeBtcEJhq+Ljc8rammDE2HfSYCTAacgbZBB3AaEgmadyNxf3WjJqbDvNMAqwOnCtORUQi05gzk2ZxgxOM34vMr4fLpDS86E/58FOBtwTu6W9VHG5AmmC7dz67C/n2t8PrMW/TgP9p0PuABwYS36XJM2nVdL3RfBvosBlwAuFaZNF9XRXSSvPl9Gx7MUi/tlRnxV+2KfnXG/HMpcAbgScJUd9+xA9fOczo06f0dmyLgDeHku7aRGb1fbk4Br7L/X2n9X25rW3D7uOvj/9YAbADcCbgLcDFgDuAVwK+A2wO2AOwB3Au4C3A1YC7gHcC/gPsD9uXYD6ZVldbJCO+h19cso1xALrN4eyGUk/EAufb0PEl4JcPn9YG51AxPVW6c/w3MtU2dbl8tIeB1DZ1vv886m/F4vvLOtZupsD+UyEn6IobM97PPOpvx+mKGzcXB90E4M6mvSR5jnOdcY16TXGp9X1zIXeRT2PQZ4HLChlrmj55sdUPcjDG36BOE6gfManLpfXU0Yf32t+iTU+RTgacAzgGcBzwE2Ap4HvAB4EfAS4GXAK4BXAa8BXge8AXgT8Bbg7dzq75Xpy9Un7ZiZtqcQ29OI7RnE9ixiew6xbURszyO2FxDbi4jtJcT2MmJ7BbG9itheQ2yvI7Y3ENubiO0txPZ27j8H0VSf4k2lT3r+EUqCuuKJTdtThLw+9PkDibbPsafp2q/sGbq6rGcJY/GRiFjErefI2q/C2khWV8R6njAWH4uIRdB6gar94kHrRaq6KoLWS4Sx+ERCLCJB62Wq9oOx5xWiuuJQ16uEsfhUQCwqwOfXiNovor6JRFQXuGy9QRiLz/wfi7jy+U2a9qtQdb1FU1dE1fU2YSw+98k3B7eyWYTXexbh9Yr1MeEXO74QEgvCcc0i1GXrM8JYfCnka/aE+WsR9j/ryzp6cNMP81td1zuE61aqDuq1KrUu+ATDet27ubSxpvZb3ft9ksHvn33+ULbqj+8y+P2LkC8gvkeYj4Sxtn7xeb9R+fIOQ7/53ed+P8mUL38IyZf3CfOFMNbWH8RfCHXeY3vPuJf2vvG5f0b15wGOe2wfwHEfAj4CfJzL93zm9bnV92YoY/23z18bpnz+gMHvQBMZc6wPKNchCfOasN9YUmJxPeU6ZC5PDvspLzCN/cTQ1U+T1NjP4LjPAV8AvmTU2Btyq+91m/V6bdPMJv7WWOXzZwx+ZwnJ688Ic/ErQo0l7DeWlFjcQBiLr3N5cthPeYFp7FeGrn6dpMZ+A8d9C/gO8D2jxt6YW/3skFmv1zbN9bnGKp+/YfA7T0hef0OYiz8Qaixhv7GkxOJGwlj8mMuTw37KC0xjfzB09cckNfYnOO5nwC+AXxk19qbc6mcxzXq9tml9n2us8vknBr8bCMnrnwhz8TdCjSXsN5aUWNxEGIvfc3ly2E95gWnsb4au/p6kxv4Bx/2pjgX8zaix6jujzzFoTWOfa6zy+Q8Gv5sIyes/CHMxkEfHi7DfWFJicTNhLOrl8eSwn/IC01jVB7WW1stLTmMz4LhMQBYgO49PY9V38jcyaE0zn2us8lm1MXW9zYXkdQZhLuYQaixhv7GkxGIN5fw+jyeH/ZQXmMbmGLqam6TG5sFx+YACQH1GjVXvPHmeQWNb+Vxjlc95DBq7rZC8ziPMxQaEGkvYbywpsbiFUGMb5vHksJ/yAtPYBoauNkxSYxvBcY0BTQBNGTVWvVPqBQaN3d7nGqt8bsSgsTsIyetGhLm4DaHGEvYbS0osbiXU2GZ5PDnsp7zANHYbQ1ebJamxzeG4FoCWgFaMGqve2fcig8a29bnGKp+bM2hsoZC8bk6Yi9sSaixhv7GkxOI2Qo3dLo8nh/2UF5jGbmvo6nZJamxrOG57wA6ANowaq96J+hKDxu7sc41VPrdm0Nj2QvK6NWEu7kiosYT9xpISi9sJNbZtHk8O+ykvMI3d0dDVtklqbCEc1w6wE2BnRo1V75x+mUFjO/lcY5XPhQwau4uQvC4kzMX2hBpL2G8sKbG4g1BjO+Tx5LCf8gLT2PaGrnZIUmM7wnGdALsAdmXUWPVO/1cYNLaLzzVW+dyRQWO7CsnrjoS52JlQYwn7jSUlFncSamyXPJ4c9lNeYBrb2dDVLklqbFc4bjfA7oBujBqrfjPlVQaN7eZzjVU+d2XQ2KCQvO5KmItBQo0l7DeWlFjcRaixVh5PDvspLzCNDRq6aiWpsSE4LgwoAhQzaqz6TarXGDQ27HONVT6HGDS2SEhehwhzsYRQYwn7jSUlFncTamxpHk8O+ykvMI0tMXS1NEmNjcBxZYA9AHsyaqz6zb/XGTS21Ocaq3yOMGhsREheRwhzsTuhxhL2G0tKLNYSauxeeTw57Ke8wDS2u6GreyWpsT3guL1VewH2YdRY9ZuqbzBo7J4+11jlcw8Gje0uJK97EOZiL0KNJew3lpRY3EOosb3zeHLYT3mBaWwvQ1d7J6mxfeC4voB+gH0ZNVb9ZvWbDBq7t881Vvnch0FjewrJ6z6EubgfocYS9htLSizuJdTY/nk8OeynvMA0dj9TV5PU2AFw3P6AAwADGTX2vtzq3/o06/U8nvpcY5XPAxg0to+QvB5AmIuDCDWWsN9YUmJxH6HGHpjHk8N+ygtMYwcZunpgkho7GI4bAhgKGMaosffnbvnbyVRtuq/PNVb5PJhBY/cTkteDCXNxOKHGEvYbS0os7ifU2BF5PDnsp7zANHa4oasjktTYg+C4gwGHAEYaGqu3DOI4Nw7QtedBeTx92+mzV56XE7739JpcHp+px4BRdLEpwvr6KKN/dwok19dHQ5kxgEMBY+2+ng1oavhfW5sEvW3W6Dza/NfbuDxGwuPy6OsdTyjQXH6Pz6tuYKJ6a024oLdtizYNetywhBtiJJaC/jzaSMRhjoSLwr5yQAUgZiSc2jIC/9yo22RkhozYRQljl2PwjNt9OGH/nWD/nWj/nWTn9i728YfB/ycDpgCmAqYBpgNmAGYCKgGzALMBcwCHA+YC5gHmAxYAFgIWARYDlgCOACwFHAk4CrAMcDTgGMBywLGAFYDjACsBxwNOAJwIOAlwMuAUwKl5dsNn2n8V+cJA3Sp4gknBT8tjJHwag4Kv8rmCK79XMSh4XXa2CUyd7fQ8RsKnM3S2M3ze2ZTfZwjvbBOZOtuZeYyEz2TobGf5vLMpv89iujblGCXOYFhgPDtPZpJNYkqyc/IYCZ/DkGTn+jzJlN/nCkkyJQZnMyTZecwTyoQxcZxgfJ5kfD7DMaE8H/ZdALgQcBGyWplJ3LaEo6J1PmGfv5g5NhcbMbjA+Hyh8fmivC1jcwn8/1LAZYDL82q+W+fVd5WX5zH09ysIY+1c3KDO+Thh/Hex67kS6rwKcDXgGsC1gNWA6wDXA24A3Ai4CXAzYA3gFsCtgNsAtwPuANwJuAtwN2At4B7AvYD7APcDHgA8CFgHWA94CPAw4BHAo4DHAI8DNgCeADwJeCpv04KROf+/Mq96MUrbrkJsVyO2axDbtYhtNWK7DrFdj9huQGw3IrabENvNiG0NYrsFsd2K2G5DbLcjtjsQ252I7S7EdjdiW4vY7kFs9yK2+xDb/YjtAcT2IGJbh9jWI7aHENvDiO0RxPYoYnsMsT2O2DYgticQ25OI7SlDD/VGfYc2Tjh+XUlQVzyxabuKkNf+dXS33KPPsavp2q/sGrq6rGsJY3GAiFjErdVk7VdhXUdWV8S6njAWA0XEImjdQNV+8aB1I1VdFUHrJsJYDJIQi0jQupmq/dQvRhHVFVe/jEIYiwMFxKJC/VIBUftF1Bu5ieoKqjfPEsZisP9jEVc+30HTfhWqrjtp6oqouu4ijMUQ/8dCVW3dTdJ+8aq61pLUVVFV1z2EsRjq+1hEqny+l6T9qmha91HUFd9U1/2EsRjm91hUbPL5AYr2i2yq60GKuja5bK0jjMVwn8ciZvu8nsDncruuhwjqKrXrepgwFiP8HYuQzdN6xLvPlq7rUc91RRK6rscIY3GQr2MRKdc+P+69/bTP1gbPdZVurusJwlgc7OtYFG/2+UnPPlub63qK8D7M/oTf3jhEyDdpCNfNLMJ1H2sQYSxGCokF4fqARTi/tYYQxmKUkFgQzoMswut4azhhLEYLiQXh9Z5FeL1iHUwYizFCYkE4rlmEumyNIozFoUyxoH7eiDB/LcL+Z3G1X4aj/fxwX1nX9TThdaiqg/oZIPW81RUMz0E9k0cba2q/1ZeUrmTwe2YTf/ut+uMzDH5X1pE2euX5LGE+EsbaqvR5v1H58jRDv5njc7+vZMqXw4Xky3OE+UIYa4uy/VRsnc8uK53Qzyg/l5fcmwE2wnHPA14AvJjH96Yh9eXaqxj65Hyfv2lI+byRwe8FQuZYGwmvS18izGvCfmNJicVkwli8nMeTw37KC0xjXzJ09eUkNfYVOO5VwGuA1xk1Vr284GoGrVnsc41VPr/C4PcSIXn9CmEuvkGosYT9xpISiymEsXgzjyeH/ZQXmMa+Yejqm0lq7Ftw3NuAdwDvMmqsejnMNQxac6TPNVb5/BaD30cJyeu3CHPxPUKNJew3lpRYTCWMxft5PDnsp7zANPY9Q1ffT1JjP4DjPgR8BPiYUWPVy7euZdCaY3yuscrnDxj8Xi4krz8gzMVPCDWWsN9YUmIxjTAWn+bx5LCf8gLT2E8MXf00SY39DI77HPAF4EtGjVUvN1zNoDXH+Vxjlc+fMfi9Ukhef0aYi18Raixhv7GkxGI6YSy+zuPJYT/lBaaxXxm6+nWSGvsNHPct4DvA94waq14eex2D1pzoc41VPn/D4PdJQvL6G8Jc/IFQYwn7jSUlFjMIY/FjHk8O+ykvMI39wdDVH5PU2J/guJ8BvwB+ZdRY9XLu6xm05lSfa6zy+ScGv08Tktc/Eebib4QaS9hvLCmxmEkYi9/zeHLYT3mBaexvhq7+nqTG/gHH/amOBfzNqLHqxw9uYNCaM3yuscrnPxj8PlNIXv9BmIuBfDpehP3GkhKLSsJY1MvnyWE/5QWmsaoPbv4hn/zkNDYDjssEZAGy8/k0Vv24zI0MWnOOzzVW+azamLrec4XkdQZhLuYQaixhv7GkxGIWocbm5vPksJ/yAtPYHENXc5PU2Dw4Lh9QAKjPqLHqx7tuYtDYC3yuscrnPAaNvVBIXucR5mIDQo0l7DeWlFjMJtTYhvk8OeynvMA0toGhqw2T1NhGcFxjQBNAU0aNVT+OeDODxl7ic41VPjdi0NhLheR1I8Jc3IZQYwn7jSUlFnMINbZZPk8O+ykvMI3dxtDVZklqbHM4rgWgJaAVo8aqH59dw6CxV/hcY5XPzRk09kohed2cMBe3JdRYwn5jSYnF4YQau10+Tw77KS8wjd3W0NXtktTY1nDc9oAdAG0YNVb9uPctDBp7jc81VvncmkFjrxWS160Jc3FHQo0l7DeWlFjMJdTYtvk8OeynvMA0dkdDV9smqbGFcFw7wE6AnRk1dl5e9W/2mfV6fjbK5xqrfC5k0NgbhOR1IWEutifUWMJ+Y0mJxTxCje2Qz5PDfsoLTGPbG7raIUmN7QjHdQLsAtiVUWPn51X/BqpZr+f1Tp9rrPK5I4PGrhGS1x0Jc7EzocYS9htLSizmE2psl3yeHPZTXmAa29nQ1S5JamxXOG43wO6AbowauyCv+jelzXo9a5jPNVb53JVBY28XktddCXMxSKixhP3GkhKLBYQaa+Xz5LCf8gLT2KChq1aSGhuC48KAIkAxo8YuhPjewaCxd/lcY5XPIQaNvVtIXocIc7GEUGMJ+40lJRYLCTW2NJ8nh/2UF5jGlhi6WpqkxkbguDLAHoA9GTV2EcT3TgaNvdfnGqt8jjBo7H1C8jpCmIvdCTWWsN9YUmKxiFBj98rnyWE/5QWmsd0NXd0rSY3tAcftrdoLsA+jxi6G+N7FoLEP+lxjlc89GDR2nZC87kGYi70INZaw31hSYrGYUGN75/PksJ/yAtPYXoau9k5SY/vAcX0B/QD7MmrsEojv3Qwa+7DPNVb53IdBYx8Rktd9CHNxP0KNJew3lpRYLCHU2P75PDnsp7zANHY/U1eT1NgBcNz+gAMAAxk19giI71oGjX3c5xqrfB7AoLEbhOT1AMJcHESosYT9xpISiyMINfbAfJ4c9lNeYBo7yNDVA5PU2MFw3BDAUMAwRo1dCvG9h0Fjn/K5xiqfBzNo7NNC8nowYS4OJ9RYwn5jSYnFUkKNHZHPk8N+ygtMY4cbujoiSY09CI47GHAIYCSjxh4J8b2XQWOf87nGKp8PYtDYjULy+iDCXBxFqLGE/caSEosjCTV2dD5PDvspLzCNHWXo6ugkNXYMHHcoYCxgHKPGHgXxvY9BY1/0ucYqn8cwaOxLQvJ6DGEujifUWMJ+Y0mJxVGEGhvN58lhP+UFprHjDV2NJqmx5XBcBSAGiDNq7DKI7/0MGvuqzzVW+VzOoLGvCcnrcsJcTBBqLGG/saTEYhmhxk7I58lhP+UFprEJQ1cnJKmxE+G4SYDDAJMZNfZoiO8DDBr7ps81Vvk8kUFj3xKS1xMJc3EKocYS9htLSiyOJtTYqfk8OeynvMA0doqhq1OT1NhpcNx0wAzATEaNPQbi+yCDxr7rc41VPk9j0Nj3hOT1NMJcrCTUWMJ+Y0mJxTGEGjsrnyeH/ZQXmMZWGro6K0mNnQ3HzQEcDpjLqLHLIb7rGDT2Q59rrPJ5NoPGfiQkr2cT5uI8Qo0l7DeWlFgsJ9TY+fk8OeynvMA0dp6hq/OT1NgFcNxCwCLAYkaNPRbiu55BYz/1ucYqnxcwaOxnUt5DQpiLSwg1lrDfWFJicSyhxh6Rz5PDfsoLTGOXGLp6RJIauxSOOxJwFGAZo8augPg+xKCxX/pcY5XPSxk09ispz2QS5uLRhBpL2G8sKbFYQaixx+Tz5LCf8gLT2KMNXT0mSY1dDscdC1gBOI5RY4+D+D7MoLHf+lxjlc/LGTT2OynzU8JcXEmosYT9xpISi+MINfb4fJ4c9lNeYBq70tDV45PU2BPguBMBJwFOZtTYlRDfRxg09kefa6zy+QQGjf1JSF6fQJiLpxBqLGG/saTEYiWhxp6az5PDfsoLTGNPMXT11CQ19jQ4bhXgdMAZjBp7PMT3UQaN/dXnGqt8Po1BY38TktenEebimYQaS9hvLCmxOJ5QY8/K58lhP+UFprFnGrp6VpIaezYcdw7gXMB5jBp7AsT3MQaN/dPnGqt8PptBY/8SktdnE+bi+YQaS9hvLCmxOIFQYy/I58lhP+UFprHnG7p6QZIaeyEcdxHgYsAljBp7IsT3cQaNrdfU3xqrfL6QQWMzmsrI6wsJc/FSQo0l7DeWlFicSKixl+Xz5LCf8gLT2EsNXb0sSY29HI67AnAl4CpGjT0J4ruBQWOzfa6xyufLGTQ2R0heX06Yi1cTaixhv7GkxOIkQo29Jp8nh/2UF5jGXm3o6jVJauy1cNxqwHWA6xk19mSI7xMMGpvvc41VPl/LoLEFQvL6WsJcvIFQYwn7jSUlFicTauyN+Tw57Ke8wDT2BkNXb0xSY2+C424GrAHcwqixp0B8n2TQ2IY+11jl800MGttISF7fRJiLtxJqLGG/saTE4hRCjb0tnyeH/ZQXmMbeaujqbUlq7O1w3B2AOwF3MWrsqRDfpxg0tqnPNVb5fDuDxm4jJK9vJ8zFuwk1lrDfWFJicSqhxq7N58lhP+UFprF3G7q6NkmNvQeOuxdwH+B+Q2P1lkEc56YBuva8J5+nb2c6fPb8rs08uvZLEObJA4Ttlw11NA1UjyXmRj1eU/I2+T6Yz0j4wXz6etcRCh2X3+vyqxuYqN6qzqa4ZgT4Oxth8gY5eSbyeJJivdFv6d/mQnkXO7BJuesZpLPtTlIXqkQZALNjP2Qn0MPKJ44ArGdQpvXEQzOX3xmMfnv+ag1zGwa9bZbqmI8wTB8fJR7etSioepfa9VK3xcNMbfEYU1s8xtgWSgg52qKFz5dTuPKh5b/rd8VW+LH1/VZMSxfO6V3Q22YR9kuLMNYWZftl2+2GXXEHUmzPrfUns06OMYuqTcyLysdru0oOetusR5gGAZN0ipytrZ1HcX6cQRS298l6ZioXb56f6cv3p8Bs35SnX24wLk7cxmdrbU4ZnyeMuqxwGHIjVmolYolwcWlZqNwqCZeUJIoSpSWRoliiuCgaK41bRdFwqCxeGkxYkXi8tDhcUVqSKItVlCRM0bZi4XBRrKy8wioOlUTLg5FYOBpMFJWGQ8FoLFwai4UjJSXRcDhWEklEyiKhUDQRjgSLS0vLgiWhcFmIKz5P2PGpy9l1lGl2/aQ9u35KioBz8XuSQayfZhq4nmacvai2eIqhLZ5haotnGNsiyjSTa+PzmRxXPuzo85kcV99vK2QmR9gvLcJYW23TMznnZj3JNJN7VuJM7lnmmdyzDKKw839wJvdcvj8FZmemmcJzwmZyGwlncm0JZ3Jc8dlozORqGhT8vATHyZNrgHle4gDzPPMA8zzDANOhjgYYyvu8PrpXtMUA45VXxzqaAXjl+QLhAE3Y/6yOTAPAC0kM0F7b9MV8uoFwi+VRHw3QHZji8+L/0VLrS/ZS68vYg0xBb5tV0wM9lE+oef5dHUJx4Qi8bkNqUeVqQ691veLzeKiEeYXhwuhVpovEVxmXol9maovXmNriNeZleY622NXny/Jc+dDZ58vyXH2/i5BlecJ+aRHG2uqSXpZ3blVjFlWbmBe7r3OumrzCNAi8zrhqoji/ziAK3YQsy79CeCH4Rr4/BaYb06zyjTpYlqeMz5uEy/JdCGf9XPF581+Y9XN9fekte9b/thQB5+L3FoNYv8M0cL3DOHtRbfE2Q1u8y9QW7zJ/VYbjyt7y+UyOKx9CPp/JcfX9sJCZHGG/tAhjbYXTMznnZr3FNJN7T+JM7j3mmdx7DKJQ+h+cyb2f70+BKWWaKbwvbCb3AeFMLkw4k+OKzwf/wgNWL+Xz5L2UAeZDiQPMh8wDzIcMA0yZkAesKAWsM9MVrFdeewh5wOojwgGasP9ZezANAB/VwQNWHxM+YNWlqT8H6DKm+HyMxId61hslfGffRMK6PiEcy+ry/X+fMF04fJrPSPjTfPp6PyMc2Lj8/iy/uoGJ6q3T9/9NFPL+vyjT+/8+r+1q2mun+4zwasBUdU36/+Gx2S/sBPoSe2yWIgCfMyjT58w35Kj8zmD02yvHr3x+U1N1zK8YppVfM02xv2a8kfclU1t8w9QW3zA/nsrRFnv5/KYmVz708PlNTa6+v7eQm5qE/dIijLW1d/qmpnOrGrOo2sS8qPyWc835K6ZB4FvGNWfF+VsGUegt5KbmV4QXgt/l+1NgejOtyX1XBzc1KePzPeFNzb0J10y54vP9v/B46kSm2fUP9uz6RykCzsXvBwax/olp4PqJcfai2uJHhrb4maktfmZsi4lMM7m+Pp/JceVDP5/P5Lj6/r5CZnKE/dIijLW1b3om59ysH5hmcr9InMn9wjyT+4VBFPb/D87kfs33p8DszzRT+FXYTO43wpncvoQzOa74/PYvPJ76RT5P3ksZYH6XOMD8zjzA/M4wwAwU8ngqpYD1YLqC9cprkJDHU/8gHKAJ+581iGkA+KMOHk/9k/Dx1L2b+nOAHsgUnz//j5Za/7KXWv/GHmQKetusmh7ooXxCzWtdhA9FsbxvTrchtahytaHnR14L/B2PqoQpoL8wqlfAI1aq3qV2vdRt8TdTW2QwtUVGAe+yPEdbDPH5sjxXPgz1+bI8V98fJmRZnrBfWoSxtoall+WdW9WYRdUm5sVuZgHjqkmAaRAwSVOvmijOmQyicLCQZXkzZl59zirwp8AczDSrzCrgX5anjE92Ad2sfxjhrJ8rPtkF/z9v/c8p2PQ3V4qAc/HLYRDrPKaBK49x9qLaIpehLfKZ2iK/gPerMhxX9iN9PpPjyodRPp/JcfX90UJmcoT90iKMtTU6PZNzblYOsZ7qrUDiTK6AeSZXwCAK4/6DM7n6Bf4UmHFMM4X6wmZyDQhncqMJZ3Jc8WlQUPcPWP0l5AErrgGmocQBpiHzANOQYYCJCnnAilLAhjJdwXrlVS7kAatGhAM0Yf+zypkGgEYF/A9YNS6gGwiHNfXnAB1lik/jWlZ3KJ57UdrjfCYp6G2zKPWsic9XTs+CFbJz8+hj05TZb4rfTH2F4QVVlO/C3cbnbaj6tooz9SoWYc5YTQlzuZnP46H6SzOG69DmzM/xeb5OBv1qzuB3vKm/tTvB5HeC6VqXWmsJ42MliFeomwS2XIygjr2K+4S86vo54kVcd8hsjxb2beuWBXbj6AtGteNPpkabYCeMsyO6TZh4YtPWgnCQaVkgI/kofW5lTrAi4VCoNKyOi8SCVlEMbvqFQrHyomBFMFoRipcVWWWJolBRuCJWUQ51Rq1EMBGtKEtENvGqyxdlt2JaYdu2gJHwtgX09W5H2Bm4/N6uoLqBiepluYpraXOlrrc108pq64J/LrtTx49SFJVA5ARo7h9vbcNEqOpeRa5NIsDccJ0C/r40sCpKYvGKSAlH3Rhv6vYdnCHi0svibF8zkba3RXYH52Wd2lHoIEB9SbI94SjUhnDOa7ZDG7sdlAjkBermMmUHhssU7ZPadoT62yq/dNBbBqoX4dX/94NI/2V/Vgfrz22Nz2fYx+hy7WDfToCdAe0Lqu16o150KiQMeDvCjtiBOHjO2HQwYrCT8Xln43P7gi1j0xH+3wmwC2BXJDbUib0DYXt2rKP5lecvkRK2344+X7hsCR1ofTa98LUVEmtKnwuJL5XzA3UzSBHWFWxo8OxsX5F0sf92tf/uZv/d3f7bzf4btP9a9t+Q/Tds/y2y/xbbf0ucVzpd7bmbaeuG2EKIrdi21eUiRmemRYzSAkbCpQyLGBGfL2IovyMMixh12dm6MHW2sgJGwmUMnW0Pn3c25fceQlbMutqJQX3ZSSkIexbITNjdmBK2ewEj4e4MCbuXzxNW+b2X8NFhd6bO1qOAkXAPhs62t887m/J7byGjQzc7MahHB0pB6Mk8QQ9626quVvZkuCe1j8/9rspDBr97Cb0aCDIJdO8CRsK9GQS6j88FWvndR/jVgMXU2foWMBLuy9DZ+vm8sym/+wm5GgjZiUF9NUApCPv6fFRUo3YvhlFxP5/7rfr4vgx+9xd6NRBmEugBBYyEBzAI9P4+F2jl9/7CrwaKmDrbAQWMhA9g6GwDfd7ZlN8DhVwNFNuJQX01QCkIg3w+KqpRuz/DqHigz/1WfXwQg9+Dif3WGzXPIWQ8w0WcPIe65xlzGrAHqIYYD0p1Nj53MT4PdTxANQz+PxwwAnBQAf/DbV3p+pQ1jFDbDmbq69TtR3gXzBpO2H6HCGk/whs71gjC9htJfFHp1IaDDQ04xPg80vh8kEMbRsH/RwPGAA6tA23oRhibUYSxGSukbxOuiVujCdtvnJD2I1zmtcYQtt94Zm0Ya2jAOOPzeOPzoQ5tiML/ywEVgFgdaEOIMDZRwtjEhfRtwhUyq5yw/RJC2o9w0ceqIGy/CczaEDc0IGF8nmB8jjm0YSL8fxLgMMDkOtCGYsLYTCSMzRTm2EwxYjDJ+HyY8XmyIzZT4f/TANMBMwq2rM+MCcWayWCGNYmZhLHG/A562yzVvjMZ/K5k7ksn5Fb3mUqj/5QYn4dlbNmXZsG+2YA5gMML+L98Rdmes5jbs6b1l661tOdc2DcPMB+wwG5PdWPDWMLe4gbHwoJA3f5yCOV3uDMMnotsDxcXOBygHik6EfagRcmPFFv9tYDFxPdd66pDzC3g6RBL7I5wBHeHmEs43C8h7BBHCO0QC5k6xFK7IxzJ3SEWEnaIpYQd4kji8ao+oIHRjtU8i0Il8ZKiaDweDsbLyiIVVrgiUhGPV8Si4WhpaSRYGiuPR2PFofKKUCJcngjGo/FIsVVeVF5qBSusvxz1WeBvcUk0WBJJlATDwVA4VBSsKCspL4pFi4tKi0pKoLpweaTUsiqKQ1ZFaVEkZIWiVnF5BdyMiUdL/qKNb9DZ4UORUHFFaVlFRUm0uKK8PB5PlMZKopGEVV4StULlYSATDYcjRUXBaDwRLy8Kl5VYRZGKCESotCJYVPYPfyG0iZilvCsvDZaEYiXlxSrw8XBJeVmwNFwSLg4mShLlUVjSCEUqisDlULCsrDhYliguDVpxbn+D8Vi5FQ+VhSvCFfEyqzwBTsThYzRaHIyFKoqLrES0LAYdEHiBu8FwPFFuVSSioYrycLi4NPEPf8NFVqyktDgRhejGK+JhCDj0jnBFNFwE7RAut8rKS+JlpSWhYFFJKdiKoPlCRRVF0MqxeLiY3d8iaOcwBAtSLQg5F6uIhOKRaHFxtKw4FCuKJULBUHFJIh6EXIuVFZWBGWIShYWJYLQ8Yf2TXzSiWqYE7sjBP4niWATSuKgsVhRJQOoUxYLQPYLlZZF4rNQqjZaVF4dD0URJGDKjOBwsLbM4/NUv31OfFxnXl4uNz0uMz0cYn5can4+0PxPyI89fVd9RwHMZ4OiCTZe/SsuyAzVvVL5w1A1dsrw8XBTT3702Nz9fvnNxpLyi5OK4kIEjB8+jhPBsw8Rz80a9ENGG8CLxGMIFLS0i6q+qtzCwSRjVhd4spF2oA0lYF2uHqyeEZ4YQnplCeGYJ4ZkthGeOEJ65QnjmCeGZL4RngRCe9YXwbCCEZ0MhPBsJ4dlYCM8mQng2FcJzGyE8mwnh2VwIzxZCeLYUwrOVEJ7bCuG5nRCerYXw3F4Izx2E8GwjhOeOQni2FcKzUAjPdkJ47iSE585CeLYXwrODEJ4dhfA8hvkGm7S6yd+6kpFuX866VbwKA/jGxT9db7redL3petP1putN15uuN11vul4/1ktZN3adLeHZO2qOB2ak+1e63nS96XrT9abrTdebrjddb7pef9ZLWHfVtfngAL4RnSMdx3S96XrT9abrTdebrjddb7redL3petP1putN15uuN11vut50vel60/Wm603Xm643XW+63nS96XqJ666L5/yOEvAiT84XT6brTdebrjddb7redL3petP1putN1+ulXsK6q57zQ08gsF3S9abrTdebrjddb7redL3petP1putN15uuN11vut50ven7nLs46v4v/qiihHeucLQjVX+yKkpi8YpICXW9XHw1bW6+5O93F/DMwOAM/3PcPv1cQ7redL3petP1putN15uuN11vul6f1ktYd9U8d2kA34jOkY5jut50vel60/Wm603Xm643XW+63nS96XrT9abrTdebrjddb7redL3petP1putN15uuN11vut50vel60/Wm603Xm643XW+63nS96XrT9abrTdebrjddb7redL11UG+67nTd6bqT29Rz9DkBfOPin65XZr1cdVN/JzpbCM8cITxzhfDME8IzXwjPAiE86wvh2UAIz4ZCeDYSwrOxEJ5NhPBsKoTnNkJ4NhPCs7kQni2E8GwphGcrITy3FcJzOyE8Wwvhub0QnjsQ8jTfM+jcONoiXW+63nS96XrT9abrTdebrjddb7redL3petP1putN15uuN11vut50vel60/X++/VS1q3WmZsE8E1au6TrTdebrjdd7/9LvZR1K51vEMA3ae2Srjddb7peuTrUPIBv0tolXW+63nS96XrT9abr3Vq9Un7jl5rn3AIZPBcK4cnx+9PmJqDuEs72bSOkHwSF8LSE8AwJ4bmbEJ67C+HZTQhPwrqCmQbP5QU214xN/z8W/r8CcBxgJeB4wAmAEwEnAU4GnAI4FXAaYBXgdMAZgDMBZwHOBpwDOBdwHuB8wAWACwEXAS4GXAK4FHAZ4HLAFYArAVcBrgZcA7gWsBpwHeB6wA2AGwE3AW4GrAHcArgVcBvgdsAdgDsBdwHuBqwF3AO4F3Af4H7AA4AHAesA6wEPAR4GPAJ4FPAY4HHABsATgCcBTwGeBjwDeBbwHGAj4HnAC4AXAS8BXga8AngV8BrgdcAbgDcBbwHeBrwDeBfwHuB9wAeADwEfAT4GfAL4FPAZ4HPAF4AvAV8BvgZ8A/gW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","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_contract_instance_internal","get_nullifier_membership_witness","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_integer_quotient","directive_invert"]},{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim_bulk"],"assert_messages":{"707":"Array index out of bounds","314":"SharedImmutable already initialized","503":"Array index out of bounds","631":"attempt to add with overflow","561":"Array index out of bounds","762":"Array index out of bounds","884":"Array index out of bounds","872":"attempt to add with overflow","741":"attempt to add with overflow","476":"Array index out of bounds","537":"Array index out of bounds","83":"Sender is not the registry admin","147":"Array index out of bounds","720":"attempt to add with overflow","519":"Array index out of bounds","900":"Array index out of bounds","577":"Array index out of bounds","129":"Array index out of bounds","699":"Array index out of bounds","824":"attempt to add with overflow","434":"Array index out of bounds","754":"Array index out of bounds","236":"DKIM key has already been registered","617":"Array index out of bounds","422":"attempt to add with overflow","934":"attempt to add with overflow","218":"Storage slot 0 not allowed. Storage slots must start from 1.","599":"Array index out of bounds","730":"Array index out of bounds","913":"attempt to add with overflow","590":"attempt to add with overflow","453":"attempt to add with overflow","770":"Array index out of bounds","511":"attempt to add with overflow","892":"Array index out of bounds","441":"Array index out of bounds","569":"Array index out of bounds","691":"Array index out of bounds","48":"Not initialized","429":"attempt to add with overflow","810":"Array index out of bounds","295":"Storage slot 0 not allowed. Storage slots must start from 1.","487":"attempt to add with overflow","548":"attempt to add with overflow","679":"attempt to add with overflow","923":"Array index out of bounds","792":"Array index out of bounds","469":"Array index out of bounds","783":"attempt to add with overflow","527":"attempt to add with overflow","399":"Array index out of bounds","140":"Array index out of bounds","393":"attempt to add with overflow"}},{"name":"get_participant_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/+1dXWhkZxk+k8nMZCabZDa72UwmmWSyeuPdpE12t964dbdgFbYVbEFRaLZJ3dDsZslOul29saJ3LbRXglX8AX/AeqXQhQoK/lxooQpCi/VGLAgWQRSs4O9+yXkyzzz7nZ8553w7bTkHwpn55nl/vvf9znu+9/2+c1LwDo6JW38F/3PJP494tx/AnPXPnXTHSoa8Oi71LGSoZ5F0rJGtTfuob//yrb/Krb+xW39VHzfuY4+Qz/aZjBITNQATxBVyxGd+zsLrb/Rl2T+vd7ubl692292d9uW97e7W1e0b7etb3UvtnSc2dx/b3rnODP5BX+b88727u+s32ltXNjafbO/sdds7j7Uv7uxd2bjGhP+hL9P++eretUvBFKMjCUVNEeHC7Z1c39gI7t9MCtolok1k3Pck7XEnreTVFN0+k1TrD6QQei6p0A+nEHohqdCHUgj9eFKhj6QQupFU6OMphO4kFfpECqGfSSr0KSKMF9CeTnuVPptU1+dTGOhrSYV+J4XQ7yUV+oMUQl9MKvTHKYT+NKnQX6UQ+kpSoa+mEPp6UqF/TCH0zylo30p7vf4rhfD/JbVWuZhcaK2YUOjxFELXiDaRme9JqvX5FFp/KKnQB1MI/VhSoZ9MIfSRpEIvpRC6nVRoN4XQJ5MK/VwKoV9IKvTpFEKfTSr0yymEfiMF7beSKvxCUsIXB9T2MM9+3Sc0OTmCOPL8s/73TrpjpUqKZsr7zNo+75Ibve8yvMtueHdMLeTc2AEv6A9ZxiXn/d9whvwJ/3eP6Ce8Xl0GeHM6RrqDt+djwQM+N32tOPHR6lrV1ydz3p3O+r49xvrtt28Pv61CbSWyDc4vFXu/PzDWsw/aHhQfGZve57eh1mXOk/7nT292P7i98+jjF/YuX9zc7ZvqkAU8sYYehuN0j+O5nSvd3fVHu/dubOxuXuu78CsWrl4AxxpxvLS+deX+DaYaS8bp4c3da1s7V5iqGpNTlTgV/L+z/vdOysPwHidZWfGd8Hp+535MUD+yG99rK2pDHi2QWSOdso7dBZID+VzjhR6TolOd2tjHk8JrUngx3XhOl5rOjM0pwmd5D2OdphL2JR8bbw+63H+5/3J75v7L6ZLR5f7L/ZfbM/dfTpeMLvdf7r/cnsP3nzmjhsM1Ja0BTVh49W0W9M9MB16e8PIsvFSHKdKV9YrTR+DxW5U+F3zsWf97J92xMuHL5MPIO0rysqvBbKyF2RMya6STi/rgUZFfFx+Y/k+76f9qgXhD/rT03/jkmLQZuuP+55JPB8w06Q/McaIr0fdX/XOd6PkaRJsnMmAbsyrwG9KTbWkOd7brrIaNHcisea7G7sHYUd8dFfuw76bJJuyPDK/fDvuRZUT5MUs6hz5fr3r964JZXouG9wz1NyOdz5gxcMLrP4ysWTc2Cr0uILNGOrm4LmZFPmTxddEQnerUxjGoIbwawitrOtVdr2kbbxtmLgamKZgTFsx8DD4LMTCtGJjFGJilGJi2YPSeavy/7PUf5po4STzu1DwDMmukk4tr4qTIXxabmHkeVrFvrUxf2OluHq6VM/1vqQ1n7R8wPJfj2MYxHuOdH7ZpWNrmLG1NS9u8pW3B0taytC1a2pakzRx638XB82m+T7T9zza7eIQb8W63J9pZpyx/9xzyzvp3tI0GfB6R9rCxadrZD7Zrgue5wICGcz7oAGyRPquuReLBvIuE1Xyj6rnNQSZj2EHzlEnRdYr6A6zmioUM9XaXF3bOuJvnddbc3Wc6dxvebTe879rfA0a+NofJv6YLPXmIlcgJgZ+mdmD+MtLjMVPo8cXvEyQrrKaCfsatqaBmhqPqudr/s3o67L4PmTWvv46X9bV9ROTzg6ywidqXa0g8N41Tx8rpwumm3iF65n7I7Zn7IfdDbs87S5f7IfdDTpf7IfdDTpf74e1Lx/U/zuXBS/PuIxZewHOdQp+PCqsh2GodNeJVS8gLdOiju2e0OvvrnotueJ82vFtueJ8y9lgWO5la1k2qh2HdAfUw4LkeBkyD6mEvUT0Mv/Nenji+Nn2fd9P3i2HjaJ50c1nX0nVJW12rKTrVqY2ve10HbQqvnO7dR2euIx6r4KXjat7CC3j8NiF04OUJL8/CS3XIMm4bXi1pM/HlDxSjYBfEKOCPUDswbxZ6PN6gGKXXWZBta6Q/3xOnSd+S0Jk2rP81qW1UZI5Lf0akP7jHmLjYIJ0yjEsdw29O+tgQ+SXC/J38gL0XWAdsCp3BzApv0LSI96zw5rVqj2ww58QGq6e4LyXpyxy1A/NWiJ7MC/3G/ZDXJnWvC2gg14zHhujA47Zmkae6T1t0/2+I7lOEmw+ROUU6oY33gmU8RtcNP927Cfkz1H6IGQnu4/616W8aOUG6j4450f2iYfsLeucExnqJ5Ol6PTA8XmYEAxrYoU4YjhU6FpuEBwb4smB4XAFTD7Et3xt4j1pN+Nn0ahEemFnRq2XRC5gTET5XWr2n8DXK817eF9Ak3bKOwfNkC/bBUeorMO2Rnh6874hjDe8zCIrvy8R7TngHxWA38/O1DvelJH2Zp3Zg3huiJ/NCv7FGz9eUzptAA7m2eQLPLd5H+c+fyCfvpLG04nAsrUT4SOfAkMcxAHqWBdO09GUtYuy6mUOt9c2h9B7csNjlngi76NzANnZ1fM+JXXg+y/0OsnnbIj/M5sCcHaLNZ0mfIJsDcz7C5rqHOY7NZ8UuPC+KY/OTFvlhNgfmI0O0edBck20OzAMRNtc5QByb2+bJs6JDmM0nLPLDbA7Mw0O0Oc9xg2wOzCcibK7zyDg2nxG7cJ4Qx+bHLPLDbA7M+hBtrvmGzebAbEbYXOf3cWx+XOwy5dnn90E2b1nkh9kcmO0h2rxK+gTZHJirETavev12iWPzqtiF9wfHsfmiRX6YzYG5HmFzfr+e6zl3k+SiHZjPZjDnVr80xC68flClNlvdI0j3aYvunw/RnWstR0JkTpFOrAeeQcF8Hxiu37l6r6jhh3dCYk5eFvklwjwz0q+HOTDfHxO6gterbY7SH/oE3iXhHTSO3djgoH5XIX24L2WLDZ6LWR9qkO5u6kOrp7U+dGhXklch/Xh88XWl73sFDexQJwzn8HrNMh4YzcGA4esPmK8MpX5gHwMN6S+Pga9HxLI4Ntf6QUXswvUw5AXGx2NkD/AKiovsB83LGsKH87LvRvjBZS1d/VAVG7AfXhjQDxxr1S7AVKif5qgTBrmC8QPsx2/C1TyQeQDDsYUxnI8C88MIP7h5T7LdD7PSX/bDzQH9oM8Gs12AqYhd6oRB/sAxj+dYQbk2+0HzN80DOX/7SYQf3DzbHR6XOJcG5mcZxCXNq21xCRjkFLw2wXFJ80VbXNK5bkN481z35aHMde1+mCG5aAfm1wP6wbZmozG9InapEwZ5Bsclft+BxiXmAYzmeTPCh/O81yL8wM8736m4xDk3ML/PIC5p/m2LS8BwnciWb+t7A2zraVrLawpvruW9EbGehnyE/V0TfkHrD9BxmWiB0TndskVHYN6MmC8vW/ThPWVBz1iOUjswf6U1lS8VezyQk4wID9SWqiTfRY7VIp1tta0SYf5JvuDn/UepH1wTC1qvKdF5XngHXQ/q+7b/mXM66FkWzIKlL/+OiBNu9ioevOdJ9/lobYvX4rDhJu5aE8Ysxwl934detyb/XxQd4q5jqc1t9SBgKiF9cZdDHdg8aB2LcyhgxiNsrvNym801h7KtY7VEhyLhdPwVvdv37oCmJbxB42JdbCbENhNe/3UK/p7ogIP3y4EO8zdeczph0RW85iy8gOfcdIn4msP0tUVxmMcB1/hOUjswXy32eLSLPb6g4etqwdIHjecLIX1grI4pWx1S/c37nVSnZgidjbfaXucIvDY7F0I3yLpvm3hr3dz2jgKWp/dU3qfg6J1bfbVn3PdmRT7Xb0/RGEQOWRQb8D6FqvDmnBfnqvAexpoH68V94RwWmPdHxBTULZdIdzd1y7WVOPvatB5gy5GC6o+8rw0Yfi+LvlOL8Sq/LBiejwJzX8QYcFOnsa/BQD8eG8DcH3HPDaqbhNVpGmIXrtNwPqQ1NNt8k3kAo/mQxn/Ohz4a4Qc38Sh8/xnnz8A8NKAf9P7LdgFG95/VCcP79mG/sHvHIHupeM4HzKeGMge1+2FObMB+WB/QD4PsA+SYAgzv54f9loiXzg9scQl4jUs8jwRmK8IPLNu1H5rSX/bD5QH9YNsTrzFd14brhOF6GezHc8A4dZqgfc8cl4DZG+IcQesnh8/fUTswNyL8EHTfDLsna7zmezLyYX52jeOSvh/TFpeC8irb8ydPRfjBzbqW3Q+L0l/2wxcH9IM+/xWWD0Aur2txHT9O3sI8VKeyYGxx6ZkhxqWgGgX7B5jnBqxRxIlLGq85LqHGYPwA+/GYR/6F37TOqbJKRAsM0zKG+w/M8xE5g9Ly+/E4T+XYGjQuebxpbNU5C8fWbw5lzndQ79I9ZzrH5Tzx2xFjSdd7lv3PYXM+XRvnvUi8HudmXaxzd8G7fR81549oB+b7MXPQeeLh6NmqVc1BD8cWyVN72+536jfQcC4TZ43alvvonHtJ+PCc+2aIbbn2Z6vX8fXWov/xXXFj+4PaBf2v5FGSBfuPEGaM9CjR959T7KtSYrpfy8X/dPbP5too+5+rY8F0o0JXJ0yZ91UJXYX0hi1/5Os3LvKLFj6oNZWFT4kwv6Sa6Ms0dkvC1/z+O8vvOAr9X/vqxej/ftxw6P+a+B+yRqn/wNTE//j+Gvl/PMD/VfI/xs34WDBdSejqhBkLGTdVi/9f8fWref1xJUNbrrCvzTj7PyJK2GU5kQAA","debug_symbols":"5Z3dbhtHEoXfRde+6Oqu/surLBaBkziBAcMOYmeBReB3X5kWSTmU2KvJeOY77JvAirvVdeTWd4ogT81fd7+8+enP3358+/7XDx/vfvjXX3fvPvz8+tPbD+/vv/rr86u7n/54++7d299+fPy/78KX/1g/rP/4++v3X778+On1H5/ufrAa/dXdm/e/fPlj8vvv8Ovbd2/ufvAcPr+6WF17eljczE5rzeITa3PMD2vzl+91XBvj53+/uovhnxfT/Li4lTIoxlN/WOulXRRjKxTT7WFxD3lQTAnHn0yJ5aKY+M+L6fGotnscFdPCw9oaLv+Z0pPFpFDLsZpkNirHzY/Xxq2d7033p2qvp4J67edvbTUfKnJcRRlXUcFVVHEVNVxFnVZRCriKDFdRxFWEY3bCMTvhmJ1wzE44ZiccsxOO2Y5jtuOY7ThmO47ZjmO245jtOGY7jtmOY7bjmJ1xzM44ZmccszOO2RnH7IxjdsYxO+OYnXHMzjhmFxyzC47ZBcfsgmN2wTG74JhdcMwuOGYXHLMLjtkVx+yKY3bFMbvimF1xzK44ZlccsyuO2RXH7IpjdsMxu+GY3XDMbjhmNxyzG47ZDcfshmN2wzG74ZjdcczuOGZ3HLM7jtkdx+yOY3bHMbvjmN1xzO44ZlvAQdsCjtoWcNi2gOO2BRy4LeDIbQGHbgs4dlvAwdsCj97Go7fx6G08ehuP3sajt/HobTx6G4/exqO38egdefSOPHpHHr15+UjjBSSNl5A0XkTSeBlJ44UkjZeSNF5M0ng5SeMFJY2XlDReVNJ4WUnjhSWNl5Y0XlzSeHlJ4wUmjZeYNF5k0niZSeOFJo2XmjRebNJ4uUnjBSeNl5w0XnTSeNlJ44UnjZeeNF580nj5SeMFKI2XoDRehNJ4GUrjhSiNl6I0XozSeDlK4wUpjZekNF6U0nhZSuOFKY2XpjRenNJ4eUrjBSqNl6g0XqTSeJlK44UqjZeqNF6s0ni5SuMFK42XrDRetNJ42UrjhSuNl640XrzSePlK4wUsjZewNF7E0ngZS+OFLI2XsrQ9Ypbd2/F7B3/8KJH7mi6Xx+pHBfd/PK+uX+vP4vUX8fqreP1NvP4uXX/cI3n6svo9l9Pjg7o/ImiyJ1anFI6VpNLtm9UHvTaZ3jiZ3jSZXp9ML77fWFkvvj9ZWS++n1lZL77/WVkvvl9aV69N1l/ZZP2VTdZf2WT91R55/F31TtZf2WT9lU3WX9lk/ZVN1l/FyfqrOFl/FSfrr+Jk/dUeEzN21TtZfxUn66/iZP1VnKy/ipP1V2my/ipN1l+lyfqrNFl/tcdMm131TtZfpcn6qzRZf5Um66/SZP2VT9Zf+WT9lU/WX/lk/dUeU6d21TtZf+WT9Vc+WX/lk/VXPll/lSfrr/Jk/VWerL/Kk/VXe8yF21XvZP1Vnqy/yvz+qpdy0vtlxd8V8DumkQJ+DzRQUPhdzWMFLV4q4PcpIwX8zmOkAN9L5JCOpeTgT/weuLwCvN8PFeAdfKSgCtyi4icFT3QVFd9V5JbiUUHL5VIBvqsYKsB3FSMFDd9VDBVs31Xcl538LCF/K+FQVCQWlYhFObGoTCyqEIuqxKIasagOLGqHsWb/R1FEonci0TuR6J1I9E4keicSvROJ3olE70CipwAkegpAoqcAJHoKQKKnACR6CkCipwAkegpAoqcAJHoKRKIbkehGJLoRiW5EohuR6EYkuhGJbkSiG5HoRiR6JBI9EokeiUSPRKJHItEjkeiRSPRIJHokEj0SiZ6IRE9Eoici0ROR6IlI9EQkeiISPRGJnohET0SiO5HoTiS6E4nuRKI7kehOJLoTie5EojuR6E4keiYSPROJnolEz0SiZyLRM5HomUj0TCR6JhI9E4leiEQvRKIXItELkeiFSPRCJHohEr0QiV6IRC9Eolci0SuR6JVI9EokeiUSvRKJXolEr0SiVyLRK5HojUh0YmY0ETOjiZgZTcTMaCJmRhMxM5qImdFEzIwmYmY0ETOjiZgZTcTMaCJmRhMxM5qImdFEzIwmYmY0ETOjiZgZdWJm1ImZUSdmRp2YGfUAJLoTM6NOzIw6MTPqxMyoEzOjTsyMOjEz6sTMqBMzo07MjDoxM+rEzKgTM6NOzIw6MTPqxMyoEzOjTsyMOjEz6sTMqBMzo07MjDoxM+rEzKgTM6NOzIw6MTPqxMyoEzOjTsyM+j5RutMTXO7/3MplUXv88+V0Lip7vyzKiUU9Y8gxnPalGMs3RR32lYX76sJ9beG+vmzfc3mi4T5buC8u3JcW7vOF+xbel7zwvuSF9yUvvC954X0pC+9LWXhfysL7Uhbel7LwvpSF96UsvC9l4X0pC+9LWXhf6sL7Uhfel7rwvtSF96UuvC914X2pC+9LXXhf6sL78tyHE+P5sRkp5n6577mfZ/Xzvt4u9+WF+575eaYaT/vu33G72PfcR3ViP/9ckrVhk1Pquck5/xTr1zPiBmekDc7wDc7IG5xRNjijbnBG2+CM/t3PyM994mPVM2yDM+IGZ6QNzvANzsgbnFFe7iUvPqOucUZpp5e95fFjpR7OaBuc0b//Gc99DmDVM2yDM+IGZ6R1zujheEa3+PczfIMz8gZnlA3OqBuc0TY4o3//M2LY4Azb4Iy4wRkb/J7HdX7PezzxqvvFGXmDM8oGZ9QNzmgbnNG//xlpwe/5YZ8t3BcX7ksL9+3xPvv9q6HzGyCPvvnDGyB5l0mew6IasagOLGqXtx+HRRmxqEgsKhGLcmJRmVgUkehOJLoTie5Eomci0XeZT3n/ozgXVZ4oyolFZWJRhVhUJRbViEV1YFG7zKccFmXEoiKxKCLRC5HohUj0QiR6IRK9EIleiESvRKJXItErkeiVSPRKJHolEr0SiV6JRK9Eolci0RuR6I1I9EYkeiMSvRGJ3ohEb0SiNyLRG5HojUj0TiR6JxK9E4neiUTvRKJ3ItE7keidSPROJHoHEr0EINFLABK9BCDRSwASvQQg0UsAEr0EINFLABK9BCDRSyAS3YhENyLRjUh0IxLdiEQ3ItGNSHQjEt2IRDci0SOR6JFI9EgkeiQSPRKJHolEj0SiRyLRI5HokUj0RCR6IhI9EYmeiERPRKInItETkeiJSPR9kpBXhma+dP1BRMeLuDo9o+yTslxTgKkLiOoCaCN5XyzA1QVkAQFX5m6UfdKmawqo6gL4bjwQoODE1wRkBSe+KkDBia8KUHDiqwIUnPiqAAUnvipA3YmzuhNndSfO6k6c1Z24qDtxUXfiou7ERd2J98mrrylA3YmLuhMXdScu6k5c1J24qjtxVXfiqu7EVd2J95kzsKYAdSeu6k5c1Z24qjtxVXfipu7ETd2Jm7oTN3Un3mc+xJoC1J24qTtxU3fipu7ETd2Ju7oTd3Un7upO3NWdeJ+5HmsKUHfiru7EXd2Ju7oTd3EnrkHciWsQd+IaxJ24BnEnrkHciWsQd+IaxJ24BnEnrkHciWtQd2JTd2JTd2JTd2JTd+J95uisKUDdiU3diU3diU3diU3diaO6E0d1J47qThzVnXif+UdrClB34qjuxFHdiaO6E0d1J07qTpzUnTipO3FSd+J95latKUDdiZOAE/d4mq3S/UKAgBNfFyDgxNcFCDjxVQEKM7auCxBw4usCaEZ2KIpmToeiaIZzKIpmIoeitsdS795ONbnZ4Hci3xf+sDybtfPqZAcFO8y7eamC1E4K3MqlgiSvwOUVZHkFRV5BlVfQ5BXw/WCgYIe5Ny9WUOJVBSavQMCTBwoEPHmggO/J7mcFxS4V8D15pIDvySMFfE8eKeB78kgB35MHCirfk0cK+J6cw7GUnOMTCviePFLA9+SRAr4njxQIeHLvZwXxUoGAJw8UCHjyQIGAJw8UCHjydQVNwJMHCviePFLA9+RvFPRLBXxPHinge/JIAd+T79/NPCqo4QkFfE8eKeB78kgB35NHCvieXEo6KbDwjYIn3r21dircWj2tjq0c9Ha+g6+rl+/36+rldwfr6uX3Euvq9cn0CnjkS/TmWo+L29mNUjyobeHG6FzC6QOyoVyqvTE2D9TeGJkHam+MywO1fCrX04f6cm02UOt+/LiEP/r8X7WvYvkvHVcUy3+VuaJYvtmuKJb/2nVFsfyXueuJNX4XtaJYfhO1olh+D7WiWH4LVfvpY5Xtby3UQYHjFbR0+gjH46eLnxTwe52RAn4DM1LA70pGCvitxkgBv38YKIj8pmCkgO/0IwV8+x4p4HvySIG8J0d5T47ynhzlPTnKe3KU9+Qk78lJ3pOTvCcneU/eYVjP2grkPTnJe3KS9+Qk78lJ3pNd3pNd3pNd3pNd3pN3mFG0tgJ5T3Z5T3Z5T3Z5TxYYVzVQkOU9Oct7ssDIsJECeU8WGBk2UiDvyQIjw0YK5D1ZYGTYSIG8JwuMDBspkPdkgZFhIwXyniwwMmykQN6TBUaGjRTIe7LAyLCRAnlPFhgZNlIg78kCI8NGCuQ9WWBk2EiBvCcLjAwbKZD3ZIGRYSMF8p4sMDJspEDekwVGho0UyHuywMiwkQJ5TxYYGTZSIO/JAiPDRgrkPVlgCNhIgbwnCwzqGimQ92SBYVojBfKe3OU9WWBE2UiBvCd3dU/uAqPfRgrUPbkLjGgbKVD35B7UPbkLzEcbKVD35C4wyWykQN2Tu8DMsYECgUFiIwXyniww8mukQN6T5ed4dfk5Xl1+jleXn+PV5adgdfkpWF1+ClaXn4LVBSYwrTeUvwtMa3rZKHM7Li4xXaq9sQcuDNQKPMBoRbU39rCj62oFpku98BEE/aTWL9Xe3MM0rqq9uYdpXFV7cw/TuKrWp1J7Y73UQO2t9VLX1d5aL3XtIThdYHrXmmpvrZe6qlZgKtiaamd6MFkXmDa2ptqZHkzWBaaYran25nqpq2pvrpe6qnaqXkpg6tqaaqfqpQSmua2pdqpeSmBK3FpqP99/+Z/Xf7x9/dO7Nx/vt3z52z/f//zp7Yf3D19++u/vX//mfvH/AA==","brillig_names":["get_participant_escrows"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":22,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"get_managed_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_managed_escrows"]},{"name":"check_and_register_participant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_notes_internal","get_collapse_hints","pack_arguments_oracle_wrapper","call_private_function_internal","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"2426":"attempt to add with overflow","2292":"Array index out of bounds","945":"Storage slot 0 not allowed. Storage slots must start from 1.","1969":"Array index out of bounds","2804":"Array index out of bounds","5230":"Array index out of bounds","2725":"Array index out of bounds","354":"Array index out of bounds","4828":"Array index out of bounds","4505":"Array index out of bounds","5450":"attempt to add with overflow","4615":"attempt to add with overflow","2433":"Array index out of bounds","3000":"attempt to add with overflow","2354":"attempt to add with overflow","5103":"Array index out of bounds","5347":"Array index out of bounds","5536":"attempt to add with overflow","4567":"attempt to add with overflow","660":"attempt to add with overflow","1873":"attempt to add with overflow","4677":"attempt to add with overflow","2306":"attempt to add with overflow","3897":"attempt to add with overflow","2227":"Array index out of bounds","1904":"attempt to add with overflow","1770":"Array index out of bounds","5354":"Array index out of bounds","1179":"Function set_contract_registered can only be called internally","2203":"Array index out of bounds","3794":"Array index out of bounds","3471":"Array index out of bounds","3983":"Array index out of bounds","4172":"DKIM key has already been registered","1990":"attempt to add with overflow","3014":"Array index out of bounds","5062":"Array index out of bounds","5385":"attempt to add with overflow","5440":"attempt to add with overflow","3447":"Array index out of bounds","2100":"Array index out of bounds","4849":"attempt to add with overflow","4526":"attempt to add with overflow","1832":"attempt to add with overflow","4447":"attempt to add with overflow","217":"attempt to add with overflow","1430":"Not initialized","3344":"Array index out of bounds","3021":"Array index out of bounds","4746":"Array index out of bounds","4423":"attempt to add with overflow","571":"Initialization hash does not match","1784":"attempt to add with overflow","3509":"Array index out of bounds","3887":"attempt to add with overflow","4076":"Array index out of bounds","1705":"Array index out of bounds","2918":"Array index out of bounds","2595":"Array index out of bounds","4643":"Array index out of bounds","2138":"attempt to add with overflow","3351":"Array index out of bounds","4698":"Array index out of bounds","1681":"Array index out of bounds","2193":"attempt to add with overflow","2382":"Array index out of bounds","2571":"Array index out of bounds","4808":"attempt to add with overflow","4942":"Array index out of bounds","5454":"Array index out of bounds","2169":"Array index out of bounds","4083":"Array index out of bounds","365":"attempt to add with overflow","877":"Sender is not registry admin","3303":"attempt to add with overflow","2468":"Array index out of bounds","3437":"attempt to add with overflow","4004":"attempt to add with overflow","3224":"SharedImmutable already initialized","3413":"Array index out of bounds","4760":"attempt to add with overflow","5138":"Array index out of bounds","5461":"Array index out of bounds","2633":"Array index out of bounds","4358":"attempt to add with overflow","963":"DKIM key has already been registered","3901":"Array index out of bounds","2475":"Array index out of bounds","4389":"attempt to add with overflow","3609":"Array index out of bounds","1238":"Storage slot 0 not allowed. Storage slots must start from 1.","3664":"Array index out of bounds","4365":"attempt to add with overflow","4231":"Storage slot 0 not allowed. Storage slots must start from 1.","1860":"Array index out of bounds","2561":"attempt to add with overflow","3908":"Array index out of bounds","1915":"Array index out of bounds","3128":"Storage slot 0 not allowed. Storage slots must start from 1.","3640":"Array index out of bounds","5365":"attempt to add with overflow","4719":"attempt to add with overflow","2537":"Array index out of bounds","166":"attempt to add with overflow","2214":"attempt to add with overflow","1434":"Function get_escrow_class_id can only be called statically","3994":"attempt to add with overflow","4884":"Array index out of bounds","142":"attempt to add with overflow","3458":"attempt to add with overflow","1977":"Array index out of bounds","118":"attempt to add with overflow","3379":"Array index out of bounds","3702":"Array index out of bounds","2733":"Array index out of bounds","4970":"Array index out of bounds","5238":"Array index out of bounds","2788":"Array index out of bounds","4513":"Array index out of bounds","2142":"Array index out of bounds","4836":"Array index out of bounds","2008":"Array index out of bounds","3032":"attempt to add with overflow","5482":"attempt to add with overflow","2764":"Array index out of bounds","771":"Sender is not the registry admin","3386":"Array index out of bounds","5111":"Array index out of bounds","3630":"attempt to add with overflow","4008":"Array index out of bounds","2149":"Array index out of bounds","3039":"Array index out of bounds","1692":"attempt to add with overflow","3929":"attempt to add with overflow","2582":"attempt to add with overflow","2826":"Array index out of bounds","2503":"Array index out of bounds","3527":"Array index out of bounds","1022":"Storage slot 0 not allowed. Storage slots must start from 1.","2235":"Array index out of bounds","4015":"Array index out of bounds","5472":"attempt to add with overflow","3802":"Array index out of bounds","3479":"Array index out of bounds","2510":"Array index out of bounds","5070":"Array index out of bounds","5259":"attempt to add with overflow","3589":"attempt to add with overflow","2754":"attempt to add with overflow","2108":"Array index out of bounds","3833":"Array index out of bounds","5290":"Array index out of bounds","4455":"Array index out of bounds","5156":"Array index out of bounds","2651":"Array index out of bounds","3864":"attempt to add with overflow","3541":"attempt to add with overflow","3919":"attempt to add with overflow","5132":"attempt to add with overflow","1926":"attempt to add with overflow","3651":"attempt to add with overflow","1713":"Array index out of bounds","2926":"Array index out of bounds","2603":"Array index out of bounds","5486":"Array index out of bounds","4706":"Array index out of bounds","5218":"attempt to add with overflow","1500":"attempt to add with overflow","2713":"attempt to add with overflow","4627":"Array index out of bounds","2256":"attempt to add with overflow","2957":"Array index out of bounds","3146":"DKIM key has already been registered","4036":"attempt to add with overflow","2177":"attempt to add with overflow","2366":"Array index out of bounds","4926":"Array index out of bounds","5493":"Array index out of bounds","5170":"attempt to add with overflow","3823":"attempt to add with overflow","3500":"attempt to add with overflow","2665":"attempt to add with overflow","1318":"attempt to add with overflow","4335":"Array index out of bounds","4902":"Array index out of bounds","3421":"attempt to add with overflow","3933":"Array index out of bounds","2775":"attempt to add with overflow","5091":"attempt to add with overflow","2129":"attempt to add with overflow","1160":"attempt to add with overflow","3397":"attempt to add with overflow","3720":"Array index out of bounds","5311":"attempt to add with overflow","4988":"Array index out of bounds","2160":"attempt to add with overflow","1514":"Not initialized","2026":"Array index out of bounds","2404":"attempt to add with overflow","3050":"Array index out of bounds","3617":"Array index out of bounds","3940":"Array index out of bounds","3672":"Array index out of bounds","5397":"Array index out of bounds","844":"attempt to add with overflow","1734":"attempt to add with overflow","2947":"attempt to add with overflow","2624":"attempt to add with overflow","3782":"attempt to add with overflow","3971":"attempt to add with overflow","4026":"attempt to add with overflow","820":"attempt to add with overflow","1332":"Not initialized","1844":"Array index out of bounds","2545":"attempt to add with overflow","2088":"attempt to add with overflow","3057":"Array index out of bounds","2978":"attempt to add with overflow","5050":"attempt to add with overflow","2844":"Array index out of bounds","2521":"attempt to add with overflow","1174":"Not initialized","3734":"attempt to add with overflow","4892":"attempt to add with overflow","5002":"attempt to add with overflow","5514":"attempt to add with overflow","3332":"attempt to add with overflow","3844":"attempt to add with overflow","4868":"Array index out of bounds","5246":"Array index out of bounds","2040":"attempt to add with overflow","2741":"Array index out of bounds","5301":"attempt to add with overflow","2796":"Array index out of bounds","1961":"Array index out of bounds","3363":"attempt to add with overflow","858":"Not initialized","1882":"attempt to add with overflow","2906":"attempt to add with overflow","1937":"Array index out of bounds","4497":"Array index out of bounds","3339":"attempt to add with overflow","4040":"Array index out of bounds","3205":"Storage slot 0 not allowed. Storage slots must start from 1.","4820":"Array index out of bounds","5119":"Array index out of bounds","4473":"Array index out of bounds","3693":"attempt to add with overflow","2858":"attempt to add with overflow","5418":"attempt to add with overflow","2456":"attempt to add with overflow","597":"SharedImmutable already initialized","2968":"attempt to add with overflow","4047":"Array index out of bounds","4370":"Array index out of bounds","2243":"Array index out of bounds","5315":"Array index out of bounds","5504":"attempt to add with overflow","2487":"attempt to add with overflow","4535":"Array index out of bounds","4913":"attempt to add with overflow","1518":"Function get_escrow_registry_status can only be called statically","2408":"Array index out of bounds","2274":"Array index out of bounds","2463":"attempt to add with overflow","3487":"Array index out of bounds","3810":"Array index out of bounds","4377":"Array index out of bounds","5078":"Array index out of bounds","5322":"Array index out of bounds","2116":"Array index out of bounds","2817":"attempt to add with overflow","1336":"Function check_dkim_key_hash_public can only be called statically","2415":"Array index out of bounds","3951":"attempt to add with overflow","1257":"SharedImmutable already initialized","2982":"Array index out of bounds","4329":"attempt to add with overflow","4463":"attempt to add with overflow","5408":"attempt to add with overflow","4250":"SharedImmutable already initialized","343":"attempt to add with overflow","4439":"Array index out of bounds","5518":"Array index out of bounds","1721":"Array index out of bounds","2934":"Array index out of bounds","2611":"Array index out of bounds","752":"Not initialized","2989":"Array index out of bounds","1886":"Array index out of bounds","4635":"Array index out of bounds","1752":"Array index out of bounds","5525":"Array index out of bounds","4690":"Array index out of bounds","2185":"Array index out of bounds","2374":"Array index out of bounds","4934":"Array index out of bounds","4154":"Storage slot 0 not allowed. Storage slots must start from 1.","4666":"Array index out of bounds","5422":"Array index out of bounds","1893":"Array index out of bounds","3429":"Array index out of bounds","5343":"attempt to add with overflow","1948":"attempt to add with overflow","711":"attempt to add with overflow","4484":"attempt to add with overflow","577":"Initializer address is not the contract deployer","4728":"Array index out of bounds","309":"attempt to add with overflow","4405":"Array index out of bounds","5429":"Array index out of bounds","1577":"Storage slot 0 not allowed. Storage slots must start from 1.","3680":"Array index out of bounds","4058":"attempt to add with overflow","1041":"SharedImmutable already initialized","3601":"Array index out of bounds","3010":"attempt to add with overflow","1852":"Array index out of bounds","2553":"Array index out of bounds","4412":"Array index out of bounds","1395":"Storage slot 0 not allowed. Storage slots must start from 1.","4656":"attempt to add with overflow","3309":"Array index out of bounds","3876":"Array index out of bounds","4065":"Array index out of bounds","5278":"attempt to add with overflow","347":"Array index out of bounds","2395":"attempt to add with overflow","4955":"attempt to add with overflow","5333":"attempt to add with overflow","4876":"attempt to add with overflow","4553":"Array index out of bounds"}},{"name":"get_escrow_registry_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_escrow_registry_status"],"assert_messages":{"311":"Array index out of bounds","180":"Array index out of bounds","20":"Function get_escrow_registry_status can only be called statically","113":"Storage slot 0 not allowed. Storage slots must start from 1.","148":"Array index out of bounds","299":"attempt to add with overflow","340":"attempt to add with overflow","159":"attempt to add with overflow","188":"Array index out of bounds","319":"Array index out of bounds","237":"Array index out of bounds","327":"Array index out of bounds","219":"Array index out of bounds","251":"attempt to add with overflow","15":"Not initialized","172":"Array index out of bounds","201":"attempt to add with overflow"}},{"name":"get_participants","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"name","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"npk_m_hash","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}},{"name":"header","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::note::note_header::NoteHeader"}}],"kind":"struct","path":"types::participant_note::ParticipantNote"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_participants"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000f518d98e"},{"kind":"string","value":"EntitlementNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_start","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_end","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"destination","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"spot","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000f518d98e"},{"kind":"string","value":"EntitlementNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_start","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_end","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"destination","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"spot","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b3dd3286"},{"kind":"string","value":"ParticipantNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrow"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"nullifiers","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseRegistry"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"escrow_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"managed_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"participants","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"participant_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::DKIMKeyHashRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_parameters"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow_contract_id","type":{"kind":"field"}},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_abi"}]}},"file_map":{"103":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"104":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"105":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"108":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"112":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"114":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"},"116":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"117":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"118":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"119":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"120":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"122":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"123":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"127":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"128":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n"},"129":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"130":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"131":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"134":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"143":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"144":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"147":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"157":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::{NoteInterface, NullifiableNote}}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = unsafe {\n            get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier)\n        };\n\n        // 2) First we prove that the tree leaf in the witness is present in the nullifier tree. This is expected to be\n        // the leaf that contains the nullifier we're proving inclusion for.\n        assert(\n            self.state.partial.nullifier_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n\n        // 3) Then we simply check that the value in the leaf is the expected one. Note that we don't need to perform\n        // any checks on the rest of the values in the leaf preimage (the next index or next nullifier), since all we\n        // care about is showing that the tree contains an entry with the expected nullifier.\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, let N: u32>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N> + NullifiableNote;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, let N: u32>(\n        self,\n        note: Note,\n        context: &mut PrivateContext\n    ) where Note: NoteInterface<N> + NullifiableNote {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"158":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"161":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"166":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"167":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LTE, rhs), \"Expected lhs to not be less than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n    }\n}\n"},"168":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"172":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"173":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"175":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"178":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"180":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"187":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"194":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"196":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"197":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"203":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"218":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"258":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"271":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"274":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"282":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"286":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"287":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"289":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"324":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"325":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"326":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"327":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"338":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_escrow/src/types/entitlement_note.nr","source":"use aztec::{\n    encrypted_logs::encrypted_event_emission::encode_and_encrypt_event,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::note_custom_interface,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::{random::random, notes::check_nullifier_exists, debug_log::debug_log_format},\n    prelude::{NoteHeader, NullifiableNote, NoteInterface, PrivateContext},\n    protocol_types::{\n        address::AztecAddress,\n        traits::{Serialize, Deserialize},\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::{poseidon2_hash_with_separator, poseidon2_hash_bytes},\n        utils::field::field_from_bytes,\n    },\n};\nuse compressed_string::CompressedString;\nuse generators::GENERATORS;\nuse std::{embedded_curve_ops::multi_scalar_mul, hash::from_field_unsafe};\nuse crate::ZImburseEscrow::{SpotReimbursementClaimed, RecurringReimbursementClaimed, EntitlementNullified};\n\nglobal ENTITLEMENT_NOTE_LENGTH: u32 = 8;\n\n#[note_custom_interface]\npub struct EntitlementNote {\n    // the user that is allowed to use this entitlement\n    recipient: AztecAddress,\n    // the type of receipt verifier that this entitlement can be used for\n    verifier_id: u8,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // date range that verified emails can be used for\n    date_start: u32,\n    date_end: u32,\n    // destination if used for travel\n    destination: Field,\n    // whether or not the entitlement is a spot entitlement\n    spot: bool,\n    // blinding factor & nullifier secret for the note\n    randomness: Field,\n}\n\nimpl NoteInterface<ENTITLEMENT_NOTE_LENGTH> for EntitlementNote {\n\n    fn serialize_content(self) -> [Field; ENTITLEMENT_NOTE_LENGTH] {\n\n        [\n            self.recipient.to_field(),\n            self.verifier_id as Field,\n            self.max_value.to_integer(),\n            self.date_start as Field,\n            self.date_end as Field,\n            self.destination,\n            self.spot as Field,\n            self.randomness\n        ]\n    }\n\n    fn deserialize_content(serialized_note: [Field; ENTITLEMENT_NOTE_LENGTH]) -> EntitlementNote {\n        EntitlementNote {\n            recipient: AztecAddress::from_field(serialized_note[0]),\n            verifier_id: serialized_note[1] as u8,\n            max_value: U128::from_integer(serialized_note[2]),\n            date_start: serialized_note[3] as u32,\n            date_end: serialized_note[4] as u32,\n            destination: serialized_note[5],\n            spot: serialized_note[6] as bool,\n            randomness: serialized_note[7],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn to_be_bytes(self, storage_slot: Field) -> [u8; ENTITLEMENT_NOTE_LENGTH * 32 + 64] {\n        let serialized_note = self.serialize_content();\n        let mut buffer: [u8; ENTITLEMENT_NOTE_LENGTH * 32 + 64] = [0; ENTITLEMENT_NOTE_LENGTH * 32 + 64];\n        let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n        let note_type_id_bytes: [u8; 32] = EntitlementNote::get_note_type_id().to_be_bytes();\n        for i in 0..32 {\n            buffer[i] = storage_slot_bytes[i];\n            buffer[32 + i] = note_type_id_bytes[i];\n        }\n        for i in 0..serialized_note.len() {\n            let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n            for j in 0..32 {\n                buffer[64 + i * 32 + j] = bytes[j];\n            }\n        }\n        buffer\n    }\n\n    fn get_note_type_id() -> Field {\n        comptime\n        {\n            let bytes = \"EntitlementNote\".as_bytes();\n            let hash = poseidon2_hash_bytes(bytes);\n            let hash_bytes = hash.to_be_bytes::<4>();\n            field_from_bytes(hash_bytes, true)\n        }\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn compute_note_hash(self) -> Field {\n        let serialized = self.serialize_content();\n        let generators = [\n            GENERATORS[0],\n            GENERATORS[1],\n            GENERATORS[2],\n            GENERATORS[3],\n            GENERATORS[4],\n            GENERATORS[5],\n            GENERATORS[6],\n            GENERATORS[7],\n            GENERATORS[8]\n        ];\n        let data = [\n            from_field_unsafe(serialized[0]),\n            from_field_unsafe(serialized[1]),\n            from_field_unsafe(serialized[2]),\n            from_field_unsafe(serialized[3]),\n            from_field_unsafe(serialized[4]),\n            from_field_unsafe(serialized[5]),\n            from_field_unsafe(serialized[6]),\n            from_field_unsafe(serialized[7]),\n            from_field_unsafe(self.get_header().storage_slot)\n        ];\n        std::embedded_curve_ops::multi_scalar_mul(generators, data).x\n    }\n}\n\nimpl NullifiableNote for EntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = self.randomness; // use as nullifier_secret so that admin and recipient can nullify\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = self.randomness; // use as nullifier secret so that admin and recipient can nullify\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for EntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient)\n            & (self.date_start == other.date_start)\n            & (self.date_end == other.date_end)\n            & (self.destination == other.destination)\n            & (self.max_value == other.max_value)\n            & (self.randomness == other.randomness)\n            & (self.spot == other.spot)\n            & (self.verifier_id == other.verifier_id)\n    }\n}\n\nimpl EntitlementNote {\n    \n    /**\n     * EntitlementNote constructor\n     *\n     * @param recipient - the address of the recipient of the entitlement (NOT THE OWNER OF THE NOTE)\n     * @param verifier_id - the type of verifier that the entitlement can be used for\n     * @param max_value - the maximum value that can be withdrawn from the escrow using the entitlement\n     * @param date_start - the start of the date range that the entitlement can be used for (0 for recurring)\n     * @param date_end - the end of the date range that the entitlement can be used for (0 for recurring)\n     * @param destination - the destination of the entitlement (ZERO_DESTINATION for recurring)\n     * @param randomness - blinding factor for the note (inputted since must be same between the two notes)\n     */\n    fn new(\n        recipient: AztecAddress,\n        verifier_id: u8,\n        max_value: U128,\n        date_start: u32,\n        date_end: u32,\n        destination: str<31>,\n        spot: bool,\n        randomness: Field\n    ) -> Self {\n        let destination_compressed: CompressedString<1, 31> = CompressedString::from_string(destination);\n        Self {\n            recipient,\n            verifier_id,\n            max_value,\n            date_start,\n            date_end,\n            destination: destination_compressed.value[0],\n            spot,\n            randomness,\n            header: NoteHeader::empty()\n        }\n    }\n\n    /**\n     * Determine if the entitlement is a spot entitlement by checking if date_start is set\n     *\n     * @return true if entitlement can only be used once, and false if it is recurring\n     */\n    fn is_spot(self) -> bool {\n        self.date_start != 0\n    }\n\n    /**\n     * Return the destination of the entitlement\n     *\n     * @return the utf8 bytes of the destination\n     */\n    fn destination(self) -> [u8; 31] {\n        CompressedString::<1, 31> { value: [self.destination] }.to_bytes()\n    } \n\n    /**\n     * Constrain a given timestamp to be within the date range of the entitlement\n     *\n     * @param timestamp - the timestamp to check\n     */\n    fn check_date_range(self, timestamp: u32) {\n        debug_log_format(\"\\n\\n\\n\\nChecking date range:\\nStart: {0}\\nTimestamp:{1}\\nEnd:{2}\", [\n            self.date_start as Field,\n            timestamp as Field,\n            self.date_end as Field\n        ]);\n        assert(\n            (timestamp >= self.date_start) & (timestamp <= self.date_end),\n            \"Receipt is out of entitlement date range\"\n        );\n    }\n\n    /**\n     * Determine the amount to reimburse for a given claimed amount (lesser of the two)\n     *\n     * @param claimed - the amount claimed by the user\n     * @return the amount to reimburse\n     */\n    fn amount_to_reimburse(self, claimed: U128) -> Field {\n        if self.max_value >= claimed {\n            claimed.to_field()\n        } else {\n            self.max_value.to_field()\n        }\n    }\n\n    fn derive_shared_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            self.serialize_content(),\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    /**\n     * Derives the nullifier for recurring notes\n     * @dev recurring notes are nullified for a scope (month) without destroying the ntoe\n     *      prove nullifier non-inclusion to use\n     *\n     * @param timestamp - the timestamp (month/ year) from the email receipt verifier\n     * @return - the month nullifier for the note\n     */\n    fn derive_recurring_nullifier(self, timestamp: Field) -> Field {\n        let serialized = self.serialize_content();\n        let mut inputs: [Field; ENTITLEMENT_NOTE_LENGTH + 1] = [0; ENTITLEMENT_NOTE_LENGTH + 1];\n        for i in 0..ENTITLEMENT_NOTE_LENGTH {\n            inputs[i] = serialized[i];\n        }\n        inputs[ENTITLEMENT_NOTE_LENGTH] = timestamp;\n        poseidon2_hash_with_separator(\n            inputs,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    /**\n     * Assert that a recurring nullifier has not been used before and emits it\n     * @dev uses oracle check_nullifier_exists which is technically unsafe but will be caught by kernel\n     *\n     * @param context - the private context to use for the oracle call\n     * @param timestamp - the timestamp to check\n     */\n    fn check_and_emit_recurring_nullifier(self, context: &mut PrivateContext, timestamp: Field) {\n        // derive recurring nullifier for the month\n        let recurring_nullifier = self.derive_recurring_nullifier(timestamp);\n        // check the nullifier has not been emitted via oracle call (rely on kernel to actually constrain)\n        let recurring_nullifier_exists = unsafe { check_nullifier_exists(recurring_nullifier) };\n        assert(!recurring_nullifier_exists, \"Entitlement has already been claimed for this month\");\n        // emit the nullifier\n        context.push_nullifier(recurring_nullifier);\n    }\n\n    /**\n     * Emit an event to the admin notifying them of a recurring claim\n     *\n     * @param context - the private execution context\n     * @param admin - the address of the admin of the escrow to notify\n     * @param amount - the amount claimed\n     * @param timestamp - the timestamp of the claim\n     */\n    fn emit_recurring_claim(self, context: &mut PrivateContext, admin: AztecAddress, amount: Field, timestamp: Field) {\n        RecurringReimbursementClaimed {\n            claimant: self.recipient,\n            amount,\n            verifier_id: self.verifier_id,\n            timestamp\n        }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(self.recipient).ovpk_m,\n                get_public_keys(admin).ivpk_m,\n                admin\n            )\n        );\n    }\n\n    /**\n     * Emit an event to the admin notifying them of a spot claim\n     *\n     * @param context - the private execution context\n     * @param admin - the address of the admin of the escrow to notify\n     * @param amount - the amount claimed\n     */\n    fn emit_spot_claim(self, context: &mut PrivateContext, admin: AztecAddress, amount: Field) {\n        SpotReimbursementClaimed {\n            claimant: self.recipient,\n            amount,\n            verifier_id: self.verifier_id,\n        }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(self.recipient).ovpk_m,\n                get_public_keys(admin).ivpk_m,\n                admin\n            )\n        );\n    }\n\n    /**\n     * Admin or recipient notifies counterparty that note has been nullified\n     * @dev admin emits event when revoking entitlement, recipient emits when claiming spot\n     * @dev clients must scan for these events to prune notes that are no longer valid\n     *\n     * @param context - the private execution context\n     * @param to - the address of the counterparty to notify\n     * @param from - the address of the notifier who nullified the entitlement note\n     */\n    fn emit_nullified(self, context: &mut PrivateContext, to: AztecAddress, from: AztecAddress) {\n        EntitlementNullified { randomness: self.randomness }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(from).ovpk_m,\n                get_public_keys(to).ivpk_m,\n                to\n            )\n        );\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"348":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"349":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"448":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_registry/src/library_methods/dkim.nr","source":"use aztec::{context::public_context::PublicContext, unencrypted_logs::unencrypted_event_emission::emit};\nuse crate::{\n    BULK_KEY_LENGTH,\n    ZImburseRegistry::{DKIMKeyHashRegistered, Storage}\n};\n\n/**\n * Register a single DKIM key\n *\n * @param context - the contract context\n * @param storage - the contract storage\n * @param dkim_key_hash - the hash of the DKIM key to add to the registry\n * @param verifier_id - the verifier ID to register the DKIM key to\n*/\n\npub fn register_dkim_key(context: &mut PublicContext, storage: Storage<&mut PublicContext>, dkim_key_hash: Field, verifier_id: Field) {\n    let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n    assert(stored_id == 0, \"DKIM key has already been registered\");\n    storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n    emit(\n        context,\n        DKIMKeyHashRegistered { dkim_key_hash, verifier_id }\n    );\n}\n\n/**\n * Register multiple DKIM keys\n *\n * @param context - the contract context\n * @param storage - the contract storage\n * @param dkim_key_hashes - the hashes of the DKIM keys to add to the registry\n * @param verifier_ids - the verifier IDs to register the DKIM keys to\n */\npub fn register_dkim_keys_bulk(context: &mut PublicContext, storage: Storage<&mut PublicContext>, dkim_key_hashes: [Field; BULK_KEY_LENGTH], verifier_ids: [Field; BULK_KEY_LENGTH]) {\n    for i in 0..BULK_KEY_LENGTH {\n        if (verifier_ids[i] != 0) {\n            register_dkim_key(context, storage, dkim_key_hashes[i], verifier_ids[i]);\n        }\n    }\n}"},"450":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod library_methods;\nmod test;\nmod types;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\n#[aztec]\ncontract ZImburseRegistry {\n    use dep::aztec::{\n        prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map},\n        macros::{storage::storage, events::event, functions::{private, public, view, initializer, internal}},\n        note::{\n            note_viewer_options::NoteViewerOptions, note_getter_options::NoteGetterOptions,\n            note_getter::{get_notes, view_notes}, constants::MAX_NOTES_PER_PAGE\n        },\n        protocol_types::{\n            contract_instance::ContractInstance, address::partial_address::PartialAddress,\n            contract_class_id::ContractClassId, abis::function_selector::FunctionSelector, traits::Serialize\n        },\n        oracle::{get_contract_instance::get_contract_instance, header::get_header_at_oracle},\n        keys::getters::get_public_keys, utils::comparison::Comparator,\n        encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note_unconstrained, encode_and_encrypt_note},\n        unencrypted_logs::unencrypted_event_emission::emit\n    };\n    use std::{meta::derive, collections::bounded_vec::BoundedVec};\n    use dep::address_note::address_note::AddressNote;\n    use dep::zimburse_verifiers::constants::verifier_ids;\n    use dep::z_imburse_escrow::ZImburseEscrow;\n    use crate::{\n        library_methods::dkim::{register_dkim_key, register_dkim_keys_bulk},\n        types::{registry_definition::RegistryDefinition, participant_note::{ParticipantNote, NAME_LENGTH}},\n        BULK_KEY_LENGTH\n    };\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyHashRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        definition: SharedImmutable<RegistryDefinition, Context>,\n        escrow_registry: Map<AztecAddress, SharedImmutable<bool, Context>, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n        managed_escrows: PrivateSet<AddressNote, Context>,\n        participants: Map<AztecAddress, PrivateSet<ParticipantNote, Context>, Context>,\n        participant_escrows: PrivateSet<AddressNote, Context>,\n    }\n\n    /**\n     * Initialize the Z-Imburse registry contract\n     *\n     * @param usdc - The address of the USDC token\n     * @param contract_class_id - The class ID of the escrow contract that all escrows must be instances of\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys to add to the registry\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        usdc: AztecAddress,\n        escrow_contract_id: Field,\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // initialize the registry definition\n        let definition = RegistryDefinition::new(context.msg_sender(), usdc, escrow_contract_id);\n        storage.definition.initialize(definition);\n        // add any DKIM key hashes that were passed in at initialization\n        register_dkim_keys_bulk(&mut context, storage, dkim_key_hashes, verifier_ids);\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry admin\");\n        // bulk insert up to 50 dkim key hashes\n        register_dkim_keys_bulk(&mut context, storage, dkim_key_hashes, verifier_ids);\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not registry admin\");\n        // ensure that the dkim key has not already been registered\n        register_dkim_key(&mut context, storage, dkim_key_hash, verifier_id);\n    }\n\n    /**\n     * Check the authenticity and deployment status of an escrow contract and register it in the Z-Imburse registry\n     * @dev the header will not include the contract address and the contract \n     *\n     * @param escrow_contract - the address of the escrow contract to register\n     */\n    #[private]\n    fn register_escrow(escrow_contract: AztecAddress) {\n        // check the contract class ID by recomputing the contract address\n        let definition = storage.definition.read_private();\n        let contract_instance: ContractInstance = unsafe {\n            get_contract_instance(escrow_contract)\n        };\n        let computed_escrow_address = AztecAddress::compute(\n            contract_instance.public_keys_hash,\n            PartialAddress::compute(\n                ContractClassId::from_field(definition.escrow_contract_id), // constrained here\n                contract_instance.salt,\n                contract_instance.initialization_hash,\n                contract_instance.deployer\n            )\n        );\n        assert(\n            computed_escrow_address == escrow_contract, \"Escrow contract class ID does not match expected class ID\"\n        );\n        // check that the contract has been deployed\n        // annoying that we can't use this in the deploy tx\n        context.historical_header.prove_contract_initialization(escrow_contract);\n\n        // check that the contract has not already been registered\n        let registration_status = storage.escrow_registry.at(escrow_contract).read_private();\n        assert(!registration_status, \"Escrow contract has already been registered\");\n\n        let escrow_params = ZImburseEscrow::at(escrow_contract).get_registration_params().view(&mut context);\n        assert(\n            escrow_params[0] == context.this_address(), \"Escrow contract registry does not match this contract\"\n        );\n        assert(escrow_params[1] == definition.usdc, \"Escrow contract USDC does not match registry USDC\");\n        assert(\n            escrow_params[2] == context.msg_sender(), \"Escrow contract admin does not match sender of message\"\n        );\n\n        // privately add the escrow contract to the list of managed escrows\n        let admin_keys = get_public_keys(context.msg_sender());\n        let mut escrow_note = AddressNote::new(escrow_contract, admin_keys.npk_m.hash());\n\n        // use unconstrained - why would you lie here\n        storage.managed_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                admin_keys.ovpk_m,\n                admin_keys.ivpk_m,\n                context.msg_sender()\n            )\n        );\n\n        // publicly add the escrow contract to the list of participant escrows\n        ZImburseRegistry::at(context.this_address()).set_contract_registered(escrow_contract).enqueue(&mut context);\n    }\n\n    /**\n     * Publicly set the contract registration status\n     *\n     * @param escrow_contract - the address of the escrow contract that has privately been constrained to be valid\n     */\n    #[public]\n    #[internal]\n    fn set_contract_registered(escrow_contract: AztecAddress) {\n        storage.escrow_registry.at(escrow_contract).initialize(true);\n    }\n\n    #[private]\n    fn check_and_register_participant(participant: AztecAddress, participant_name: str<60>, escrow: AztecAddress) -> bool {\n        // todo: switch to check that the sender is an escrow\n        // check that sender is admin\n        let admin = storage.definition.read_private().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry admin\");\n        let is_registered = storage.escrow_registry.at(escrow).read_private();\n        assert(is_registered, \"Escrow contract is not registered\");\n        // check if the participant has already been registered\n        let options = NoteGetterOptions::new().select(AddressNote::properties().address, Comparator.EQ, participant).set_limit(1);\n        let participant_exists = storage.participants.at(escrow).get_notes(options).len() == 0;\n        // if the participant has not been registered, enqueue a private call to register the participant\n        // do this instead of if statement here to make adding first time expensive but cheap if already registered\n        let mut added = false;\n        if participant_exists {\n            added = true;\n            ZImburseRegistry::at(context.this_address()).register_participant(participant, participant_name, admin, escrow).call(&mut context);\n        }\n        added\n    }\n\n    #[private]\n    #[internal]\n    fn register_participant(participant: AztecAddress, participant_name: str<60>, admin: AztecAddress, escrow: AztecAddress) {\n        let admin_keys = get_public_keys(admin);\n        let participant_keys = get_public_keys(participant);\n        // add escrow to the participant's set of escrows\n        let mut escrow_note = AddressNote::new(escrow, participant_keys.npk_m.hash());\n        storage.participant_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note(\n                &mut context,\n                admin_keys.ovpk_m,\n                participant_keys.ivpk_m,\n                participant\n            )\n        );\n        // add the participant to the admin set of participants\n        let mut participant_note = ParticipantNote::new(participant, participant_name, admin_keys.npk_m.hash());\n        storage.participants.at(escrow).insert(&mut participant_note).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, admin)\n        );\n    }\n\n    // todo: add ability to remove participant\n    // todo: add ability to remove participant escrows by looking up nullifications\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n\n    /** Get the class ID that all escrow contracts must match */\n    #[public]\n    #[view]\n    fn get_escrow_class_id() -> Field {\n        storage.definition.read_public().escrow_contract_id\n    }\n\n    /** Get the registration status of an escrow contract */\n    #[public]\n    #[view]\n    fn get_escrow_registry_status(escrow_contract: AztecAddress) -> bool {\n        storage.escrow_registry.at(escrow_contract).read_public()\n    }\n\n    /**\n     * Get a page of the list of escrows administrated by a given address (private)\n     *\n     * @param admin - the address of the admin\n     * @param page_index - the index of the page to retrieve\n     * @return managed_escrows - the list of managed escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_managed_escrows(offset: u32) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.managed_escrows.view_notes(options);\n        let mut managed_escrows = BoundedVec::new();\n        for i in 0..notes.len() {\n            managed_escrows.push(notes.get_unchecked(i).address);\n        }\n        (managed_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of escrows participated in by a given address (private)\n     *\n     * @param admin - the address of the participant\n     * @param page_index - the index of the page to retrieve\n     * @return participant_escrows - the list of enrolled escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_participant_escrows(\n        participant: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participant_escrows.view_notes(options);\n        let mut participant_escrows: BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE> = BoundedVec::new();\n        for i in 0..notes.len() {\n            participant_escrows.push(notes.get_unchecked(i).address);\n        }\n        (participant_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of of participants in an escrow (private)\n     *\n     * @param admin - the address of the escrow\n     * @param page_index - the index of the page to retrieve\n     * @return participants - the list of participating addresses\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participants(\n        escrow: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<ParticipantNote, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participants.at(escrow).view_notes(options);\n        (notes, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n}\n\n"},"451":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_registry/src/types/participant_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator, traits::{Serialize, Deserialize}\n},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\nuse dep::compressed_string::CompressedString;\n\nglobal NAME_LENGTH: u32 = 60;\nglobal NAME_SERIALIZED_LENGTH: u32 = 2;\n\n#[note]\npub struct ParticipantNote {\n    address: AztecAddress,\n    name: [Field; 2],\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n\nimpl NullifiableNote for ParticipantNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for ParticipantNote {\n    // does not check for participant name\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl ParticipantNote {\n    pub fn new(address: AztecAddress, name: str<NAME_LENGTH>, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        let name_serialized: CompressedString<NAME_SERIALIZED_LENGTH, NAME_LENGTH> = CompressedString::from_string(name);\n        ParticipantNote { address, name: name_serialized.value, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_name(self) -> [u8; NAME_LENGTH] {\n        CompressedString::<NAME_SERIALIZED_LENGTH, NAME_LENGTH> { value: self.name }.to_bytes()\n    }\n}\n"},"452":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_registry/src/types/registry_definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal REGISTRY_DEFINITION_LENGTH: u32 = 3;\n\npub struct RegistryDefinition {\n    admin: AztecAddress,\n    usdc: AztecAddress,\n    escrow_contract_id: Field\n}\n\nimpl Serialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn serialize(self: Self) -> [Field; REGISTRY_DEFINITION_LENGTH] {\n        [self.admin.to_field(), self.usdc.to_field(), self.escrow_contract_id]\n    }\n}\n\nimpl Deserialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn deserialize(fields: [Field; REGISTRY_DEFINITION_LENGTH]) -> Self {\n        RegistryDefinition {\n            admin: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            escrow_contract_id: fields[2]\n        }\n    }\n}\n\nimpl RegistryDefinition {\n    /**\n     * Create a new definition for a Z-Imburse escrow registry contract\n     *\n     * @param admin - The address that can add dkim keys to the registry\n     * @param usdc The address of the USDC token\n     * @param escrow_contract_id The ID of the escrow contract\n     * @return The new escrow registry definition\n     */\n    pub fn new(admin: AztecAddress, usdc: AztecAddress, escrow_contract_id: Field) -> Self {\n        RegistryDefinition { admin, usdc, escrow_contract_id }\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"71":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"75":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"77":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"78":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"80":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"83":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"94":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"98":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"99":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"}}}