{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseRegistry","functions":[{"name":"get_participants","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"name","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"npk_m_hash","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}},{"name":"header","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::note::note_header::NoteHeader"}}],"kind":"struct","path":"types::participant_note::ParticipantNote"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_participants"]},{"name":"register_participant","is_unconstrained":false,"custom_attributes":["private","internal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"2426":"attempt to add with overflow","4986":"Array index out of bounds","2292":"Array index out of bounds","945":"Storage slot 0 not allowed. Storage slots must start from 1.","1969":"Array index out of bounds","2804":"Array index out of bounds","5230":"attempt to add with overflow","2725":"Array index out of bounds","354":"Array index out of bounds","3938":"Array index out of bounds","4962":"Array index out of bounds","4505":"attempt to add with overflow","4694":"Array index out of bounds","4371":"attempt to add with overflow","5151":"attempt to add with overflow","4749":"Array index out of bounds","5553":"Array index out of bounds","4292":"Array index out of bounds","2433":"Array index out of bounds","3134":"Array index out of bounds","4481":"Array index out of bounds","3000":"attempt to add with overflow","3512":"attempt to add with overflow","2354":"attempt to add with overflow","3701":"Array index out of bounds","4024":"attempt to add with overflow","3433":"attempt to add with overflow","3622":"Array index out of bounds","5048":"Array index out of bounds","5371":"attempt to add with overflow","660":"attempt to add with overflow","1873":"attempt to add with overflow","3409":"attempt to add with overflow","3732":"Array index out of bounds","4299":"Array index out of bounds","5457":"Array index out of bounds","2306":"attempt to add with overflow","3196":"Storage slot 0 not allowed. Storage slots must start from 1.","5110":"attempt to add with overflow","2227":"Array index out of bounds","1904":"attempt to add with overflow","1770":"Array index out of bounds","1179":"Function set_contract_registered can only be called internally","2203":"Array index out of bounds","4952":"attempt to add with overflow","1990":"attempt to add with overflow","3014":"Array index out of bounds","4038":"Array index out of bounds","4928":"Array index out of bounds","5062":"attempt to add with overflow","3959":"attempt to add with overflow","2100":"Array index out of bounds","5306":"Array index out of bounds","4526":"attempt to add with overflow","5361":"attempt to add with overflow","1832":"attempt to add with overflow","5574":"attempt to add with overflow","4770":"attempt to add with overflow","4447":"Array index out of bounds","217":"attempt to add with overflow","1430":"Not initialized","3344":"attempt to add with overflow","3021":"Array index out of bounds","4045":"Array index out of bounds","4880":"Array index out of bounds","571":"Initialization hash does not match","1784":"attempt to add with overflow","3832":"Array index out of bounds","5179":"Array index out of bounds","3375":"attempt to add with overflow","1705":"Array index out of bounds","2918":"Array index out of bounds","2595":"Array index out of bounds","4454":"Array index out of bounds","5478":"attempt to add with overflow","2138":"attempt to add with overflow","3351":"attempt to add with overflow","3863":"Array index out of bounds","1681":"Array index out of bounds","2193":"attempt to add with overflow","2382":"Array index out of bounds","2571":"Array index out of bounds","4186":"DKIM key has already been registered","5375":"Array index out of bounds","5564":"attempt to add with overflow","2169":"Array index out of bounds","3894":"attempt to add with overflow","365":"attempt to add with overflow","877":"Sender is not the registry contract","3949":"attempt to add with overflow","2468":"Array index out of bounds","4973":"attempt to add with overflow","5138":"Array index out of bounds","2633":"Array index out of bounds","5382":"Array index out of bounds","963":"DKIM key has already been registered","3200":"Array index out of bounds","4547":"Array index out of bounds","2475":"Array index out of bounds","3499":"Array index out of bounds","4066":"attempt to add with overflow","5468":"attempt to add with overflow","1238":"Storage slot 0 not allowed. Storage slots must start from 1.","3853":"attempt to add with overflow","3530":"Array index out of bounds","5578":"Array index out of bounds","1860":"Array index out of bounds","2561":"attempt to add with overflow","1915":"Array index out of bounds","3963":"Array index out of bounds","2537":"Array index out of bounds","166":"attempt to add with overflow","2214":"attempt to add with overflow","3750":"Array index out of bounds","1434":"Function get_escrow_class_id can only be called statically","5585":"Array index out of bounds","142":"attempt to add with overflow","3970":"Array index out of bounds","4994":"Array index out of bounds","1977":"Array index out of bounds","118":"attempt to add with overflow","2733":"Array index out of bounds","5482":"Array index out of bounds","2788":"Array index out of bounds","3812":"attempt to add with overflow","2142":"Array index out of bounds","4001":"attempt to add with overflow","2008":"Array index out of bounds","3032":"attempt to add with overflow","4056":"attempt to add with overflow","4190":"Array index out of bounds","2764":"Array index out of bounds","4489":"attempt to add with overflow","4568":"attempt to add with overflow","771":"Sender is not the registry contract","4678":"Array index out of bounds","4757":"Array index out of bounds","5403":"attempt to add with overflow","3764":"attempt to add with overflow","3441":"Array index out of bounds","3630":"Array index out of bounds","4465":"attempt to add with overflow","4788":"Array index out of bounds","2149":"Array index out of bounds","3685":"Array index out of bounds","3039":"Array index out of bounds","1692":"attempt to add with overflow","3874":"attempt to add with overflow","2582":"attempt to add with overflow","4252":"Storage slot 0 not allowed. Storage slots must start from 1.","5489":"Array index out of bounds","3661":"Array index out of bounds","2826":"Array index out of bounds","2503":"Array index out of bounds","1022":"Storage slot 0 not allowed. Storage slots must start from 1.","2235":"Array index out of bounds","4070":"Array index out of bounds","5338":"attempt to add with overflow","5015":"attempt to add with overflow","5393":"attempt to add with overflow","2510":"Array index out of bounds","4936":"attempt to add with overflow","2754":"attempt to add with overflow","2108":"Array index out of bounds","3321":"Array index out of bounds","4400":"attempt to add with overflow","4077":"Array index out of bounds","5290":"Array index out of bounds","2651":"Array index out of bounds","4888":"Array index out of bounds","4431":"attempt to add with overflow","1926":"attempt to add with overflow","3651":"attempt to add with overflow","3840":"Array index out of bounds","5510":"attempt to add with overflow","4407":"attempt to add with overflow","1713":"Array index out of bounds","2926":"Array index out of bounds","2603":"Array index out of bounds","5163":"Array index out of bounds","5407":"Array index out of bounds","1500":"attempt to add with overflow","2713":"attempt to add with overflow","3548":"Array index out of bounds","5596":"attempt to add with overflow","2256":"attempt to add with overflow","2957":"Array index out of bounds","3981":"attempt to add with overflow","2177":"attempt to add with overflow","2366":"Array index out of bounds","2665":"attempt to add with overflow","1318":"attempt to add with overflow","5414":"Array index out of bounds","4256":"Array index out of bounds","3610":"attempt to add with overflow","2775":"attempt to add with overflow","2129":"attempt to add with overflow","4555":"Array index out of bounds","1160":"attempt to add with overflow","5445":"attempt to add with overflow","5122":"Array index out of bounds","5500":"attempt to add with overflow","2160":"attempt to add with overflow","4909":"attempt to add with overflow","1514":"Not initialized","2026":"Array index out of bounds","2404":"attempt to add with overflow","3050":"Array index out of bounds","3562":"attempt to add with overflow","3483":"Array index out of bounds","3672":"attempt to add with overflow","4586":"Array index out of bounds","844":"attempt to add with overflow","1734":"attempt to add with overflow","2947":"attempt to add with overflow","2624":"attempt to add with overflow","3459":"Array index out of bounds","4806":"Array index out of bounds","820":"attempt to add with overflow","1332":"Not initialized","1844":"Array index out of bounds","2545":"attempt to add with overflow","2088":"attempt to add with overflow","3112":"Storage slot 0 not allowed. Storage slots must start from 1.","2978":"attempt to add with overflow","2844":"Array index out of bounds","2521":"attempt to add with overflow","1174":"Not initialized","3222":"SharedImmutable already initialized","3356":"Array index out of bounds","5002":"Array index out of bounds","5514":"Array index out of bounds","4868":"attempt to add with overflow","2040":"attempt to add with overflow","2741":"Array index out of bounds","4088":"attempt to add with overflow","2796":"Array index out of bounds","1961":"Array index out of bounds","3363":"Array index out of bounds","858":"Not initialized","1882":"attempt to add with overflow","2906":"attempt to add with overflow","1937":"Array index out of bounds","4497":"Array index out of bounds","4686":"Array index out of bounds","4820":"attempt to add with overflow","4741":"Array index out of bounds","3906":"Array index out of bounds","4095":"Array index out of bounds","5198":"Array index out of bounds","3449":"attempt to add with overflow","3638":"Array index out of bounds","3315":"attempt to add with overflow","5521":"Array index out of bounds","3693":"Array index out of bounds","2858":"attempt to add with overflow","4717":"Array index out of bounds","3236":"Array index out of bounds","3425":"Array index out of bounds","2456":"attempt to add with overflow","597":"SharedImmutable already initialized","2968":"attempt to add with overflow","2243":"Array index out of bounds","2487":"attempt to add with overflow","5425":"attempt to add with overflow","1518":"Function get_escrow_registry_status can only be called statically","3243":"Array index out of bounds","2408":"Array index out of bounds","2274":"Array index out of bounds","2463":"attempt to add with overflow","4377":"Array index out of bounds","4944":"Array index out of bounds","2116":"Array index out of bounds","2817":"attempt to add with overflow","1336":"Function check_dkim_key_hash_public can only be called statically","5298":"Array index out of bounds","2415":"Array index out of bounds","1257":"SharedImmutable already initialized","2982":"Array index out of bounds","4707":"attempt to add with overflow","4896":"Array index out of bounds","5030":"Array index out of bounds","5542":"attempt to add with overflow","343":"attempt to add with overflow","3927":"attempt to add with overflow","3470":"attempt to add with overflow","3714":"attempt to add with overflow","3391":"Array index out of bounds","4604":"Array index out of bounds","1721":"Array index out of bounds","2934":"Array index out of bounds","2611":"Array index out of bounds","752":"Not initialized","2989":"Array index out of bounds","3824":"Array index out of bounds","4013":"Array index out of bounds","5171":"Array index out of bounds","1886":"Array index out of bounds","1752":"Array index out of bounds","2185":"Array index out of bounds","2374":"Array index out of bounds","3398":"Array index out of bounds","3130":"DKIM key has already been registered","4666":"attempt to add with overflow","1893":"Array index out of bounds","1948":"attempt to add with overflow","5532":"attempt to add with overflow","3917":"attempt to add with overflow","4106":"Array index out of bounds","711":"attempt to add with overflow","4618":"attempt to add with overflow","577":"Initializer address is not the contract deployer","5130":"Array index out of bounds","4539":"Array index out of bounds","4728":"attempt to add with overflow","309":"attempt to add with overflow","5319":"attempt to add with overflow","1577":"Storage slot 0 not allowed. Storage slots must start from 1.","5350":"Array index out of bounds","3491":"Array index out of bounds","4515":"Array index out of bounds","5216":"Array index out of bounds","1041":"SharedImmutable already initialized","4168":"Storage slot 0 not allowed. Storage slots must start from 1.","5192":"attempt to add with overflow","3010":"attempt to add with overflow","4034":"attempt to add with overflow","1852":"Array index out of bounds","2553":"Array index out of bounds","4278":"SharedImmutable already initialized","1395":"Storage slot 0 not allowed. Storage slots must start from 1.","4412":"Array index out of bounds","5546":"Array index out of bounds","5278":"attempt to add with overflow","347":"Array index out of bounds","2395":"attempt to add with overflow","3931":"Array index out of bounds","4419":"Array index out of bounds"}},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"register_escrow","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_contract_instance_internal","get_nullifier_membership_witness","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_integer_quotient","directive_invert"]},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"7Z3djhs3EoXfZa5zwZ/iX15lsQicxAkMGHYQOwssgrz7aiZuStPsaWaGZIm1PDeBJqaaR5+6eepQ3eSfDz+///GPX3/48OmXz18evv/Xnw8fP//07uuHz58uf/3513cPP/7+4ePHD7/+cPu/H9Tjf9JT8y+/vfv0+NeXr+9+//rwvQ6Gvnt4/+nnx5eWLgf45cPH9w/fE11eF62TDd8aJxdy2+AOmpLR6VtbMibmxlrFg9Y+avuttY8mPWv97+8etGrXrpXOrdVNawb1ugP5sPWQUoW8NrS11Salivao3SYj6ptDb9pNT+0X8M/EP3ZgR3dAoztwozvwRx04bbcOnPbVs/9yYmY56trD4/lRHjr57ex3KanKGeSC1VvrYE1xBgXR6qNo9UmyeqNEq9ei1RvR6q1o9SRavROtXrTXGtFea0R7rRHttVa011rRXmtFe60V7bU0+3nvYlbvipkFmp19yEJCVIV6Ylef5zq8Uq42q5O2xkHZGxn+SbsTrN0L1v5ChZPyZWK0r2gnm7WTrZ7EPvksPoXyEnyhaInpKig+E/T4pvSGNzn1ljcdO6N1GwFnQ41XMtsImoK+ftNHsLTbmj6bS0zHc17a5eN6e9M6HLS2+WOSvX5l9ujAxnj1ra0xIZ439mYj4Y29bfoIzwDe2+FZwHs7PAK8c3jOb/Bufon6Bs8B3tvhecB7O7wAeG+HFwHv7fAS4L0ZnleAtyOC2LAngiywJ4ICf0+EQGRHBKX4ngjq6z0RFM17IqiE90RQ3u6IBNSseyKoWfdEULPuiaBm3RMhENkRQc26J4KadU8ENeueCGrWPRHUrDsiETXrnghq1j0R1Kx7IqhZ90QIRHZEULPuiaBm3RNBzbongpp1TwQ1645IQs26J4KadU8ENeueyIojq1WZiNV6R0TrFQeSELcDm3CzFMlrGz/xW3HYeQ0/Hdx2YB1CKPitOEj15LdiDO/Jb8VA9ip+MeRH6mLS542j3Q4cbTlUrljFD0Otld0eLtTKFb5u4Os9YessWd8+hbrBRhHACBsVAyNslBeMsAmw+WCv+NvE3WCjymaEveIvKneDveKUYifYT/wQCpv4WeS8Nn6IbpXGSm3zDEaZkh/SWBs/BKw2ftTOTyvy2eJvFvd6gWDI824uusqhb1YNu/nt7fKZn7Q7wdq9YO1BsPZqvUnPlqc71H6/ld9tEi2flGz5WrZ8I1u+lS2fZMt3suV72fKDbPmyXZdku66T7bpu9nH/dDFv7WYfeU5X89aOf+R5zbLSOmUhOnl9E7L93/KjbPlJtPwXluAjc5VvnyfFp3fpN73LvOldx4MLxW1LROduQiTWM34+e/TC0mig98/oOdBroOdB75zeydqo+oXl2UDvn9GLoNdAL4He2+m9sEQc6P0zehr0GugZ0NsjQYAokBCQ7JGg1C+QoH4vkKAoL5Cg0i6QoHzeI4moiQskKHQLJKheCySoXgskBCR7JKheCySoXgskqF4LJKheCySoXvdI0op1yfmyWmlFx+m4rFZa0Z46LmuUVvSynvxWNL5+/IxaMb3fZVktowio+6E+X1bLKPh6T9inaysYhSKAETYqBkbYKC8YYa+Y2O8FW6/4S9bdYKPKZoS94izX3WCv+Ltev2WNjCbwa+KHnFdpfLosj9GIbm38kMba+HUIWHda4sfoJFe7UYK1a8Ha68WpDTXtl5/7NznGhqILO74L6tCFCXksM8nfdlE27rrQgzFOtnwvW36QLT/Klp9Ey7dmcvmna7QYO/vIc7pGi7H8I0/HVUKMDbLlR9nye4w81m6KtKW0r0tIje9CD+/C9RjjnM5fhrPx/Hv2Vm+H9tamyvfstclP7l5Op2KQcD2usstItMn3t+X5ePkvLCXk8p2VzvvaorOUTYxuPUz/nXlfWHaoZw9meA92eA80vAc3vIfY3oPzeV2pSEUPocO5dBnm8yifyh46nEueso+Egx7s8B5oeA9ueA9+eA9heA9xeA9pdA9RDe+hwzUd8qxruFmM7rGHg7ZxUxNVzT0vE8lb25vJ3M07oxGr3IpVTvMqv/y8mR++uMycFpEgOsHavWDtQbD2KFh7kqs9qYm1G7WV4Zdfh1KpfWJHrWqf2FOr2id21ar2mX21pn1mX61pn3l8v0z/Ze1k9tqtmnmcsfnhpMvPEAfaZx5natpnHmdq2mceZ2ra7zfO6LhPQlb5qdSEqdTEqdSkmdRoNZUaPZUaM5UaO5UamkrNVGOxnmos1lONxXqqsVhPNRabqcZiwz0WvzjTW7aN1uXGNqZSuxGs3QrWToK1zzynbcLN2lahyCJm5jntmvap5zwq2mee065ot1PPaVe0Tz2nXdE+9Zx2RfvUc9o32uOBdhKsfeo57Yp2Kb56pF2Krx5pl+KrR9ql+OqBdpLiq0fapfjqkXYpvnqkXbCv0szju9XX33C0L7XPPM5Ufn9yM48zNe2Cfyt2gn8rdjPXkZVr1U09zpC5ctel9pnryJr2mevImvapx/dz7X7q8b2iferx3V3HGR9L7VOP7xXtU98LVNFOgrVP7asV7VP7akX71L5a0T61r57XkV5wbgqCc1MQnJuC4NwUBN9j2+P537tpn9pXK9qn9tWK9ql9taJdsK8Gwb4aBfvqzE+dV7UL9tWZnzyvau8wvp+ub2J7PKns81JI3uqyhzi8hzS6hx7P5lZ60MN7MMN7sMN7oOE9uOE9+OE9DL+m0/BrOo2+pkmp4T3o4T2Y4T10uKZP178iRcN7cMN78MN7CMN7iMN7SKN76PGkYaUHPbwHM7yH4de0Hn5N6+HXtB5+Tevh17Qefk2bHsu1jlyMNC/H63UsFveiLtsFjJTv/Kl8O7n8aLP8ZEr5JFu+ky3fy5Y/+zLIFflRtvwkWr5VsuXP7roV+bO7bkW+bNe1sl3XynZdK9t17eyum28avci3ldbJ0Xbs5GIsP+zsHv3yh32SP7tHn8un2T26In92j67I7+ISAzdJOQ/25CaXfx7syU8u/9wlKMiWH2XLT6LlOyVbvpYtf/bNsSry7eTye9anbnaPPi8x3OweXZE/u0dX5M/u0efyfQ+XuNtGpeT13PKjztvEHmyKQ372bWKTP5VvJ5efTe4i39Rc4jJPsbkEhYMPS5N/2NM9ccmL3tKX/OybiVfkz76ZeEX+7JuJV+TPvpn4ufwwu0dX5E/u0TX5s3t0Rf7sHl2RL9t1g2zXDbJdN8h23SDbdYNs1431cV/rivxkNvXpJlGkeDwHsH3QdLty3+FhQ15/KwV/E+of31m0tnGjQvb6Me3RgU2I+UG6kNJ5Yx1DnrWISZ83jvkJvWifHfcJtQXqfqi1Utt9yVrpErYHbD7YAbD5YEfA7gk7z4dp5XQBOwE2G+ykAJsPtgZsPtioshlho85mhE2AzQfbATYfbCTIrrDz4qNa3Sw+usFGgmSEjQTJCBsJkg22U0iQjLCRIBlhI0EywkaCHFVnH8AmwOYKNU4hQTLCRoJkhI0EyQgbCZIRNhIkH2yNBMkIGwmSETYSJCNsJEhG2ATYfLCRIBlhI9QwwkaoYYSNUMMH2yDUMMJesfSzZmtrbPHkizMrToTacN2RPKoCyYrOXkGyov9WkKzokudI7IpeVkGy4jRaBcmKk10VJEvWJXlhrQudWl2nswqtPRX8CPzO+ZlcBGpDoeC34sRRT35LFtEd+S1ZcXfkt2R5/ip+/rqKRyz8g5as0l7Dj/I6jJeXxflHS5Z0Hfmh/mvjR+B3zs/r7B+efMEP9V8bP9R/bfxQ/7XxQ/3Xxm/Judx+/NySE78d+SF/tPFD/mjjh/zRxo/Ar4kf8kcbP+SPNn7IH238kD9q/Hy+L83H4jlrh/zRxM8jf7TxQ/5o44f80cYP+aONH+qXCj9SmR+ZcN74bKcAF2A1HVFX7tcP8CVG2DCxnrDP71gMcDxG2ATYfLAxl8cIGxN/jLBRZTPCxpQiI2zMP/LBjkiQjLCRIBlhI0EywkaCfDPsJ34Efk38kPPa+CG6tfFDGmvjh4DVxg+ZqcaPbObninuGltxRtCc/JJs2fggrbfyQP9r4Efg18UP+aOOH/NHGD/mjjR/yRxs/5I8Wfn7J/Sh78kP+aOOH/FHjd7bmi19yI8ie/Aj8mvihfi6QoCQukKDKLZCgcN0jWXL/r7s8v+OX3P1r4CMlSm2NlS5hwyMZYcN9GWHD17vCPnsyzS+5IdW9YC+5IdXdYGMSjRE2qmxG2KizGWETYPPBxo0HjLCRILvCdvmREuVjARsJkhE2EiQjbCRIPthrbgN5L9hIkIywkSAZYSNBjqqzD2ATYLOFGmy3yQkbCZIRNhIkI2wkSEbYSJB8sAkJkhE2EiQjbCRIRthIkIywCbD5YCNBMsJGqGGEjVDDCBuhhg82NsnlhH1c+llnNtikbAW29nFrrYO66knpoLFLfqPiUrpi0eroy3Ehc7m8TM9aP8mnueVHvZ1cLhpdyneT089Pdh7L95PLj/Yq31RaJ8oXSqJw8GHD5B82UL5SoirlR9nyk2j5L2y8KEa+li3fyJY/u0dX5E/u0TX5s3t0Rf7sHl2RL9t1vWzX9bJdN8h23SDbdYNs1w3Vcd8G//82DRHidmATUqrMLMSQv5uYKnMWp2tNBA/U/VBXnsgPCbDZYEcF2HywNWD3hH06cRwNYPPBtoDNB5sAmw82qmxG2KizGWEHwOaDHQGbDzYSZFfYp093JiRIRthIkIywkSAZYSNBMsImwOaDjQTJCBsJclSdfQAbCZIv1CQkSEbYSJBssINCgmSEjQTJCBsJkhE2EiQjbAJsPthIkIywkSAZYSNBMsJGguSDrRFqGGEj1DDCRqhhhI1Qwwh7xdLPmq2tscWTL0GvOBFq8yllbFR7JGZFZ68gWdF/K0hWdMkKkhW9rIKEgGSPZMXJrgqSJeuS1yw4prMKrT0V/FacZXoVP5OLQG0oFPxWnDjqyW/JIrofP7tkxd2R35Ll+av4+SzZxMI/7JJV2qsW/MzrMF5eluffkiVdR36o/9r4of6r8PM6+4cnX/BD/dfGD/VfEz9C/dfGD/VfG78l53I78lty4rcjPwK/Jn7IH238kD/a+CF/tPFD/mjjh/zRxM8hf7TxQ/6o8fP5vjQfY8EP+aONH/JHGz8CvyZ+yB9t/JA/mvh51C8Vfq/ZsPBsp4DgYTUdUVfu169v3ATY/WDDxHrCPr9j0cPxGGFjeo4RNubyGGFj4o8PdkCVzQgbU4qMsDH/yAgbCZIRNgE2H2wkSEbYSJBvhv3ED6GwjR9yXhs/RLcmfktubNqTHwJWGz9kpho/spmfK+4ZWnJH0Z78CPya+CGstPFD/mjjh/zRxg/5o40f8kcTvyW3xezJD/mjjR/yRxs/5I82fgR+TfyQP2r8Ttd8WXIjyJ78kD/a+KF+3iGJS+7zV0GCKrdAgsK1QIJaoDYWd3p+Jy65+9fAR0qU2horXcKGR/LBXnJDqrvBhq93hX32ZFpcckOqu8HGvBgjbAJsPtioshlho85mhI25PEbYuPGAETYSZFfYLj9Sovx+GZm45saH94KNBMkIGwmSETYSJCNsAmw+2EiQjLCRIEfV2QewkSD5Qg222+SEjQTJBxsbeXLCRoJkhI0EyQgbCZIRNgE2H2wkSEbYSJCMsJEgGWEjQfLBxu60nLARahhhI9QwwkaoYYR9XPppSxvs2yU1j2FrH7evRgd11ZPSQWOX/EbFpXTFotXRl+NC5nJ5mZ61fpIf5pYf9XZyuWh0KT9OTj8/2XksP00uP9qrfFNpnShfKIlC+WFf2Ptyng8bspAQVSlfy5ZvZMu3suWTbPlOtvzZPboif3KPrsmf3aMr8mf36HP5Xrbretmu62W7rpftul6263rBrvvX5c//vPv9w7sfP77/cnnT47/+8emnrx8+f/r259f//vb3v1wa/w8=","brillig_names":["register_dkim"],"assert_messages":{"329":"Array index out of bounds","637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","50":"Sender is not the registry contract","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","713":"attempt to add with overflow","457":"attempt to add with overflow","137":"Storage slot 0 not allowed. Storage slots must start from 1."}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":22,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"set_contract_registered","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"7Z3dbts4EIXfxde94PCffZXFokjbtAgQJEWTLrAo+u4rpxHjkF6xMekxCZ6bwm7G0vFnWXMOLZE/d5+vP/74+uHm7sv9w+79Xz93t/efrh5v7u+WZz9/vdt9/H5ze3vz9cPhf+/E/h//VP7w7epu/+zh8er74+49Oanf7a7vPu8fKr1s4MvN7fXuvdbL46w6KPdcHIyLtc4cKdWSwnOtltLHYhL+SLX1pJ6rrZfhVfXf73ahXjoJitXioPr84kk0AO/WPYRQAE9Sr7UkQyho92RWGZ4ONr1qp5baF/CvxO93IM+9A3XuHehz78DU70ArL9cDWgVROqCDXbdtg8sPaNtAUNNvmHuroP2L/CkvCie8SB49AXivxfrN89aWjhBJ6wnAUawNx2CRWUtffaHD8QOPTNyuVQfV7ki18vEzUy/HkDq2YSnt+u6kdH672Mr14LRSHZbu4RHgnQ5PAt7p8BTgnQ5PA97p8AzgnQ7PAt7p8BzgnQ7PA97p8ALgnQxPIWFUwEPCqICHhFEBDwmjAp4GvNPhIWEU4Bm7wjv4peMZHhJGBTwkjAp4SBgV8JAwToenkTAq4CFhpEQQG1IiyAIpEQ0iCRG49pQIrHhKBP46JQLTnBKBE06IGNjblAg8a0oEnjUlAs+aEtEgkhCBZ02JwLOmROBZUyLwrCkReNaEiIVnTYnAs6ZE4FlTIvCsKRENIgkReNaUCDxrSgSeNSUCz5oSgWdNiDh41pQIPGtKBJ41JQLPmhLRIPKaiJ/xW6NEJKKIUiIzunjn1w1LdzD5x1uL9/hmtPxvwUfOrBsm59Jr/vyM+aAhvhnDRDt8YUZX+SZ83q13x5APtF3s1bphr9LTZNAg3Y40CeXXYmHSjh7Q0VuypiiZyOqUNdo/H2t4BT7WMBZ8rGcc/7wQaxIzDq1eDDb8NSPsGYe2LgZ7xrHmRrCf+Gnwq+KHjFfHD7mtUCzEOsQghcz5IYvV8UO+quPXIDMtTcjGFi9UiaCLQ27Gm8KmbVhnunYHP7gt73mvncTA2mlg7XJg7WW/GXRJO/koRx7Mn7/uQp9/F6bBLqSL5zIZ7OEu8mIT7Hp6MqE4ob9xat308lC+qn6Sb8eW78aW78eWH4aW/werM3Qtn8aWL8eWr8aWr8eWP3bXlWN3XTl211W9n/eNj/JNvuSR6v3M43SU70Uun//MExc6s0KYgnwKJg6yBUsHQwX2t3wztnw7tvwWZx6l4ppdSoc00Cl//l2Es+/CtDjHGYofhlF++3O2itYVIq1SpcUH7dIC1+rlcMpOErbFOW45E63y7eG4BoN817n8+AW25CmX7zuX/zLj6lH5oXP5Pi5pSCG3J06MLZ/Gli/Hlt/7ibMgX48t34wt33YuX8sX+apQvfjOlyWrvc/fbO89+v/f7JP83nt0QX7vPXpbvu+9Rxfkq87TwbY/9bpz+dv+1JvO5W93CW/Hlu/Glu/Hlh+Glh96H1YpyKex5cvO5bf0p6H3Hr1tMf7g7tiu5ffeowvye+/RBfm9X1iy+QudFJ3/wOgp/j7qJeXye7+wJNhN+b1fWBKb3CJflrqEjrfFB+2OvNmhfwyWQo8tv/fLUArye78MpSC/98tQCvJ7v/izIL/3Hr0tn3q/CKggv/ceXZDfe48uyB+76za5LeKC8sfuut3fclGQP3bX7f6Wi235EtNPbBc3m95NSkw+0RA1iThjKwnKYePmf0bYmCmAETamFWgKe2uaSCkxBwEjbEzyxgdbYZI3Rthw2Yyw4bMZYWOSN0bYGrD5YCNBNoVt4lyRwvoMNhIkI2wkSEbYSJCMsJEg+WBrJEhG2EiQjLCRIM/ls4/ARoLkCzVaAzYfbCRIRthIkIywkSAZYSNBMsJGguSDbZAgGWEjQTLCRoJkhI0EyQhbAzYfbIQaRtgINYywEWoYYSPU8MG2M1o/JddaqfI7X+yMA6EqHlJSeZEhmbGzF5DM2H8LSGbskgUkM/aybSRuxmG0ApIZB7sKSKb0JdtIZhw4KiDRQJIigXvNkMC9ZkjgXjMkcK8ZErjXFImHe82QTOle4xyoC53SEBxFFURWZ/ymtLpv4SfjeB1J7TJ+U/rihvw0+FXxm9JxN+Q3pT1/Ez/7MuGaz/vHlC7tLfx0nDJ7eZgdf2FKS9eQH/xfHT/4vwI/S7F/WG0zfvB/dfw0+FXxg/+r4wf/V8dvyrHchvymHPhtyA/5o4afEsgfdfyQP+r4IX/U8UP+qOOnwa+KH/JHHT/kjxI/G28hsN5n/JA/6vghf9TxQ/6o4kfIH3X8kD/q+MG/FPhpEflp6baLtxZ1UoRW0xD19q2VitCX+GBLNLGWsDevWFRTLsN3MdgYnmOEjbE8RtgasPlgw2UzwsaQIiNsjD8ywkaCZISNBMkHe8olJi8GGwnyZNhP/BAK6/gh59Xx0+BXxQ9prI4fAlYdP2SmEj+tIj+TXTM05TqJLfkh2VTxm3I1w5b8kD/q+CF/1PFD/qjjp8Gvih/yRx0/5I86fsgfdfyQP+r4IX9U8ZtyLbx2c76oKZe3a8kP+aOOnwa/FAkscYYELjdDAuOaIrHwAqVzcav7dyxsQ0PUJMTKjQTlsNEjGWGj+zLCRl9vCnvzzrQ5F4q7FGyMizHCxiAaH+w5l827FGz4bEbYGMtjhI0LDxhha8BuCdvEW0qEzaaRmXPhw0vBRoJkhI0EyQgbCZIRNhIkH+w5l668FGwkyHP57COwkSD5Qg2W2+SErQGbDzYSJCNsJEhG2EiQjLCRIBlhI0HywcZKuZywkSAZYSNBMsJGgmSEjVDDCBuhhhE2Qg0jbIQaJti/lmf/XH2/ufp4e/2wvGb/xx93nx5v7u+enz7+++33X5bi/wA=","brillig_names":["set_contract_registered"],"assert_messages":{"180":"attempt to add with overflow","369":"Array index out of bounds","14":"Not initialized","139":"SharedImmutable already initialized","206":"Array index out of bounds","238":"Array index out of bounds","357":"attempt to add with overflow","398":"attempt to add with overflow","188":"Array index out of bounds","217":"attempt to add with overflow","246":"Array index out of bounds","19":"Function set_contract_registered can only be called internally","112":"Storage slot 0 not allowed. Storage slots must start from 1.","377":"Array index out of bounds","295":"Array index out of bounds","196":"attempt to add with overflow","385":"Array index out of bounds","277":"Array index out of bounds","309":"attempt to add with overflow","172":"Array index out of bounds","230":"Array index out of bounds","259":"attempt to add with overflow"}},{"name":"get_escrow_class_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQQKAAIGBAUhAAAPAAU6AQAAHgALAAQkAAcBBgoABwQGBSEAABQABToBAAAqAAAEJAAEBAUAAAQABQAkAQQBBAAABAQCBSoABQckAAcACCoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBAUAAAQFAgUqAgUEKgAABQAABAACACoCBAUkAAQBCCQABAMEJAAEAAcqAAcDIAArDAAEAwQHIQAANAAHIAAuKgEFBCQABAIFAAAEBAIGAAAEBgUHKgEHAyMqAQUHHAAHAwkAAAcGCQosAAAAAAoAAAAJJAAEAwsMAAQDCwwhAAA8AAw6AQAAKwAABwgDJQAEAAQIBCIAAABKKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMICQ4ABAMJByEAAEcABzoBAAAqAgoFKgAJAyAAKysBCAMIBgsABAgGAAIIByEAAE4IByAAUCsACAMIBSAAXisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABcCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAFMlAQQAAQgFIABeIysAGMoYyg==","debug_symbols":"1ZrdbuIwEIXfxddc2OMZe4ZXWa2q0EIVKQoV0JVWqO++STdx0wY5Ki2q5wbFcJz58M8cZ5Szedhunh/v6na3P5r1r7Np9vfVqd63Xev8sjKbQ9009ePd9Gtj+w9+lR+fqrZvHU/V4WTWLgKuzLZ96C89djfY1c3WrBG765lafBzEQjFpI12QIjgZtAjASewsX1AHdn5QBwZ5p/69MvJ1dGddUtuJ+vbwzn7DwMcxgsjCwDvAUetAZIGdHY0Y7Ca3Htndd7J3A/8Ovg8Atw7gbx0Abx2Avh6ASMYIFOzSoogMNKgjI88WRfgsUN8pXtOJr+kkV3SCy5sUEGzaTEh2Kcl0+z8FsW8T2W/D+ZxIGJMMidiFOaHo3aiOHj7OCTjl/KCc3yvnR+X8pJw/KOePyvlZOb/o5vfK/dcr91+v3H+9cv/1yv3XK/dfr9x/vXL/xfL3L3Hip1mRB8tfPxETP9sZ/0+sn1R6CtbSUk0iFTDYwgQjvNKzanrRTE9WNX35555s3qHi8ya7lPcZ3Iwfix9/CTn+8s897N/4YUEt6MfVJhjn/1a5y1H5p6Q8f/lVijx/+VWKLH8ov0qR5y+/SpHnL9+t8/zlP+Xk+ct36zx/+W6d51fuv0G5/wbl/huU+29U7r9Rtf++dM0/1aGuNs12eNts99zeT14+O/19+v9LJ/4H","brillig_names":["get_escrow_class_id"],"assert_messages":{"14":"Not initialized","59":"Array index out of bounds","70":"attempt to add with overflow","19":"Function get_escrow_class_id can only be called statically"}},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow_contract_id","type":{"kind":"field"},"visibility":"private"},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"","brillig_names":["constructor"],"assert_messages":{"768":"attempt to add with overflow","1085":"Array index out of bounds","1341":"attempt to add with overflow","1658":"Array index out of bounds","1560":"attempt to add with overflow","1646":"attempt to add with overflow","1256":"Array index out of bounds","1506":"Array index out of bounds","799":"attempt to add with overflow","153":"Array index out of bounds","787":"Array index out of bounds","915":"Array index out of bounds","1354":"Array index out of bounds","775":"attempt to add with overflow","1598":"attempt to add with overflow","1531":"Array index out of bounds","1330":"Array index out of bounds","1519":"attempt to add with overflow","745":"Array index out of bounds","873":"attempt to add with overflow","739":"attempt to add with overflow","1062":"Array index out of bounds","1117":"Array index out of bounds","1312":"Array index out of bounds","404":"SharedImmutable already initialized","660":"Array index out of bounds","142":"attempt to add with overflow","849":"Array index out of bounds","1416":"Array index out of bounds","1666":"Array index out of bounds","1398":"Array index out of bounds","1075":"attempt to add with overflow","624":"Array index out of bounds","1264":"Array index out of bounds","667":"Array index out of bounds","923":"Array index out of bounds","1362":"Array index out of bounds","1490":"Array index out of bounds","972":"Array index out of bounds","1478":"attempt to add with overflow","1539":"Array index out of bounds","1277":"attempt to add with overflow","954":"Array index out of bounds","558":"Array index out of bounds","936":"attempt to add with overflow","1125":"Array index out of bounds","1320":"attempt to add with overflow","857":"attempt to add with overflow","1046":"Array index out of bounds","1174":"Array index out of bounds","1296":"Array index out of bounds","1430":"attempt to add with overflow","1034":"attempt to add with overflow","1674":"Array index out of bounds","1156":"Array index out of bounds","833":"attempt to add with overflow","894":"attempt to add with overflow","1138":"attempt to add with overflow","815":"Array index out of bounds","620":"Storage slot 0 not allowed. Storage slots must start from 1.","108":"attempt to add with overflow","1248":"Array index out of bounds","474":"Array index out of bounds","986":"attempt to add with overflow","1236":"attempt to add with overflow","1370":"Array index out of bounds","1498":"Array index out of bounds","907":"Array index out of bounds","1096":"attempt to add with overflow","1547":"Array index out of bounds","1687":"attempt to add with overflow","377":"Initializer address is not the contract deployer","822":"Array index out of bounds","371":"Initialization hash does not match","883":"Array index out of bounds","1584":"Array index out of bounds","554":"DKIM key has already been registered","1383":"attempt to add with overflow","1188":"attempt to add with overflow","164":"attempt to add with overflow","1566":"Array index out of bounds","865":"Array index out of bounds","1054":"Array index out of bounds","536":"Storage slot 0 not allowed. Storage slots must start from 1.","1109":"Array index out of bounds","146":"Array index out of bounds","463":"Array index out of bounds","780":"Array index out of bounds","1304":"attempt to add with overflow","646":"SharedImmutable already initialized"}},{"name":"get_escrow_registry_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7d3bbts4EAbgd/F1L3gYnvoqi0WRtmlhIEiKJl1gEfTd104txskI5iYjj0XwvynilrbJr7Y4PyOJj5uv159/ff+0vf12d7/5+Nfj5ubuy9XD9u529+jx94fN55/bm5vt90/Hf70x+z/KU/P7H1e3+0f3D1c/HzYfbXL0YXN9+3X/o6fdC3zb3lxvPhLtfmati0+HxiWk2jaFmabkbDm0JedybWxNnmkds/WH1jG78qL13x821sj7bo2trc1Ra4Xe2wXk0/QOpTTkraOprXWlNPqebZi6ke3RS099d0v2fQf/ovP7N/DnfgM69xuEc79BlL9BCGV6hxBN60ORsguH1ilTZh+K9NYO7Z+U3/Ok8o4nOfOeJ81/SV2kUr9Mcf99O/3/6Oz0NU22ti1zxjZMTV987cr8x8OG+rrRH7VOM619rscub2pbP/fCzkVzaOtcyqcbR+emo5zzx033fA58Ej4PPgkfgU/CF8An4Yvgk/Al8En4MvgkfAV8Aj5vwCfhQ+oQ8SF1iPiQOkR8BD4JH1KHiA+po8kX4sR39OuKAx9Sh4gPqUPEh9Qh4SOkDhEfUoeID6njJd/eBFGCmxBMmAmKfm6CSp6boDznJqi5uQkKaWYSUB1zE5S83AR1LDdBHctNCCbMBHUsN0Edy01Qx3IT1LHcBHUsM4moY7kJ6lhugjqWm6CO5SYEE2aCOpaboI7lJqhjuQnqWG6COpaZJNSx3AR1LDdBHctNUMdyE4IJM0Edy0zymN8db6qJt/a1yZi1fcrTC7t0dEuQtzbeA44ZBN4CaFOoFim9Pnswj5kaFgQcM2IsB1jGrDPfBJjTdOWNzcWebpz99MLZvz5cljHrkrNZW+Pz1NiE17N7wey+rLatXbY20mttlAKa2qgbNLVRZChqWzPmEunFuMdcfb0YNwpuVe4x170uxk3gfj/3kyBColQQwU8qiDDXXBg3Zlp7cMZxQQQ0qSBCl1DQLpKjdlN6rBO+8S3DVFfkQm69dCzTTbjT0e/mdqN+6r3tuveu6977rntP7d4nQ63ex1ynyGTS8ZvwxqHE6bVDKc/f8fk76ofkp0PN7kf3ovXTAELvA4i9DyD1PoDc+wBK5wNwpvcB2N4H4HofgO99AL3PxK73mdj1PhO79c8DIdcBBL7fl1//UShRHUA2fACXOArVfciiMaE1ADdtRBd8PIri8U/3qe/uh767H/vpPhHvfuq7+7nr7tP6K9DTx35a/bE/2zr75qMVxDqA9VegJZ4cwPor0OyfB+AarQvVMx4LpZnhrr9ePV1s0Prr1cYA1r9y1BjA+leOGgNYf2I4PYCw/pWjxgDWP283BtB7Zgvrn7cbA1j/vN0YQO8zceh9Jg69z8Sh95k49D4Tx95n4kHv/HWRq/vsoLcUO+PlffXifWss58ZJiqrcOKNRlRunPypeK2wHvS3XxbhxzZkqN645U+VG1a3KTeDW5MYFaqrcuJpNlRupcmHuUK8XNjEzbqRKVW6kSk3ujFSpyo1UqcqNVKnKjVSpyk3gPlvdPcONVKkZc3Dra11upEpVbqRKVW6kSk3uglSpyo1UqcqNVKnKjVSpyk3g1uRGqlTlRqpU5UbMUeVGzFHkdtgGQJcbMUeVm8bcj9FNbZ1nV9C4Qe877evHyvlsGMqYs3wDZcy5+DSKHXPGbKCMOa81UMZcZGugDLpF8mkUAgpHGXNZqYEy5uJPAwUV7QwKKtoZFFS0HMWhop1BQUU7g4KKdgZl0Iq23pV159Napju5n6H7P3ewH13QuWcLSkxw0Fp5QcFBC+sFBQetwhcUHLRkf5NgrF12mc0kftCq7S2CVG/mvfuRfQb9oCXegoKoB6WCBMGWYLTVIlJkgqgHpYKoB6WCqAelgqgHpYKDrvcuJ0iDLg4vKIhMIhVEJpEKIpNIBQmCQkFkEqkgMolUEJlEKohM0haM9aKEmDMTRCYRCgZkEqkgMolUEJlEKohMIhVENdP+TZOpguTS6canNp5yEZPOotiNSzcjZihVbkxny3KfPuNx0C0DL8ZN4NbkxkqfKjeWBVW5UXWrcmPBUZUbq5Oa3INuiXkxbqRKVW6kSlVupEoB95MgQVAoiOwnFUSckwoioUkFEbqkgshRbUHyVTCwM40G3ddxSUGkHakgAoxUEJlEKkgQFAoik0gFkUmkgsgkUkFkEqkgMolQcNBdAZcURCaRCiKTCO8vM+h2fEsKEgSFgqioEzsLuaBInkFB3TuDglKWoXiDykDteiBvUEQsfIGKMVNjYzk35ktVbszEqtyY4xWvdvOjbmx3Ie5Rt8y7FDeW2FS5UXWrcqPuVuUmcGty41QFVW6kyoW5Q71AxcTMuJEqVbmRKlW5kSo1uUfdtvJS3EiVqtxIlarcSJXnq7tnuAncijEH24PqciNVqnIjVapyI1WqciNVanJ7pEpVbqRKVW6kSlVupEpVbgK3JjdSpSo3Yo4qN2KOKjdijiY3tvXV4/69e/TP1c/t1eeb6/vdc/b/+Ov2y8P27vbw8OHfH3/+Zdf4Pw==","brillig_names":["get_escrow_registry_status"],"assert_messages":{"311":"Array index out of bounds","180":"Array index out of bounds","20":"Function get_escrow_registry_status can only be called statically","113":"Storage slot 0 not allowed. Storage slots must start from 1.","148":"Array index out of bounds","299":"attempt to add with overflow","340":"attempt to add with overflow","159":"attempt to add with overflow","188":"Array index out of bounds","319":"Array index out of bounds","237":"Array index out of bounds","327":"Array index out of bounds","219":"Array index out of bounds","251":"attempt to add with overflow","15":"Not initialized","172":"Array index out of bounds","201":"attempt to add with overflow"}},{"name":"get_participant_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_participant_escrows"]},{"name":"get_managed_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_managed_escrows"]},{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim_bulk"],"assert_messages":{"326":"Array index out of bounds","573":"Array index out of bounds","762":"attempt to add with overflow","515":"Array index out of bounds","488":"Array index out of bounds","549":"Array index out of bounds","290":"Array index out of bounds","741":"attempt to add with overflow","220":"DKIM key has already been registered","930":"Array index out of bounds","854":"attempt to add with overflow","83":"Sender is not the registry contract","531":"Array index out of bounds","333":"Array index out of bounds","202":"Storage slot 0 not allowed. Storage slots must start from 1.","589":"Array index out of bounds","720":"Array index out of bounds","129":"Array index out of bounds","446":"Array index out of bounds","638":"Array index out of bounds","312":"SharedImmutable already initialized","775":"Array index out of bounds","434":"attempt to add with overflow","751":"Array index out of bounds","620":"Array index out of bounds","943":"attempt to add with overflow","964":"attempt to add with overflow","224":"Array index out of bounds","602":"attempt to add with overflow","791":"Array index out of bounds","922":"Array index out of bounds","465":"attempt to add with overflow","523":"attempt to add with overflow","712":"Array index out of bounds","453":"Array index out of bounds","581":"Array index out of bounds","840":"Array index out of bounds","700":"attempt to add with overflow","441":"attempt to add with overflow","822":"Array index out of bounds","499":"attempt to add with overflow","560":"attempt to add with overflow","48":"Not initialized","953":"Array index out of bounds","804":"attempt to add with overflow","481":"Array index out of bounds","286":"Storage slot 0 not allowed. Storage slots must start from 1.","539":"attempt to add with overflow","411":"Array index out of bounds","405":"attempt to add with overflow","914":"Array index out of bounds","728":"Array index out of bounds","783":"Array index out of bounds","140":"Array index out of bounds","902":"attempt to add with overflow","652":"attempt to add with overflow"}},{"name":"check_and_register_participant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/+xdB3hU1RKOpJBQE7uCErAAironm7IBFEFAQKUJqBQ1VUQERURBRRQFRUVQml2xF8DeCypib9h7b9hFseObA7vmsl5gYf//cuZl7/fNY3PddzL1nzNzSjZJW/UsCKWl3dxy1edNhNKj/9YRyo97F/vX+znD512Wz/+3gc+7Rj7vcn3eberzbiuhvePeNfP5Xr7Pu+Y+71r4vNvZ510roey4d6193u3i825Xn3dtfN7t5vNud593e/i8C/m8Mz7vCnzehX3eFfq8K/J5V+zzrsTnXcTnXanPu7Y+79r5vGvv825Pn3d7+bzr4PNub593HX3edfJ5t4/Pu84+77r4vOvq825fn3fdfN5193nXw+fdfj7v9vd5d4DPu54+73r5vOvt866Pz7u+Pu8O9HnXz+ddf593A3zeHeTz7mCfd4f4vBvo826Qz7vBPu+G+Lw71OfdYT7vDvd5V+bzrtznXUX0nffZJPrv3tF/w6HiwsKqkoIqEzZloYLS8khRqLCovDhiIqYoUlRZEAmHqyKFkZLS8tKSUKkpDFeZ6qLScHVo1XNmnZqxQkk9BRVMPidtMJ//DvHvY3nbMm1VrovxavWwIvrZps/Y51aez5Oi34n9/ybLz2cJnS00pU7N+9iTHqeDUHKPaQ0ca3IdnG3OgflQKMTU3y7Asc4C6u9cJfrbFTjW2UD9nQfUnx82nOPBhnM9n8/zfJ4Shw1T5efzhaYJTQ8AG9oAx5oKtM0FSnx7N+BY5wP1d6ES/e0OHGsaUH8zyNhwgQcDLvR8nuH5PD0OG2bKz7OEZgvNCQAb9gCONRNom4uU+HYIONYsoP4uVqI/AxxrNlB/l5Cx4SIPBlzs+XyJ5/OcOGy4VH6+TOhyoSsCwIYC4FiXAm1zpRLfDgPHugyov6uU6K8QONblQP3NJWPDlR4MuMrzea7n8xVx2HC1/HyN0LVC1wWADUXAsa4G2uZ6Jb5dDBzrGqD+blCivxLgWNcC9XcjGRuu92DADZ7PN3o+XxeHDTfJzzcL3SI0LwBsiADHuglom/lKfLsUONbNQP0tUKK/tsCxbgHq71YyNsz3YMACz+dbPZ/nxWHDbfLz7UJ3CN0ZADa0A451G9A2dynx7fbAsW4H6u9uJfrbEzjWHUD93UPGhrs8GHC35/M9ns93xmHDvfLzfUL3Cz0QADbsBRzrXqBtHlTi2x2AY90H1N9DSvS3N3Cs+4H6e5iMDQ96MOAhz+eHPZ8fiMOGR+TnhUKPCj0WADZ0BI71CNA2jyvx7U7AsRYC9bdIif72AY71KFB/T5Cx4XEPBizyfH7C8/mxOGxYLD8/KfSU0NMBYENn4FiLgbZ5RolvdwGO9SRQf88q0V9X4FhPAfX3HBkbnvFgwLOez895Pj8dhw3Py88vCL0o9FIA2LAvcKzngbZ5WYlvdwOO9QJQf0uU6K87cKwXgfp7hYwNL3swYInn8yuezy/FYcOr8vNrQq8LvREANvQAjvUq0DZvKvHt/YBjvQbU31tK9Lc/cKzXgfp7m4wNb3ow4C3P57c9n9+Iw4Z35Od3hd4Tej8AbDgAONY7QNt8oMS3ewLHeheovw+V6K8XcKz3gPr7iIwNH3gw4EPP5488n9+Pw4aP5edPhD4V+iwAbOgNHOtjoG0+V+LbfYBjfQLU3xdK9NcXONanQP19ScaGzz0Y8IXn85eez5/FYcNX8vNSoa+FvgkAGw4EjvUV0DbfKvHtfsCxlgL1950S/fUHjvU1UH/fk7HhWw8GfOf5/L3n8zdx2PCD/Pyj0E9CywLAhgHAsX4A2uZnJb59EHCsH4H6+0WJ/g4GjvUTUH/LydjwswcDfvF8Xu75vCwOG36Vn38T+l3ojwCw4RDgWL8CbfOnEt8eCBzrN6D+/lKiv0HAsX4H6u9vMjb86cGAvzyf//Z8/iMOG1bIz//UWWWETdL52DAYONYKoG3qpOvw7SHAsf4B6i9dif4OBY6Vlo7TX0Y6Fxusf8cwIN3zOcPzeZP01bEhU37OEqorlB0ANhwGHCsTaJscJb59OHCsLKD+6inRXxlwrLpA/dUnY0OOBwPqeT7X93zOjsOGBvJzQ6FGQo0DwIZy4FgNgLbJVeLbFcCxGgL1l6dEf5XAsRoB9bcpGRtyPRiQ5/m8qedz4zhs2Ex+3lxoC6EtfbChDtg2O6fh9LkVTp/Ge8epHTefrIetgH61NUkPW/voAX2H6jYw3ldezUDjc1ugjpl8NtlwPsPxL/wwZhtvDZJW83lbz/smcRjTVH7eTmh7oWZRjMkUykmriau16SSU3GO2SOPkrTQMnyb2wauL/GhSbB4Lxti/9j+8H/euuU+gopOqV4kb6KQFUSc1+UDwa06alKABHylzC5+xykMVlUWmvLiyxFSVFUUqKkrDxhSUFZcVlxdEqqvKi0ykKCJjVpQVROTXFZRVmKpQWXGVDcR6aTVB533QgdgCPAGKPTukExm2g6PH3RHoDCy5d0yvUTBoXF9eEQBgeUUFbGxcpI12Ajt+DPjtuM3TVmVT+wSRTVmAi+azKZDPLA+fO0fjomX031bRf1tH/90lveaWfvvsKj+3EdpNaHehPYRCQkaoQCgsVChUJFQsVCIUESoVaivUTqi90J5Cewl1sHIJdRTqJLSPUGehLkJdhfYV6ibUXaiH0H5C+wsdINRTqJdQb6E+Qn3jZxe7RGcSQWaFlqSscGA6keEDCVmhn+NZwcrdj5AVgnS2ViRn659OZLg/wdkGOO5sVu4Byp2tNcnZDkonMnwQwdkOdtzZrNwHBzTfDSX3rMwSA9Lx8+hD0nUG2S6kIBuYTmR4ICHIBjkeZFbuQUqCzILBIYQgGxxQ8ZQsn0M2nM/C+Bd+beSWnnZxK8/nXTyfh8S1kQ+Vnw8TOlyoLD2AP22Gs5U5FBib5WDAi7dNuccGh3k+H+75XBZnmwr5uVKoSqg6ffXxkH5p8WMwIS6PANo6vgmDxqadgfaPNSmGyphHCg0TOkpouNDRQiOERgodI3Ss0Cih44RGCx0vNEboBKEThcYKjRM6SehkoVOExgudKjRB6DSh04UmCp0hdKbQJKHJQmcJnS00RegcoXOFzhOaKnR++qrGlrdPMTS9Zgkq9u5In3fDfN4d5fNuuM+7o33ejfB5N9Ln3TE+7471eTfK591xPu9G+7w73ufdGJ93J/i8O9Hn3Vifd+N83p3k8+5kn3en+Lwb7/PuVJ93E3zenebz7nSfdxN93p3h8+5Mn3eTfN5N9nl3ls+7s33eTfF5d47Pu3N93p3n826qz7vz02swJvbE8Hfv6L+h5J7VMCdZrB0KGKuqetVzJJCv/Ztw5mbxtkhS5sphOP2VHoUbywwH2uIAFbaoMkfD9FdhRsDGipiRQFv0VGGLkDkGpb+qkDkWNVZFyIwC2qKXBltEQuY4lP4k94wGjVUlYx0PtEVvBbaoEJnHgPQXkbFOAI0lIpsTgbbo474tqqzMYzH6q7BjjcOMFbFjnQS0RV/3bWGHNidD9Fe1cqxTIGNVrBxrPNAWBzpvi8hKmU+F6G8lm2YCYqyqVWOdBrRFP9dtUbFK5tMR+ousGmsiYqxVIpszgLbo77gtKqMynwmQuTw61iTAWCXRsSYDbTHAbVv8u2v5rORlNrGxzk56rEh1bKwpQFsc5LQtIuUxmc9JXn8xmc25SY9V8u9Y5wFtcbDTtij6V+apScts/h3r/HRcz9Lbz0t6c0RAtggl9xhg38wA+z6mF9AWA5XYAtgfMMD61vQF2mKQElsA6yADnMeb/kBbDFZiC+B8zwDnK+ZgoC2GKLEFMK8ZIC6bQUBbHEqyRTrYFsD4NUD/Myz91YnTnwvryrGxpgHnoXYM9B4gu9/qiHT8Pqjp6Vhbo+W2h6mGEuQe1cRtua0/TifIfVxA2JgsnxcA4xFoa3Oc435j42UawW/GOC73UFK8nKAkXi4ExgvQ1oalP7SdZ6Tr4HPmhvNZEP/C8ha/F9zibmzP94WezzM8n2emr74XfJb8PFtojtBF6WveCx5K7jH2UPWRhBgfR8a2ZPmzMs8iyH2Skpp1FnCefzEQJ4F+Y7TYog3QFpekc2LYpbjww9iLPVh6SYIYe6n8fJnQ5UJXEDHWXloxjIA14x3HWCvzpQS5T1US15cCY/FKIMYC/cZoscVuQFtclc6JYZfiwg9jr/Rg6VUJYuxc+flqoWuEriVirL0U6CgC1pzuOMZamecS5J6oJK7nAmPxOiDGAv3GaLHF7kBbXJ/OiWGX4sIPY6/zYOn1CWLsDfLzjUI3Cd1MxFh76dpwAtZMchxjrcw3EOSerCSubwDG4i1AjAX6jdFiiz2AtpiXzolhl+LCD2Nv8WDpvAQxdr78vEDoVqHbiBhrL7U8moA1UxzHWCvzfILc5yiJ6/nAWLwdiLFAvzFabBEC2uKOdE4MuxQXfhh7uwdL70gQY++Un+8SulvoHiLG2kuDRxCwZqrjGGtlvpMg9/lK4vpOYCzeC8RYoN8YLbYwQFvcl86JYZfiwg9j7/Vg6X0JYuz98vMDQg8KPUTEWHsp+0gC1lzgOMZame8nyH2hkri+HxiLDwMxFug3RostCoC2eCSdE8MuxYUfxj7swdJHEsTYhfLzo0KPCT1OxFj7Ry+OIWDNLMcx1sq8kCD3bCVxvRAYi4uAGAv0G6PFFmGgLZ5I58SwS3Hhh7GLPFj6RIIYu1h+flLoKaGniRhr/6jQsQSsudhxjLUyLybIfYmSuF4MjMVngBgL9BujxRaFQFs8m86JYZfiwg9jn/Fg6bMJYuxz8vPzQi8IvUjEWPtH20YRsOZyxzHWyvwcQe4rlMT1c8BYfAmIsUC/MVpsUQS0xcvpnBh2KS78MPYlD5a+nCDGLpGfXxF6Veg1IsbaP4p5HAFr5jqOsVbmJQS5r1YS10uAsfg6EGOBfmO02KIYaIs30jkx7FJc+GHs6x4sfSNBjH1Tfn5L6G2hd4gYa//o8GgC1lznOMZamd8kyH29krh+ExiL7wIxFug3RostSoC2eC+dE8MuxYUfxr7rwdL3EsTY9+XnD4Q+FPqIiLH2j7ofT8CamxzHWCvz+wS5b1YS1+8DY/FjIMYC/cZosUUEaItP0jkx7FJc+GHsxx4s/SRBjP1Ufv5M6HOhL4gYW5pe8zcQveMmq9P5jmOslflTgtwLlMT1p8BY/BKIsUC/MVpsUQq0xVfpnBh2KS78MPZLD5Z+lSDGLpWfvxb6RuhbIsa2Ta/5m7LecZM+++M4xlqZlxLkvkNJXC8FxuJ3QIwF+o3RYou2QFt8n86JYZfiwg9jv/Ng6fcJYuwP8vOPQj8JLSNibLv0mr/R7R03WZ3e7TjGWpl/IMh9j5K4/gEYiz8DMRboN0aLLdoBbfFLOieGXYoLP4z92YOlvySIscvl51+FfhP6nYix7WXssQSsud9xjLUyLyfI/YCSuF4OjMU/gBgL9BujxRbtgbb4M50Twy7FhR/G/uHB0j8TxNi/5Oe/7Tuhf4gYu6eMPY6ANQ87jrFW5r8Icj+iJK7/AsaiZQ7FF9BvjBZb7Am0xSYZnBh2KS78MNb+EMPSTTISw9g68iFdKEMoM4OHsXvJ7z2JgDWPOY6xVmarY/S4jyuJ6zrAWMwCYizQb4wWW+wFxNi6GZwYdiku/DA2y4OrdRPE2Gz5kCNUT6g+EWM7yO89mYCxix3HWCtzNgFjn1QS19nAWGwAxFig3xgttugAxNiGGZwYdiku/DC2gQdXGyaIsY3kQ2OhXKE8IsbuLb/3FALGPuM4xlqZGxEw9lklcd0IGIubAjEW6DdGiy32BmLsZhmcGHYpLvwwdlMPrm6WIMZuLh+2ENpSaCsixnaU3zuegLEvOI6xVubNCRj7opK43hwYi1sDMRboN0aLLToCMXabDE4MuxQXfhi7tQdXt0kQY7eVD02EmgptR8TYTvJ7TyVg7BLHMdbKvC0BY19REtfbAmNxeyDGAv3GaLFFJyDGNsvgxLBLceGHsdt7cLVZghibLx+aC7UQ2oGIsfvI751AwNjXHcdYK3M+AWPfUBLX+cBY3BGIsUC/MVpssQ8QY3fK4MSwS3Hhh7E7enB1pwQxdmf50FKolVBrIsZ2lt97GgFj33YcY63MOxMw9h0lcb0zMBZ3AWIs0G+MFlt0BmLsrhmcGHYpLvwwdhcPru6aIMa2kQ+7Ce0utAcRY7vI7z2dgLHvO46xVuY2BIz9QElctwHGYgiIsUC/MVps0QWIsSaDE8MuxYUfxoY8uGoSxNgC+RAWKhQqImJsV/m9EwkY+7HjGGtlLiBg7Cda/oYUMBaLgRgL9BujxRZdgRhbksGJYZfiwg9jiz24WpIgxkbkQ6lQW6F2RIzdV37vGQSM/dxxjLUyRwgY+4WW+/SAsdgeiLFAvzFabLEvEGP3zODEsEtx4Yex7T24umeCGLuXfOhg9SXUkYix3eT3nknA2KWOY6yVeS8Cxn6t5WwRMBY7ATEW6DdGiy26ATF2nwxODLsUF34Y28mDq/skiLGd5UMXoa5C+xIxtrv83kkEjP3OcYy1MncmYOz3WtZZgLHYDYixQL8xWmzRHYix3TM4MexSXPhhbDcPrnZPEGN7yIf9hPYXOoCIsT3k904mYOxPjmOslbkHAWOXKYnrHsBY7AnEWKDfGDW2AGJsrwxODLsUF34Y29ODq70SxNje8qGPUF+hA4kYu5/83rMIGLvccYy1MvcmYOyvSuK6NzAW+wExFug3Rost9gNibP8MTgy7FBd+GNvPg6v9E8TYAfLhIKGDhQ4hYuz+8nvPJmDsH45jrJV5AAFj/1QS1wOAsTgQiLFAvzFabLE/EGMHZXBi2KW48MPYgR5cHZQgxg6WD0OEDhU6jIixB8jvnULA2BWOY6yVeTABY/9REteDgbF4OBBjgX5jtNjiACDGlmVwYtiluPDD2MM9uFqWIMaWy4cKoUqhKiLG9pTfew4BY+s0dRtjrczlBIxNb6ojrsuBsVgNxFig3xgttugJxNgjMjgx7FJc+GFstQdXj0gQY4fKhyOFhgkdRcTYXvJ7zyVgbJbjGGtlHkrA2LpK4nooMBaHAzEW6DdGiy16ATH26AxODLsUF34YO9yDq0cniLEj5MNIoWOEjiVibG/5vecRMLae4xhrZR5BwNj6SuJ6BDAWRwExFug3RostegMx9rgMTgy7FBd+GDvKg6vHJYixo+XD8UJjhE4gYmwf+b1TCRjbyHGMtTKPJmBsYyVxPRoYiycCMRboN0aLLfoAMXZsBieGXYoLP4w90YOrYxPE2HHy4SShk4VOIWJsX/m95xMwdlPHMdbKPI6AsZspietxwFgcD8RYoN8YLbboC8TYUzM4MexSXPhh7HgPrp6aIMZOkA+nCZ0uNNGDsbGnDtjOeWk4fU7I4Ph2epzMyfLZNB2nv5bAODkDqL9MGaNeWk0u8T7ofI3k28vvmRlEhs/MwI87CQh0LLkneRAFNO5KZ7O81knjOxsweENMPlumc4Jissdv8adggbMmy1t6lMcY05lRJwkClZAG8Dr2WdEAOtvKxDDAZAIyTQanZpbcdYhyJ70lkazDUHKPsY45hVA+ngNO7zFQsONOiI6L1sXZJF2cS9LFuURdWCBk6GJLx9sprHjYauPKXbEO/mi+vzWpdRFf3oWSewzQLw3Q1gapv8yo3vxm3Gnrqc91+ZN3TEbOQunEO6k8b22z5FByj5lCSgJepteTZ7Ou32N5Po8ACk0d6Weuz+Qt6bXQDDcBpmlTjl9O9UxONtQ+69I50j7ne8Yy4bDERmWJqa6sDheVlBaUm+JwcXF1YXVJcaSwsrqosKyypMoUloULSqtKQtUmUlVVUhSuKCmuLq2sKK72grapDIcLK0vLK0xRQXFZeShSGS4LVReWhAtCZZXhksrKcKS4uCwcriyOVEdKIwUFZdXhSKiopKQ0VFwQLi1g2ef8qH2CrK6bkqrraVHHmq4FwFn8TSOA9QWkxHUBsXqxuphO0MWFJF1cSNRFU1Ilt73jlRwrHpo5XsmxfD9fSSUH9EsDtLXJT1Vy8Y+ZRqrkZmis5GaQK7kZBFDYsRZWcjMz3ASYHUmVwkxlldwsYCWXD6zkWPaZ5ank1pQUXG7BMflkJZjZGhPMbHKCmU1IMDsHlGCQ67wOrRWtlmCS5atlQBVAsnzOASZooP+ZlqQEMCeBBJ2sTi/KwCXC1dqjDiXonUn2uej/qNV6cdSxLvHbyBRK7jFr2tCD3KGW9H3kQHBhGD6mQzSosnSY7FiXOm4PGzCXEiZGl5EmiZcRW9GXkHRxOUkXl5Pb8gxd7OJ4W54VD7s63pZn+X4bJW15oF8aoK1Nm1RbPv5ZmbNQOvFOdq9gdk0uJSWBK4hdE8vzFQRQCClpy18KnAhemeEmwIRIVeWVAbTlkfa5CtiWbwOs+ln2uWojVP2s40tzo451tRYAZ/E3lwDW15AS1zXE6sXq4mqCLq4l6eJa8lEZxsy+wPFKjhUPYccrOZbvFyqp5IB+aYC2NoWpSi7+MXNJldx1Giu568iV3HUEUIjUwkru+gw3ASZCqhSuV1bJ3QCs5AqBlRzLPjdshA1WF2dw4l5LgrlRY4K5kZxgbiQkmLZKNlghAWxX0gw2Wb7aKdlgdRMwQQP9z7QjJYCbAthgdTNwg1Wbpm4m6LYk+9zsYx901dsUeGdfa+BYtwBzWZD3/91CmjjMyyAyPC8DP+58YGJjyT0/o0bBoHEDvf+vtZL7/5C7Nr1BsWBts+lknW4+cDbgRfUY0/8P22ZvjQbQbX7bZhEGWEBApgXkBTmU3HWIcifL4+2OL2pax7ydUFbeQSqx7yAu5N1G0sWdJF3cSd6eytDFXo4varLioYPji5os399byaIm0C8N0NZm79SiZvyzMmehdOKdVN7F7DnfTkoCdxF7zpbnuwig0FnJoubtwIng3RluAkxnUk/u7gAWNZH2uQe4qLk3sGfKss89G2F7amtSdX1v1LHu0wLgLP7uJYD1/aTEdT+xerG6uI+giwdIuniAqIvWpEquq+OVHCse9nW8kmP5fjcllRzQLw3Q1qZbqpKLf8y9pEruQY2V3IPkSu5BAijsXwsruYcy3ASY/UmVwkPKKrmHgZVcN2Alx7LPwxthe+qtGZy415JgHtGYYB4hJ5hHCAmmp5LtqUgA60CawSbLVy8l21MXAhM00P9ML1ICWBjA9tRHgdtT927qZoLuSbLPo/9HrdbHoo71uN9GplByj1nThh7kDrVkxwJuiqLcNxfTIRpUWTpMdqxFjtvDBswiwsToCdIk8QliK/pxki4Wk3SxmNyWZ+iir+NteVY8HOh4W57l+/2UtOWBfmmAtjb9Um35+GdlzkLpxDvZfZLZNVlESgJPErsmlucnCaBwsJK2/CLgRPCpDDcB5mBSVflUAG15pH2eBrbl+wGrfpZ9nt4IVT/r+NIzUcd6VguAs/h7hgDWz5ES13PE6sXq4lmCLp4n6eJ58lEZxsx+oOOVHCseBjleybF8f7CSSg7olwZoazM4VcnFP+YZUiX3gsZK7gVyJfcCARQOr4WV3IsZbgLM4aRK4UVlldxLwEpuMLCSY9nnpY2wweqxDE7ca0kwL2tMMC+TE8zLhARTrmSDFRLADiTNYJPlq0LJBqslwAQN9D9TQUoASwLYYPUKcINVv6ZuJuhykn1eWUt3B7HvZVEG/pIhJJ696njn9GAx1KB0vG1eI8uN+JuplxJ8B3kX7uuO69D69msZ+C4WMGbMa0B7vOG4Pay/vEGYh75J3seXLH+2y/8mQe7qpm5jd0uS3EeQ5rporAXax7BkRtvmLVwsFljetkyrmS/bn7cRn1oR/Wwp9tn+3tjnJtHvxP5/b8uHd4TeFXovY9X7zDibr00noeQe01zJFbJvA/NHlofP96OG+CD674fRfz+K/vtxFCNaRb//ifz8qdBnQp8LfSH0pdBXQkuFvhb6Ruhboe+Evhf6QehHoZ+Elgn9LPSL0HKhX4V+E/pd6A+hP4X+Evrb+ozQP1GH2ESojlC6UIZQplCWUF2hbKEcoXqxu4djBYRlPn/V/z+wC7A/IHXO6mcSGbaDo8dtkIlDLpbcDTJrFAwaN9Db1j8kOVvDTCLDDQnO1shxZ7NyN1LubB+RnK1xJpHhxgRny3Xc2azcuQRnY/BqEbhRJn6um5epM8g+JgXZpplEhjclBNlmjgeZlXszJUFmwSCPEGSbZ2KdNb6g/MBTOH7o+fyx5/OQuIJyC+FpS6GthLbOrHkfe9ANR2BWNFsAfX4bsm3s+DEbbOn5vJXn89aZq9tmW/m5iVBToe0yVx8P6Zc2Ljcn+Pv2OJ2a+OYGOubfByaSWPHfTOTPF2ou1EJoB6EdhXYS2lmopVArodZCuwjtKtRGaDeh3YX2ELLZ1AgVCIWFCoWKhIqFSoQiQqVCbYXaCbUX2lNoL6EOVv9CHYU6Ce0j1Fmoi1DXzJrzGLH6v1lmTTMq9i7f511zn3ctfN7t4PNuR593O/m829nnXUufd6183rX2ebeLz7tdfd618Xm3m8+73X3e7eHzLuTzzvi8K/B5F/Z5V+jzrsjnXbHPuxKfdxGfd6U+79r6vGvn8669z7s9fd7t5fOug8+7vX3edfR518nn3T4+7zr7vOvi866rBw9jz/ruRlwfzEkWa5sBcmFV9aonH5hXhzm+sSoqc2VznP5KW+DGMjsAbXGUCltUmR1h+qswO8HGipidgbYYrsIWsvCJ0l9VyLRCjVURMq2Btjhagy0iIbMLSn+Se3YFjVUlY7UB2mKEAltUiMy7gfQXkbF2B40lIps9gLYY6b4tqqzMIYz+KuxYBjNWxI5VALTFMe7bwg5twhD9Va0cqxAyVsXKsYqAtjjWeVtEVspcDNHfSjZNCWKsqlVjRYC2GOW6LSpWyVyK0F9k1VhtEWOtEtm0A9riOMdtURmVuT1A5vLoWHsCxiqJjrUX0Baj3bZFQezYd4fkZTaxsfZOeqxIdWysjkBbHO+0LSLlMZk7Ja+/f4/z75P0WCX/jtUZaIsxTtui6F+ZuyQts/l3rK7AdZhhwIN+Jzhyqn8djwH2zQyw72OOBtriRCW2APYHDLC+NccAbTFWiS2AdZABzuPNcUBbjFNiC+B8zwDnK2YM0BYnKbEFMK8ZIC6bsUBbnKzkmi5g/Bqg/xmW/urE6c+FdeV//2YocB5qx0DvAbL7rbYn7IPqlom1NVpue0ipGUHuaY4f6rT+2I0g93QlF5h0B8Yj0NZmuuN+Y+NlX4LfzHBc7makeJmpJF56AOMFaGuD1J+1bfzeZYsTsT3KPTyfZ3gOMM+M21e+n3xvf6EDhHpmrnnvcii5x9jDtfkEn5zj+LXDVub9CHJfpKTG2g84L+0FjGug3xgttvgUuI+1dyYnhl2KCz+M7eXB1d4JYmwf+V5foQOF+hEx1l5e0JyANZc6jrFW5j4EuS9TEtd9gLHYH4ixQL8xWmzxGRBjB2RyYtiluPDD2P4eXB2QIMYeJN87WOgQoYFEjLWXw7QgYM2VjmOslfkggtxXKYnrg4CxOAiIsUC/MVps8TkQYwdncmLYpbjww9hBHlwdnCDGDpHvHSp0mNDhRIy1l2/tQMCaaxzHWCvzEILc1yqJ6yHAWCwDYizQb4wWW3wBxNjyTE4MuxQXfhhb5sHV8gQxtkK+VylUJVRNxFh7ueGOBKy5wXGMtTJXEOS+UUlcVwBj8QggxgL9xmixxZdAjB2ayYlhl+LCD2OP8ODq0AQx9kj53jCho4SGEzHWXh67EwFrbnEcY63MRxLknqckro9EnnkHYizQb4wWW3wFxNgRmZwYdiku/DD2aA+ujkgQY0fK944ROlZoFBFj7eXcOxOw5lbHMdbKPJIg921K4nok8jwsEGOBfmO02GIpEGNHZ3Ji2KW48MPY4zy4OjpBjD1evjdG6AShE4kYa//4QUsC1tzpOMZamY8nyH2Xkrg+HhiLY4EYC/Qbo8UWXwMxdlwmJ4Zdigs/jB3rwdVxCWLsSfK9k4VOERpPxFj7x2VaEbDmXscx1sp8EkHu+5TE9UnAWDwViLFAvzFabPENEGMnZHJi2KW48MPYUz24OiFBjD1Nvne60EShM4gYa/94V2sC1jzoOMZamU8jyP2Qkrg+DRiLZwIxFug3RostvgVi7KRMTgy7FBd+GHumB1cnJYixk+V7ZwmdLTSFiLH2jyPuQsCahY5jrJV5MkHuR5XE9WRgLJ4DxFig3xgttvgOiLHnZnJi2KW48MPYczy4em6CGHuefG+q0PlC04gYa//47K4ErFnkOMZamc8jyP2Ekrg+DxiL04EYC/Qbo8UW3wMx9oJMTgy7FBd+GDvdg6sXJIixF8r3ZgjNFJpFxFj7x73bELDmKccx1sp8IUHup5XE9YXAWJwNxFig3xgttvgBiLFzMjkx7FJc+GHsbA+uzkkQYy+S710sdInQpUSM/TGj5m/2ecdNVqfPOY6xVuaLCHI/rySuLwLG4mVAjAX6jdFiix+BGHt5JieGXYoLP4y9zIOrlyeIsVfI964UukpoLhFjf8qo+Ruo3nGT1elLjmOslfkKgtwvK4nrK4CxeDUQY4F+Y7TY4icgxl6TyYlhl+LCD2Ov9uDqNQli7LXyveuErhe6gYixyzJq/qa0d9xkdfqq4xhrZb6WIPdrSuL6WmAs3gjEWKDfGC22WAbE2JsyOTHsUlz4YeyNHly9KUGMvVm+d4vQPKH5RIz9WQYOEbDmTccx1sp8M0Hut5TE9c3AWFwAxFig3xgttvgZiLG3ZnJi2KW48MPYBR5cvTVBjL1Nvne70B1CdxIx9hcZ2BCw5l3HMdbKfBtB7veUxPVtwFi8C4ixQL8xWmzxCxBj787kxLBLceGHsXd5cPXuBDH2HvnevUL3Cd1PxNjlMnABAWs+dBxjrcz3EOT+SElc3wOMxQeAGAv0G6PFFsuBGPtgJieGXYoLP4x9wIOrDyaIsQ/J9x4WekRoIRFjf5WBwwSs+dRxjLUyP0SQ+zMlcf0QMBYfBWIs0G+MFlv8CsTYxzI5MexSXPhh7KMeXH0sQYx9XL63SOgJocVEjP1NBi4kYM2XjmOslflxgtxfKYnrx4Gx+CQQY4F+Y7TY4jcgxj6VyYlhl+LCD2Of9ODqUwli7NPyvWeEnhV6joixv8vARQSs+cZxjLUyP02Q+1slcf00MBafB2Is0G+MFlv8DsTYFzI5MexSXPhh7PMeXH0hQYx9Ub73ktDLQkuIGPuHDFxMwJofHMdYK/OLBLl/VBLXLwJj8RUgxgL9xmixxR9AjH01kxPDLsWFH8a+4sHVVxPE2Nfke68LvSH0JhFj/5SBSwhY87PjGGtlfo0g9y9K4vo1YCy+BcRYoN8YLbb4E4ixb2dyYtiluPDD2Lc8uPp2ghj7jnzvXaH3hN4nYuxfMnCEgDW/OY6xVuZ3CHL/riSu3wHG4gdAjAX6jdFii7+AGPthJieGXYoLP4z9wIOrHyaIsR/J9z4W+kToUyLG/i0DlxKw5i/HMdbK/BFB7r+VxPVHwFj8DIixQL8xWmzxNxBjP8/kxLBLceGHsZ95cPXzBDH2C/nel0JfCS0lYuwKGbgtAWvStnMbY63MXxDk3mQ7HXH9BTAWvwZiLNBvjBZbrABi7DeZnBh2KS78MPZrD65+kyDGfivf+07oe6EfiBj7jwzcjoA1GY5jrJX5W4LcmUri+ltgLP4IxFig3xgttvgHiLE/ZXJi2KW48MPYHz24+lOCGLtMvvez0C9Cy4kYmyZjtydgTbbjGGtlXkaQO0dJXC8DxuKvQIwF+o3RYos0ZA81kxPDLsWFH8b+6sHV3xLE2N/le38I/Sn0FxFjN5Gx9yRgTQPHMdbK/DtB7oZK4vp3YCz+DcRYoN8YLbbYBGiLFZmcGHYpLvww9m8Prq5IEGP/ke+lZcl/E6qTxcPYOvJ79iJgTa7jGGtl/ocgd56W+hQYi+lZOL6AfmO02KIOsr7P4sSwS3Hhh7HWB2NYmpGVGMZmyveyhOoKZRMxNl3s24GANZs7jrFWZqtj9LhbKInrTGAs5gAxFug3Rost0oEYWy+LE8MuxYUfxuZ4cLVeghhbX77XQKihUCMixmZY+xIwdmvHMdbKXJ+Asdsoiev6wFhsDMRYoN8YLbbIAGJsbhYnhl2KCz+MbezB1dwEMTZPvrep0GZCmxMxNlPs25GAsU0dx1grcx4BY7dTEtd5wFjcAoixQL8xWmyRCcTYLbM4MexSXPhh7BYeXN0yQYzdSr63tdA2QtsSMTZL7NuJgLH5jmOslXkrAsY2VxLXWwFjsQkQY4F+Y7TYIguIsU2zODHsUlz4YWwTD642TRBjt5PvbS/UTCifiLF1xb77EDB2R8cx1sq8HQFjd1IS19sBY7E5EGOBfmO02KIuEGNbZHFi2KW48MPY5h5cbZEgxu4g39tRaCehnYkYmy327UzA2FaOY6yVeQcCxrZWEtc7AGOxJRBjgX5jtNgiG4ixrbI4MexSXPhhbEsPrrZKEGNby/d2EdpVqA0RY3PEvl0IGNvGcYy1MrcmYOxuSuK6NTAWdwNiLNBvjBZb5AAxdvcsTgy7FBd+GLubB1d3TxBj95DvhYSMUAERY+uJfbsSMDbkOMZamfcgYKxREtd7AGMxDMRYoN8YLbaoB8TYwixODLsUF34YG/bgamGCGFsk3ysWKhGKeDA29tQB2zkvDafPoiyOb6fHyZz0XZsZOP19ADxzXgrUnz3KUi+tJpd4H3S+RvLt5bdtFpHhtln4cdsBgY4ld7usGgWDxl3pbJbXOml8ZwMGb4jJ5wcZnKBo7/Fb/G0uwFnTyhMiUR5jTGdGnSQIVEIawOvYe0YDaC8rE8MA7QnI1B6cmlly1yHKnfTRGrIOQ8k9xjpmB0L5uDc4vcdAwY47ITouWhd7kXTRkaSLjkRdWCBk6KLQ9SsdSD5QtHHlrlgHfzTfLya1LuLLu1ByjwH6pQHa2iD1lxnVm9+MO2099bkuf/KOychZKJ14J5Wd1jZLDiX3mA6kJOBlej15Nuv6PZbnTgRQaOtIP3N9Jm9J7+nLchNg2m7H8ct9PJOTDbXPunSOtE9nz1gmHJbYqCwx1ZXV4aKS0oJyUxwuLq4urC4pjhRWVhcVllWWVJnCsnBBaVVJqNpEqqpKisIVJcXVpZUVxdVe0DaV4XBhZWl5hSkqKC4rD0Uqw2Wh6sKScEGorDJcUlkZjhQXl4XDlcWR6khppKCgrDocCRWVlJSGigvCpQUs+3SO2ifI6vptUnXdJVpdd9UC4Cz+uhDAel9S4tqXWL1YXXQl6KIbSRfdiLp4m1TJtXf9UhNSPOzpeCXH8v29lFRyQL80QFubvVKVXPxjupAque4aK7nu5EquOwEUOtXCSq5HlpsA04lUKfRQVsntB6zk9gJWciz77Oep5NaUFFxuwTH5ZCWY/TUmmP3JCWZ/QoLpHFCCQa7zOrRWtFqCSfo4R0AVQLJ8HgBM0ED/M11ICeCABBJ0sjrtmYVLhKu1Rx1K0J1J9un5f9Rq7RVttfb228gUSu4xa9rQg9yhlnTbCwguDMPHdIgGVZYOkx2rj+P2sAHThzAx6kuaJPYltqJ7k3RxIEkXB5Lb8gxddHO8Lc+Kh+6Ot+VZvt9DSVse6JcGaGvTI9WWj39W5iyUTryT3X7MrkkfUhLoR+yaWJ77EUChp5K2fB/gRLB/lpsA05NUVfYPoC2PtM8AYFu+B7DqZ9lnwEao+lnHlw6KVv0HawFwFn8HEcD6EFLiOoRYvVhdHEzQxUCSLgaSj8owZva9Ha/kWPHQx/FKjuX7fZVUckC/NEBbm76pSi7+MQeRKrlBGiu5QeRKbhABFAbUwkpucJabADOAVCkMVlbJDQFWcn2BlRzLPkM2wgarXlmcuNeSYA7VmGAOJSeYQwkJ5mAlG6yQANadNINNuhOgZIPVYcAEDfQ/cwgpARwWwAarw4EbrHps52aCPphkn8N97IOuet8G3tn3EXCsMmAuC/L+vzLSxKE8i8hweRZ+3ApgYmPJXZFVo2DQuIHe//eRkvv/kLs2vUFRubbZdLJOVwGcDXhRPcb0/8O22apoAFX7bZtFGKCSgEyV5AU5lNx1iHIny+MRji9qWsc8glBWDiWV2EOJC3nVJF0cSdLFkeTtqQxdDHZ8UZMVD0McX9Rk+f6hShY1gX5pgLY2h6YWNeOflTkLpRPvpHIYs+d8BCkJDCP2nC3PwwigUK5kUfMI4ETwqCw3Aaac1JM7KoBFTaR9hgMXNQ8F9kxZ9hm+EbanfkSqro+OVtcjtAA4i7+jCWA9kpS4RhKrF6uLEQRdHEPSxTFEXXxEquQqHa/kWPFQ5Xglx/L9aiWVHNAvDdDWpjpVycU/5mhSJXesxkruWHIldywBFIbVwkpuVJabADOMVCmMUlbJHQes5KqBlRzLPsdthO2pVVmcuNeSYEZrTDCjyQlmNCHBDFeyPRUJYENIM9hk+TpayfbU44EJGuh/5mhSAjg+gO2pY4DbUw/dzs0EPZxknzH/R63WE6Kt1hP9NjKFknvMmjb0IHeoJd32AoILw/AxHaJBlaXDZMca67g9bMCMJUyMxpEmieOIregTSbo4iaSLk8hteYYujnG8Lc+Kh2Mdb8uzfH+UkrY80C8N0NZmVKotH/+szFkonXgnuyczuyZjSUngZGLXxPJ8MgEUxihpy48FTgRPyXITYMaQqspTAmjLI+0zHtiWHwWs+ln2Gb8Rqn7W8aVTo1X/BC0AzuLvVAJYn0ZKXKcRqxeriwkEXZxO0sXp5KMyjJn9iY5Xcqx4GOt4Jcfy/XFKKjmgXxqgrc24VCUX/5hTSZXcRI2V3ERyJTeRAArja2Eld0aWmwAznlQpnKGskjsTWMmNA1ZyLPucuRE2WJ2QxYl7LQlmksYEM4mcYCYREswEJRuskAB2LGkGm3QnQMkGq8nABA30P3MaKQFMDmCD1VnADVajtnMzQU8g2eestXR3EPtexmbhLxlC4tnZjndOc2XmtFkm3jZTyHIj/mZqH4LvIO/CPcdxHVrfnpKF72IBY8ZMAdrjXMftYf3lXMI89DzyPr5k+bNd/vMIcp+xndvY/QFJ7jNJc1001gLtY1gyo20zFReLYcvblmk182X78zYC5iuiny3FPtvfG/vcJPqd2P/vfPlv04SmC12Qtep9ZpzN16aTUHKPaZ6uoyFzPjB/ZHn4vDD6w4zovzOj/86K/js7ihGtot+fIz9fJHSx0CVClwpdJnS50BVCVwpdJTRX6Gqha4SuFbpO6HqhG4RuFLpJ6GahW4TmCc0XWiB0q9BtQrcL3SF0p9BdQncL3SN0r9B9QvcLPSD0oNBDQg8LPZIVVXysgLDM50cdKqgLsGeQOmcLs4gML8zCj/socPbEkvtRTyiAxg30tvWZJGd7LIvI8GMEZ3vccWezcj+u3NlmkZxtURaR4UUEZ3vCcWezcj9BcDYGr49GAwM9112cpTPIZpOC7MksIsNPEoLsKceDzMr9lJIgs2CwmBBkT4OdNb6gnOEpHGd6Ps/2fB4SV1A+I//tWaHnhJ7Pqnkfe9ANR2BWNM8Aff4Fsm1e8NjgWc/n5zyfn89a3TYvys8vCb0stCRr9fGQfmnj8mmCv78CtHV8cwMd8xcC7R8r/l+VMV8Tel3oDaE3hd4SelvoHaF3hd4Tel/oA6EPhT4S+ljoE6FPhT4T+lzoC6Evhb4SWir0tdA3Qt8KfSf0vdAPQj8K/SS0TOhnoV+Elgv9KvSb0O9Cfwj9mVVzHiNW/7+aVdOMir17zefd6z7v3vB596bPu7d83r3t8+4dn3fv+rx7z+fd+z7vPvB596HPu4983n3s8+4Tn3ef+rz7zOfd5z7vvvB596XPu6983i31efe1z7tvfN596/PuO5933/u8+8Hn3Y8+737yebfM593PPu9+8Xm33Ofdrz7vfvN597vPuz983v3pwcPYs767EdcHc5LF2lcBY1VVr3peA/J1luMbq6IyV76O01/pG7ixzJtAW5ytwhZV5i2Y/irM27CxIuYdoC2mqLBFyLyL0l9VyLyHGqsiZN4H2uIcDbaIyCI0Sn+Sez4EjVVlL3EB2uJcBbaoEJk/BukvImN9AhpLRDafAm1xnvu2qLIyf4bRX4Ud63PMWBE71hdAW0x13xZ2aPMlRH9VK8f6CjJWxcqxlgJtcb7ztoislPlriP5Wsmm+QYxVtWqsb4G2mOa6LSpWyfwdQn+RVWN9jxhrlcjmB6Atpjtui8qozD8CZC6PjvUTYKyS6FjLgLa4wG1bFMSOff+cvMwmNtYvSY8VqY6NtRxoiwudtkWkPCbzr8nr79/j/L8lPVbJv2P9DrTFDKdtUfSvzH8kLbP5d6w/geswZwEP+s105FT/Oh4D7JsZYN/HnAO0xSwltgD2BwywvjVTgbaYrcQWwDrIAOfxZjrQFnOU2AI43zPA+YqZAbTFRUpsAcxrBojLZjbQFhcruaYLGL8G6H+Gpb86cfpzYV05NtZfwHmoHQO9B8jut3qFsA/q7yysrdFy20NKrxLknu/4oU7rj38T5F6g5AKTFcB4BNraLHDcb2y8/EXwm9sdl/tVUrzcoSRe/gHGC9DWBqk/a9v4vcsWJ2J7lP/xfJ7hOcA8M25feVpdeS9URyi97pr3LoeSe4w9XPsawSfvdvzaYSvzSh2Dx71HSY1lZUfJnFEXxxfQb4wWW1wErBEy63Ji2KW48MNY64MxLM2smxjGZsn36gplC+UQMdZeXvA6AWPvdxxjrcxZBIx9QElcZwFjsR4QY4F+Y7TY4mIgxtavy4lhl+LCD2PreXC1foIY20C+11CokVBjIsbay2HeIGDsw45jrJW5AQFjH1ES1w2AsZgLxFig3xgttrgEiLF5dTkx7FJc+GFsrgdX8xLE2E3le5sJbS60BRFj7eVbbxIw9jHHMdbKvCkBYx9XEtebAmNxSyDGAv3GaLHFpUCM3aouJ4Zdigs/jN3Sg6tbJYixW8v3thHaVqgJEWPt5YZvETB2seMYa2XemoCxTyqJ662BsdgUiLFAvzFabHEZEGO3q8uJYZfiwg9jm3pwdbsEMXZ7+V4zoXyh5kSMtZfHvk3A2Gccx1gr8/YEjH1WSVxvD4zFFkCMBfqN0WKLy4EYu0NdTgy7FBd+GNvCg6s7JIixO8r3dhLaWaglEWPt5dzvEDD2Bccx1sq8IwFjX1QS1zsCY7EVEGOBfmO02OIKIMa2rsuJYZfiwg9jW3lwtXWCGLuLfG9XoTZCuxEx1v7xg3cJGLvEcYy1Mu9CwNhXlMT1LsBY3B2IsUC/MVpscSUQY/eoy4lhl+LCD2N39+DqHglibEi+Z4QKhMJEjLV/XOY9Asa+7jjGWplDBIx9Q0lch4CxWAjEWKDfGC22uAqIsUV1OTHsUlz4YWyhB1eLEsTYYvleiVBEqJSIsfaPd71PwNi3HcdYK3MxAWPfURLXxcBYbAvEWKDfGC22mAvE2HZ1OTHsUlz4YWxbD662SxBj28v39hTaS6gDEWPtH0f8gICx7zuOsVbm9gSM/UBJXLcHxuLeQIwF+o3RYourgRjbsS4nhl2KCz+M3duDqx0TxNhO8r19hDoLdSFirP3jsx8SMPZjxzHWytyJgLGfKInrTsBY7ArEWKDfGC22uAaIsfvW5cSwS3Hhh7FdPbi6b4IY202+112oh9B+RIy1f9z7IwLGfu44xlqZuxEw9gslcd0NGIv7AzEW6DdGiy2uBWLsAXU5MexSXPhh7P4eXD0gQYztKd/rJdRbqA8RY6/Lqvmbfd5xk9XpUscx1srck4CxXyuJ657AWOwLxFig3xgttrgOiLEH1uXEsEtx4YexfT24emCCGNtPvtdfaIDQQUSMvT6r5m+gesdNVqffOY6xVuZ+BIz9Xklc9wPG4sFAjAX6jdFii+uBGHtIXU4MuxQXfhh7sAdXD0kQYwfK9wYJDRYaQsTYG7Jq/qa0d9xkdfqT4xhrZR5IwNhlSuJ6IDAWDwViLNBvjBZb3ADE2MPqcmLYpbjww9hDPbh6WIIYe7h8r0yoXKiCiLE3in0/I2Dscscx1sp8OAFjf1US14cDY7ESiLFAvzFabHEjEGOr6nJi2KW48MPYSg+uViWIsdXyvSOEhgodScTYm8S+nxMw9g/HMdbKXE3A2D+VxHU1MBaHATEW6DdGiy1uAmLsUXU5MexSXPhh7DAPrh6VIMYOl+8dLTRCaCQRY28W+35BwNgVjmOslXk4AWP/URLXw4GxeAwQY4F+Y7TY4mYgxh5blxPDLsWFH8Ye48HVYxPE2FHyveOERgsdT8TYW8S+XxIwts72bmOslXkUAWPTt9cR16OAsTgGiLFAvzFabHELEGNPqMuJYZfiwg9jx3hw9YQEMfZE+d5YoXFCJxExdp7Y9ysCxmY5jrFW5hMJGFtXSVyfCIzFk4EYC/Qbo8UW84AYe0pdTgy7FBd+GHuyB1dPSRBjx8v3ThWaIHQaEWPni32XEjC2nuMYa2UeT8DY+kriejwwFk8HYizQb4wWW8wHYuzEupwYdiku/DD2dA+uTkwQY8+Q750pNEloMhFjF4h9vyZgbCPHMdbKfAYBYxsrieszgLF4FhBjgX5jtNhiARBjz67LiWGX4sIPY8/y4OrZCWLsFPneOULnCp1HxNhbxb7fEDB2U8cx1so8hYCxmymJ6ynAWJwKxFig3xgttrgViLHn1+XEsEtx4YexUz24en6CGDtNvjdd6AKhC4kYe5vY91sCxm7pOMZamacRMHYrJXE9DRiLM4AYC/Qbo8UWtwExdmZdTgy7FBd+GDvDg6szE8TYWfK92UJzhC4iYuztYt/vCBi7reMYa2WeRcDYJkriehYwFi8GYizQb4wWW9wOxNhL6nJi2KW48MPYiz24ekmCGHupfO8yocuFriBi7B1i3+8JGLu94xhrZb6UgLHNlMT1pcBYvBKIsUC/MVpscQcQY6+qy4lhl+LCD2Ov9ODqVQli7Fz53tVC1whdS8TYO8W+PxAwtoXjGGtlnkvA2B2UxPVcYCxeB8RYoN8YLba4E4ix19flxLBLceGHsdd5cPX6BDH2BvnejUI3Cd1MxNi7xL4/EjB2Z8cx1sp8AwFjWyqJ6xuAsXgLEGOBfmO02OIuIMbOq8uJYZfiwg9jb/Hg6rwEMXa+fG+B0K1CtxEx9m6x708EjN3FcYy1Ms8nYOyuWvZkAmPxdiDGAv3GaLHF3UCMvaMuJ4Zdigs/jL3dg6t3JIixd8r37hK6W+geIsbeI/ZdRsDY3R3HWCvznQSM3UNLfQqMxXuBGAv0G6PFFvcAMfa+upwYdiku/DD2Xg+u3pcgxt4v33tA6EGhh4gYe6/Y92cCxhY4jrFW5vsJGBtWEtf3A2PxYSDGAv3GaLHFvUCMfaQuJ4Zdigs/jH3Yg6uPJIixC+V7jwo9JvQ4EWPvE/v+QsDYYscx1sq8kICxJUrieiEwFhcBMRboN0aLLe4DYuwTdTkx7FJc+GHsIg+uPpEgxi6W7z0p9JTQ00SMvV/su5yAsW0dx1gr82ICxrZTEteLgbH4DBBjgX5jtNjifiDGPluXE8MuxYUfxj7jwdVnE8TY5+R7zwu9IPQiEWMfEPv+SsDYvRzHWCvzcwSM7aAkrp8DxuJLQIwF+o3RYosHgBj7cl1ODLsUF34Y+5IHV19OEGOXyPdeEXpV6DUixj4o9v2NgLGdHMdYK/MSAsbuoySulwBj8XUgxgL9xmixxYNAjH2jLieGXYoLP4x93YOrbySIsW/K994SelvoHSLGPiT2/Z2AsV0dx1gr85sEjN1XSVy/CYzFd4EYC/Qbo8UWDwEx9r26nBh2KS78MPZdD66+lyDGvi/f+0DoQ6GPiBj7sNj3DwLG9nAcY63M7xMwdj8lcf0+MBY/BmIs0G+MFls8DMTYT+pyYtiluPDD2I89uPpJghj7qXzvM6HPhb4gYuwjYt8/CRjb03GMtTJ/SsDYXkri+lNgLH4JxFig3xgttngEiLFf1eXEsEtx4YexX3pw9asEMXapfO9roW+EvvVgbOypA7ZzXhpOn0vrcnw7PU7mpO/azMLpbwYwTr4D6i9TxqiXVpNLvA86XyP59vL7fV0iw9/XxY/7AxDoWHL/ULdGwaBxVzqb5bVOGt/ZgMEbYvI5I4sTFD96/BZ/mwtw1mR5S4/yGGM6M+okQaAS0gBex/4pGkDLrEwMA/xIQKYfwamZJXcdotxJH60h6zCU3GOsY/5MKB9/Aaf3GCjYcSdEx0XrYhlJF8tJulhO1IUFQoYu+rp+pQPJBw7cuHJXrIM/mu/3I7Uu4su7UHKPAfqlAdraIPWXGdWb34w7bT31uS5/8o7JyFkonXgnlb+ubZYcSu4xP5OSgJfp9eTZrOv3WJ5/JYDCwY70M9dn8pb0nr66bgLMwdtz/PI3z+RkQ+2zLp0j7fO7ZywTDktsVJaY6srqcFFJaUG5KQ4XF1cXVpcURworq4sKyypLqkxhWbigtKokVG0iVVUlReGKkuLq0sqK4movaJvKcLiwsrS8whQVFJeVhyKV4bJQdWFJuCBUVhkuqawMR4qLy8LhyuJIdaQ0UlBQVh2OhIpKSkpDxQXh0gKWfX6P2ifI6vp8UnX9R7S6/lMLgLP4+4MA1n+REtdfxOrF6uJPgi7+Junib6IuzidVcgNdv9SEFA+DHK/kWL4/WEklB/RLA7S1GZyq5OIf8wepkluhsZJbQa7kVhBA4fBaWMn9U9dNgDmcVCn8o6ySS8vGVXKDgZUcyz5W3glpqyq5NSUFl1twTD5ZCWaTbIUJxss0I8F4x4+Nm2wwlweUYJDrvA6tFa2WYJLlqyKgCiBZPutk4/QH9D9TQUoAdbLXnaCT1Wl6Ni4RrtYedShBl5Psk579/9Nqzche9W9mts9GplByj1nThh7kDrWk/64OcPbPMHxMh2hQZekw2bGyst22hw2YLMLEqG42B6zqZvNa0ZkkXWSTdJGdzW3LM3RR7XhbnhUPRzjelmf5/lAlbXmgXxqgrc3QVFs+/lmZs1A68U52c5hdkyxSEsghdk0szzkEUBiupC3vtVmyMtfLdhNghpOqynrZ/LY80j71gW35ocCqn2Wf+huh6mcdX2oQrfobagFwFn8NCGDdiJS4GhGrF6uLhgRdNCbponE296gMY2Y/wvFKjhUPIx2v5Fi+f4ySSg7olwZoa3NMqpKLf0wDUiWXq7GSyyVXcrkEUBhdCyu5vGw3AWY0qVLIU1bJbQqs5I4BVnIs+2y6ETZYZWRz4l5LgtlMY4LZjJxgNiMkmDFKNlghAewI0gw2Wb5OULLBanNgggb6nzmBlAA2D2CD1RbADVZDt3czQY8h2WcLH/ugq97zgXf2zQKOtSUwlwV5/9+WpInDVtlEhrfKxo+7NTCxseTeOrtGwaBxA73/b5aS+//OJ93/t83aZtPJOt3WwNmAF9VjTP8/bJvdNhpATfy2zSIMsA0BmbYhL8ih5K5DlDtZHps6vqhpHbMpoazcjlRib0dcyGtC0sX2JF1sT96eytDFOMcXNVnxcJLji5os3z9ZyaIm0C8N0Nbm5NSiZvyzMmehdOKdVDZj9pybkpJAM2LP2fLcjAAKE5QsajYFTgTzs90EmAmknlx+AIuaSPs0By5qngzsmbLs03wjbE+dRaquW0Sr6x20ADiLvxYEsN6RlLh2JFYvVhc7EHSxE0kXOxF1MYtUyZ3ueCXHioeJjldyLN8/Q0klB/RLA7S1OSNVycU/pgWpkttZYyW3M7mS25kACmfVwkquZbabAHMWqVJoqaySawWs5M4AVnIs+7TaCNtTt83mxL2WBNNaY4JpTU4wrQkJZoqS7alIADuJNINNlq9zlGxP3QWYoIH+Z84hJYBdAtieuitwe+rJ27uZoKeQ7LPr/1GrtU201bqb30amUHKPWdOGHuQOtWTHAm6Kotw3F9MhGlRZOkx2rN0dt4cNmN0JE6M9SJPEPYit6N1IugiRdBEit+UZupjqeFueFQ/nO96WZ/n+NCVteaBfGqCtzbRUWz7+WZmzUDrxTnYNs2uyOykJGGLXxPJsCKAwQ0lbfnfgRLAg202AmUGqKgsCaMsj7RMGtuWnAat+ln3CG6HqZx1fKoxW/UVaAJzFXyEBrItJiauYWL1YXRQRdFFC0kUJ+agMY2Y/y/FKjhUPsx2v5Fi+P0dJJQf0SwO0tZmTquTiH1NIquQiGiu5CLmSixBA4dJaWMmVZrsJMJeSKoVSZZVcW2AlNwdYybHs03YjbLBqk82Jey0Jpp3GBNOOnGDaERLM5Uo2WCEB7HzSDDZZvq5QssGqPTBBA/3PXEFKAO0D2GC1J3CD1bTt3UzQl5Pss+daujuIfS+7Z+MvGULi2V6Od06fkA7ZU1l423Qgy434m6lZBN9B3oW7t+M6tL7dIRvfxQLGjOkAtEdHx+1h/aUjYR7aibyPL+k5o+BXJ4Lcc7d3G7tnkOS+mjTXRWMt0D7masdt3UpA9s0MvK2BPK61mZEsn/vgMKjQ8rZlWk2dYH+246+Ifq5Mq/k8I73m88zo59j/r7P8f7oIdRXaN3vV+yDvae5MavB0yyYy3C0bP273bGxAMOTunl2jYNC41O5hd7BzxQfcNp7AshT73NkTiE3iAq6H/Lf9hPYXOsATcPapk/bfB62T5uk6bNcDaLssD589oz7cK/pv7+i/faL/9o3Gdqvo9w+Un/sJ9RcaIHSQ0MFChwgNFBokNFhoiNChQocJHS5UJlQuVCFUKVQlVC10hNBQoSOFhgkdJTRc6GihEUIjhY4ROlZolNBxQqOFjhcaI3SC0IlCY4XGZUcVH+tUWObz04JF8F4kBD8pm8jwSQQEP9lxBLdyn0xA8CCdrTfJ2U7JJjJ8CsHZxjvubFbu8cqdrQ/J2U7NJjJ8KsHZJjjubFbuCaS5KSNLjCc0PE7L1hlkfUlBdno2keHTCUE20fEgs3JPVBJkFgxOIwTZGeSCspencOzt+dzX83lIXEF5pvy3SUKThc7Krnkfe9ArG8CsaM4E+vzZZNuc7bHBJM/nyZ7PZ2Wvbpsp8vM5QucKnZe9+nhIv7RxeQbB36cCbR3f3EDHfE+g/VtFxzlfxpwmNF3oAqELhWYIzRSaJTRbaI7QRUIXC10idKnQZUKXC10hdKXQVUJzha4WukboWqHrhK4XukHoRqGbhG4WukVontB8oQVCtwrdJnS70B1CdwrdJXR3ds3Br1j9f352TTMq9m6az7vpPu8u8Hl3oc+7GT7vZvq8m+XzbrbPuzk+7y7yeXexz7tLfN5d6vPuMp93l/u8u8Ln3ZU+767yeTfX593VPu+u8Xl3rc+763zeXe/z7gafdzf6vLvJ593NPu9u8Xk3z+fdfJ93C3ze3erz7jafd7f7vLvD592dPu/u8nl3twcPY8/6bnteH8xJegUYMFZV9apnGpCv6xzfwRmVuXI6Tn+lF+DGMhcCbXG9CltUmRkw/VWYmbCxImYW0BY3qLBFyMxG6a8qZOagxqoImYuAtrhRgy0iIXMxSn+Sey4BjVVljx4BbXGTAltUiMyXgfQXsbvMQWOF7C5zoC1udt8WVVbmKzH6q7BjXYUZK2LHmgu0xS3u28IOba6G6K9q5VjXQMaqWDnWtUBbzHPeFpGVMl8H0d9KNs31iLGqVo11A9AW8123RcUqmW9E6C+yaqybEGOtEtncDLTFAsdtURmV+RaAzOXRseYBxiqJjjUfaItb3bZFQex+iQXJy2xiY92a9FiR6thYtwFtcZvTtoiUx2S+PXn9/XtvyB1Jj1Xy71h3Am1xu9O2KPpX5ruSltn8O9bdwHWY64Aniu9w5PqQdTwG2DczwL6PuRFoizuV2ALYHzDA+tbcArTFXUpsAayDDHAebxYAbXG3ElsA53sGOF8xtwNtcY8SWwDzmgHisrkLaIt7ldwHCIxfA/Q/w9JfnTj9ubCu/G/8Auehdgz0HiC732oqYR/UvdlYW6PltoeUzifI/ZzjJ4qtP95LkPt5JTcl3QeMR6CtzfOO+42Nl3sIfvOS43KfT4qXl5XEy/3AeAHa2iD1Z20bv3fZ4sSK6Of7sxO7GeAB+d6DQg8JPZy95r3LoeQeYw/XTiP45KuO329uZX6AIPdrSmqsB4Dz0keAcQ30G6PFFv2AtliYzYlhl+LCD2Mf8eDqwgQx9lH53mNCjwstImKsvbxgOgFr3nQcY63MjxLkfktJXD8KjMUngBgL9BujxRb9gbZYnM2JYZfiwg9jn/Dg6uIEMfZJ+d5TQk8LPUPEWHs5zAUErHnXcYy1Mj9JkPs9JXH9JDAWnwViLNBvjBZbDADa4rlsTgy7FBd+GPusB1efSxBjn5fvvSD0otBLRIy1l29dSMCaDx3HWCvz8wS5P1IS188DY/FlIMYC/cZoscVBQFssyebEsEtx4YexL3twdUmCGPuKfO9VodeEXidirL3ccAYBaz51HGOtzK8Q5P5MSVy/AozFN4AYC/Qbo8UWByPr+2xODLsUF34Y+4YHV99MEGPfku+9LfSO0LtEjLWXx84kYM2XjmOslfktgtxfKYnrt4Cx+B4QY4F+Y7TY4hCgLd7P5sSwS3Hhh7HveXD1/QQx9gP53odCHwl9TMRYezn3LALWfOM4xlqZPyDI/a2SuP4AGIufADEW6DdGiy0GIuee2ZwYdiku/DD2Ew+ufpogxn4m3/tc6AuhL4kYa//4wWwC1vzgOMZamT8jyP2jkrj+DBiLXwExFug3RostBgFtsTSbE8MuxYUfxn7lwdWlCWLs1/K9b4S+FfqOiLH2j8vMIWDNz45jrJX5a4LcvyiJ66+Bsfg9EGOBfmO02GIwEhezOTHsUlz4Yez3Hlz9IUGM/VG+95PQMqGfiRhr/3jXRQSs+c1xjLUy/0iQ+3clcf0jMBZ/AWIs0G+MFlsMAdpieTYnhl2KCz+M/cWDq8sTxNhf5Xu/Cf0u9AcRY+0fR7yYgDV/OY6xVuZfCXL/rSSufwXG4p9AjAX6jdFii0OBtvgrmxPDLsWFH8b+6cHVvxLE2L/t94T+EUrL4WGs/eOzlxCwJq2Z2xhrZf6bIPcmzXTE9d/AWNwkB8cX0G+MFlscBrRFnRxODLsUF34Ya30whqV1chLD2HSLq0KZQllEjLV/3PtSAtZkOI6xVmarY/S4mUriOh0Yi3WBGAv0G6PFFocDMTY7hxPDLsWFH8bW9eBqdoIYmyPfqydUX6gBEWPLsmv+Zp933KRt7TjGWplzCBiboySuc4Cx2BCIsUC/MVpsUQbE2EY5nBh2KS78MLahB1cbJYixjeV7uUJ5QpsSMbY8u+ZvoHrHTVanDRzHWCtzYwLGNlQS142BsbgZEGOBfmO02KIciLGb53Bi2KW48MPYzTy4unmCGLuFfG9Loa2EtiZibEV2zd+U9o6brE5zHcdYK/MWBIzNUxLXWwBjcRsgxgL9xmixRQUQY7fN4cSwS3Hhh7HbeHB12wQxtol8r6nQdkLbEzG2Uux7JQFjN3ccY63MTQgYu4WSuG4CjMVmQIwF+o3RYotKIMbm53Bi2KW48MPYZh5czU8QY5vL91oI7SC0IxFjq8S+VxEwdmvHMdbK3JyAsdsoievmwFjcCYixQL8xWmxRBcTYnXM4MexSXPhh7E4eXN05QYxtKd9rJdRaaBcixlaLfecSMLap4xhrZW5JwNjtlMR1S2As7grEWKDfGC22qAZibJscTgy7FBd+GLurB1fbJIixu8n3dhfaQyhExNgjxL5XEzA233GMtTLvRsDY5kriejdgLBogxgL9xmixxRFAjC3I4cSwS3Hhh7HGg6sFCWJsWL5XKFQkVEzE2KFi32sIGLuj4xhrZQ4TMHYnJXEdBsZiCRBjgX5jtNhiKBBjIzmcGHYpLvwwtsSDq5EEMbZUvtdWqJ1QeyLGHin2vZaAsa0cx1grcykBY1srietSYCzuCcRYoN8YLbY4Eoixe+VwYtiluPDD2D09uLpXghjbwepKqKNQJyLGDhP7XkfA2DaOY6yVuQMBY3dTEtcdgLG4DxBjgX5jtNhiGBBjO+dwYtiluPDD2H08uNo5QYztIt/rKrSvUDcixh4l9r2egLEhxzHWytyFgLFGSVx3AcZidyDGAv3GaLHFUUCM7ZHDiWGX4sIPY7t7cLVHghi7n3xvf6EDhHoSMXa42PcGAsYWOo6xVub9CBhbpCSu9wPGYi8gxgL9xmixxXAgxvbO4cSwS3Hhh7G9PLjaO0GM7SPf6yt0oFA/IsYeLfa9kYCxEccx1srch4CxpUriug8wFvsDMRboN0aLLY4GYuyAHE4MuxQXfhjb34OrAxLE2IPkewcLHSI0kIixI8S+NxEwtr3jGGtlPoiAsXsqieuDgLE4CIixQL8xWmwxAoixg3M4MexSXPhh7CAPrg5OEGOHyPcOFTpM6HAixo4U+95MwNi9HcdYK/MQAsZ2VBLXQ4CxWAbEWKDfGC22GAnE2PIcTgy7FBd+GFvmwdXyBDG2Qr5XKVQlVE3E2GPEvrcQMLaz4xhrZa4gYGwXLfeQAGPxCCDGAv3GaLHFMUCMHZrDiWGX4sIPY4/w4OrQBDH2SPneMKGjhIYTMfZYse88AsZ2cxxjrcxHEjC2u5Y9mcBYPBqIsUC/MVpscSwQY0fkcGLYpbjww9ijPbg6IkGMHSnfO0boWKFRRIwdJfadT8DY/R3HWCvzSALGHqClPgXG4nFAjAX6jdFii1FAjB2dw4lhl+LCD2OP8+Dq6AQx9nj53hihE4ROJGLscWLfBQSM7e04xlqZjydgbB8lcX08MBbHAjEW6DdGiy2OA2LsuBxODLsUF34YO9aDq+MSxNiT5HsnC50iNJ6IsaPFvrcSMLaf4xhrZT6JgLH9lcT1ScBYPBWIsUC/MVpsMRqIsRNyODHsUlz4YeypHlydkCDGnibfO11ootAZRIw9Xux7GwFjD3YcY63MpxEw9hAlcX0aMBbPBGIs0G+MFlscD8TYSTmcGHYpLvww9kwPrk5KEGMny/fOEjpbaAoRY8eIfW8nYOxgxzHWyjyZgLFDlMT1ZGAsngPEWKDfGC22GAPE2HNzODHsUlz4Yew5Hlw9N0GMPU++N1XofKFpRIw9Qex7BwFjD3ccY63M5xEwtkxJXJ8HjMXpQIwF+o3RYosTgBh7QQ4nhl2KCz+Mne7B1QsSxNgL5XszhGYKzSJi7Ili3zsJGFvpOMZamS8kYGyVkri+EBiLs4EYC/Qbo8UWJwIxdk4OJ4Zdigs/jJ3twdU5CWLsRfK9i4UuEbqUiLFjxb53ETB2qOMYa2W+iICxRyqJ64uAsXgZEGOBfmO02GIsEGMvz+HEsEtx4Yexl3lw9fIEMfYK+d6VQlcJzSVi7Dix790EjB3uOMZama8gYOzRSuL6CmAsXg3EWKDfGC22GAfE2GtyODHsUlz4YezVHly9JkGMvVa+d53Q9UI3eDA29tQB2zkvDafPa3M4vp0eJ3PSd21m4/TXCxgnNwL1lylj1EurySXeB52vkXx7+b0ph8jwTTn4cW8GAh1L7ptzahQMGnels1le66TxnQ0YvCEmn72yOUFxi8dv8be5AGdNlrf0KI8xpjOjThIEKiEN4HXsedEAmm9lYhjgFgIy3QJOzSy56xDlTvpoDVmHoeQeYx1zAaF8vBWc3mOgYMedEB0XrYv5JF3cRtLFbURdWCBk6OIY1690IPnAsRtX7op18Efz/VGk1kV8eRdK7jFAvzRAWxuk/jKjevObcaetpz7X5U/eMRk5C6UT76Ty9rXNkkPJPWYBKQl4mV5Pns26fo/l+XYCKIxxpJ+5PpO3pPf05bgJMGOacfzyDs/kZEPtsy6dI+1zp2csEw5LbFSWmOrK6nBRSWlBuSkOFxdXF1aXFEcKK6uLCssqS6pMYVm4oLSqJFRtIlVVJUXhipLi6tLKiuJqL2ibynC4sLK0vMIUFRSXlYcileGyUHVhSbggVFYZLqmsDEeKi8vC4criSHWkNFJQUFYdjoSKSkpKQ8UF4dICln3ujNonyOq6B6m6vitaXd+tBcBZ/N1FAOt7SInrHmL1YnVxN0EX95J0cS9RFz1IldyJrl9qQoqHsY5XcizfH6ekkgP6pQHa2oxLVXLxj7mLVMndp7GSu49cyd1HAIXxtbCSuz/HTYAZT6oU7ldWyT0ArOTGASs5ln0e8FRya0oKLrfgmHyyEsyDGhPMg+QE8yAhwUwIKMEg13kdWitaLcEky9dpAVUAyfL5EDBBA/3PnEZKAA8lkKCT1enDObhEuFp71KEEPYFkn4f/j1qtj0RbrQv9NjKFknvMmjb0IHeoJf13dYDgwjB8TIdoUGXpMNmxHnXcHjZgHiVMjB4jTRIfI7aiF5J08ThJF4+T2/IMXZzheFueFQ9nOt6WZ/n+JCVteaBfGqCtzaRUWz7+WZmzUDrxTnYXMbsmj5KSwCJi18TyvIgAClOUtOUfBU4En8hxE2CmkKrKJwJoyyPtsxjYlp8ErPpZ9lm8Eap+1vGlJ6NV/1NaAJzF35MEsH6alLieJlYvVhdPEXTxDEkXz5CPyjBm9uc6Xsmx4uE8xys5lu9PVVLJAf3SAG1tpqYqufjHPEmq5J7VWMk9S67kniWAwgW1sJJ7LsdNgLmAVCk8p6ySex5YyU0FVnIs+zy/ETZYPZLDiXstCeYFjQnmBXKCeYGQYGYo2WCFBLAzSTPYZPmaqWSD1YvABA30PzOTlABeDGCD1UvADVaTmrmZoGeQ7POSj33QVW8P4J19fYBjvQzMZUHe//cyaeKwJIfI8JIc/LivABMbS+5XcmoUDBo30Pv/+ii5/68H6f6/V9c2m07W6V4Bzga8qB5j+v9h2+xr0QB63W/bLMIArxKQ6VXyghxK7jpx44aSe1aTO1ke33B8UdM65huEsvJNUon9JnEh73WSLt4i6eIt8vZUhi7mOL6oyYqHixxf1GT5/sVKFjWBfmmAtjYXpxY145+VOQulE++k8m1mz/kNUhJ4m9hztjy/TQCFy5Usar4BnAi+k+MmwFxO6sm9E8CiJtI+7wIXNS8G9kxZ9nl3I2xP7UOqrt+LVtfvawFwFn/vEcD6A1Li+oBYvVhdvE/QxYckXXxI1EUfUiV3peOVHCsernK8kmP5/lwllRzQLw3Q1mZuqpKLf8x7pEruI42V3EfkSu4jAihcVwsruY9z3ASY60iVwsfKKrlPgJXcXGAlx7LPJxthe+prOZy415JgPtWYYD4lJ5hPCQnmBiXbU5EAdhFpBpv0n5pVsj31M2CCBvqfuZGUAD4LYHvq58DtqRc3czNB30Cyz+f/R63WL6Kt1i/9NjKFknvMmjb0IHeoJTsWcFMU5b65mA7RoMrSYbJjfeW4PWzAfEWYGC0lTRKXElvRX5J08TVJF1+T2/IMXdzieFueFQ/zHG/Ls3x/vpK2PNAvDdDWZn6qLR//rMxZKJ14J7vfMLsmX5GSwDfEronl+RsCKNyupC3/FXAi+G2OmwBzO6mq/DaAtjzSPt8B2/LzgVU/yz7fbYSqn3V86fto1f+DFgBn8fc9Aax/JCWuH4nVi9XFDwRd/ETSxU/kozKMmf2djldyrHi4y/FKjuX7dyup5IB+aYC2NnenKrn4x3xPquSWaazklpEruWUEULi/FlZyP+e4CTD3kyqFn5VVcr8AK7m7gZUcyz6/bIQNVl/kcOJeS4JZrjHBLCcnmOWEBPOgkg1WSACbR5rBJv2HS5VssPoVmKCB/mceIiWAXwPYYPUbcIPV/GZuJugHSfb5bS3dHcS+l69y8JcMIfHsd8c7pxOkQzYxG2+bP8hyI/5m6qME30Hehfun4zq0vv1HDr6LBYwZ8wfQHn85bg/rL38R5qF/k/fxJcuf7fL/TZB7YTO3sbsXSe5HSXNdNNYC7WMeBXeoc9JWb0agbW/t3ju7ZnyGvcBjF3j1sSK6bP1PTlQ5sQmj/Q9/k5TWOxow8Y64oQFTVb3qWQFMMv/k6Ag+pMz2ZuvYWCYSLigoCdvvRSpDprBSFv0KCirLC0MVobKKgqrSQlNaXVhQGK6orCiXMctMdai6rKK0OrKKryAvyvbyHUry8fK7ST0iw3Zw9Lh16gGdgSR3nXo1CgaNS5nFWQCoUw8/bjrYWWOAbceNb7uj7fdPDta/1sRnsmNn4HRcYnnbMq2mm2V/tuOviH6uTKv5PCO95vPM6OfY/y9T/j9ZQnWFsuuteh8kSGaSQDKnHpHhHAJI1nMcJK3c9UggyXKuekDnskFhg6NB2n8f14Ni+zT/B8UvadyQrnELWPz+q1+0n7VMq622So2bGjc1bmrc1LipcVPjujgucOyVf5xqmzT/B/Q7UnZMjZsaNzVuatzUuKlxU+MmPa6SsY1Kvk2oPMV3gHxH5+D2sf9eGf1cX/rcDYQaCjUSaiyUK5QntKnQZkKbC20htKXQVkJbC20jtK1QE6GmQtsJbS/UTChfqLlQC6EdhHYU2kloZ6GWQq2EWgvtIrSrUBuh3YR2F9pDKCRkhAqEwkKFQkVCxUIlQhGhUqG2Qu2E2gvtKbSXUAfbtxfqKNRJaB+hzkJdhLoK7SvUTai7UA+h/YT2FzpAqKdQL6HeQn2E+godKNRPqL/QAKGDhA4WOkRooNAgocFCQ4QOFTpM6HChMqFyoQqhSqEqoWqhI4SGCh0pNEzoKKHhQkcLjRAaKXSM0LFCo4SOExotdLzQGKEThE4UGis0TugkoZOFThEaL3Sq0ASh04ROF5oodIbQmUKThCYLnSV0ttAUoXOEzhU6T2iq0PlC04SmC10gdKHQDKGZQrOEZgvNEbpI6GKhS4QuFbpM6HKhK4SuFLpKaK7Q1ULXCF0rdJ3Q9UI3CN0odFO9tNW3Flln3CTunXW+/Lh3W/h8b3uf7zXz+V4rn++19vlegc/3wj7fa+/zvT19vtfV53v7+nyvt8/3+vh8b6DP9wb5fK/S53tVPt8b4fO9kT7fO9Hne2N9vne6z/cm+nzvXJ/vnefzvVk+35vt870rfb53lc/3bop+zy4oPpeWAsQUIDoCiGmrdn9kpq1+HjLmn2med/bZO/pvKLnHWL8HjRVi8dhAAY8NFfDYSAGPjRXwmKuAxzwFPG6qgMfNFPC4uQIet1DA45YKeNxKAY9bK+BxGwU8bquAxyYKeGyqgMftFPC4vQIemyngMV8Bj80V8NhCAY87KOBxRwU87qSAx50V8NhSAY+tFPDYWgGPuyjgcVcFPLZRwONuCnjcXQGPeyjgMaSAR6OAxwIFPIYV8FiogMciBTwWK+CxRAGPEQU8lirgsa0CHtsp4LG9Ah73VMDjXgp47KCAx70V8NhRAY+dFPC4jwIeOyvgsYsCHrsq4HFfBTx2U8BjdwU89lDA434KeNxfAY8HKOCxpwIeeyngsbcCHvso4LGvAh4PVMBjPwU89lfA4wAFPB6kgMeDFfB4iAIeByrgcZACHgcr4HGIAh4PVcDjYQp4PFwBj2UKeCxXwGOFAh4rFfBYpYDHagU8HqGAx6EKeDxSAY/DFPB4lAIehyvg8WgFPI5QwONIBTweo4DHYxXwOEoBj8cp4HG0Ah6PV8DjGAU8nqCAxxMV8DhWAY/jFPB4kgIeT1bA4ykKeByvgMdTFfA4QQGPpyng8XQFPE5UwOMZCng8UwGPkxTwOFkBj2cp4PFsBTxOUcDjOQp4PFcBj+cp4HGqAh7PV8DjNAU8TlfA4wUKeLxQAY8zFPA4UwGPsxTwOFsBj3MU8HiRAh4vVsDjJQp4vFQBj5cp4PFyBTxeoYDHKxXweJUCHucq4PFqBTxeo4DHaxXweJ0CHq9XwOMNCni8UQGPNwF5zPDwOC36+WYZ/xaheULzhRYI3Sp0m9DtQncI3Sl0l9DdQvcI3St0n9D9Qg8IPSj0kNDDQo8ILRR6VOgxoceFFgk9IbRY6Emhp4SeFnpG6Fmh54SeF3pB6EWhl4ReFloi9IrQq0KvCb0u9IbQm0JvCb0t9I7Qu0LvCb0v9IHQh0IfCX0s9InQp0KfCX0u9IXQl0JfCS0V+lroG6Fvhb4T+l7oB6EfhX4SWib0s9AvQsuFfhX6Teh3oT+E/hT6S+hvoRVC/wil1RcdC9URShfKEMoUyhKqK5QtlCNUT6i+UAOhhkKNhBoL5QrlCW0qtJnQ5kJbCG0ptJXQ1kLbCG0r1ESoqdB2QtsLNRPKF2ou1EJoB6EdhXYS2lmopVArodZCuwjtKtRGaDeh3YX2EAoJGaECobBQoVCRULFQiVBEqFSobf1VPtSu/iqfyo36VHv5eU+hvYQ6CO0t1FGok9A+Qp2Fugh1FdpXqJtQd6EeQvtFx9y/ftRRY3/0yzpifty7B33ePeHz7gWfd2/4vPvQ591XPu9+8nn3p887a/j4dw193m3p866Zz7tWPu+Mz7u2Pu/a+bxr7/NuT593e/m86+Dzbm+fdx193nXyebePz7vOPu+6+Lzr6vNuX5933Xzedfd518Pn3X4+7/aPvktLwwO//aNe9g+u1AGP6/0jLuFQcWFhVUlBlQmbslBBaXmkKFRYVF4cMRFTFCmqLIiEw1WRwkhJaXlpSajUFIarTHVRabg6OtgB9XHJyavXA9ai12R5juk1nWAv1FhevSYrb0+SjXoSfd/+AQg7fh3CuCi99iLptVct12tvkl57EzGFpdeeQBzoQ9JrH49eYw8aW4E+YfoAddqXpNO+RAywf/SgL8FXWwMx4ECSXg+s5XrtR9JrPyK2svTaF4gD/Ul67R8AtgJ9wvQH6nQASacDiBhgL/ofQPDVMBADDiLp9aBarteDSXo9mIitLL0OAOLAISS9HhIAtgJ9whwC1OlAkk4HEjHAXm4/kOCrewIxYBBJr4NquV4Hk/Q6mIitLL0OBOLAEJJehwSArUCfMEOAOj2UpNNDiRhgL3Q/lOCr+wIx4DCSXg+r5Xo9nKTXw4nYytLroUAcKCPptSwAbAX6hCkD6rScpNNyIgbYS8zLCb7aB4gBFSS9VtRyvVaS9FpJxFaWXsuBOFBF0mtVANgK9AlTBdRpNUmn1UQMsBd3VxN8dRAQA44g6fWIWq7XoSS9DiViK0uv1UAcOJKk1yMDwFagT5gjgTodRtLpMCIG2MuqhxF8tQqIAUeR9HpULdfrcJJehxOxlaXXYUAcOJqk16MDwFagT5ijgTodQdLpCCIG2AuaRxB8dSQQA0aS9Dqyluv1GJJejyFiK0uvI4A4cCxJr8cGgK1AnzDHAnU6iqTTUUQMsJcSjyL46lggBhxH0utxtVyvo0l6HU3EVpZeRwFx4HiSXo8PAFuBPmGOB+p0DEmnY4gYYC/iHUPw1YlADDiBpNcTarleTyTp9UQitrL0OgaIA2NJeh0bALYCfcKMBep0HEmn44gYYC+fHUfw1fOAGHASSa8n1XK9nkzS68lEbGXpdRwQB04h6fWUALAV6BPmFKBOx5N0Op6IAfbC1fEEX50NxIBTSXo9tZbrdQJJrxOI2MrS63ggDpxG0utpAWAr0CfMaUCdnk7S6elEDLCXjJ5O8NWrgBgwkaTXibVcr2eQ9HoGEVtZej0diANnkvR6ZgDYCvQJcyZQp5NIOp3ko9M6YJ9tB9QpUg9rkzmU3GPaAW2/P1DmTBkjxyOv90FjFcDuJvbBh13Y2F5dTK6/6t+z6qetflmi/Q+bxL07KwFAQipxA8cqiI5lJgOd8iygcdfHKUPJPaY9IJiqVz2BOeXZUaecEu+UZ/s45ZQAsmR7oFOeDXTKKWDjop3PBmDMZt5xk5X7bHBWRPFXtUqXEesvk/Gz1tL2QN85hzTDOscnHtH2PxfHexGTz/NwfBYz+ZyK4zPC5PN8HJ+lTD6n4fgsY/I5HcdnOZPPC3B8VjD5vBDHZxWTzxk4PquZfM6E8WlCTD5n4fg0TD5n4/gsYPI5B8dnmMnnRTg+C5l8XozjkzpfugTHJ3W+dCmOT+p86TIcn9T50uU4PqnzpStwfFLnS1fi+KTOl67C8VnJ5HMujk/qvO5qHJ/Ued01MD4LqPO6a3F8UudL1+H4pM6XrsfxSZ0v3YDjkzpfuhHHJ3W+dBOOzxImnzfj+KTO627B8Umd183D8Umd183H8UmdhyzA8Umdh9yK45M6D7kNxmeYOg+5Hccntb90B45P6nzpThyf1PnSXTg+qfOlu3F8Uuch9+D4pM5D7sXxSZ2H3IfjkzoPuR/HJ3Ue8gCOT2p/6UEcn9T+0kM4PqnzuodxfFLndY/A+CykzpcW4vikzpcexfFJnS89huOTOl96HMcndb60CMcntb/0BI5P6rxuMY5P6rzuSRyf1HndUzg+qfOlp3F8UudLz+D4pM6XnsXxSZ0vPYfjkzpfeh7HJ7UP9gKMzyLqvO5FHJ/Ued1LOD6p87qXcXxS50tLcHxS50uv4PikzpdexfFJnS+9huOTOl96HccntQ/2Bo5P6rzuTRyf1HndWzg+qfO6t3F8UudL7+D4pM6X3oXxWUydL72H45M6X3ofxyd1vvQBjk9qH+xDHJ/Ued1HOD6p87qPcXxS53Wf4Pikzpc+xfFJnS99huOTOl/6HMcndb70BY5P6nzpSxyf1D7YVzg+qfO6pTg+qfO6r2F8llDndd/g+KTOl77F8UmdL32H45M6X/oexyd1vvQDjk/qfOlHHJ/UPthPOD6p87plOD6p87qfcXxS53W/4PikzpeW4/ikzpd+xfFJnS/9huOTOl/6HcZnhDpf+gPHJ7UP9ieOT+q87i8cn9R53d84PqnzuhU4PqnzpX9wfFLnS2kNYHxS50ub4Pikzpfq4PikzpfScXxS+2AZOD6p87pMHJ/UeV0Wjk/qvK4ujM9S6nwpG8cndb6Ug+OTOl+qh+OTOl+qj+OTOl9qgOOT2gdriOOTOq9rhOOTOq9rjOOTOq/LxfFJnS/l4fikzpc2xfFJnS9thuOTOl/aHMcndb60BY5Pah9sSxifZaEMGeNFoenR8Wakp6VtK/SW/Id9stPS7N3X9l7pjHppafbeZnsnsr1v2N7la+/JtXfQ2vtd7d2p9l5Se+envU/T3lVp74G0dyza+wvt3YD23j17p529L87exWbvObN3iNn7uezdV/ZeKXtnk70Pyd41ZO/xsXfk2Ptn7N0uZ9ZJS7N3p9h7SeydH/Y+DXtXhb0Hwt6xYO8vsHcD2HP39ky7PS9uz2Lbc872DLE9n2vPvtpzpfbMpj0Pac8a2nN89oycPX9mz3bZc1P2TJI972PP0thzKvYMiD1fYc8u2HMBds+93c9u94rbfdh2j7PdP2z35tp9r3ZPqd2vafdC2n2Gdg+f3R9n957ZfV12z5Tdj2T3+th9NHaPit3/YfdW2H0Ldk+AXW+3a9l2ndiuwdr1Tbt2aNfl7JqXXU+yazV2HcSuMdj+ve2N276z7enafqntRdo+n+2h2f6U7f3YvortWdh+gK21bR1ra0Rbf9naxtYNdk5u57t2LmnnaXYOZOcXNnfbvGhzjsVzi5UWh2yM2/ixvon2e0333G8Fi03pL0RjM/5Bjb8mO4WSewxSBywet0bziAZ56+iWyTpEwZPlcRuwsz+Xps/Zt1Hg7Nu66uzxyA7+SzpQZEf+eacmOIMYa4vYX0Ox4+avwYlSNlq/sZoCbaQ1kzdVAG7bacjk2xEy+XbATL59KpOb7RU4e7NUJk+axypklsjHGSTszeT5tTSTM2zUHGgjrZm8uQJwa6Ehk7cgZPIWwEy+QyqTmx0UOPuOGpx9W4Kze5E9lNyzWmMj6V18BB3eXK/mT1sjx13UDOs8aOe2MtupKvyGwGb4wLZPBlh+a3eUzMApvwH6jXmC7IPJ6m0+KfaeUhB7OxJi72klsTcfGHvAJG2AfmOedtwHY3kvDTsuhdf5AfKarD+SVsANsge/E3Bi6+2I7BTtiGQK5aTV6MD7oPXdLvm5qon968MuauyQVxc7R3dgtGwQVUhMgS09LaXYk05U2AaOVRAdy+wMnNy3bIAz5Po4YCi5x+wJKJZWddSqQ2kBOWCrqAO2jnfAVtFZifdd6wScMpTcs5oSk3XKVkCnbN0Aa1y089kAbEWYSbZq4GaWjfXHrb/sjO98lO4JzLK7kLLsLsR1Bw163TW1f8/sqqB92sb19ql19DaE9mkbYALaLbVWYHZT4Oy7u77qH0N29IoyEtmR5cQepP17ewSQfWuLjUKp/XsmpADcjIZMbgiZ3ACdvSCVyU2BAmcPpzJ58nvDkFmikLR/r7CWZnKGjYpS+/dMkQJwK9aQyYsJmbwY6OwlqUxuShQ4e0SDs+9OcPadgXXV7o7v37uz3qpMix73Ocf3b1iZwwS5n1eyh+hO4B4i4JTfAP3GPO/4/r17SLH3koLYixDkfllJ7N0DjD1gkjZAvzFIW6xtO0odsA8htqNEHwPYJ/bv9hMf0SlbW0qjW1vaxm9tKfXZ2tLWZ2tLhhKDJLtNphQ4sWtLchR0cCBlbgcErrQ0ziZzvxaUSxc4IFtQ7R23h/WX9oRJQ/sGbk+WYgVaGnZcCq/3BMgrIg4Zk+89SQvne3p4hfPM2bZmkAvne5G2A+61lmWMUHLPyvkGw8c6kHTRIYCtykA7mg7A/Lc3Sad76z7UUeDDLqXw6BjNG53iC4+OPoVHJ2UHPToCHbUTrlgoCPKgx14KD3rsE3XKzvFOuY+PU3YOAj2BTrkP0Ck7O37QwwbgPoRMvI/jBz2sv3QkHEjYCziz60LKvF2IG1Q06LVr6qCH6drAfR73dX2d3Tr6voTycF9gAuqW2lRiuilw9u6ubw+NITt66yES2ZHlRA9Sv6pHANm3tthov9RBD7OfAnDbX0Mm35+QyfcHOvsBqUxuDlDg7D1TmTz5QwTILNGLdNCjVy3N5Awb9U4d9DC9FYBbHw2ZvA8hk/cBOnvfVCY3fRU4+4EanL07wdk7Auuq7o4f9HioXs1SKnLcVx3fbG5l7kmQ+zUlm80fAm42B075DdBvzGuOH/RYSIq9NxXE3oEEud9SEnsLgbEHTNIG6DfmLaUHPfYCnisA7B0L/KBHv+jWlv7xW1v6+Wxt6R/AQQ+WQZLdJtMPOLHrr+SgB1LmAeSDBYgN24StHGZPoA4PcvyQgrXxQYRE77rcsaIqDTsuhdeFinhdU0y6tCh7MGnh/GDiQQ/StjWDXDg/hLQd8BDiQY+9G3AKvIEkXQwMYKsy0I5mIDBuB5F0Okj3QY+wD7uUwmNwNAcNiS88BvsUHkOUHfQYDHTUIbhiIRzkQY8OCg96HBp1ysPinfJQH6c8LAD07AB0ykOBTnmY4wc9bAAeSsjEhzp+0MP6y2DCgYQOwJnd4aTMezhxg4oGvZalDnqYsgbu81ju+jq7dfRyQnlYDkxAFalNJaZCgbNXur49NIbs6K2HSGRHlhNVpH5VVQDZt7bYqDp10MNUKwC3IzRk8iMImfwIoLMPTWVyM1SBsx+ZyuTJHyJAZolhpIMew2ppJmfY6KjUQQ9zlAJwG64hkw8nZPLhQGc/OpXJzdEKnH2EBmevJDj7YGBdVen4QY/F9WqWUpHjvuv4ZnMr85EEud9Tstl8MXCzOXDKb4B+Y95z/KDH06TY+1BB7I0gyP2Rkth7Ghh7wCRtgH5jPlJ60KMD8FwBYO9Y4Ac9Rka3thwTv7VlpM/WlmMCOOjBMkiy22RGAid2xyg56IGU+VjHD3rYjdWErRzmYKAORzl+4MHaeBQh0bsud6yoSsOOS+H1aUW8rikmXVqUPY60cH4c8aAHaduaQS6cjyZtBxxNPOgxqAGnwDuepIvjA9iqDLSjOR4Yt2NIOh2j+6BHoQ+7lMLjhGgOOjG+8DjBp/A4UdlBjxOAjnoirlgoDPKgx94KD3qMjTrluHinHOvjlOMCQM+9gU45FuiU4xw/6GEDcCwhE491/KCH9ZcTCAcS9gbO7E4iZd6TiBtUNOj15NRBD3NyA/d5PMX1dXbr6KcQysNTgAlofGpTiRmvwNlPdX17aAzZ0VsPkciOLCcmkPpVEwLIvrXFRqelDnqY0xSA2+kaMvnphEx+OtDZJ6YyuZmowNnPSGXy5A8RILPEmaSDHmfW0kzOsNGk1EEPM0kBuE3WkMknEzL5ZKCzn5XK5OYsBc5+tgZnP5Xg7CcA66pTHT/o8WK9mqVU5LifOr7Z3Mp8BkHuz5RsNn8RuNkcOOU3QL8xnzl+0GMJKfa+VBB7ZxPk/kpJ7C0Bxh4wSRug35ivlB702Bt4rgCwdyzwgx5Toltbzonf2jLFZ2vLOQEc9GAZJNltMlOAE7tzlBz0QMp8ruMHPezGasJWDnMcUIfnOX7gwdr4PEKid13uWFGVhh2XwusSRbyuKSZdWpSdSlo4n0o86EHatmaQC+fnk7YDnk886DGmAafAm0bSxbQAtioD7WimAeN2Okmn03Uf9CjyYZdSeFwQzUEXxhceF/gUHhcqO+hxAdBRL8QVC0VBHvToqPCgx4yoU86Md8oZPk45MwD07Ah0yhlAp5zp+EEPG4AzCJl4huMHPay/XEA4kNAROLObRcq8s4gbVDTodXbqoIeZ3cB9Hue4vs5uHX0OoTycA0xAF6U2lZiLFDj7xa5vD40hO3rrIRLZkeXEJaR+1SUBZN/aYqNLUwc9zKUKwO0yDZn8MkImvwzo7JenMrm5XIGzX5HK5MkfIkBmiStJBz2urKWZnGGjq1IHPcxVCsBtroZMPpeQyecCnf3qVCY3Vytw9ms0OPvFBGe/AFhXXez4QY8369UspSLH/cbxzeZW5isIcn+rZLP5m8DN5sApvwH6jfnW8YMe75Bi7wcFsXcNQe4flcTeO8DYAyZpA/Qb86PSgx4dgecKAHvHAj/ocW10a8t18VtbrvXZ2nJdAAc9WAZJdpvMtcCJ3XVKDnogZb7e8YMedmM1YSuHmQrU4Q2OH3iwNr6BkOhdlztWVKVhx6Xw+o4iXtcUky4tyt5IWji/kXjQg7RtzSAXzm8ibQe8iXjQY3oDToF3M0kXNwewVRloR3MzMG5vIen0Ft0HPYp92KUUHvOiOWh+fOExz6fwmK/soMc8oKPOxxULxUEe9Oik8KDHgqhT3hrvlAt8nPLWANCzE9ApFwCd8lbHD3rYAFxAyMQLHD/oYf1lHuFAQifgzO42Uua9jbhBRYNeb08d9DC3N3CfxztcX2e3jn4HoTy8A5iA7kxtKjF3KnD2u1zfHhpDdvTWQySyI8uJu0n9qrsDyL61xUb3pA56mHsUgNu9GjL5vYRMfi/Q2e9LZXJznwJnvz+VyZM/RIDMEg+QDno8UEszOcNGD6YOepgHFYDbQxoy+UOETP4Q0NkfTmVy87ACZ39Eg7PfRXD2ecC66i7HD3p8VK9mKRU57s+Obza3Mt9PkPsXJZvNPwJuNgdO+Q3Qb8wvjh/0+JQUe78piL1HCHL/riT2PgXGHjBJG6DfmN+VHvToBDxXANg7FvhBj4XRrS2Pxm9tWeizteXRAA56sAyS7DaZhcCJ3aNKDnogZX7M8YMedmM1YSuHuRGow8cdP/Bgbfw4IdG7LnesqErDjkvh9VNFvK4pJl1alF1EWjhfRDzoQdq2ZpAL50+QtgM+QTzocUsDToG3mKSLxQFsVQba0SwGxu2TJJ0+qfugR4kPu5TC46loDno6vvB4yqfweFrZQY+ngI76NK5YKAnyoMc+Cg96PBN1ymfjnfIZH6d8NgD03AfolM8AnfJZxw962AB8hpCJn3H8oIf1l6cIBxL2Ac7sniNl3ueIG1Q06PX51EEP83wD93l8wfV1duvoLxDKwxeACejF1KYS86ICZ3/J9e2hMWRHbz1EIjuynHiZ1K96OYDsW1tstCR10MMsUQBur2jI5K8QMvkrQGd/NZXJzasKnP21VCZP/hABMku8Tjro8XotzeQMG72ROuhh3lAAbm9qyORvEjL5m0BnfyuVyc1bCpz9bQ3O/hLB2Z8C1lUvOX7QY2m9mqVU5Lh/Ob7Z3Mr8GkHuv5VsNl8K3GwOnPIboN+Yvx0/6PEtKfbstNz12HubIPcm+Tpi71tg7AGTtAH6jUHaIsiDHvsAzxUA9o4FftDjnejWlnfjt7a847O15d0ADnqwDJLsNpl3gBO7d5Uc9EDK/B4SuNLwycRurCZs5TCLgDp83/EDD9bG7xMSvetyx4qqNOy4FF6/VcTrmmLSpUXZD0gL5x8QD3qQtq0Z5ML5h6TtgB8SD3o82YBT4H1E0sVHAWxVBtrRfASM249JOv1Y90GPiA+7lMLjk2gO+jS+8PjEp/D4VNlBj0+AjvoprliIBHnQo7PCgx6fRZ3y83in/MzHKT8PAD07A53yM6BTfu74QQ8bgJ8RMvFnjh/0sP7yCeFAQmfgzO4LUub9grhBRYNev0wd9DBfNnCfx69cX2e3jv4VoTz8CpiAlqY2lZilCpz9a9e3h8aQHb31EInsyHLiG1K/6psAsm9tsdG3qYMe5lsF4Padhkz+HSGTfwd09u9Tmdx8r8DZf0hl8uQPESCzxI+kgx4/1tJMzrDRT6mDHuYnBeC2TEMmX0bI5MuAzv5zKpObnxU4+y8anP1rgrN/Aqyrvnb8oMeyejVLqchxM/Ld3jNkZf6BIHdmPj6w7YPebL4MuNkcOOU3QL8xaFugfWU5Kfay892PvV8Icufk64i95cDYAyZpA/Qbg7RFkAc9OgPPFQD2jgV+0GN5dGvLr/FbW5b7bG35NYCDHiyDJLtNZjlwYverkoMeSJl/c/ygh91YTdjKYT4A6vB3xw88WBv/Tkj0rssdK6rSsONSeF2uiNc1xaRLi7J/kBbO/yAe9CBtWzPIhfM/SdsB/yQe9Pi4AafA+4uki78C2KoMtKP5Cxi3f5N0+rfugx6lPuxSCo8V0Rz0T3zhscKn8PhH2UGPFUBH/QdXLJQGedCji8KDHmkNo7poGOeA9j/EO6X9Un4cU2j07AJ0SitDkmPV3LHSEGtctPOtRJeGhDt1GuKyhp/cyW6ksP6ygnAgoQtwZlenISfz1mnI26CiQa/pQL1q3VSS3tB9HjPQPKJBzjq6ZbIOUfCk113Bzv5cmj5nz1Tg7FmuOns8sqO3HiKRHVlO1MUZZLV+Vd0Asm9tsVE20EZaM3m2AnDL0ZDJcwiZPAeYyeulMrmpp8DZ66cyefKHCJBZogHOIKsd9GhQSzM5w0YNgTbSmskbKgC3RhoyeSNCJm8EzOSNU5ncNFbg7LkanD2L4OwrgGvRWcDAYejwr3o1S6nIcRvku71nyMpcn7Dy0zAfH9j2QW82/wu42Rw45TdAvzFoW6B95R9S7OXmux97uYTYy8vXEXv/AGMPmKQN0G8M0hZBHvToAjxX8DduS05gW1vyoltbNo3f2pLns7Vl04b8gx4sgyS7TSYPOLHbtCHHUdDBgZR5MyBwpaXhk4ndWE3YymH+ALaNNidvMwol9xhr480Jid51uWNFVRp2XAqv/yjidU0x6dKi7BakhfMtGvIOepC2rRnkwvmWpO2AWzbkHfT4uwGnwNuKpIutAtiqDLSj2Qo4H9mapNOtG6o+6FHmwy6l8NgmWnhsG194bONTeGybgKO6dNBjG6CjbosrFsqCPOjRVeFBjyZRp2wa75RNfJyyaQDo2RXolE2ATtnU8YMeNgCbECqRJo4f9LD+sg1+iay0K3Bmtx0p825H3KCiQa/bpw56mO0bus9jM9fX2a2jNyOsszcDJqD81KYSk6/A2Zu7vj00huzorYdIZEeWEy1I/aoWAWTf2mKjHVIHPcwOCsBtRw2ZfEdCJt8R6Ow7pTK52UmBs++cyuTJHyJAZomWpIMeLWtpJmfYqFXqoIdppQDcWmvI5K0Jmbw10Nl3SWVys4sCZ99Vg7M3Jzj7NsC6qrnjBz0y69cspSLH3Tzf7T1DVuadCXJvkY8PbPugN5tnAnsawCm/AfqNQdsC7SvZpNjbOt/92NuVIPc2+TpiLxsYe8AkbYB+Y5C2CPKgR1fguQLA3rHAD3q0iW5t2S1+a0sbn60tuwVw0INlkGS3ybQBTux2U3LQAynz7o4f9LAbqwlbOcwWQB3u4fiBB2vjPQiJ3nW5Y0VVGnZcCq/ZinhdU0y6tCgbIi2ch4gHPUjb1gxy4dyQtgMa4kGPrRtyCrwCki4KAtiqDLSjKQDGbZik07Dugx7lPuxSCo/CaA4qii88Cn0KjyJlBz0KgY5ahCsWyoM86LGvwoMexVGnLIl3ymIfpywJAD33BTplMdApSxw/6GEDsJiQiYsdP+hh/aWQcCBhX+DMLkLKvBHiBhUNei1NHfQwpQ3d57Gt6+vs1tHbEsrDtsAE1C61qcS0U+Ds7V3fHhpDdvTWQySyI8uJPUn9qj0DyL61xUZ7pQ56mL0UgFsHDZm8AyGTdwA6+96pTG72VuDsHVOZPPlDBMgs0Yl00KNTLc3kDBvtkzroYfZRAG6dNWTyzoRM3hno7F1Smdx0UeDsXTU4e3uCsxcC66r2jh/0aFS/ZikVOW7TfLf3DFmZOxLk3i4fH9j2QW82bwTsaQCn/AboNwZtC7Sv5JFiLz/f/djrSpC7eb6O2MsDxh4wSRug3xikLYI86IHYjhJ9DGDvWOAHPfaNbm3pFr+1ZV+frS3dAjjowTJIsttk9gVO7LopOeiBlLm74wc97MZqwlYOEwLqsIfjBx6sjXsQEr3rcseKqjTsuBRe8xTxuqaYdGlRdj/Swvl+xIMepG1rBrlwvj9pO+D+xIMe4YacAu8Aki4OCGCrMtCO5gBg3PYk6bSn7oMeFT7sUgqPXtEc1Du+8OjlU3j0VnbQoxfQUXvjioWKIA96dFN40KNP1Cn7xjtlHx+n7BsAenYDOmUfoFP2dfyghw3APoRM3Mfxgx7WX3oRDiR0A87sDiRl3gOJG1Q06LVf6qCH6dfQfR77u77Obh29P6E87A9MQANSm0rMAAXOfpDr20NjyI7eeohEdmQ5cTCpX3VwANm3ttjokNRBD3OIAnAbqCGTDyRk8oFAZx+UyuRmkAJnH5zK5MkfIkBmiSGkgx5DamkmZ9jo0NRBD3OoAnA7TEMmP4yQyQ8DOvvhqUxuDlfg7GUanP0ggrN7kT2U3LNaY8PFgx5b1a9ZSkWOu2O+23uGrMyDCXLvlI8PbPugN5tvBexpAKf8Bug3Bm0LtK9sS4q9Vvnux14ZQe7W+Tpib1tg7AGTtAH6jUHaIsiDHojtKNHHAPaOBX7Qo7zhqn8r7L/ecr+84X+3ttgv5ccxhT7owTJIsttkyoETuwqSo6CDAylzJRC40tLwycRurCZs5TD7AXVY1dDtRG9tXEVI9K7LHSuq0rDjUnjdVhGva4pJlxZlq4G45s211Q15Bz1I29YMcuH8CGDMe/V6REPeQY+eDTkF3lCSLoY25G9VBtrRDAXG7ZEknR7ZUPVBj0ofdimFx7BoDjoqvvAY5lN4HJWAo7p00GMY0FGPwhULlUEe9Oiu8KDH8KhTHh3vlMN9nPLoANCzO9AphwOd8uiGWOOinc8G4HBCJh5OrkSS3Uhh/WUYfmZX2h04sxtByrwjGvI2qGjQ60igXrVuKhnZ0H0ej0HziAY56+jHEMrDY4AJ6Fiws2vcVHKsAmcf5aqzxyM7eushEtmR5cRxpH7VcQFk39pio9FAG2nN5KMVgNvxGjL58YRMfjzQ2cekMrkZo8DZT0hl8uQPESCzxIk4g6x20OPEWprJGTYaC7SR1kw+VgG4jdOQyccRMvk4oLOflMrk5iQFzn6yBmcfRXD2YcC6apTjBz3y69cspSLHbZPv9p4hK/MJBLl3y8cHtn3Qm83zgT0N4JTfAP3GoG2B9pUdSLEXync/9k4myG3ydcTeDsDYAyZpA/Qbg7RFkAc9ENtRoo8B7B0L/KDHKdGtLePjt7ac4rO1ZXwABz1YBkl2m8wpwIndeCUHPZAyn+r4QQ+7sZqwlcNUA3U4wfEDD9bGEwiJ3nW5Y0VVGnZcCq87KOJ1TTHp0qLsaaSF89OIBz1I29YMcuH8dNJ2wNOJBz2ObMgp8CaSdDExgK3KQDuaicC4PYOk0zN0H/So8mGXUnicGc1Bk+ILjzN9Co9Jyg56nAl01Em4YqEqyIMePRQe9Jgcdcqz4p1yso9TnhUAevYAOuVkoFOe5fhBDxuAkwmZeLLjBz2sv5xJOJDQAzizO5uUec8mblDRoNcpqYMeZkpD93k8x/V1duvo5xDKw3OACejc1KYSc64CZz/P9e2hMWRHbz1EIjuynJhK6ldNDSD71hYbnZ866GHOVwBu0zRk8mmETD4N6OzTU5ncTFfg7BekMnnyhwiQWeJC0kGPC2tpJmfYaEbqoIeZoQDcZmrI5DMJmXwm0NlnpTK5maXA2WdrcPbzCM5+JrCuOs/xgx6t69cspSLHLcx3e8+QlfkCgtxF+fjAtg96s3lrYE8DOOU3QL8xaFvAD0ORYi+S737szSbIXZqvI/baAGMPmKQN0G8M0hZBHvRAbEeJPgawdyzwgx5zoltbLorf2jLHZ2vLRQEc9GAZJNltMnOAE7uLlBz0QMp8seMHPezGasJWDnMaUIeXOH7gwdr4EkKid13uWFGVhh2XwmsbRbyuKSZdWpS9lLRwfinxoAdp25pBLpxfRtoOeBnxoMcZDTkF3uUkXVwewFZloB3N5cC4vYKk0yt0H/So9mGXUnhcGc1BV8UXHlf6FB5XKTvocSXQUa/CFQvVQR702E/hQY+5Uae8Ot4p5/o45dUBoOd+QKecC3TKqx0/6GEDcC4hE891/KCH9ZcrCQcS9gPO7K4hZd5riBtUNOj12tRBD3NtQ/d5vM71dXbr6NcRysPrgAno+tSmEnO9Ame/wfXtoTFkR289RCI7spy4kdSvujGA7FtbbHRT6qCHuUkBuN2sIZPfTMjkNwOd/ZZUJje3KHD2ealMnvwhAmSWmE866DG/lmZyho0WpA56mAUKwO1WDZn8VkImvxXo7LelMrm5TYGz367B2W8gOPuVwLrqBscPehTUr1lKRY7bPt/tPUNW5nkEuffMxwe2fdCbzQuAPQ3glN8A/cagbQE/FESKvb3z3Y+92wlyd8zXEXtFwNgDJmkD9BuDtEWQBz0Q21GijwHsHQv8oMcd0a0td8ZvbbnDZ2vLnQEc9GAZJNltMncAJ3Z3KjnogZT5LscPetiN1YStHOZSoA7vdvzAg7Xx3YRE77rcsaIqDTsuhdciIq+xB23/nRtwsSOU3LNywXtyfbzcnfPdLmhurceRu0s+xy/Rc5VNgD5kdYkaC+g3Bm0LdOxlknywW77bsXc7Se7u+TpiLxMYL7cDxwL6jUHaIjavRfuL9cGb6xE20eBsYv9y6crnHpn33Ct0n9D9Qg8IPSj0kNDDQo8ILRR6VOgxoceFFgk9IbRY6Emhp4SeFnpG6Fmh54SeF3pB6EWhl4ReFloi9IrQq0KvCb0eLbC99bTlJztt9Xf3+ry7z+fd/T7vHvB596DPu4d83j3s8+4Rn3cLfd496vPuMZ93j/u8W+Tz7gmfd4t93j3p8+4pn3dP+7x7xufdsz7vnvN597zPuxd83r3o8+4ln3cv+7xb4vPuFZ93r/q8e83n3evRd94H3ej0xmyyuHIPoG5etXUjZO4F1uD757udH63M1hb3QfS3yq73A/toDwBtcUC+w7Yo/JdP82ByMoc8MpuHkhmrYDX9mYeBtuiZ76QtQnF8mkc2UObi6v/IbBZu2FgRH/2ZR4G26JXvmC0ivnyax9Zf5pI1yGweX9+xStaoP7MIaIve+c7YomAtfJon1kfmkrXKbBYnPlbFOvRnngTaok++A7YoWSef5qnEZA4lILN5OpGxQgnpzzwDtEXf/I1qi6IE+TTPrkvmwoRlNs+tdazC6vXQn3keaIsD8zeSLUrWi0/zwppljqynzObFNYxVWr3e+jMvAW3RLz9wW4Q2gE/zsp/MoQ2S2Sz571hmA/VnXgHaon9+gLao3GA+zauryxxOQmbzmmesguqk9GdeB9piQL6OzV6LmuHGAvYajLdWTtYWBymxBbAmNcCayvQG2uJgJbYAzr0NcO5oDgTa4hAltgDOMQwwR5oBQFsMVGILIJYaIBYYoC8bli3Q+x2R85U3YHvWwis3RMvSyr9rrN4Hve6K43vV/pjY82ZDIsNvNsSP+xbQGVhyv9WwRsGgcUNBXgb5OszZKhk75qNcrr5j/u2ozt+JLuj/u8L6dsP/7ph/x2fVFX0ZJAK1YiulbwOd/h2ScdGoj5T5XRx6Unaq2t06FjTQt+ROBh5xQgLve47bw/rLew3xu7KAclNj7zWgrd+HyVxcGOSM633SjOuDhkSGPyDMuD50fMZl5f6QMONi8GoB+T3Hgf49oL0/AgN97EEDHtLHPwbKHOSs/zUY36UVPuxSZv2fROP+0/hZ/yc+s/5PA5j1vwac9X8CdMpPScZFByJS5s8cn2VacPyYMMv8vKHbSdDa5fNaKLdNMh8R5P7CcbnthMLyWAc87udArPjScR1av/mS4DtfgaucWK79ysMr42zTewR/Qk58lyqIyaUEfxqWXzvj6Ciw3LEHXSh+DZwTAW1tWPpDz0+RhfY3js9Pra98Q4iVb0k559uG/+0Mou3/KjBHfAfTQ2FVkJ3R78D2iz3fNyQy/D2hM/qD451RK/cPAXVGEYnpG8Kk7hugjX5UsnyD9MuflHYzX4XxXV7gwy6lm7ksGqs/x3czl/l0M38OoJuJyHaxbuYyoFP+TDIuOhCRMv/i+GzRguNPhNnicscraWuX5bVQbptkfiTI/avjctuJyq+EicpyIFb85rgOrd/8RvCd30mV5e9r6WaGkntoVfYfCuLoD4LcI/Jrp++PBMsde9AdyD+B8xigrQ1af2i/sRjxJ8Fv/iJh5l8BdOOQp4r/humhpCDIbtzfYPvFnhUNiQyvIHTj/nG8G2fl/kdJNy4GNi5349Ia6ejGIf1yE5zMgXbjXoGBVKTKh11KN65Oo1X/pjdKW73zZv9DfDfOfondjUNku1g3rk4jnFOmN+IYFx2ISJkzgIGYloYPOAuOmzTCJ4bMRtzEFUruMdYumbVQ7pUTC4LcWY7LbScplkf0RCUTiBV1Hdeh9Zu6BN/JBsrtzbXZjXjdOFaVnaMgjnIIPjAqv3b6/nFguWMPuhtXDziPAdraoPXHwIl6BL+pT8LM+o343bglwEK3AUwPVSbIblwDsP1iT8NGRIYbNsKP2wg4gWLJ3ahRjYJB49K6cfUaud2Na6ykG4f0y1yl3bglsG6cqfZhl9KNy4vG6qbx3bg8n27cpgF045YAu3F5QKfctBHHuOhARMq8mePdOAuOuYTZ4uaOV5XWLpvXQrltkmlMkHsLx+W2k5QtCBOVzYFYsaXjOrR+syXBd7YiVZZbkbtxjCp7awVxtDVB7jH5tdP3TwDLHXvQ3bhtgPMYoK0NWn8MnNiG4DfbkjBz2wC6cS8Di/smMD2EA+3GNQHbL/Y0bURkuCmhG7ed4904K/d2irpx2zjejdteSTcO6ZfNlHbjXoZ14yoC68blR2O1eXw3Lt+nG9c8gG7cy8BuXD7QKZs34hgXHYhImVs43o2z4NiMMFvcwfGq0tplh1oot00y2xPk3tFxue0kZUfCRGUHIFbs5LgOrd/sRPCdnUmV5c7kbhyjym6pII5aEuQel187ff8ksNyxB92NawWcxwBtbdD6Y+BEK4LftCZhZusAunHIv0W8C0wPZYH+DbNdwPaLPbs2IjK8K6Eb18bxbpyVu42iblwrx7txuynpxiH9cnel3biXYN244sD+9t0e0VgNxXfj9vDpxoUC6Ma9BOzG7QF0ylAjjnHRgYiU2TjejbPguDthtljgeFVp7VJQC+W2SWY3gtxhx+W2k5QwYaJSAMSKQsd1aP2mkOA7RaTKsojcjWNU2cUK4qiYIPf4/Nrp+6eC5Y496G5cCXAeA7S1QeuPgRMlBL+JkDAzEkA37kVgcV8K00NBaZDduFKw/WJP20ZEhtsSunHtHO/GWbnbKerGlTjejWuvpBuH9Ms9lXbjXoR14ypLfNildOP2isZqh/hu3F4+3bgOAXTjXgR24/YCOmWHRhzjogMRKfPejnfjLDjuSZgtdnS8qrR26VgL5bZJpj1B7k6Oy20nKZ0IE5WOQKzYx3EdWr/Zh+A7nUmVZWdyN45RZXdREEddCHKfnl87fX8iWO7Yg+7GdQXOY4C2Nmj9MXCiK8Fv9iVh5r4BdONeABb33WB6KI8E2Y3rBrZf7OneiMhwd0I3rofj3Tgrdw9F3biujnfj9lPSjUP65f5Ku3Ev4P5gdcSHXUo37oBorPaM78Yd4NON6xlAN+4FYDfuAKBT9mzEMS46EJEy93K8G2fBcX/CbLG341WltUvvWii3TTL7EeTu47jcdpLShzBR6Q3Eir6O69D6TV+C7xxIqiwPJHfjGFV2PwVx1I8g96T82un7k8Fyxx50N64/cB4DtLVB64+BE/0JfjOAhJkDAujGPQ8s7g+C6aEo0JOqB4HtF3sObkRk+GBCN+4Qx7txVu5DFHXj+jvejRuopBuH9MtBSrtxz8O6ceWBnVQdHI3VIfHduME+3bghAXTjngd24wYDnXJII45x0YGIlPlQx7txFhwHEWaLhzleVVq7HFYL5bZJZiBB7sMdl9tOUg4nTFQOA2JFmeM6tH5TRvCdclJlWU7uxjGq7AoFcVRBkHtKfu30/XPAcscedDeuEjiPAdraoPXHwIlKgt9UkTCzKoBu3HPA4r4at8JfFGQ3rhpsv9hzRCMiw0cQunFDHe/GWbmHKurGVTrejTtSSTcO6ZfDlHbjnsN148p92KV0446Kxurw+G7cUT7duOEBdOOeA3bjjgI65fBGHOOiAxEp89GOd+MsOA4jzBZHOF5VWruMqIVy2yRzJEHukY7LbScpIwkTlRFArDjGcR1avzmG4DvHkirLY8ndOEaVPUpBHI0iyD01v3b6/vlguWMPuht3HHAeA7S1QeuPgRPHEfxmNAkzRwfQjXsWWNwfj6spioPsxh0Ptl/sGdOIyPAYQjfuBMe7cVbuExR1445zvBt3opJuHNIvxyrtxj2LO6la5sMupRs3LhqrJ8V348b5dONOCqAb9yywGzcO6JQnNeIYFx2ISJlPdrwbZ8FxLGG2eIrjVaW1yym1UG6bZE4kyD3ecbntJGU8YaJyChArTnVch9ZvTiX4zgRSZTmB3I1jVNmnKYij0whyX5BfO33/QrDcsQfdjTsdOI8B2tqg9cfAidMJfjORhJkTA+jGPQMs7s+A6SFiguzGnQG2X+w5sxGR4TMJ3bhJjnfjrNyTFHXjTne8GzdZSTcO6ZdnKe3GPQPrxpVU+7BL6cadHY3VKfHduLN9unFTAujGPQPsxp0NdMopjTjGRQciUuZzHO/GWXA8izBbPNfxqtLa5dxaKLdNMpMJcp/nuNx2knIeYaJyLhArpjquQ+s3Uxn7g0iV5fnkbhyjyp6mII6mEeSelV87fX82WO7Yg+7GTQfOY4C2Nmj9MXBiOqN7TcLMCwLoxj0NLO4vVNqNuxBsv9gzoxGR4RmEbtxMx7txVu6Zirpx0x3vxs1S0o1D+uVspd24pxV24+ZEY/Wi+G7cHJ9u3EUBdOOeBnbj5gCd8iIl3TikzBc73o2z4DibMFu8xPGq0trlkloot00yswhyX+q43HaScilhonIJECsuc1yH1m8uI/jO5aTK8nJyN45RZV+hII6uIMh9cX7t9P1LwHLHHnQ37krgPAZoa4PWHwMnriT4zVUkzLwqgG7cU8Difi5MD0WB/k3VuWD7xZ6rGxEZvprQjbvG8W6clfsaRd24Kx3vxl2rpBuH9MvrlHbjnoJ148oC+5uq10dj9Yb4btz1Pt24GwLoxj0F7MZdD3TKGxpxjIsORKTMNzrejbPgeB1htniT41WltctNtVBum2SuJch9s+Ny20nKzYSJyk1ArLjFcR1av7mF4DvzSJXlPHI3jlFlz1cQR/MZHdn82un7V4Dljj3obtwC4DwGaGuD1h8DJxYQ/OZWEmbeGkA37klgcX8brhtXGWQ37jaw/WLP7Y2IDN9O6Mbd4Xg3zsp9h6Ju3ALHu3F3KunGIf3yLqXduCdx3biwD7uUbtzd0Vi9J74bd7dPN+6eALpxTwK7cXcDnfKeRhzjogMRKfO9jnfjLDjeRZgt3ud4VWntcl8tlNsmmTsJct/vuNx2knI/YaJyHxArHnBch9ZvHiD4zoOkyvJBcjeOUWU/pCCOHiLIPTe/dvr+1WC5Yw+6G/cwcB4DtLVB64+BEw8T/OYREmY+EkA3bjGwuF8I00NBoHvjFoLtF3sebURk+FFCN+4xx7txVu7HFHXjHna8G/e4km4c0i8XKe3GLYZ14yoD2xv3RDRWF8d3457w6cYtDqAbtxjYjXsC6JSLG3GMiw5EpMxPOt6Ns+C4iDBbfMrxqtLa5alaKLdNMo8T5H7acbntJOVpwkTlKSBWPOO4Dq3fPEPwnWdJleWz5G4co8p+TkEcPUeQ+7r82un714Pljj3obtzzwHkM0NYGrT8GTjxP8JsXSJj5QgDduCeAxf2LMD2Ew0F2414E2y/2vNSIyPBLhG7cy45346zcLyvqxj3veDduiZJuHNIvX1HajXsC1o2rqPRhl9KNezUaq6/Fd+Ne9enGvRZAN+4JYDfuVaBTvtaIY1x0ICJlft3xbpwFx1cIs8U3HK8qrV3eqIVy2ySzhCD3m47LbScpbxImKm8AseItx3Vo/eYtgu+8Taos3yZ34xhV9jsK4ugdgtw35ddO378ZLHfsQXfj3gXOY4C2Nmj9MXDiXYLfvEfCzPcC6MYtAhb378P0UBXo3rj3wfaLPR80IjL8AaEb96Hj3Tgr94eKunHvOt6N+0hJNw7plx8r7cYtgnXjTGB74z6Jxuqn8d24T3y6cZ8G0I1bBOzGfQJ0yk8bcYyLDkSkzJ853o2z4PgxYbb4ueNVpbXL57VQbptkPiLI/YXjcttJyheEicrnQKz40nEdWr/5kuA7X5Eqy6/I3ThGlb1UQRwtJcg9P792+v4CsNyxB92N+xo4jwHa2qD1x8CJrwl+8w0JM78JoBv3OLC4/xamh8JAu3Hfgu0Xe75rRGT4O0I37nvHu3FW7u8VdeO+drwb94OSbhzSL39U2o17HNaNKw+sG/dTNFaXxXfjfvLpxi0LoBv3OLAb9xPQKZc14hgXHYhImX92vBtnwfFHwmzxF8erSmuXX2qh3DbJ/ECQe7njcttJynLCROUXIFb86rgOrd/8SvCd30iV5W/kbhyjyv5dQRz9TpD79vza6ft3gOWOPehu3B/AeQzQ1gatPwZO/EHwmz9JmPlnAN24x4DF/V8wPZSUBtmN+wtsv9jzdyMiw38TunErHO/GWblXKOrG/eF4N+4fJd04qF821tmNewzWjYuU+LBL6cZt0jjqD43TVu+82f8Q342zX2J34x4DduM2aYxzyjqNOcZFByJS5nRgIK50NrCvWHBMa4xPDBmNuYkrlNxjrF0yaqHcNsn8Q6gOMh2X205SLI/oiUoGECuyHNeh9ZssQszUBcrtzbV1G3O7cYwqO1tBHGUTfODu/Nrp+/eA5Y496G5cDnAeA7S1QeuPgRM5BL+pR8LMeo353bhHgcV9fZgeygPtxtUH2y/2NGhMZLhBY/y4DYETKJbcDRvXKBg0Lq0bl9PY7W5co8achIcGKaRfNlbajXsU1o0rDKwblxuN1bz4blyuTzcuL4Bu3KPAblwu0CnzGnOMiw5EpMybOt6Ns+DYmDBb3MzxqtLaZbNaKLdNMo0Icm/uuNx2krI5YaKyGRArtnBch9ZvtiD4zpakynJLcjeOUWVvpSCOtiLIfX9+7fT9B8Byxx50N25r4DwGaGuD1h8DJ7Ym+M02JMzcJoBu3EJgcb8tTA8loSC7cduC7Rd7mjQmMtyE0I1r6ng3zsrdVFE3bmvHu3HbKenGIf1ye6XduIWwblxpyIddSjeuWTRW8+O7cc18unH5AXTjFgK7cc2ATpnfmGNcdCAiZW7ueDfOguP2hNliC8erSmuXFrVQbptktiPIvYPjcttJyg6EiUoLIFbs6LgOrd/sSPCdnUiV5U7kbhyjyt5ZQRztTJD74fza6fuPgOWOPehuXEvgPAZoa4PWHwMnWhL8phUJM1sF0I17BFjct8bVFCbIblxrsP1izy6NiQzvQujG7ep4N87KvauiblxLx7txbZR045B+uZvSbtwjsG5ccbUPu5Ru3O7RWN0jvhu3u083bo8AunGPALtxuwOdco/GHOOiAxEpc8jxbpwFx90Is0XjeFVp7WJqodw2ybQhyF3guNx2klJAmKgYIFaEHdeh9ZswwXcKSZVlIbkbx6iyixTEURFB7sfya6fvPw6WO/agu3HFwHkM0NYGrT8GThQT/KaEhJklAXTjHgYW9xHceZtwkN24CNh+sae0MZHhUkI3rq3j3Tgrd1tF3bhix7tx7ZR045B+2V5pN+5h3F9xqPRhl9KN2zMaq3vFd+P29OnG7RVAN+5hYDduT6BT7tWYY1x0ICJl7uB4N86CY3vCbHFvx6vKlXaphXLbJNOOIHdHx+W2k5SOhInK3kCs6OS4Dq3fdCL4zj6kynIfcjeOUWV3VhBHnQlyL86vnb7/JFju2IPuxnUBzmOAtjZo/TFwogvBb7qSMLNrAN24h4DF/b4wPVQFujduX7D9Yk+3xkSGuxG6cd0d78ZZubsr6sZ1cbwb10NJNw7pl/sp7cY9BOvGmcD2xu0fjdUD4rtx+/t04w4IoBv3ELAbtz/QKQ9ozDEuOhCRMvd0vBtnwXE/wmyxl+NVpbVLr1oot00yPQhy93ZcbjtJ6U2YqPQCYkUfx3Vo/aYPwXf6kirLvuRuHKPKPlBBHB1IkPuZ/Nrp+8+C5Y496G5cP+A8Bmhrg9YfAyf6EfymPwkz+wfQjXsQWNwPgOmhuijIbtwAsP1iz0GNiQwfROjGHex4N87KfbCiblw/x7txhyjpxiH9cqDSbtyDsG5cqNyHXUo3blA0VgfHd+MG+XTjBgfQjXsQ2I0bBHTKwY05xkUHIlLmIY534yw4DiTMFg91vKq0djm0Fsptk8whBLkPc1xuO0k5jDBRORSIFYc7rkPrN4cTfKeMVFmWkbtxjCq7XEEclRPkfiG/dvr+i2C5Yw+6G1cBnMcAbW3Q+mPgRAXBbypJmFkZQDfuAWBxXwXTQ2mgJ1WrwPaLPdWNiQxXE7pxRzjejbNyH6GoG1fheDduqJJuHNIvj1TajXsAd29cYCdVh0Vj9aj4btwwn27cUQF04x4AduOGAZ3yqMYc46IDESnzcMe7cRYcjyTMFo92vKq0djm6Fsptk8xQgtwjHJfbTlJGECYqRwOxYqTjOrR+M5LgO8eQKstjyN04RpV9rII4OpYg95L82un7r4Dljj3obtwo4DwGaGuD1h8DJ0YR/OY4EmYeF0A37n5gcT8atzcu0L+pOhpsv9hzfGMiw8cTunFjHO/GWbnHKOrGjXK8G3eCkm4c0i9PVNqNux93UjWwv6k6Nhqr4+K7cWN9unHjAujG3Q/sxo0FOuW4xhzjogMRKfNJjnfjLDieSJgtnux4VWntcnItlNsmmRMIcp/iuNx2knIKYaJyMhArxjuuQ+s34wm+cyqpsjyV3I1jVNkTFMTRBILcr+fXTt9/Ayx37EF3404DzmOAtjZo/TFw4jSC35xOwszTo7wG2Zm6ryFWltgzsTGR4YmEztQZjnemrNxnKOpMneZ4Z+pMJZ0ppF9OIhfECJtMCsjHQ8k9K/HiTEJymez4JNTG9WSC3Gc5LjdrMnG2AnufTZD77Xy35baxfRZB7nfyOXkHXXRMAeYKoK0NWn8MnJhC8JtzSEXHORuh6LiXVHSc25jI8LmEouM8x4sOK/d5ioqOKY4XHVOVFB1Ivzzf8aLD2uR8JUWHtctUQnKZ5vgk1Mb1NILc0xUUHYzJxAUK7H0BQe73892W28b2dILcH+Rz8g666LgQmCuAtjZo/TFw4kKC38wgFR0zAth3fA9w3jYTvKUvqEJrJth+sWdWYyLDswiF1mzHCy0r92xFhdaFjhdac5QUWki/vMjx7Y7WJhcRktTFjk9mbSK6mCD3JY7LbWW+hCD3paRJyaU+28PROnHdZhaP5hBsdpnjctt8dhkhp10MxPfLHdeh9ZvLCb5zBSneryBvUWUUZFcqiKMrCXJ/nF87ff8TsNyxB924uQo49wTa2qD1x8CJqwh+M5eEmXPJmMnQxTcNOTGUAeazJVCX96BkNqHQvcC6/PN8HbY4IB83Vk+czOZzIF9fKLFFL6DMvYFj9QGO9aUSW/QFynwgcKx+wLG+UmKL/kCZB+BkNl8A+VqqxBZXA+e/QCwwQF82SFsEuQh2NXguHHuuaUxk+BrCIti1ji+CWbmvJSyCZUZ5rZPGdzbgJH41wMoH88kqEEIb/hj7P5DziGbVP4ALbUzsQ9JXVZuaj0n+ETrj/eGhZMYyq//48IaPZeJfPLKhY5n/vlq4YWMZv5ePbshYxv/1Y+s/llnTf3h8fccya/5Pi9ZvLLO2//jE+oxl1v6fFyc+1jpGCoWeTHSsdY4UCj2V2FgJjBQKPZ3IWAmNFAo9s+6xEhwpFHp2XWMlPFIo9Nzax1qPkUKh59c21nqNFAq9sOax1nOkUOjFNY213iOFQi/5j7UBI4VCL/uNtUEjhUJL/jvWBo4UCr0SP9YGjxQKvbr6WEmMFAq95h0rqZFCoddJx5aus3N9dNfbTqRt55vRpUcqIbaycN1aVhYQKwDXOr5j7XpglWoLnjpp/tV1PlgHqUJifUZKFRLrN1KqkFi/kVKFxPqNlCok1m+kVCERWs8nVUis35MqJNbvic1p7XNDtHl+o19BEUruMXaCep2Sc9KWz+sJW4lucnz7pXWAmwhy30zaTmbHnRAdF62LG0m6uIWki1uIurBFGkMXP+Q7HA/RgpIh94/uyv1v8cuQ+ydX5fYU6gy5l7kp92pNBYbcP7sod1wDhCH3L+7J/Z9mDUPu5a7J7dNYYsj9q1ty+zbBGHL/5pLca2jYMeT+3R2519hcZMj9hytyr6URypD7TzfkXmvTliH3Xy7IvY4GM0Puvze+3OtshjPkXrGx5U6gcc+Q+5+NK3dCiwwMudOab0S5E1wQYci9ycaTO+HFG4bcdTaW3Oux0MSQO33jyL1ei2IMuTM2htzruYDHkDszeLnXe7GRIXdW0HJvwMIoQ+66wcq9QYu4DLmzg5R7AxecGXLnBCf3Bi+OM+SuF5TcSSzkM+SuH4zcSW06YMjdIAi5k9wgwZC7IV/upDdzMORuxJYbsPGEIXdjstzJ8sfaF5G7ceWuWAd/tD0QeWC5Y0/8sfxQco8B7k8wwDV/411HT9YWmyqxBXAN3QDXpc0vQFtspsQWwHVeA1w7Nb8BbbG5ElsA1yINcH3P/Am0xRZKbAFcLzPANSizAmiLLZXYArimY4DrJMa79pCsLbZSYgvguoMB9vJNBtAWWyuxBbA3boD9ZlMXaIttlNgC2L81wJ6oqQe0xbZKbAHsMRpg3840BNqiiRJbAPtgBthbMrlAWzRVYgtgr8YAew1mM6AttlNiC2BNaoA1ldkSaIvtldgCOPc2wLmj2QZoi2ZKbAGcYxhgjjRNgbbIV2ILIJYaIBYYoC8bpC3sZTv2DGedtDU/if6uda3neMfcZD3HXsez8uwwSiebePic51l/gjN9E5jp2GHceRv+dy7WuURreZ5HWJTr6wjArM8h+mRlng+8dxu4mGuQtvD65XzPIfENtc+6dI60zwLPWCYcltioLDHVldXhopLSgnJTHC4uri6sLimOFFZWFxWWVZZUmcKycEFpVUmo2kSqqkqKwhUlxdWllRXF1d5CxlSGw4WVpeUVpqiguKw8FKkMl4WqC0vCBaGyynBJZWU4UlxcFg5XFkeqI6WRgoKy6nAkVFRSUhoqLgiXFrDssyBqn7XdwIbGQOSV094kdmv0so/btAA4i79bCWB9Oylx3U68RcLq4jaCLu4g6eIOoi5s0DF21vRzfCcVKx76O76TiuX7A0iTtvg/8BdK7jFAvzRAWxuk/v5fKrlbSZXcnRoruTvJldydBFAYWAsrubsauwkwSFt4/fIuZZXc3cBKbgCwkmPZ525PJbempOByC47JJyvB3KMxwdxDTjD3EBLM4IASDKLaQI2VS5rBJsvXkIAqgGT5vBeYoIH+Z4aQEsC9CSToZHV6X2NcIlytPepQgh5Mss99/0et1vujrdYHGH8JZk2XIYeSe8z14NkKS+46RLmT5fFBx9vf1jEfJExAHiJNxh4itnwfIOniYZIuHia3vxm6ONzx9jcrHsocb3+zfL9cSfsb6JcGaGuD1N//S/v7flJ34hFmd+JBUhJ4hNidsDw/QgCFaiXt7weBE8GFjd0EGKQtvH65MID2N9I+jwLb3+XA6ppln0cTqK7z19Ne63hSf0pyvUZK/SnJ9Rsp9ack12+k1J+SXL+RUn9Kcv1GSv0pydB6Pqk/Jbl+T+pPSa7f4y38H4uuSDyupehl8fcYocBdRCr2FxE7vlYXjxN08QRJF08QdWELFUY3dGhzh+MhWlQx5D7SXbn/LQAZcg9zVW5PscqQ+yg35V6tsGbIPdxFueOaAAy5j3ZP7v80LBhyj3BNbp/mCkPukW7J7dsIYsh9jEtyr6FpxZD7WHfkXmODjSH3KFfkXkszkCH3cW7IvdbGJUPu0S7IvY4mK0Pu4ze+3OtsCDPkHrOx5U6gec2Q+4SNK3dCjXaG3CduTLkTXBRgyD1248md8AIGQ+5xG0vu9VhsYch90saRe70Whhhyn7wx5F7PRSyG3KcEL/d6L7gx5B4ftNwbsDjIkPvUYOXeoIVMhtwTgpR7AxddGXKfFpzcG7xAzJD79KDkTmIxmyH3xGDkTmrhnSH3GUHIneQmAYbcZ/LlTnpDA0PuSWy5AZsvGHJPJsuNOLXI2Bdx1saVe52noFh7IM525MDDOh4D3J9ggGv+xruOnqwtpiixBXAN3QDXpc3RQFuco8QWwHVeA1w7NccAbXGuElsA1yINcH3PHAe0xXlKbAFcLzPANSgzBmiLqUpsAVzTMcB1EjMWaIvzldgCuO5ggL18czLQFtOU2ALYGzfAfrM5FWiL6UpsAezfGmBP1JwOtMUFSmwB7DEaYN/OnAm0xYVKbAHsgxlgb8mcBbTFDCW2APZqDLDXYM4B2mKmElsAa1IDrKnMVKAtZimxBXDubYBzRzMdaIvZSmwBnGMYYI40M4C2mKPEFkAsNUAsMEBfNkhb/L/cQvYY6RayxRpvIVtMvoVsMWFR7hlHACaRxViUzE8CbyEDLuYapC28fvmkslvIngLeQuYtZJK9hYxln6c2wh/hQF4fyeSTlWCe1phgniYnmKcJCea5gBIMYrcPaizk1ZTI7tPzJFug/wjHM8AEDfQ/8zwpATwTwB/heBb4RzhWu9rToQT9HMk+z67llp1k7WLvmP+mIX7cl9i7SpN7Vt4uxJD7ZZfljt4uxJB7ibty/3u7EEPuV1yV23O7EEPuV92Ue7XbhRhyv+ai3HG3CzHkft09uf9zuxBD7jdck9vndiGG3G+6Jbfv7UIMud9ySe413C7EkPttd+Re4+1CDLnfcUXutdwuxJD7XTfkXuvtQgy533NB7nXcLsSQ+/2NL/c6bxdiyP3BxpY7gduFGHJ/uHHlTuh2IYbcH21MuRO8XYgh98cbT+6EbxdiyP3JxpJ7PW4XYsj96caRe71uF2LI/dnGkHs9bxdiyP158HKv9+1CDLm/CFruDbhdiCH3l8HKvUG3CzHk/ipIuTfwdiGG3EuDk3uDbxdiyP11UHIncbsQQ+5vgpE7qduFGHJ/G4TcSd4uxJD7O77cSd8uxJD7e7bcgNuFGHL/ENC+o1ByjwGu0xvg2rdZAtx39KMSWwDXkg1wfda8BrTFT0psAVzvNMA1RPMm0BbLlNgCuCZngOtc5h2gLX5WYgvgupEBrsWY94G2+EWJLYBrGwa4XmA+AtpiuRJbAPvvBtjTNp8CbfGrElsAe8QG2Hc1XwBt8ZsSWwD7mAbYGzRLgbb4XYktgL02A+xfmW+BtvhDiS2A/SAD7LGYH4C2+FOJLYD9AQOsb80yoC3+UmILYB1kgPN4sxxoi7+V2AI43zPA+Yr5HWiLFUpsAcxrBojL5i+gLf4h2SIdbAtg/Bqg/xmk/uxlAHXSPIfUPU8Ce0fWi++b6+H4ruPh87nGq/59nnnY3i4eoZj34y/pheaGqxSBHjfUYqPKvc4/I2Hlfp4gt2mhI2EAg8osaoYbC+g3BmmLIAHvFhLgvRAFvBc1A14ouWelchkr+oUt3Af6FwiAV6QA6F8kyF1MAnr0bBTolwZoa1OsFJznkcD5pSg4v1ybwXkeCZzbKgDnlwgg1U4BOL9MkLu9EnAG+qUB2tq0VwrO80ngvCQKzq/U9lbBEkKw7q0ApF4hyN1RSasAGFTmKWCrAOg3pqNSwFtAArxXo4D3Wm2ejS4gzUY7K5iNvkoAvC4KgP41gtxdlcxGgX5pgLY2XZWC8+0kcH49Cs5v1PbZ6OuEYO2hAKTeIMi9n5LZKDCoTPd83FhAvzFIW1g/qS+0qccmNT5TWFBcVVxYVlUVDlWVlkYqTLgiUlFVVVFZFi4rKYmESirLq8oqiwrKKwqqw+XVoaqyqkiRKS8sLzGhCrMibjwjvldUXBYqjlQXh8KhgnBBYaiitLi8sLKsqLCksLhYhguXR0qMqSgqMBUlhZECU1BmisorQuHCqrLiFdF4mVz/v/5dECkoqigpragoLiuqKC+vqqouqSwui1Sb8uIyU1AeloHKwuFIYWGorKq6qrwwXFpsCiMVEfH0kopQYel/eJUQqa40lrPyklBxQWVxeZENoKpwcXlpqCRcHC4KVRdXl5eFTEFBpKJQ2C0IlZYWhUqri0pCpmptvIaqKstNVUFpuCJcUVVqyquFgSr5WFZWFKosqCgqNNVlpZUShDKmsBoKV1WXm4rqsoKK8nC4qKT6P7yGC01lcUlRdZlotaqiKiyKFquEK8rChSJDuNyUlhdXlZYUF4QKi0vkXaGIXlBYUSgaqqwKF62d11BlWWVBQVGoKBKuLigrrQ6VVZQLv5VVldVGJBUgKQ+FRZYyezN2dZW9Lrs8EimrjpiK8qKCeF5DpSXh8pAIWVFWVhEOl1ZVFQqrlWXlRSZcUFpaEKouKV9ptJAMJK+riiqri0tChaHycChUWlywVh+oDocLC6pKQ6EqsYjwUBApFbQrqyqOCKaVhCPVlRXFwlml6N6EKqtKysMFoYqQ+GCoIBQpqfyPXsurS4si8v8Ji8SllUWlBYKiobDAZ3GpOHpxZXF1aUFhqbhvQWGhjBguMtWi+oLKahGjIhRZq14LxW/C4nwCwSHB4sqKSEFVpKyoqKy0qKCy0A5RUFRcXRUSDK4sLSyV1+JjZaGQ6F8UVPQfvZZFrLcUhypD8j/VRZURgffC0srCSLWEcWFlSNw9VF4aqaosMSVlpeVF4YKy6uKwRGlROFRSauJ5bRAd1362G0Bi//15z+cXPJ9f9Hx+yfP5Zc/nJZ7Pr3g+v+r5/Jrn8+uez29EP78p/74l9HbjVX9ypF5aMJO1O+phMTf2vNOYyPA7jfHjvgv8UxMsud9tXKNg0LgrjbZlWs2Exf48NavGQW+rV/P5TY/jNklf9Tn2/3tP/tv7Qh8Ifdh49fG8/CImwFYPdcD69U78k75uD/x3fBhFzruEyfTHjsu9dfqqzpbLvvMJ6c8U2XHz1xCToeQeY/VJuc6PpItPybrwmxglfcUfSRefeXQRe9AdNqAdzWfAPP05SaefE/0rneRfPVu4jd1WbgbG9CI1gNB/fusLYAwBbW2Q+vPG0Bcb/mf11slzBimG+joeQxmkGDpQSQx9CYwhoK3NgaQY+pIYQ81IvvQVKSd/RczJVhcMPFlK0sXSAOZ8QDuapcA539cknX5N9K98Uqx9Q9LFN2RdMGLtW5Iuvg0g1oB2NN8CY+07kk6/I/pXc1KsfU/SxfdkXTBi7QeSLn4IINaAdjQ/AGPtR5JOfyT6VwtSrP1E0sVPZF0wYm0ZSRfLAog1oB3NMmCs/UzS6c9E/9qZFGu/kHTxC1kXjFhbTtLF8gBiDWhHsxwYa7+SdPor0b80rDP+RtLrb2S9MuL2d5Iufg8gboF2NL8D4/YPkk7/IPqX3d/yEWFfxADH1wXs3p2PCXIfBJZ7TTGU9JWcwBgC2toc5LjfxPIc2m/+ImHHX0TsyErj6OJvki7+JuuCkadXkHSxIoA8DbSjWQHM0/+QdPoP0b8akGItLZejCzsuUxeMWNuEpItNcvmxBrSj8eohWZ3WIem0DtG/GpFiLZ2ki3SyLhixlkHSRUYAsQa0o8kAxlomSaeZRP/KJcVaFkkXWWRdMGKtLkkXdQOINaAdTV1grGWTdJpN9K9NSbGWQ9JFDlkXjFirR9JFvQBiDWhHUw8Ya/VJOq1P9K+tSLHWgKQL77gMXTBirSFJF95xWbEGtKNpCIy1RiSdxsYN8qB3u/pYWWJP41wiw3Zw+MQS6CAsuXNzaxQMGjeU5nniF6Y3VA9V1asepE7zcEEXDjLA8nI5AbZpLpHhTQkBtpnjAWbl3owQYNbZctJqgmttzoYMuNCGPSb2wYdd2NheXWwe1fkWuVGFxNLh5lEn9L7bIoEpvgOoVRC7n2xzoNNvATYuI4Nuloufwm6Z63a2i/GJtPVWwKmvUgAyPuxSAGjrKABtEw9AW/sA0DbKAGhroFNuAzYuAyisvHUwzvIvz1sCdbhtbq2fWRT4sEsJ7CbRwG4aH9hNfAK7qbLAbgJ0yqZg42JnFgUVNgC3IswstgPPLNAzqpYyxrYEubcnzajQfDbbYD4L//PG8hZ/oZ21f+ziuu09n2ek13xulrv6hXb58nNzoRZCO+Suem/p1bQavDhTUKhldJz4B5ycCpA9lh3J8ZAsf7EKA53gkTrcyXFMsTbeiYApOwPlTo/GU/yD1CtDtzvnus9jSzSPaAZbpXEcdGALt8HNytySIPegFnintA/6KvuWQBBuBWyfAP3GIG1BBsl/2y+1ESRbOQ6SK2d9OxFmQjsBg7A1aZm8dbRS1zpLsFWB6zzuggwArYbaVoGhdk0ZKmTeynCfxzaplJJ8StnN8eLa6nA3whx+d1Iq3T2Xt7vT6mJLgi4ObVE7feAwUh2HPjW/B7D2AtraIPXnjaE9iAtHflsgkBia7FghpZvyQmA8jT0rjyexGDaETXkFQGdgyV2QW6Ng0LhrXTqPnwC5GryhDXsC3+AXjtqvMH4ZPuyzDF/og6YZSgyS7JJ+GMhXoYLNggWEWVIRaWkbDQpIWxcDZ1wMW1ubFBNsXeJ4NWhXshgVULnjFZCVOZ8gd4XjcttOxy4EuStJlR86r0aAOAT0cQP0G1NJ9kFE/ismdPGKgPmq1HHcZuFXW6DcqQImuAMC7aIFTPv4AqadTwHTvhYXMO2AfLUHOwoDaNs5DrR7Og60do8sY4I8VMEEuTlB7iMVTJB3Jcg9TMkEeS/gBBno4wboN2aY4z4Yw220D3ZQMKllYM7eqUktclIb2OG4jtFJbaf4SW1Hn0ltp1o8qe0I5KsT2FEYk9qOjk9q91EAtC0IQDtCweSuDUHukaTJHXqPRmfg5A5oazPScb+JYQ7ab7rUUpzo6rjcdtUuQpB7lON+brvebQlyH6cEH/cF4iPQ1uY4x/3GNvH2IvjNGMflXllQE+Q+QUm8dAPGC9DW5gTH/cbWB50JfjPOcbntfKcrQe6TlMRLd2C8AG1tTnLcb+w8dIeka/7/XriCPPfTAzin9bsIxs5NYhe+dPN87u753CN39Ytg9pOf9xc6QKhnbs17ln/3cnR3TaUSfOjt6OKL6wsmrL5OH2BM29h73eMzNlasvfvkpv3nQd9SD7ye1CDP5vQl9wEQlzkV5Lp9mdOBjvdSrI0PJMRmP6Dc6dHYjH+QemXotl+u+zz2R/OIZrB1GsdBx7dwG9yszP0Jcp9KmmyhL3PqDwThAcAEC/Qbg7QFGSRplzlpAMkBroPklqQsfrrjlcVuJLknKgHJA4EgeRAQJIF+Y5C28O5IOii35hIwjbNLDZeAHYwETq2G0nAJ2CEpQ+m4BGwgYbq08nE5NQ2qBamJ4Sy2kTWIMD0anMtJyYOjKZmliyKCLibVUh+YTJoioxdthgCxA2hrg9SfN4aGeGKIpdMiErYnfbEfztaBXiZ2KBhPY89huUSGD8vFj3s40BlYch+eW6Ng0LiBHlsqcmtiFvhlYmVR+5Xnpq1+RKks97/Hlspz+ceWHEPTf48tlQH5Kgc7CmOWdDhhllRBKtfQoIC0dSVwxsWwtbVJJcHWVY4v9duVVEYFNMXxCsjKvB9B7nMcl7staXHkXMfltjIfTJD7PFLFi+68AePRAH3ceP0mWVtMVdJ9qAbmQqD/mankGEbMmyoJW/sqgPOcI3J1+ODQXPfxIJTkkyqgg7vM7shoAT0svoA+0qeAHlaLC+gjgXwNAzsKA7CPdBywj3K8QLN+vD9h4jpDQYHWmyD3TMfl3ptUoM1SUKAdQpB7tpICDRiPBujjZhawQJujpEAbDpwcA/3PzHE8hmP5Hh3DRyspqkbkuokHSOxPFVXBXaY4MlpUHRNfVI30KaqOqcVF1UggX8eAHYVRVI10vKg6VkFRdQAhUV2uoKjqQ5D7Csfl7koqqq5UUFQNJMh9lZKiChiPBujj5kpgUTVXSVE1Cjg5Bvqfmet4DMfyPfyCRyVF1ehcN/HAdey3O4+qCX5zg+Ny2xXYoQS5b1SCs8cD4wVoa3Oj435jF4KGE/zmFsflts21EQS55ymJlzHAeAHa2sxz3G9sjT+K4De3Oi63nTeNJsh9m5J4OQEYL0Bbm9sc9xvbe+lJ8Js7HZe7B6n3cpeSeDkRGC9AWxuk/vwuv7Xz0Nglt2M8n0/wfD4xd/XLb8fKz+OEThI6OZd/+e0pQNsgd1ifp8S3xwP1h9y0MFuJ/k4F6g/Zn0T2d20Mv+nRnY056zen5qb950FfolsE1C/yTPoE8voY4hLdw3PdvkT3NMfXGK2NTyPMe04Hyp0ejc34B6lXhm5Pz3Wfx4loHtEM7pLGcdB7W7gNblbmiQS57yNNOtCLohOBIHwGMMEC/cYgbUEGSdoluhpA8gzXQbKIlMUfdLxrM4gk90NKQPI0IEieCQRJoN8YpC28O1HPzK25RFfj7FLDJbqTkMCp1VAaLtGdnDKUjkt0zyJMl1Y+Lqems2tBamI4i21knU2YHk3J5aTkKdGUzNJFBUEXC2upDzxKmiKjFy/OAWIH0NYGqT9vDJ3jiSGWTitI2J709V44Wwd6ie65YDyNPeflEhk+Lxc/7lSgM7Dknppbo2DQuIEeV61wa2IW+CW650ftNy03bfWjqefn/ve46rRc/nFVx9D03+Oq5wP5mgZ2FMYsaSphljSdVK6hQQFp6wuAMy6Gra1NLiDY+kLHl/rtSiqjAlrkeAVkZR5LkPsJx+UeSlocWey43FbmSQS5nyRVvOjOGzAeDdDHjddvkrXFU0q6DzOAuRDof+Ypcgwj5k0XELb2TQfOc2bm6vDBWbnu40EoySdVQAd3ie7saAE9J76Anu1TQM+pxQX0bCBfc8COwgDs2Y4D9kWOF2jWj8cRJq4vKCjQxhPkftFxuUeQCrSXFBRokwlyv6ykQAPGowH6uHkJWKAtUVKgXQycHAP9zyxxPIZj+R4dw5coKaouzXUTD5DYnyqqgrtE97JoUXV5fFF1mU9RdXktLqouA/J1OdhRGEXVZY4XVVcoKKpOIiSqNxUUVacS5H7LcblHk4qqtxUUVWcR5H5HSVEFjEcD9HHzNrCoeldJUXUlcHIM9D/zruMxHMv38IuwlRRVc3PdxAPXsd/uPJpB8JuPHZfbrsDOIsj9iRKcvRoYL0Bbm08c9xu7EHQxwW8+d1xu21y7lCD3F0ri5RpgvABtbb5w3G9sjX8lwW+WOi63nTfNJcj9tZJ4uRYYL0Bbm68d9xvbezmZ4DffOS73iaTey/dK4uU6YLwAbW2Q+vO7RNfOQ2OX5V7j+Xyt5/N1uatfonu9/HyD0I1CN+XyL9G9GWgb5A7rJ5X49i1A/SE3LbysRH/zgPpD9ieR/V0bw297dGdjzvrNvNy0/zzoS3QrgPpFnkmfT14fQ1yiOzXX7Ut0Fzi+xmhtvIAw77kVKHd6NDbjH6ReGbq9Ndd9Hm9D84hmcNc0joP+1MJtcLMy30aQexlp0oFeFL0NCMK3AxMs0G8M0hZkkKRdoqsBJG93HSQrSFl8ueNdm7NJcv+qBCQXAEHyDiBIAv3GIG3h3Yl6R27NJboaZ5caLtG9EwmcWg2l4RLdu1KG0nGJ7t2E6dLKx+XUdE8tSE0MZ7GNrHsI06N7czkp+d5oSmbpYjpBF3/UUh/4kzRFRi9e3AfEDqCtDVJ/3hi6zxNDLJ1OJ2F7smPdj7N1oJfo3g/G09jzQC6R4Qdy8eM+CHQGltwP5tYoGDRuoMdVp7s1MQv8Et2HovZ7ODdt9aOpD+X+97jqw7n846qOoem/x1UfAvL1MNhRGLOkBwmzpEdI5RoaFJC2XgiccTFsbW2ykGDrRx1f6rcrqYwKaIXjFZCV+XqC3P84Lvcs0uJI2g5uy21lvpMg9yY7cLAc3XkDxqMB+rjx+k2ytqhDsgW6Un4MmAuB/mfqkGMYMW9aSNja9whwnvN4rg4fXJTrPh6EknxSBXRwl+g+ES2gF8cX0E/4FNCLa3EB/QSQr8VgR2EA9hOOA/aTjhdo1o9vIExcsx2fsFu5byHIneO43JeSCrR6Cgq0uwhy11dSoAHj0QB93NQDFmgNlBRoTwEnx0D/Mw0cj+FYvkfH8NNKiqpnct3Eg3qpogpZVAV2ie6z0aLqufii6lmfouq5WlxUPQvk6zmwozCKqmcdL6qeV1BU3UhIVJsqKKrmEeTezHG555KKqs0VFFV3E+TeQklRBYxHA/RxszmwqNpSSVH1AnByDPQ/s6WCoupZQgy/qKSoeinXTTxwHfvtzqPHCH7T1HG57QrsIoLc2ynB2ZeB8QK0tdnOcb+xC0FPEfwm33G5bXPtGYLczZXEyxJgvABtbZo77je2xn+B4Dc7Oi63nTe9RJB7JyXx8gowXoC2Njsp6L3cRPCbVo7LfR2p99JaSby8CowXoK0NUn9+l+jaeWjsstwlns+veD6/mrv6Jbqvyc+vC70h9GYu/xLdt4C2Qe6w3kSJb78N1B9y00J9Jfp7B6g/ZH8S2d+1MfyuR3c25qzfvJOb9p8HfYnudKB+kWfS3yWvjyEu0X0w1+1LdN9zfI3R2vg9wrznfaDc6dHYjH+QemXo9v1c93n8AM0jmsE2aRwHbeP4MSIr8wcEuXdTsij6ARCEPwQmWKDfGKQtyCBJu0RXA0h+6DpITidl8ZDjXZt7SHIbJSD5HhAkPwKCJNBvjAF3gGI7UT/KrblEV+PsUsMluh8jgVOroTRcovtJylA6LtH9lDBdWvm4nJo+qwWpieEstpH1GWF69HkuJyV/Hk3JLF08QtBFYS31gSIlixdfALEDaGtTRJrWfuGJIZZOHyFhe7JjfYmzdaCX6H4JxtPY81UukeGvcvHjLgU6A0vupbk1CgaNG+hx1UfcmpgFfonu11H7fZObtvrR1K9z/3tc9Ztc/nFVx9D03+OqXwP5+gbsKIxZ0lLCLOlbUrmGBgWkrb8DzrgYtrY2+Y5g6+8dX+q3K6mMCiii4GjaawS5Sx2XexFpcaSt43JbmT8myN1OyaIQMB4N0MdNW+Bx4vZKug8/AHMh0P9Me3IMI+ZN3xG29n0LnOf8mKvDB3/KdR8PQkk+qQI6uEt0l0UL6J/jC+hlPgX0z7W4gF4G5OtnsKMwAHuZ44D9i+MFmvXj1wkT104KCrS3CXLv47jcz5AKtM4KCrRPCHJ3UVKgAePRAH3cdAYWaF2VFGjLgZNjoP+Zro7HcCzfo2P4VyVF1W+5buJB51RRhSyqArtE9/doUfVHfFH1u09R9UctLqp+B/L1B9hRGEXV744XVX8qKKreICSq/RUUVe8Q5D7AcblfIhVVPRUUVZ8S5O6lpKgCxqMB+rjpCSyqeispqv4CTo6B/md6KyiqfifE8N9KiqoVuW7igevYb3ce/UDwmwGOy21XYH8iyH2QEpz9BxgvQFubgxz3G7sQtJzgNwMdl9s2134jyD1ISbyk5eF0CbS1GeS439ga/y+C3xzquNx23rSCIPdhSuJlE2C8AG1tDlPQe3mT4Dfljsv9Kqn3UqEkXuoA4wVoa4PUn98lunYeGrss1+bY2OdNPJ/r5K1+iW66/JwhlCmUlce/RLcu0DbIHdbtlPh2NlB/yE0LXZToLweoP2R/EtnftTH8vkd3Nuas31jZ4x/0JbqPAGth5Jn0enncnI24RHdprtuX6NYn6zCU3GOsjS2PaNs0AMqdHo3N+AepV4ZuG+S5z2NDNI9oBndL4zhotePHiKzMDQlyH6FkUdTrmMnK3Ag4gQH6jUHaggyStEt0NYBkI9dB0s4gGSA5zPGuzWckuY9SApL1gSDZGAiSQL8xR4E7QLGdqFbe/OjPGmeXGi7RzUUCp1ZDabhENy9lKB2X6G5KmC6tfFxOTZvVgtTEcBbbyNqMMD3aPI+TkjePpmSWLr4lLPCNqKU+MFLJ4sUWQOwA2tqMJE1rt/DEEEunyEM4mwHzxJY4Wwd6ie6WYDyNPVvlERneKg8/7tZAZ2DJvbVnRRA0bqDHVVnBG9qwJ/BLdLeJ2m/bvLTVj6Zuk/ff46rb5vGPqzqGpv8eV90GGIzbgh2FMUvamjBLakIq19CggLR1U+CMi2Fra5OmBFtv5/hSv11JZVRAoxQcTUsn2Ps4x+X+ibQ4Mtpxua3MuQS5j1eyKASMRwP0cTMaeJx4jJLuw/bAXAj0PzOGHMOIeZPN0eitfU2A85xmeTp8MD/PfTwIJfmkCujgLtFtHi2gW8QX0M19CugWtbiAbg4EmxZgR2EAdnPHAXsHxws068cZhInryQoKtGyC3Kc4LvdvpAJtvIICLY8g96lKCjRgPBqgj5vxwAJtgpICbUfg5Bjof2aC4zEcy/foGN5JSVG1c56beDA+VVQhi6rALtFtGS2qWsUXVS19iqpWtbioagksCFqBHYVRVLV0vKhqraCoyiQkqkkKiqocgtyTHZd7BamoOktBUbUpQe6zlRRVwHg0QB83ZwGLqilKiqpdgJNjoP+ZKQqKqpaEGN5VSVHVJs9NPHAd++3Oo+0JfjPNcbntCmw+Qe7pSnB2N2C8AG1tpjvuN3YhaEeC38xwXG7bXNuZIPdMJfGyOzBegLY2Mx33G1vj70LwmzmOy23nTW0Icl+kJF72AMYL0NbmIgW9lyyC31zquNx1SJfJXaYkXkLAeAHa2iD153eJrp2Hxi7L3d3zeQ/P51De6pfoGvm5QCgsVJjHv0S3CGgb5A7r45X4djFQf8hNC6cq0V8JUH/I/iSyv2tj+EOP7mzMWb8pyUv7z4O+RPdb4CW6yDPpEfL6GOIS3a3z3L5Et9TxNUZr41LCvKctUO70aGzGP0i9MnTbNs99HtuheUQzuHsax0GvdPwYkZW5HUHuq5QsirYDJrL2wAkM0G8M0hZkkDSx8WojSLZ3HSTtDJIBktc43rXZjDR7uVYJSJYCQXJPIEgC/cZcC+4AxXai7plXc4nuh2n/fVC/MzZebbxEdy8kcGo1lIZLdDukDKXjEt29SfuhnE5NHWtBamI4i21kdSRMjzrlcVJyp2hKZumiCUEXN9RSH7hRyeLFPkDsANra3Eia1u6Tx79EtwkJ25MdqzPO1oFeotsZjKexp0sekeEuefhxuwKdgSV3V8+KIGjcQI+rNnFrYhb4Jbr7Ru3XLf646r4+x1W7BXBc1TE0/fe46r5AvrqBHYUxS+pKmCV1J5VraFBA2roHcMbFsLW1SQ+CrfdzfKnfrqQyKqBbFBxNMwS55zkudz5pcWS+43JbmfciyL1AyaIQMB4N0MfNfOBx4luVdB/2B+ZCoP+ZW8kxjJg39SBs7esOnOccoORocs889/EglOSTKqCDu0S3V7SA7h1fQPfyKaB71+ICuheQr95gR2EAdi/HAbuP4wVak+i5IrRt7lZQoBUT5L7Hcbl3JhVo9yoo0DoQ5L5PSYEGjEcD9HFzL7BAu19JgdYXODkG+p+53/EYjuV7dAwfqKSo6pfnJh7cmyqqkEVVYJfo9o8WVQPii6r+PkXVgFpcVPUH8jUA7CiMoqq/40XVQQqKqjAhUS1UUFSVEOR+1HG525CKqscUFFV7E+R+XElRBYxHA/Rx8xiwqFqkpKg6GDg5BvqfWaSgqOpPiOFDlBRVA/PcxAPXsd/uPNqf4DfPOC63XYHtSZD7WSU4OwgYL0Bbm2cd9xu7ENSX4DcvOC63ba71I8j9opJ4GQyMF6CtzYuO+42t8Q8m+M0Sx+W286aBBLlfURIvQ4DxArS1eUVB76WQ4DevOy53iNR7eUNJvBwKjBegrQ1Sf36X6Np5aOyy3MGez0M8nw/NW/0S3cPk58OFyoTK8/iX6FYAbYPcYb1AiW9XAvWH3LRwnxL9VQH1h+xPIvu7NoY/9ujOxpz1m6q8tP886Et0mwD1izyTXk1eH0Ncots1z+1LdI9wfI3R2vgIwrxnKFDu9Ghsxj9IvTJ0OzTPfR6PRPOIZnCPNI6Dvu34MSIr85EEud9Rsih6JDCRDQMmWKDfGKQtyCBpYuPVRpAc5jpINiFl8fcd79p0JMn9gRKQPAIIkkcBQRLoN+YDcAcothP1qLyaS3Q1zi41XKI7HAmcWg2l4RLdo1OG0nGJ7gjSfiinU9PIWpCaGM5iG1kjCdOjY/I4KfmYaEpm6aI7QRcf11If+ETJ4sWxQOwA2tp8QprWHpvHv0S3Ownbkx1rFM7WgV6iOwqMp7HnuDwiw8fl4ccdDXQGltyjPSuCoHEDPa7a3a2JWeCX6B4ftd+Y+OOqx+f997jqmACOqzqGpv8eVz0eyNcYsKMwZkmjCbOkE0jlGhoUkLY+ETjjYtja2uREgq3HOr7Ub1dSGRXQ5wqOph1GkPsLx+XuSVoc+dJxua3Mwwlyf6VkUQgYjwbo4+ZL4HHipUq6D+OAuRDof2YpOYYR86YTCVv7TgDOc05ScjT55Dz38SCU5JMqoIO7RPeUaAE9Pr6APsWngB5fiwvoU4B8jQc7CgOwT3EcsE91vEDrHj1XhLbNDwoKtEqC3D86Lnc/UoH2k4IC7WiC3MuUFGjAeDRAHzc/AQu0n5UUaBOAk2Og/5mfHY/hWL5Hx/BpSoqq0/PcxIOfUkUVsqgK7BLdidGi6oz4omqiT1F1Ri0uqiYC+ToD7CiMomqi40XVmQqKqjJCovpDQVFVRZD7T8flHkgqqv5SUFSNIMj9t5KiChiPBujj5i9gUbVCSVE1CTg5BvqfWaGgqJpIiOHJSoqqs/LcxAPXsd/uPBpH8JuMHd2W267AnkyQO3NHHfFyNjBegLY2mY77jV0ImkDwm2zH5bbNtdMJcucoiZcpwHgB2trkOO43tsafRPCbBo7LbedNZxHkbqgkXs4BxgvQ1qah435jey/lBL/JdVzuQ0m9lzwl8XIuMF6AtjZI/fldomvnobHLcqd4Pp/j+Xxu3uqX6J4nP08VOl9oWh7/Et3pQNsgd1h/paSncwFQf8hNC8uU6O9CoP6Q/Ulkf9fG8Kce3dmYs35zYV7afx70JbrdgfpFnkmfQV4fQ1yiOzrP7Ut0Zzq+xmhtPJMw75kFlDs9GpvxD1KvDN3OynOfx9loHtEM2lEZDrr5jm6Dm5V5NkHuLUgFCXpRdDYwkc0BJlig3xikLcggaWLj1UaQnOM6SP6PvT+Bt7n6/sfxw5UpGe58r6FryJThbpnKmClTpoSKyhiReU40oDKURlGhMpQp0USFJiQkU0JCpspUhiTlv3e9XhzH+X0/79d+Pdd5rPU/9/V47IdzsV9nPfca9nruYd1GRLN4MvNVmz5EuFOEBMkXgEFyCjBIAu1GpYBXgNyTqFPyXSqiKzG7lFBEdyoycEpVlIQiui9nKEpGEd1XiM5DsZ6aXo2CqYnCWMxC1qsE6dG0fDRT8jRnSqYaiyEEY1EgSm2goJCNzenA2AHUtSpIlNZOz0dfRHcIUWz3+64ZOF1HtIjuDHA8dZ/X8hEK/Fo+/HtfBxoDFe7Xg3YEQe+N6HXVIbwSs4gX0X3D0d/M0Ouqb+S78rrqzAhcV2UWTS9eV30DKNdMsKFQZEmvE2RJs4joGjooIHU9G5hxUeja6GQ2ga7nMN/qNy+lYEBpzBmQwTyRAHdh5rhHEG2OFGGO22CeSoC7qJBNIaA/KqCNq2C78auLYkJWH94EzoVA+1PFiH0YkTfNJjjaNwuY57wl5Gry3Hz840G6zyeDQEeuiO48h0DPDyXQ88IQ6PlRTKDnAeWaDzYUioA9j3nAXsCcoA1x7hWhdVNaAEF7lgD39cxxP0pE0MoIIGgvE+AuK4SgAf1RAW1clQEStHJCCNpCYHIMtD9VjrkPu/M92offFkKqFuXjGQ/KZJAqJKmKWBHddxxStTiUVL0ThlQtjmJS9Q5QrsVgQ6EgVe8wJ1VLBJCqpwkmqooCSNVzBLgrMcf9BBGpqiyAVL1CgLuKEFIF9EcFtHFVGUiqqgohVe8Ck2Og/amqAkjVOwQ+/J4QUvV+Pp7xgHvsNyeP3iSwm5rMcZsd2LkEuGsJibMfAP0FqGtVi7ndmI2ghQR2U4c5brO4togAd10h/vIh0F+AulZ1mduN4fjvEthNA+a4Td70PgHuW4T4y1KgvwB1rW4RsPYyicBuGjPHPYFo7aWJEH9ZBvQXoK4VcvzCFdE1eahbLPfDoM9Lgz4vy3d5Ed2P9M8f6/aJbsvz0RfRXQHUDfKEdVEhtr0SOH7IQwtlhYzfp8DxQ65PItd3jQ8fDBo743PGbj7NF7jiQRfRHQIcX+Sd9M+I98cQRXRfz8e7iO7nzPcYjY4/J8h7vgDijnF8M/RBjivF2H6Rj7+MX6JlRAuoAjQG2oz5NSKD+UsC3M2FbIp+CZzIVgEnWKDdKKQuiIOkct8XjUFyFfcgOYRoFm/FfNXmVSLctwkJkp8Dg+RqYJAE2o26DbwC5J5EXZ3vUhFdidmlhCK6a5CBU6qiJBTR/SpDUTKK6K4lOg/Femr6OgqmJgpjMQtZXxOkR+vy0UzJ65wpmWosZhGMRZsotYG2QjYv1gNjB1DXqi1RWrs+H30R3VlEsd3vuzbgdB3RIrobwPHUfb7JRyjwN/nw790INAYq3BuDdgRB743oddVZvBKziBfR/dbR36bQ66rf5rvyuuqmCFxXZRZNL15X/RYo1yawoVBkSRsJsqTNRHQNHRSQut4CzLgodG10soVA11uZb/WbwaRgQHcKuJr2EQHuu5jjnku0OdKeOW6DeQ0B7g5CNoWA/qiANq7aA68T3y1k9WEbcC4E2p+6m/npF3eORh/t2wzMc74TcjV5ez7+8SDd55NBoCNXRPd7h0DvCCXQ34ch0DuimEB/D5RrB9hQKAL298wD9k7mBG2Wc68IrZsuAgjaSgLcXZnjXkRE0LoJIGhfEeC+TwhBA/qjAtq46gYkaN2FELRdwOQYaH+qO3Mfdud7tA//IIRU7c7HMx50yyBVSFIVsSK6Pzqkak8oqfoxDKnaE8Wk6kegXHvAhkJBqn5kTqr2CiBVnxBMVL0FkKpPCXD3YY77fSJS1VcAqVpLgLufEFIF9EcFtHHVF0iq+gshVfuAyTHQ/lR/AaTqRwIf/kkIqdqfj2c84B77zcmjbQR2M5Q5brMDu50A9zAhcfYA0F+AulbDmNuN2QjaRWA3I5jjNotruwlwPyTEXw4C/QWoa/UQc7sxHH8fgd08zBy3yZv2E+B+RIi/HAL6C1DX6hEBay/LCexmNHPcy4jWXsYI8ZfDQH8B6lohxy9cEV2Th7rFcg8GfT4U9PlwvsuL6P6sf/5Ft191O5KPvojuUaBukCesOwix7WPA8UMeWrhPyPgdB44fcn0Sub5rfPhw0NgZnzN2czxf4IoHXUR3FnB8kXfSTxDvjyGK6G7Mx7uI7m/M9xiNjn8jyHt+B+KOcXwz9EGOK8XY/p6Pv4wn0TKiBTSnEygM9Anm14gM5pMEuJ8Usil6EjiRnQJOsEC7UUhdEAdJ5b4vGoPkKe5BchbRLD6B+arN10S4JwoJkr8Bg+RpYJAE2o2aCF4Bck+ins53qYiuxOxSQhHdM8jAKVVREoro/pGhKBlFdM8SnYdiPTX9GQVTE4WxmIWsPwnSo3P5aKbkc86UTDUWmwnGYlKU2sAzQjYv/gLGDqCu1TNEae1f+eiL6G4miu1+33Uep+uIFtE9D46n7vN3PkKB/86Hf+8/QGOgwv1P0I4g6L0Rva66mVdiFvEiuhdc/cUGLr+aeiHflddVzX9KCxEKfV2VWTS9eF31AtIZY7GGQpEl/UOQJWWKxQWJYBtEBwWkrjPjMCsKXRudGBnRuo4B65piJ5WCAT0v4GrazwS4X2COezvR5siLzHEbzGcIcE8WsikE9EcFtHH1IvA68UtCVh+yAOdCoP2pl5iffnHnaPTRvuB8zK+MV8XKsMGssfzjQbrPJ4NAR66IbrbY//7MHkqgs8VeSaCzRzGBzgYMNtljsYZCEbCzMQ/YOZgTtM3OvSK0bqYJIGjHCHBPZ457NxFBmyGAoP1BgPs1IQQN6I8KaONqBpCgvS6EoOUEJsdA+1OvM/dhd75H+/DVQkhVrlie8WBGBqlCkqqIFdG9xiFVuUNJ1TVhSFXuKCZV1wAJQe5YrKFQkKprmJOqPAJI1a8EyeabAkjVcQLcbzHHvZ+IVM0VQKrOEuCeJ4RUAf1RAW1czQWSqvlCSFVeYHIMtD81XwCpuoaAVOUTQqpiY3nGA+6x35w8ykJgN4uZ4zY7sFkJcC8REmfjgP4C1LVawtxuzEZQTgK7eZ85brO4losA9wdC/CUe6C9AXasPmNuN4fh5CexmGXPcJm+KJcD9kRB/SQD6C1DX6iMBay9HCLj4cua4DxOtvawQ4i+JQH8B6lohxy9cEV2Th7rFcuODPicEfU6MvbyIbpL+OVm3FN1SY+mL6OYH6gZ5wnqyENsuABw/5KGF14SMX0Hg+CHXJ5Hru8aHfwkaO+Nzxm4KxgaueNBFdDcD7/kj76QXIt4fQxTR/Yd5Ed1rme8xGh1fS8AT0oC4YxzfDH2Q40oxtmmx/GUsjJYRLeANARoD/Yz5NSKDuTAB7s+FbIoWBh70KAJMYIB2o5C6IA6SF6/oRGOQLMI9SJoMkiJIrmK+avMnEe7VQoLktcAgWRQYJIF2o1aDV4Dck6hFYy8V0ZWYXUooolsMGTilKkpCEd3rMhQlo4hucaLzUKynphJRMDVRGItZyCpBkB6VjKWZkks6UzLVWGQiGIu1UWoDXwvZvCgFjB1AXauvidLaUrH0RXQzEcV2v+8qjdN1RIvolgbHU/e5PpZQ4Otj8e8tAzQGKtxlgnYEQe+N6HXVTLwSs4gX0S3r6K9c6HXVsmGuq5aLwHVVZtH04nXVskC5yoENhSJLKkOQJZUnomvooIDUdTow46LQtdFJOoGuFfOtfrOTSsGANgi4mpZEgPsb5rizEh3t2Mgct8FcjAD3t0I2hYD+qIA2rjYCrxNvErL6UAE4FwLtT21ifvrFnaPRR/vKA/OcG4RcTa4Yyz8epPt8Mgh05IroVnIIdOVQAl0pDIGuHMUEuhJQrspgQ6EI2JWYB+wqzAlaJudeEVo32wUQtAIEuL9njjsXEUHbIYCgXUeAe6cQggb0RwW0cbUDSNB2CSFoVYHJMdD+1C7mPuzO92gfvlEIqboplmc82JFBqpCkqkIY6CSkqppDqqqHkqpqYUhV9SgmVdWAclUHGwoFqarGnFTVEECqUggmqn0CSFVBAtw/MccdS0Sq9gsgVcUJcB8QQqqA/qiANq72A0nVQSGkqiYwOQbanzoogFRVI/DhWkJIVe1YnvGAe+w3J48qENjNEea4zQ5sRQLcR4XE2ZuB/gLUtTrK3G7MRlBVArs5wRy3WVy7iQD3b0L8pQ7QX4C6Vr8xtxvD8WsS2M0p5rj/zZsIcJ8W4i91gf4C1LU6LWDtJZXAbs4yx51ItPbypxB/qQf0F6CuFXL8whXRNXmoWyy3TtDnukGf68VeXkS3vv65gW636NYwlr6IbiOgbpAnrL8VYtuNgeOHPLSwU8j4NQGOH3J9Erm+a3z4SNDYGZ8zdtMkNnDFgy6imwk4vsg76U2J98cQRXTLxPIuonsr8z1Go+NbCfKeZkDcMY5vhj7IcaUY22ax/GVsjpYRLWDFAI2Bnmd+jchgbk6A+28hm6LNgRNZC+AEC7QbhdQFcZAkK6IrIUi24B4kMxHN4oHreGcvJYhwZ7pORpC8FRgkWwKDJNBuFFIXwSdRW8ZeKqIrMbuUUES3FTJwSlWUhCK6t2UoSkYR3dZE56FYT023R8HURGEsZiHrdoL0qE0szZTcxpmSqcaiPMFYZIlSG7iKKEVGb160BcYOoK7VVURpbdtY+iK65Yliu993tcPpOqJFdNuB46n73BFLKPAdsfj33gk0BircdwbtCILeG9HrquV5JWYRL6J7l6O/9qHXVe8Kc121fQSuqzKLphevq94FlKs92FAosqQ7CbKkDkR0DR0UkLq+G8nWCHRtdHI3ga7vYb7Vb3ZSKRhQduYMyGCuT4A7B3PcFYk2R3Iyx20wtyLAfbWQTSGgPyqgjatgu/Gri1xCVh/uBc6FQPtTuYh9GJE33U1wtK8DMM/pKORqcqdY/vEg3eeTQaAjV0S3s0Ogu4QS6M5hCHSXKCbQnYFydQEbCkXA7sw8YHdlTtDKO/eK0LqJFUDQGhPgjmOO+yYighYvgKDdRoA7QQhBA/qjAtq4igcStEQhBK0bMDkG2p9KZO7D7nyP9uH7hJCq7rE840F8BqlCkqoKYaCTkKoeDqm6P5RU9QhDqu6PYlLVAyjX/WBDoSBVPZiTqp4CSNUtBBNVAQGkqgkB7oLMcdcmIlWFBJCq1gS4rxVCqoD+qIA2rgoBSVWaEFLVC5gcA+1PpQkgVT0IfPgBIaSqdyzPeMA99puTR/cS2E1x5rjNDmwnAtwlhMTZPkB/AepalWBuN2YjqBuB3ZRmjtssrnUnwH29EH/pC/QXoK7V9cztxnD8XgR2U445bpM39SbAXV6Iv/QD+gtQ16q8gLWXhgR2U4E57npEay83CPGX/kB/AepaIccvXBFdk4e6xXL7Bn3uF/S5f+zlRXQH6J8H6jZIt8Gx9EV0hwB1gzxhfbUQ2x4KHD/koYUEIeM3DDh+yPVJ5Pqu8eFjQWNnfM7YzbDYwBUPuohueeD4Iu+kDyfeH0MU0b0zlncR3QeZ7zEaHT9IkPeMAOKOcXwz9EGOK8XYjojlL+NDaBnRAlYK0BhoZebXiAzmhwhwVxGyKfoQcCIbCZxggXajkLogDpJkRXQlBMmR3INkeaJZ/Cbmqza3E+GuJiRIPggMkqOAQRJoN6oaeAXIPYk6KvZSEV2J2aWEIroPIwOnVEVJKKL7SIaiZBTRfZToPBTrqemxKJiaKIzFLGQ9RpAejY6lmZJHO1My1Vh0IBiLmlFqA7WEbF6MAcYOoK5VLaK0dkwsfRHdDkSx3e+7xuJ0HdEiumPB8dR9Ho8lFPjxWPx7nwAaAxXuJ4J2BEHvjeh11Q68ErOIF9F90tHfuNDrqk+Gua46LgLXVZlF04vXVZ8EyjUObCgUWdITBFnSeCK6hg4KSF1PAGZcFLo2OplAoOuJzLf6zU4qBQOqI+Bq2gAC3HWZ4+5EtDlSjzlug/lhAtz1hWwKAf1RAW1c1QNeJ24gZPXhKeBcCLQ/1YD56Rd3jkYf7RsPzHOeFnI1eVIs/3iQ7vPJINCRK6L7jEOgnw0l0M+EIdDPRjGBfgYo17NgQ6EI2M8wD9jPMSdoHZx7RWjdNBVA0IYS4L6VOe7uRAStmQCC9ggB7uZCCBrQHxXQxlUzIEFrIYSgPQ9MjoH2p1ow92F3vkf78AtCSNWLsTzjQbMMUoUkVRXCQCchVZMdUvVSKKmaHIZUvRTFpGoyUK6XwIZCQaomMydVUwSQqkEEE1UbAaRqGAHutsxx9yYiVe0EkKpHCXDfIYRUAf1RAW1ctQOSqjuFkKqpwOQYaH/qTgGkajKBD78shFS9EsszHnCP/ebk0VMEdnMvc9xmB3YSAe6OQuLsq0B/AepadWRuN2Yj6HkCu+nCHLdZXHuRAHdXIf4yDegvQF2rrsztxnD8qQR20505bpM3vUKAu4cQf5kO9BegrlUPAWsvgwnsphdz3P2J1l4eEOIvM4D+AtS1Qo5fuCK6Jg91i+VOC/o8PejzjNjLi+i+pn9+Xbc3dJsZS19EdxZQN8gT1vWF2PZs4PghDy00FzJ+c4Djh1yfRK7vGh8+ETR2xueM3cyJDVzxoIvodgCOL/JO+pvE+2OIIrpPxPIuovsW8z1Go+O3CPKeuUDcMY5vhj7IcaUY27mx/GWch5YRLWDlAI2B9mV+jchgnkeAu5+QTdF5wIlsPnCCBdqNQuqCOEiSFdGVECTncw+SHYhm8YHMV20eI8I9SEiQfAsYJBcAgyTQbtQg8AqQexJ1QeylIroSs0sJRXQXIgOnVEVJKKL7doaiZBTRXUR0Hor11PROFExNFMZiFrLeIUiPFsfSTMmLnSmZaizGE4zF0Ci1gWFCNi+WAGMHUNdqGFFauySWvojueKLY7vdd7+J0HdEiuu+C46n7vBdLKPB7sfj3vg80Birc7wftCILeG9HrquN5JWYRL6L7gaO/D0Ovq34Q5rrqhxG4rsosml68rvoBUK4PwYZCkSW9T5AlLSWia+iggNT1MmDGRaFro5NlBLr+iPlWv9lJpWBAIwRcTXuNAPdDzHFPItocGckct8G8kAD3KCGbQkB/VEAbVyOB14kfFrL68DFwLgTan3qY+ekXd45GH+1bCsxzPhFyNXl5LP94kO7zySDQkSuiu8Ih0CtDCfSKMAR6ZRQT6BVAuVaCDYUiYK9gHrA/ZU7Qxjv3itC6GSuAoM0mwP04c9wvEhG0JwQQtLcJcD8phKAB/VEBbVw9ASRo44QQtM+AyTHQ/tQ45j7szvdoH/5cCKn6IpZnPHgig1QhSVWFMNBJSNWXDqlaFUqqvgxDqlZFMan6EijXKrChUJCqL5mTqtUCSNUbBBPVJAGkag4B7meY436FiFQ9K4BULSLA/ZwQUgX0RwW0cfUskFQ9L4RUrQEmx0D7U88LIFVfEvjwV0JI1dpYnvGAe+w3J48+JrCbqcxxmx3Y5QS4XxYSZ78G+gtQ1+pl5nZjNoI+I7Cbacxxm8W1LwhwTxfiL+uA/gLUtZrO3G4Mx19DYDevM8dt8qa1BLjfEOIv64H+AtS1ekPA2stMAruZzRz3DKK1lzlC/GUD0F+AulbI8QtXRNfkoW6x3HVBn9cHfd4Qe3kR3W/0zxt1+1a3TbH0RXQ3A3WDPGE9SohtbwGOH/LQwpNCxm8rcPyQ65PI9V3jw78HjZ3xOWM3W2MDVzzoIrrjgeOLvJO+jXh/DFFE9/1Y3kV0v2O+x2h0/B1B3rMdiDvG8c3QBzmuFGO7PZa/jN+jZUQLWCVAY6BzmV8jMpi/J8A9T8im6PfAiWwHcIIF2o1C6oI4SJIV0ZUQJHdwD5LjiWbxhcxXbd4hwv22kCD5HTBI7gQGSaDdqLfBK0DuSdSdsZeK6ErMLiUU0d2FDJxSFSWhiO4PGYqSUUR3N9F5KNZT049RMDVRGItZyPqRID3aE0szJe9xpmSqsVhKMBaLo9QGlgjZvNgLjB1AXaslRGnt3iAfohrTpUSx3e+79uF0HdEiuvvA8dR9foolFPinWPx79wONgQr3/qAdQdB7I3pddSmvxCziRXQPOPo7GHpd9UDslddVD0bguiqzaHrxuuoBoFwHwYZCkSXtJ8iSDhHRNXRQQOr6MDDjotC10clhAl3/zHyr3+ykUjCg9wVcTfuGAPcHzHEvJ9oc+ZA5boN5FwHupUI2hYD+qIA2rj4EXideJmT14RfgXAi0P7WM+ekXd45GH+07BMxzfhVyNflILP94kO7zySDQkSuie9Qh0MdCCfTRMAT6WBQT6KNAuY6BDYUiYB9lHrCPMydoS517RWjdrBRA0LYQ4P6UOe4viAjaZwII2g8EuD8XQtCA/qiANq4+AxK0L4QQtBPA5Bhof+oL5j7szvdoH/5NCKn6PZZnPPgsg1QhSVWFMNBJSNVJh1SdCiVVJ8OQqlNRTKpOAuU6BTYUClJ1kjmpOi2AVH1LMFGtFUCqthLg/po57rVEpGqdAFK1mwD3eiGkCuiPCmjjah2QVG0QQqrOAJNjoP2pDQJI1UkCH/5DCKk6G8szHnCP/ebk0S8EdrOFOW6zA3uEAPdWIXH2T6C/AHWttjK3G7MRdILAbrYzx20W134nwP29EH85B/QXoK7V98ztxnD8MwR2s4s5bpM3nSXA/YMQf/kL6C9AXasfBKy9bKK4d8sc9waitZe9QvzlPNBfgLpWyPELV0TX5KFusdxzQZ//Cvp8PvbyIrp/m591u2A2POLoi+hmisONJ/KE9VIhtp0ZOH7IQwufCxm/GOD4Idcnkeu7xodPBY2d8TljNwZ76IMuorsUGHuRd9KzxNHO2YgiuvtjeRfRvYp4DNP9Pcro2MiI1k1WIO4YxzdDH+S4Uoxt1jj+MmZDy4gWsGqAxkD3M79GZDBnI8B9QMimaLBh+sWcHZjAAO1GIXVBHCTJiuhKCJLZuQdJk0FSBMnDzFdtfiTC/bOQIHkVMEjmAAZJoN2on8ErQO5JVIM3zflZYnYpoYhuTmTglKooCUV0r85QlIwiurkI0qV/H85T0zVRMDVRGItZyLqGID3KHUczJed2pmSqsThEsMF3JEpt4KiQzYs8wNgB1LU6SpTW5gnyIaoxRV7CuQY4T+TF6TqiRXTzguOp++SLIxQ4Xxz+vbFAY6DCHRu0Iwh6b0Svq1I5b7rdE/EiunGO/uLjApdfTY2Lu/K6anwc/XVVZtH04nXVOKAzxoMNhSJLiiXIkhKI6Bo6KCB1nQjMuCh0bXSSSKDrJOZb/WYnlYIBnRBwNe1vinofzHEfIdoc+Z05boM5JwHuk0I2hYD+qIA2rn4HXic+JWT1IRk4FwLtT51ifvrFnaPRR/sSgHlOSpwMG0yN4x8P0n0+GQQ6ckV08zsEukAogc4fhkAXiGICnR8YbAqADYUiYOdnHrALMidoh5x7RWjdnBNA0DITJOx/Mcf9OxFBOy+AoF1NgPtvIQQN6I8KaOPqPJCg/SOEoBUCJsdA+1P/MPdhd75H+/C1QkhVWhzPeHA+g1QhSVWFMNBJSFVhh1QVCSVVhcOQqiJRTKoKAwlBEbChUJCqwsxJVVEBpOoCAanKUpw/7hiCCfoq5rjPEpGqrMxxG8y5CHBnA+N2HzSpAvqjAtq4CrYb3/dYiXSBTo6LAZNjoP2p7Mx92J3v0T58nRBSVTyOZzzgHvvNyaNkinsezHGbHdhUAtx5hMTZEkB/Aepa5WFuN2YjqBCB3cQyx20W19IIcMcJ8ZeSQH8B6lrFMbcbw/GLEdhNInPcJm8qTnFSWIi/lAL6C1DXKknA2kuAwG5SmeM+T7T2kl+Iv5QG+gtQ1wo5fuGK6Jo81C2WWzLoc6mgz6XjLi+ie73+uYxuZXUrF0dfRLc8UDfIE9YnhWyUpwPHD3lo4W8h46eA44dcn0Su7xofPhM0dsbnjN2ouMAVD7qI7iFgEV3knfQKxPtjiCK6sXG8i+jewHyP0ej4BoK8pyIQd4zjm6EPclwpxrZiHH8ZK6FlRAt4Y4DGQAsV5x3cDOZKFKfUhGyKVgJOZJWBCQzQbhRSF8RBkqyIroQgWZl7kDQZJEWQLMJ81eYaouylqJAgeQMwSFYBBkmg3aii4BUg9yRqlbhLRXQlZpcSiuhWRQZOqYqSUET3xgxFySiiexPReSjWU1O1KJiaKIzFLGRVI0iPqsfRTMnVnSmZaiwSCMaieJTaQAkhG5s1gLEDqGtVgiitrRFHX0Q3gSi2+31XTZyuI1pEtyY4nrpPrThCgWvF4d9bG2gMZIoK2hEEvTei11UTeCVmES+ie7Ojvzqh11VvDnNdtU4Erqsyi6YXr6veDJSrDthQKLKk2gRZUl0iuoYOCkhd1wNmXBS6NjqpR6Dr+sy3+s1OKgUDKi3gatr1BLivZ447lWhzpAxz3AZzVQLcZYVsCgH9UQFtXJUBXicuJ2T1oQFwLgTanyrH/PSLO0ejj/bVBeY5twi5mtwwjn88SPf5ZBDoyBXRbeQQ6MahBLpRGALdOIoJdCOgXI3BhkIRsBsxD9hNmBO0BOdeEfwstgCClk6AuxJz3GlEBK2yAIJ2IwHuKkIIGtAfFdDGVWUgQasqhKA1BSbHQPtTVZn7sDvfo334ViGkqlkcz3hQOYNUIUlVxIroNndIVYtQUtU8DKlqEcWkqjlQrhZgQ6EgVc2Zk6qWAkhVWYKJqqYAUqUIcNdijrs4EamqLYBU3USA+2YhpArojwpo46o2kFTVEUKqWgGTY6D9qToCSFVzAh++TQipah3HMx5wj/3m5FEDArtpyBy32YFtSIC7kZA4ezvQX4C6Vo2Y243ZCGpKYDdNmeM2i2vNKBbthPhLG6C/AHWtbmVuN4bjtyKwmxbMcZu8qTUB7pZC/KUt0F+AulYtBay9lCOwm9bMcZcmWnu5XYi/tAP6C1DXCjl+4YromjzULZbbJuhz26DP7eIuL6J7h/75Tt3u0q19HH0R3Q5A3SBPWJcVYtt3A8cPeWihipDxuwc4fsj1SeT6rvHhs0FjZ3zO2M09cYErHnQR3QTg+CLvpN9LvD+GKKJbO453Ed2OzPcYjY47EuQ9nYC4YxzfDH2Q40oxtp3i+MvYGS0jvGpUgMZA2zG/RmQwdybAfYeQTdHOwImsC3CCBdqNQuqCOEiSFdGVECS7cA+SCUSzeHvmqzbViHB3EBIkOwKDZFdgkATajeoAXgFyT6J2jbtURFdidimhiG43ZOCUqigJRXTvy1CUjCK63YnOQ7GemnpEwdREYSxmIasHQXp0fxzNlHy/MyVTjUVdgrG4N0ptoKOQzYuewNgB1LXqSJTW9oyjL6Jblyi2+31XL5yuI1pEtxc4nrrPA3GEAj8Qh39vb6AxUOHuHbQjCHpvRK+r1uWVmEW8iG4fR399Q6+r9glzXbVvBK6rMoumF6+r9gHK1RdsKBRZUm+CLKkfEV1DBwWkrvsDMy4KXRud9CfQ9QDmW/1mJ5WCAXURcDXtDgLcXZnjbki0OdKNOW6DuRsB7vuEbAoB/VEBbVx1A14n7i5k9WEgcC4E2p/qzvz0iztHo4/29QPmOYOEXE0eHMc/HqT7fDIIdOSK6A5xCPTQUAI9JAyBHhrFBHoIUK6hYEOhCNhDmAfsYcwJWl3nXhFaN70FELS7CXD3YY67GRFB6yuAoN1HsdgmhKAB/VEBbVz1BRK0/kII2nBgcgy0P9WfuQ+78z3ahx8UQqpGxPGMB30zSBWSVEWsiO5DDqkaGUqqHgpDqkZGMal6CCjXSLChUJCqh5iTqlECSNVdBBPVUAGk6h4C3MOY425NRKqGCyBV3SkSMiGkCuiPCmjjajiQVI0QQqoeBibHQPtTIwSQqocIfPgRIaTq0Tie8YB77DcnjwYS2M2jzHGbHdjBBLgfExJnHwP6C1DX6jHmdmM2goYT2M1Y5rjN4toIAtyPC/GX0UB/AepaPc7cbgzHf5jAbsYxx23ypkcJcI8X4i9jgP4C1LUaL2DtpT2B3TzFHHc7orWXp4X4y1igvwB1rZDjF66IrslD3WK5o4M+jwn6PDbu8iK6j+ufn9DtSd3GxdEX0R0P1A3yhPV9Qmx7AnD8kIcW+gkZv4nA8UOuTyLXd40PnwsaO+Nzxm4mxgWueNBFdOsCxxd5J/0p4v0xRBHd3nG8i+g+zXyP0ej4aYK8ZxIQd4zjm6EPclwpxnZSHH8Zn0HLCK+TGKAx0GeZXyMymJ8hwP2ckE3RZ4AT2bPACRZoNwqpC+IgSVZEV0KQfJZ7kKxLNIu/yHzVpgcR7slCguTTwCD5HDBIAu1GTQavALknUZ+Lu1REV2J2KaGI7vPIwClVURKK6L6QoSgZRXRfJDoPxXpqmhwFUxOFsZiFrMkE6dFLcTRT8kvOlEw1Fv0IxmJqlNrAy0I2L6YAYwdQ1+plorR2Shx9Ed1+RLHdty/idB3RIrpTwfHUfV6OIxT45Tj8e18BGgMV7leCdgRB743oddV+vBKziBfRfdXR37TQ66qvhrmuOi0C11WZRdOL11VfBco1DWwoFFnSKwRZ0nQiuoYOCkhdzwBmXBS6NjqZQaDr15hv9ZudVAoGNE3A1bTHKXybOe7BRJsjM5jjNpifp/BvIZtCQH9UQBtXM4DXiV8XsvrwOnAuBNqfep356Rd3jkYf7ZsOzHPeEHI1eWYc/3iQ7vPJINCRK6I7yyHQs0MJ9KwwBHp2FBPoWUC5ZoMNhSJgz2IesOcwJ2j9nHtFaN28KYCgTSDA/RZz3COICNpcAQTtBQLc84QQNKA/KqCNq7lAgjZfCEF7E5gcA+1PzWfuw+58D4/ZQkjV3Die8WBuBqlCkqqIFdGd55Cq+aGkal4YUjU/iknVPKBc88GGQkGq5jEnVQsEkKonCSaqxQJI1UQC3EuY436UiFS9K4BUvUiA+z0hpArojwpo4+pdIKl6XwipWghMjoH2p94XQKrmEfjw20JI1aI4nvGAe+w3J49eJ7Cbj5njNjuwMwlwfyIkzr4D9BegrtUnzO3GbAS9SWA3K5njNotrcwlwfyrEXxYD/QWoa/Upc7sxHH8hgd18wRy3yZsWEeD+Uoi/LAH6C1DX6ksBay/jCOxmDXPcY4nWXr4S4i/vAv0FqGuFHL9wRXRNHuoWy10c9HlJ0Od34y4vovue/vl93T7Q7cM4+iK6S4G6QZ6wfk2IbS8Djh/y0MI8IeP3EXD8kOuTyPVd48Png8bO+Jyxm4/iAlc86CK6/YDji7yT/jHx/hiiiO4rcbyL6H7CfI/R6PgTgrxnORB3jOOboQ9yXCnGdnkcfxlXoGVEC1g9QGOg65hfIzKYVxDgXi9kU3QFcCJbCZxggXajkLogDpJkRXQlBMmV3INkP6JZfCPzVZvJRLi/FRIkPwEGyU+BQRJoN+pb8AqQexL107hLRXQlZpcSiuh+hgycUhUloYju5xmKklFE9wui81Csp6Yvo2BqojAWs5D1JUF6tCqOZkpe5UzJVGMxnWAstkSpDWwVsnmxGhg7gLpWW4nS2tVx9EV0pxPFdt+HDHC6jmgR3TXgeOo+X8URCvxVHP69a4HGQIV7bdCOIOi9Eb2uOp1XYhbxIrpfO/pbF3pd9esw11XXReC6KrNoevG66tdAudaBDYUiS1pLsdtCRNfQQQGp6w3AjItC10YnGwh0/Q3zrX6zk0rBgLYLuJr2HgHu75njnkm0ObKDOW6D+TMC3DuFbAoB/VEBbVztAF4n3iVk9WEjcC4E2p/axfz0iztHo4/2rQfmOd8KuZq8KY5/PEj3+WQQ6MgV0d3sEOgtoQR6cxgCvSWKCfRmoFxbwIZCEbA3Mw/YW5kTtOnOvSK0bvYJIGjLCHD/xBz3XCKCtl8AQfucAPcBIQQN6I8KaONqP5CgHRRC0LYBk2Og/amDzH3Yne/RPvydEFK1PY5nPNifQaqQpCpiRXS/d0jVjlBS9X0YUrUjiknV90C5doANhYJUfc+cVO0UQKo+IJiojgggVR8R4D7KHPciIlJ1TACp+oIA93EhpArojwpo4+oYkFSdEEKqdgGTY6D9qRMCSNX3BD78gxBStTuOZzzgHvvNyaONBHZzhjluswO7iQD3H0Li7I9AfwHqWv3B3G7MRtA2Ars5xxy3WVzbToD7LyH+sgfoL0Bdq7+Y243h+LsI7OYf5rhN3rSbAPcFIf6yF+gvQF2rCwLWXj4ksJvMJXjjfpdo7SWmhAx/2Qf0F6CuFXL8whXRNXmoWyx3T9DnvUGf98VdXkT3J/3zft0O6HYwjr6I7iGgbpAnrHcKmQsOA8cPeWjhgJDx+xk4fsj1SeT6rvHhf4LGzvicsZuf4wJXPOgiutOB44u8k/4L8f4Yooju2jjeRXR/Zb7HaHT8K8UeIxB3jOOboQ9yXCnG9kgcfxmPomVEC1gjQGOgWUvwDm4G81EC3NmICAl6U/QocCI7BpxggXajkLogDpJkRXQlBMlj3IPkdKJZPCfzVZsviXBfLSRI/goMkseBQRJoN+pq8AqQexL1eNylIroSs0sJRXRPIAOnVEVJKKL7W4aiZBTR/Z3oPBTrqelkFExNFMZiFrJOEqRHp+JopuRTzpRMNRbrCcYid5TaQB4hG5ungbEDqGuVhyitPR1HX0R3PVFs933oE6friBbRPQOOp+7zRxyhwH/E4d97FmgMVLjPBu0Igt4b0euq63klZhEvovuno79zoddV/wxzXfVcBK6rMoumF6+r/gmU6xzYUCiypLMUx4uJ6Bo6KCB1fR6YcVHo2ujkPIGu/2a+1W92UikYUCxzBmQw/0SAO4457k1EmyPxzHEbzCcIcCcI2RQC+qMC2rgKthu/ukgUsvrwD3AuBNqfSmR++sWdo9FH+/4C5jkXhFxNDsTzjwfpPp8MAh25IrqZ4p1xNX8Gk2XzD6EE2vyntBChooVAZ4rHyZU5HmsoFAHb4OUcsGPiaSe9dH/Pv0RlP0HiWkAAQTtMgLsgc9zbiQhaIQEE7TcC3NcKIWhAf1RAG1eFgAQtTQhBywJMjoH2p9KY+7A736N9+Kp4GXaTNZ5nPCiUQaqQpCpiRXSzOaQqeyipyhaGVGWPYlKVDUiqssdjDYWCVGVjTqpyCCBVBwiSzeICSNXPBLhLMMe9m4hUlRRAqn4nwF1KCKkC+qMC2rgqCSRVpYWQqpzA5Bhof6q0AFKVjYBUXS2EVOWK5xkPuMd+c/LoH4LYn84ct9mBDRD4ixISZ68B+gtQ10oxtxuzEZSFwG4qMsdtFteyEuCuJMRfcgP9BahrVYm53RiOn5PAbqoyx23yplwEuG8U4i95gP4C1LW6UcDay0GCfKw6c9z7iNZeagjxl7xAfwHqWiHHL1wRXZOHusVycwd9zhP0OW/85UV08+mfY3WL0y0+nr6IbgJQN8gT1glCbDsROH7IQwvXChm/JOD4Idcnkeu7//pwpktjZ3zO2E1SfOCKB11Edz3wpD3yTnoy8f4YoojuWeZFdFOY7zEaHacQ8IRUIO6YYOBBD3JcKcY2NZ6/jPnRMqIFrBmgMdDazK8RGcz5CXDfLGRTND/wsEwBYAIDtBuF1AVxkCQroishSBbgHiRNBkkRJOsxX7U5SYS7vpAgmQIMkgWBQRJoN6o+eAXIPYlaMP5SEV2J2aWEIrqFkIFTLA0QoKhrMxQlo4huGtF5KNZTU+EomJoojMUsZBUmSI+KxNNMyUWcKZlqLP4i2OBrGKU20EjI5kVRYOwA6lo1Ikpri8bTF9FFXsIpDJwniuF0HdEiusXA8dR9rosnFPi6ePx7iwONgQp38aAdQdB7I3pdlcp50+2eiBfRLeHor2ToddUSYa6rlozAdVVm0fTiddUSQGcsCTYUiiypOEGWVIqIrqGDAlLXpYEZF4WujU5KE+j6euZb/WYnlYIBNRVwNS0fgb5vZY47QHS0oxlz3AZzIQLczYVsCgH9UQFtXDUDXiduIWT1oQxwLgTan2rB/PSLO0ejj/aVAuY5ZYVcTS4Xzz8epPt8Mgh05IrolncIdHoogS4fhkCnRzGBLg8MNulgQ6EI2OWZB2zFnKAZO44lSFzbCCBoiQS42zLHnZWIoLUTQNCuJcB9hxCCBvRHBbRx1Q5I0O4UQtAqAJNjoP2pO5n7sDvfo334BiGkqmI8z3jQLoNUIUlVxIroVnJIVeVQUlUpDKmqHMWkqhKQEFQGGwoFqarEnFRVEUCq4ggmqnsFkKokAtwdmePORUSqOgkgVWkEuDsLIVVAf1RAG1edgKSqixBSVRWYHAPtT3URQKoqURRtE0KqbornGQ+4x35z8qgMgd3czxy32YEtR4C7p5A4Ww3oL0Bdq57M7cZsBFUgsJvezHGbxbWKBLj7CPGX6kB/Aepa9WFuN4bjVyWwm/7McZu86SYC3AOE+EsNoL8Ada0GCFh7iSewm8Hc75oSrb0MEeIvNYH+AtS1Qo5fuCK6Jg91i+VWD/pcI+hzzfjLi+jWMmOl28261YmnL6JbF6gb5Anr5kJsux5w/JCHFu4QMn71geOHXJ9Eru8aH84cVETX+Jyxm/rxgSsedBHdv4BFdJF30hsQ748hiugWj+ddRPcW5nuMRse3EOQ9DYG4YxzfDH2Q40oxtg3j+cvYCC0jWsBaARoDHc78GpHB3IgA94NCNkUbASeyxsAEBmg3CqkL4iBJVkRXQpBszD1ImgySIkiOZL5qU5goexklJEjeAgySTYBBEmg3ahR4Bcg9idok/lIRXYnZpYQiuk2RgVOqoiQU0b01Q1Eyiug2IzoPxXpqah4FUxOFsZiFrOYE6VGLeJopuYUzJVONRSmCsXg0Sm3gMSGbFy2BsQOoa/UYUVrbMp6+iG4potju912tcLqOaBHdVuB46j63xRMKfFs8/r2tgcZAhbt10I4g6L0Rva5aildiFvEiurc7+msTel319jDXVdtE4Loqs2h68brq7UC52oANhSJLak2QJbUlomvooIDUdTtgxkWha6OTdhQ1XJhv9ZudVAoGNFbA1bRaBLgfZ467HNHmyBPMcRvMTQlwPylkUwjojwpo4+oJ4HXicUJWH+4EzoVA+1PjmJ9+cedo9NG+tsA85y4hV5Pbx/OPB+k+nwwCHbkiuh0cAn13KIHuEIZA3x3FBLoDUK67wYZCEbA7MA/Y9zAnaKWce0Vo3UwSQNDqEeB+hjnuikQE7VkBBO1WAtzPCSFoQH9UQBtXzwIJ2vNCCNq9wOQYaH/qeeY+7M738Bp9QkhVp3ie8eDZDFKFJFURK6Lb2SFVXUJJVecwpKpLFJOqzkC5uoANhYJUdWZOqroKIFU3E0xUUwWQqvoEuF9mjvsmIlL1igBS1YwA96tCSBXQHxXQxtUrQFI1TQip6gZMjoH2p6YJIFWdCXz4PiGkqns8z3jAPfabk0d3EtjNTOa4zQ5sewLcs4TE2R5AfwHqWs1ibjdmI+heArt5kzlus7jWiQD3W0L85X6gvwB1rd5ibjeG43cjsJv5zHGbvKk7Ae4FQvylJ9BfgLpWCwSsvdQhsJtFzHHXJFp7eUeIv/QC+gtQ1wo5fuGK6Jo81C2We3/Q555Bn3vFX15E9wH9c2/d+ujWN56+iG4/oG6QJ6yfFGLb/YHjhzy08JyQ8RsAHD/k+iRyfdf4cJagIrrG54zdDIgPXPGgi+iWAo4v8k76QOL9MUQR3dbxvIvoDmK+x2h0PIgg7xkMxB3j+GbogxxXirEdHM9fxiFoGdECmvdQGOi7zK8RGcxDCHC/J2RTdAhwIhsKnGCBdqOQuiAOkmRFdCUEyaHcg2Qpoln8Q+arNs2JcC8VEiQHAYPkMGCQBNqNWgpeAXJPog6Lv1REV2J2KaGI7nBk4JSqKAlFdB/MUJSMIrojiM5DsZ6aHoqCqYnCWMxC1kME6dHIeJopeaQzJVONRVuCsfg4Sm3gEyGbF6OAsQOoa/UJUVo7Kp6+iG5botju910P43Qd0SK6D4Pjqfs8Ek8o8CPx+Pc+CjQGKtyPBu0Igt4b0euqbXklZhEvovuYo7/RoddVHwtzXXV0BK6rMoumF6+rPgaUazTYUCiypEcJsqQxRHQNHRSQuh4LzLgodG10MpZA148z3+o376FgQCsFXE17gAD3p8xxtyfaHPmMOW6DeTgB7s+FbAoB/VEBbVx9BrxO/IWQ1YcngHMh0P7UF8xPv7hzNPpo3xhgnvOkkKvJ4+L5x4N0n08GgY5cEd3xDoGeEEqgx4ch0BOimECPB8o1AWwoFAF7PPOAPZE5QWvr3CtC62atAILWnwD318xxdyIiaOsEELQHCXCvF0LQgP6ogDau1gEJ2gYhBO0pYHIMtD+1gbkPu/M92oefFkKqJsXzjAfrMkgVklRFrIjuMw6pejaUVD0ThlQ9G8Wk6hmgXM+CDYWCVD3DnFQ9J4BU9SGYqLYIIFUDCHBvZY67OxGp2iaAVI0gwP2dEFIF9EcFtHG1DUiqtgshVc8Dk2Og/antAkjVMwQ+/IIQUvViPM94wD32m5NHTxDYzW7muM0O7DgC3D8KibOTgf4C1LX6kbndmI2gpwjsZh9z3GZxbRIB7p+E+MtLQH8B6lr9xNxuDMd/nsBuDjLHbfKmFwlwHxLiL1OA/gLUtTokYO2lL4Hd/MIcdy+itZdfhfjLVKC/AHWtkOMXroiuyUPdYrkvBX2eEvR5avzlRXRf1j+/oturuk2Lpy+iOx2oG+QJ68+F2PYM4PghDy2sFzJ+rwHHD7k+iVzfNT6cNaiIrvE5YzevxQeueNBFdNsCxxd5J/114v0xRBHdR+N5F9F9g/keo9HxGwR5z0wg7hjHN0Mf5LhSjO3MeP4yzkLLiBbw5gCNgR5jfo3IYJ5FgPu4kE3RWcCJbDZwggXajULqgjhIkhXRlRAkZ3MPkm2JZvHfma/aPESE+6SQIPkGMEjOAQZJoN2ok+AVIPck6pz4S0V0JWaXEorovokMnFIVJaGI7lsZipJRRHcu0Xko1lPTvCiYmiiMxSxkzSNIj+bH00zJ850pmWosxhCMxZkotYE/hGxeLADGDqCu1R9Eae2CePoiumOIYrvfdy3E6TqiRXQXguOp+7wdTyjw2/H49y4CGgMV7kVBO4Kg90b0uuoYXolZxIvovuPob3HoddV3wlxXXRyB66rMounF66rvAOVaDDYUiixpEUGWtISIrqGDAlLX7wIzLgpdG528S6Dr95hv9d8coGFA5wRcTXuZAPdfzHGPI9ocOc8ct8H8JgHuv4VsCgH9UQFtXJ0HXif+R8jqw/vAuRBof+of5qdf3DkafbRvCTDP+UDI1eQP4/nHg3SfTwaBjlwR3aUOgV4WSqCXhiHQy6KYQC8FyrUMbCgUAXsp84D9EXOCNsa5V4TWTZaS/HHPIMB9FXPck4gIWlbmuA3mtwhwZwPjdh80QQP6owLauAq2G7+6yE6kC3Ry/DEwOQban8rO3Ifd+R7tw58IIVXL43nGA2TszyBVkSuiu8IhVStDSdWKMKRqZRSTqhVAuVaCDYWCVK1gTqo+FUCqXiWYqHILIFWvEeDOwxz3i0SkKq8AUjWXAHc+IaQK6I8KaOMqL5BUxQohVZ8Bk2Og/alYAaRqBYEPfy6EVH0RzzMecI/95uTR+wR2k8wct9mB/ZAAd4qQOPsl0F+AulYpzO3GbAR9TGA3BZjjNotrywlwFxTiL6uA/gLUtSrI3G4Mx/+MwG7SmOM2edMXBLgLC/GX1UB/AepaFRaw9jKNwG6KMcc9lWjt5Toh/rIG6C9AXSvk+IUromvyULdY7qqgz6uDPq+Jv7yI7lf657W6fa3bunj6IrrrgbpBnrD+W8hJ5g3A8UMeWsgmJDZ8Axw/5Pokcn3X+HD2oCK6xueM3XwTH7jiQRfRHQMcX+Sd9I3E+2OIIrqL4nkX0f2W+R6j0fG3BHnPJiDuGMc3Qx/kuFKM7aZ4/jJuRsuIFrBOgMZAS5bkHdwM5s0EuEsJ2RTdDJzItgAnWKDdKKQuiIMkWRFdCUFyC/cgOYZoFi/DfNVmHhHuskKC5LfAILkVGCSBdqPKgleA3JOoW+MvFdGVmF1KKKK7DRk4pSpKQhHd7zIUJaOI7nai81Csp6bvo2BqojAWs5D1PUF6tCOeZkre4UzJVGOxhGAs0qPUBpSQzYudwNgB1LVSRGntznj6IrpLiGK733ftwuk6okV0d4Hjqfv8EE8o8A/x+PfuBhoDFe7dQTuCoPdG9LrqEl6JWcSL6P7o6G9P6HXVH8NcV90TgeuqzKLpxeuqPwLl2gM2FIosaTdBlrSXiK6hgwJS1/uAGReFro1O9hHo+ifmW/1mJ5WCAVUUcDXtKwLclZjj/pBoc6Qyc9wG8zYC3FWEbAoB/VEBbVxVBl4nripk9WE/cC4E2p+qyvz0iztHh+Y56f4etReY5xwQcjX5YDz/eJDu88kg0JEronvIIdCHQwn0oTAE+nAUE+hDQLkOgw2FImAfYh6wf2ZO0JY494rQuqkpgKBtIMBdiznu5UQErbYAgvYdAe6bhRA0oD8qoI2r2kCCVkcIQfsFmBwD7U/VYe7D7nyP9uFfhZCqI/E840HtDFKFJFURK6J71CFVx0JJ1dEwpOpYFJOqo0C5joENhYJUHWVOqo4LIFVfE0xUDQWQqm8IcDdijvsLIlLVWACp2k6Au4kQUgX0RwW0cdUYSKqaCiFVJ4DJMdD+VFMBpOoogQ//JoRU/R7PMx5wj/3m5NF+ArtpxRy32YE9SID7NiFx9iTQX4C6VrcxtxuzEfQLgd20YY7bLK4dIcDdVoi/nAL6C1DXqi1zuzEc/wSB3dzJHLfJm34nwH2XEH85DfQXoK7VXQLWXtYR2M3dzHGvIVp7uUeIv5wB+gtQ1wo5fuGK6Jo81C2Weyro8+mgz2fiLy+i+4f++axuf+p2Lp6+iO5fQN0gT1hXEWLb54Hjhzy0cLOQ8fsbOH7I9Unk+q7x4ZxBRXSNzxm7+Ts+cMWDLqK7BDi+yDvp/xDvjyGK6O6O511E9wLzPUaj4wsEeU8gAYc7xvHN0Ac5rhRjixwDKhkzoWVEC1g3QGOgnZhfI/oXcwL+vZ2FbIoGG6ZfzJlxRq6AdqOQuiAOkmRFdCUEyczcg+QSolm8G/NVm++JcN8nJEheAGb7McAgCbQbdR94Bcg9iWrwpjk/S8wuJRTRzYIMnFIVJaGI7lUZipJRRDcrQbr078N5asoWBVMThbGYhaxsBBwyewLNlJzdmZKpxmIvQap4f5TaQE8hmxc5gLEDqGvVkyitzRHkQ1Rjupcotvt9V06criNaRDcnOJ66z9UJhAJfnYB/by6gMVDhzpVwaYBB743oddW9vBKziBfRvcbRX+6EwOVXU69JuPK6au4E+uuqzKLpxeuq1wCdMTfYUCiypFwEWVIeIrqGDgpIXecFZlwUujY6yUug63xgXVPspFIwoN4Crqb9QYC7D3PcB4k2R/oyx20wZyHw735CNoWA/qiANq76Aq8T9xey+hALnAuB9qf6Mz/94s7R6KN9eYB5TlyCDBuMT+AfD9J9PhkEOnJFdBMcAp0YSqATwhDoxCgm0AnAYJMINhSKgJ3APGAnMSdoe517RWjdDBVA0M4T4B7GHPcRIoI2XABBu4qAoD0ohKAB/VEBbVwNBxK0EUIIWjIwOQbanxrB3Ifd+R7twylCSFVqAs94MDyDVCFJVcSK6OZ3SFWBUFKVPwypKhDFpCo/kBAUABsKBanKz5xUFRRAqv4kSLIfFUCq/ibA/Rhz3L8TkarRAkhVVoKEbIwQUgX0RwW0cTUaSKrGCiFVhYDJMdD+1FgBpCo/gQ9fK4RUpSXwjAfcY785eRRLYDcTmOM2O7DxBLgnComzhYH+AtS1msjcbsxGUDKB3UxijtssrqUS4H5GiL8UAfoLUNfqGeZ2Yzh+IQK7eZ45bpM3pRHgfkGIvxQF+gtQ1+oFAWsv5wjWIF5ijvsM0drLFCH+UgzoL0BdK+T4hSuia/JQt1hukaDPRYM+F0u4vIjudfrn4rqV0K1kAn0R3VJA3SBPWPcTYtulgeOHPLTwoJDxux44fsj1SeT6rvHhXEFFdI3PGbu5PiFwxYMuorsXWEQXeSe9DPH+GKKIbq4E3kV0yzLfYzQ6LkvAE8qBi+jmEliUqVwCfxnLc68PWS9AY6CvML9GZDCXJ8D9qpBN0fLAiSwdmMAA7UYhdUEcJMmK6EoIkuncg6TJICmC5AzmqzbZiLKX14QEybLAIKmAQRJoN+o18AqQexJVJVwqoisxu5RQRLcCMnBKVZSEIro3ZChKRhHdikTnoVhPTZWiYGqiMBazkFWJID2qnEAzJVd2pmSqschDMBYzo9QGZgnZvKgCjB1AXatZRGltlQT6Irp5iGK733dVxek6okV0q4LjqfvcmEAo8I0J+PfeBDQGKtw3Be0Igt4b0euqeXglZhEvolvN0V/10Ouq1cJcV60egeuqzKLpxeuq1YByVQcbCkWWdBNBllSDiK6hgwJS1zWBGReFro1OahLouhbzrX6zk0rBgN4UcDXtOgLcbzHHHU+0OTKXOW6DuQIB7nlCNoWA/qiANq7mAq8Tzxey+lAbOBcC7U/NZ376xZ2j0Uf7agDznJuFXE2uk8A/HqT7fDIIdOSK6NZ1CHS9UAJdNwyBrhfFBLouUK56YEOhCNh1mQfs+swJWh7nXhFaN4sFELTSBLiXMMedSkTQ3hVA0G4gwP2eEIIG9EcFtHH1LpCgvS+EoDUAJsdA+1PvM/dhd75H+/AtQkhVwwSe8eDdDFKFJFURK6LbyCFVjUNJVaMwpKpxFJOqRkC5GoMNhYJUNWJOqpoIIFUlCCaqjwWQqusJcH/CHHcaEalaLoBUVSTAvUIIqQL6owLauFoOJFUrhZCqpsDkGGh/aqUAUtWIwIdvFUKqmiXwjAfcY/+/J48I7GYVc9xmB7YOAe7VQuJsc6C/AHWtVjO3G7MR1IDAbtYyx20W1xoS4P5aiL+0APoLUNfqa+Z2Yzh+UwK72cAct8mbmhHg/kaIv7QE+gtQ1+obAWsvJQnsZhNz3MWI1l42C/GXVkB/AepaIccvXBFdk4e6xXJbBH1uGfS5VcLlRXRv0z+31u123dok0BfRbQvUDfKE9Twhtt0OOH7IQwvvCRm/O4Djh1yfRK7vGh/OHVRE1/icsZs7EgJXPOgiunmA44u8k34n8f4YoojuTQm8i+jexXyP0ej4LoK8pz0Qd4zjm6EPclwpxrZ9An8ZO6BlhC94BWgMdBvza0QGcwcC3N8J2RTtAJzI7gZOsEC7UUhdEAdJsiK6EoLk3dyDZB6iWXwH81WbSkS4dwoJkncBg+Q9wCAJtBu1E7wC5J5EvSfhUhFdidmlhCK69yIDp1RFSSii2zFDUTKK6HYiOg/FemrqHAVTE4WxmIWszgTpUZcEmim5izMlU41FDYKx2B2lNvCjkM2LrsDYAdS1+pEore2aQF9EtwZRbPf7rm44XUe0iG43cDx1n/sSCAW+LwH/3u5AY6DC3T1oRxD03oheV63BKzGLeBHdHo7+7g+9rtojzHXV+yNwXZVZNL14XbUHUK77wYZCkSV1J8iSehLRNXRQQOq6FzDjotC10UkvAl0/wHyr3+ykUjCgfQKupt1GgPsn5rjrEG2O7GeO22C+lwD3ASGbQkB/VEAbV/uB14kPCll96A2cC4H2pw4yP/3iztHoo309gXlOHyFXk/sm8I8H6T6fDAIduSK6/RwC3T+UQPcLQ6D7RzGB7geUqz/YUCgCdj/mAXsAc4JWw7lXhNbNEQEErR0B7qPMcTckImjHBBC0jgS4jwshaEB/VEAbV8eABO2EEII2EJgcA+1PnWDuw+58j/bhQUJI1eAEnvHgWAapQpKqiBXRHeKQqqGhpGpIGFI1NIpJ1RCgXEPBhkJBqoYwJ1XDBJCq2wkmqjMCSNUdBLj/YI67GRGpOiuAVHUiwP2nEFIF9EcFtHF1FkiqzgkhVcOByTHQ/tQ5AaRqCIEPPyiEVI1I4BkPuMd+c/KoN4HdBErxxm12YPsS4M5USoa/PIQ8aYfDrDIxtxuzETSQwG6yMMdtFtcGE+C+Soi/jAT6C1DX6irmdmM4/nACu8nOHLfJm0YQ4M4hxF9GAf0FqGuVg7ndmLWXNgR2k4s57lZEay/XCPGXh4H+AtS1Qo5fuCK6Jg91i+WODPo8KujzwwmXF9F9RP/8qG6P6TY6gb6I7higbpAnrA8IWdMZCxw/5KGF40LG73Hg+CHXJ5Hru8aH8wYV0TU+Z+zm8YTAFQ+6iG4N4Pgi76Q/Qbw/hiii2z2BdxHdJ5nvMRodP0mQ94wD4o5xfDP0QY4rxdiOS+Av43i0jGgBGwRoDDRvKd7BzWAeT4A7HxEhQW+KjgdOZBOAEyzQbhRSF8RBkqyIroQgOYF7kKxBNIvHM1+16UyEO0FIkHwSGCQnAoMk0G5UAngFyD2JOjHhUhFdidmlhCK6TyEDp1RFSSii+3SGomQU0Z1EdB6K9dT0TBRMTRTGYhayniFIj55NoJmSn3WmZKqx6EkwFslRagMpQjY2nwPGDqCuVQpRWvtcAn0R3Z5Esd3vu57H6TqiRXSfB8dT93khgVDgFxLw730RaAxUuF8M2hEEvTei11V78krMIl5Ed7Kjv5dCr6tODnNd9aUIXFdlFk0vXledDJTrJbChUGRJLxJkSVOI6Bo6KCB1PRV5tJ9A10YnUwl0/TLzrX6zk0rBgAowZ0AG8yMEuAsyx92XaHOkEHPcBvNTBLivFbIpBPRHBbRxFWw3fnWRJmT14RXgXAi0P5XG/PSLO0ejj/ZNAeY5rwq5mjwtgX88SPf5ZBDoyBXRne4Q6BmhBHp6GAI9I4oJ9HSgXDPAhkIRsKczD9ivMSdoPZ17RWjdFBdA0MYS4C7BHPdgIoJWUgBBe5oAdykhBA3ojwpo46okkKCVFkLQXgcmx0D7U6WZ+7A736N9+A0hpGpmAs94UDKDVCFJVcSK6M5ySNXsUFI1Kwypmh3FpGoWUK7ZYEOhIFWzmJOqOQJI1WMEE1W6AFL1OAFuxRz3CCJSVUEAqZpEgPsGIaQK6I8KaOOqApBUVRRCqt4EJsdA+1MVBZCqWQQ+/JYQUjU3gWc84B77zcmjVwjs5ibmuM0O7DQC3NWExNl5QH8B6lpVY243ZiPodQK7qckct1lcm0mAu5YQf5kP9BegrlUt5nZjOP6bBHZThzlukzfNJcBdV4i/LAD6C1DXqq6AtZfRBHbTgDnuh4nWXm4R4i8Lgf4C1LVCjl+4IromD3WL5c4P+rwg6PPChMuL6L6tf16k2zu6LU6gL6K7BKgb5Anra4XY9rvA8UMeWiglZPzeA44fcn0Sub5rfDg2qIiu8TljN+8lBK540EV0ewLHF3kn/X3i/TFEEd0XE3gX0f2A+R6j0fEHBHnPh0DcMY5vhj7IcaUY2w8T+Mu4FC0jWsBbAjQG2pj5NSKDeSkB7iZCNkWXAieyZcAJFmg3CqkL4iBJVkRXQpBcxj1I9iSaxZsxX7V5hgh3cyFB8gNgkPwIGCSBdqOag1eA3JOoHyVcKqIrMbuUUET3Y2TglKooCUV0P8lQlIwiusuJzkOxnppWRMHURGEsZiFrBUF6tDKBZkpe6UzJVGMxhWAsWkWpDdwmZPPiU2DsAOpa3UaU1n6aQF9EdwpRbPf7rs9wuo5oEd3PwPHUfT5PIBT48wT8e78AGgMV7i+CdgRB743oddUpvBKziBfR/dLR36rQ66pfhrmuuioC11WZRdOL11W/BMq1CmwoFFnSFwRZ0moiuoYOCkhdrwFmXBS6NjpZQ6Drr5hv9ZudVAoG1EbA1bS3CXC3ZY57GtHmSDvmuA3mjwlw3yFkUwjojwpo46od8DrxnUJWH9YC50Kg/ak7mZ9+cedo9NG+1cA852shV5PXJfCPB+k+nwwCHbkiuusdAr0hlECvD0OgN0QxgV4PlGsD2FAoAvZ65gH7G+YEbYpzrwitm3sFELR3CXB3ZI57JhFB6ySAoH1CgLuzEIIG9EcFtHHVCUjQugghaBuByTHQ/lQX5j7szvdoH/5WCKnalMAzHnTKIFVIUhWxIrqbHVK1JZRUbQ5DqrZEManaDJRrC9hQKEjVZuakaqsAUvUOwUR1vwBS9R4B7p7Mcc8lIlW9BJCq5QS4HxBCqoD+qIA2rnoBSVVvIaRqGzA5Btqf6i2AVG0m8OHvhJCq7Qk84wH32G9OHq0lsJuBzHGbHdh1BLgHCYmz3wP9BahrNYi53ZiNoI0EdjOUOW6zuLaJAPcwIf6yA+gvQF2rYcztxnD8bQR2M4I5bpM3bSfA/ZAQf9kJ9BegrtVDAtZeFhPYzcPMcS8kWnt5RIi/7AL6C1DXCjl+4YromjzULZa7I+jzzqDPuxIuL6L7g/55t24/6rYngb6I7l6gbpAnrO8QYtv7gOOHPLTQWcj4/QQcP+T6JHJ91/hwfFARXeNzxm5+Sghc8aCL6E4Bji/yTvp+4v0xRBHdLxJ4F9E9wHyP0ej4AEHecxCIO8bxzdAHOa4UY3swgb+Mh9AyogVsGKAx0NHMrxEZzIcIcI8Rsil6CDiRHQZOsEC7UUhdEAdJsiK6EoLkYe5BcgrRLP4E81WbFUS4nxQSJA8Ag+TPwCAJtBv1JHgFyD2J+nPCpSK6ErNLCUV0f0EGTqmKklBE99cMRckoonuE6DwU66npaBRMTRTGYhayjhKkR8cSaKbkY86UTDUWqwnGYkKU2sBEIZsXx4GxA6hrNZEorT2eQF9EdzVRbPf7rhM4XUe0iO4JcDx1n98SCAX+LQH/3t+BxkCF+/egHUHQeyN6XXU1r8Qs4kV0Tzr6OxV6XfVkmOuqpyJwXZVZNL14XfUkUK5TYEOhyJJ+J8iSThPRNXRQQOr6DDDjotC10ckZAl3/wXyr3+ykUjCgSQKupv1AgPsZ5rjXEW2OPMsct8H8CwHu54RsCgH9UQFtXD0LvE78vJDVh7PAuRBof+p55qdf3DkafbTvNDDP+VPI1eRzCfzjQbrPJ4NAR66I7l8OgT4fSqD/CkOgz0cxgf4LKNd5sKFQBOy/mAfsv5kTtNXOvSK0bqYKIGj7CHC/zBz3JiKC9ooAgvYrAe5XhRA0oD8qoI2rV4AEbZoQgvYPMDkG2p+axtyH3fke7cMXhJAqc5EYNZZTiXw43eeTQaoiV0Q3U6IzrubPYAJl/iGUVJn/lBYiVLSQqkyJOLkyJ2INhYJUGbycSVVMIu+JarVTqAGtm5kCSNVPBLhnMce9nYhUzRZAqo4Q4J4jhFQB/VEBbVzNBpKqN4WQqizA5Bhof+pNAaTKzfeQ+rgqUYbdZE3kGQ+4x35z8ugsQexfyBy32YE9R4D7bSFxNhvQX4C6Vm8ztxuzEfQPgd0sZo7bLK4FCOaXJUL8JTvQX4C6VkuY243h+FkI7OZ95rhN3pSVAPcHQvwlB9BfgLpWHwhYe9lDML8sY457F9Hay0dC/CUn0F+AulbI8QtXRNfkoW6x3OxBn3MEfc6ZeHkR3av1z7l0u0a33In0RXTzAHWDPGH9nBDbzgscP+ShhVeFjF8+4Pgh1yeR67vGhxODiuganzN2ky8xcMWDLqK7GniQA3knPZZ4fwxRRPd35kV045jvMRodxxHwhHgg7hjHN0Mf5LhSjG18In8ZE9AyogVsFKAx0OXMrxEZzAkEuFcI2RRNAB6WSQQmMEC7UUhdEAdJsiK6EoJkIvcgaTJIiiD5GfNVm6NEuD8XEiTjgEEyCRgkgXajPgevALknUZMSLxXRlZhdSiiim4wMnFIVJaGIbkqGomQU0U0lOg/FemrKHwVTE4WxmIWs/ATpUYFEmim5gDMlU43FaYINvlVRagOrhWxeFATGDqCu1WqitLZgIn0RXeQlnPzAeaIQTtcRLaJbCBxP3efaREKBr03EvzcNaAxUuNOCdgRB743odVUq5023eyJeRLewo78ioddVC4e5rlokAtdVmUXTi9dVCwOdsQjYUCiypDSCLKkoEV1DBwWkrosBMy4KXRudFCPQ9XXMt/rNTioFA1or4Gra1QT6/po57nNEmyPrmOM2mJMJcK8XsikE9EcFtHG1DnideIOQ1YfiwLkQaH9qA/PTL+4cjT7aVxSY55QQcjW5ZCL/eJDu88kg0JErolvKIdClQwl0qTAEunQUE+hSwGBTGmwoFAG7FPOAfT1zgmbsOBdB4rpFAEHLS4B7K3PcAaKz99sEELQUAtzfCSFoQH9UQBtX24AEbbsQglYGmBwD7U9tZ+7D7nyP9uGyQkhVuUSe8WBbBqlCkqqIFdEt75Cq9FBSVT4MqUqPYlJVHkgI0sGGQkGqyjMnVUoAqbqGYKLaLYBU5SPA/SNz3FmJSNUeAaQqlQD3XiGkCuiPCmjjag+QVO0TQqoqAJNjoP2pfQJIVXkCH75BCKmqmMgzHnCP/ebkUXECuznMHLfZgS1JgPtnIXG2EtBfgLpWPzO3G7MRVIbAbo4wx20W18oR4D4qxF8qA/0FqGt1lLndGI5fgcBuTjDHbfKmigS4fxPiL1WA/gLUtfpNwNpLbgK7OcUcd06itZfTQvylKtBfgLpWyPELV0TX5KFusdzKQZ+rBH2umnh5Ed0b9c836VZNt+qJ9EV0awB1gzxhvV6IbdcEjh/y0MJ3QsavFnD8kOuTyPVd48PJQUV0jc8Zu6mVGLjiQRfRPQ0soou8k16beH8MUUQ3LZF3Ed2bme8xGh3fTJD31AHijnF8M/RBjivF2NZJ5C9jXbSMaAEbB2gM9Czza0QGc10C3H8K2RStC5zI6gETGKDdKKQuiIMkWRFdCUGyHvcgaTJIiiB5nvmqTX6i7OVvIUHyZmCQrA8MkkC7UX+DV4Dck6j1Ey8V0ZWYXUoootsAGTilKkpCEd1bMhQlo4huQ6LzUKynpkZRMDVRGItZyGpEkB41TqSZkhs7UzLVWBQlGItA6ei0gUylaQIRevOiCTB2AHWtkOMX7ENNEumL6BYliu1+39UUp+uIFtFtCo6n7nNrIqHAtybi39sMaAxUuJsF7QiC3hvR66pFeSVmES+i29zRX4vQ66rNw1xXbRGB66rMounF66rNgXK1ABsKRZbUjCBLaklE19BBAanrVsiMi0DXRietCHR9G/OtfrOTSsGAsjBnQAbzjQS4r2KOuyTR5khW5rgN5gYEuLMRMV70yhvQHxXQxlWw3fjVRXYhqw+tgXMh0P5UdmIfRuRNrQiO9rUE5jm3C7ma3CaRfzxI9/lkEOjIFdFt6xDodqEEum0YAt0uigl0W6Bc7cCGQhGw2zIP2HcwJ2hFnXtFaN3kFkDQahLgzsMcdzkigpZXAEG7hQB3PiEEDeiPCmjjKi+QoMUKIWh3ApNjoP2pWOY+7M73aB++Swipap/IMx7kzSBVSFIVsSK6HRxSdXcoqeoQhlTdHcWkqgNQrrvBhkJBqjowJ1X3CCBV1QgmqmQBpKoWAe4U5rgrEpGqVAGkqiEB7vxCSBXQHxXQxlUqkFQVEEKq7gUmx0D7UwUEkKoOBD7cUQip6pTIMx5wj/3m5FFrArspwhy32YFtQ4C7qJA42xnoL0Bdq6LM7cZsBN1JYDfFmeM2i2vtCXCXEOIvXYD+AtS1KsHcbgzHv5fAbkozx23ypk4EuK8X4i9dgf4C1LW6XsDaS3UCuynHHHdVorWX8kL8pRvQX4C6VsjxC1dE1+ShbrHcLkGfuwZ97pZ4eRHd+/TP3XXrodv9ifRFdHsCdYM8YZ1NiG33Ao4f8tBCPiHj9wBw/JDrk8j1XePDqUFFdI3PGbt5IDFwxYMuolsUOL7IO+m9iffHEEV0myXyLqLbh/keo9FxH4K8py8Qd4zjm6EPclwpxrZvIn8Z+6FlRAvYJEBjoBWYXyMymPsR4L5ByKZoP+BE1h84wQLtRiF1QRwkyYroSgiS/bkHyaJEs3hl5qs2jYhwVxESJPsAg+QAYJAE2o2qAl4Bck+iDki8VERXYnYpoYjuQGTglKooCUV0B2UoSkYR3cFE56FYT01DomBqojAWs5A1hCA9GppIMyUPdaZkqrFoSTAWN0WpDVQTsnkxDBg7gLpW1YjS2mGJ9EV0WxLFdr/vGo7TdUSL6A4Hx1P3eTCRUOAHE/HvHQE0BircI4J2BEHvjeh11Za8ErOIF9F9yNHfyNDrqg8lXnlddWQErqsyi6YXr6s+BJRrJNhQKLKkEQRZ0igiuoYOCkhdPwzMuCh0bXTyMIGuH2G+1W92UikYUE0BV9PuI8BdiznuNkSbI7WZ4zaYBxLgvlnIphDQHxXQxlVt4HXiOkJWHx4FzoVA+1N1mJ9+cedo9NG+UcA85zEhV5NHJ/KPB+k+nwwCHbkiumMcAj02lECPCUOgx0YxgR4DlGss2FAoAvYY5gH7ceYEraVzrwitm4YCCFovAtyNmONuT0TQGgsgaIMIcDcRQtCA/qiANq4aAwlaUyEE7Qlgcgy0P9WUuQ+78z3ah58UQqrGJfKMB40zSBWSVEWsiO54h1RNCCVV48OQqglRTKrGA+WaADYUClI1njmpmiiAVPUgmKhaCSBVDxDgvo057k5EpKq1AFI1mAD37UJIFdAfFdDGVWsgqWojhFQ9BUyOgfan2gggVeMJfPhpIaRqUiLPeMA99puTR48S2E175rjNDuxoAtwdhMTZZ4D+AtS16sDcbsxG0BMEdnMvc9xmcW0cAe6OQvzlWaC/AHWtOjK3G8PxnyKwmy7McZu8aRIB7q5C/OU5oL8Ada26Clh7uZ/Abrozx92NaO2lhxB/eR7oL0BdK+T4hSuia/JQt1jus0Gfnwv6/Hzi5UV0X9A/v6jbZN1eSqQvojsFqBvkCeubhdj2VOD4IQ8tNBEyfi8Dxw+5Polc3zU+XCCoiK7xOWM3LycGrnjQRXRbAscXeSf9FeL9MUQR3RGJvIvovsp8j9Ho+FWCvGcaEHeM45uhD3JcKcZ2WiJ/GaejZUQL2DRAY6C9mF8jMpinE+B+QMim6HTgRDYDOMEC7UYhdUEcJMmK6EoIkjO4B8mWRLN4X+arNkOIcPcTEiRfBQbJ14BBEmg3qh94Bcg9ifpa4qUiuhKzSwlFdF9HBk6pipJQRPeNDEXJKKI7k+g8FOupaVYUTE0UxmIWsmYRpEezE2mm5NnOlEw1FqMIxmJglNrAICGbF3OAsQOoazWIKK2dk0hfRHcUUWz3+643cbqOaBHdN8Hx1H3eSiQU+K1E/HvnAo2BCvfcoB1B0Hsjel11FK/ELOJFdOc5+psfel11XuKV11XnR+C6KrNoevG66jygXPPBhkKRJc0lyJIWENE1dFBA6nohMOOi0LXRyUICXb/NfKvf7KRSMKChAq6mvUCAexhz3KOJNkeGM8dtML9OgPtBIZtCQH9UQBtXw4HXiUcIWX1YBJwLgfanRjA//eLO0eijfQuAec47Qq4mL07kHw/SfT4ZBDpyRXSXOAT63VACvSQMgX43ign0EqBc74INhSJgL2EesN9jTtBGOfeK0Lp5VABBm0qA+zHmuMcREbTRAgjaGwS4xwghaEB/VEAbV6OBBG2sEIL2PjA5BtqfGsvch935Hu3DHwghVR8m8owHozNIFZJURayI7lKHVC0LJVVLw5CqZVFMqpYC5VoGNhQKUrWUOan6SACpmkwwUU0QQKpeJsA9kTnuSUSk6ikBpGomAe6nhZAqoD8qoI2rp4CkapIQUvUxMDkG2p+aJIBULSXw4U+EkKrliTzjAffYb04eLSKwmxeZ4zY7sIsJcE8WEmdXAP0FqGs1mbndmI2g9wnsZipz3GZx7UMC3C8L8ZeVQH8B6lq9zNxuDMf/mMBupjHHbfKm5QS4pwvxl0+B/gLUtZouYO3lJQK7eZ057ueJ1l7eEOIvnwH9BahrhRy/cEV0TR7qFstdGfT506DPnyVeXkT3c/3zF7p9qduqRPoiuquBukGesH5QiG2vAY4f8tDCGCHj9xVw/JDrk8j1XePDhYKK6BqfM3bzVWLgigddRHcUcHyRd9LXEu+PIYrozk3kXUT3a+Z7jEbHXxPkPeuAuGMc3wx9kONKMbbrEvnLuB4tI1rAWwM0Bjqb+TUig3k9Ae45QjZF1wMnsg3ACRZoNwqpC+IgSVZEV0KQ3MA9SI4imsXnMl+1mUWEe56QIPk1MEh+AwySQLtR88ArQO5J1G8SLxXRlZhdSiiiuxEZOKUqSkIR3W8zFCWjiO4movNQrKemzVEwNVEYi1nI2kyQHm1JpJmStzhTMtVYLCAYi4VRagNvC9m82AqMHUBdq7eJ0tqtifRFdBcQxXa/79qG03VEi+huA8dT9/kukVDg7xLx790ONAYq3NuDdgRB743oddUFvBKziBfR/d7R347Q66rfJ155XXVHBK6rMoumF6+rfg+UawfYUCiypO0EWdJOIrqGDgpIXe8CZlwUujY62UWg6x+Yb/WbnVQKBrRYwNW0zwlwL2GOezHR5si7zHEbzBsJcL8nZFMI6I8KaOPqXeB14veFrD7sBs6FQPtT7zM//eLO0eijfTuBec6PQq4m70nkHw/SfT4ZBDpyRXT3OgR6XyiB3huGQO+LYgK9FyjXPrChUATsvcwD9k/MCdoC514RWjcfCyBoawhwf8Ic94dEBG25AIL2LQHuFUIIGtAfFdDG1XIgQVsphKDtBybHQPtTK5n7sDvfo334gBBSdTCRZzxYnkGqkKQqYkV0Dzmk6nAoqToUhlQdjmJSdQgo12GwoVCQqkPMSdXPAkjVlwQT1SoBpOorAtyrmeNeTkSq1gggVZsIcH8lhFQB/VEBbVytAZKqtUJI1S/A5Bhof2qtAFJ1iMCHfxVCqo4k8owH3GO/OXm0m8BuNjLHbXZg9xDg/lZInD0K9BegrtW3zO3GbATtp7gXxRy3WVw7SIB7qxB/OQb0F6Cu1VbmdmM4/i8EdrOdOW6TNx0hwP29EH85DvQXoK7V9wLWXlYR2M0u5rg/I1p7+UGIv5wA+gtQ1wo5fuGK6Jo81C2Weyzo8/GgzycSLy+i+5v++XfdTup2KpG+iO5poG6QJ6zfE2LbZ4Djhzy0sELI+P0BHD/k+iRyfdf4cFpQEV3jc8Zu/kgMXPGgi+guAI4v8k76WeL9MUQR3e2JvIvo/sl8j9Ho+E+CvOccEHeM45uhD3JcKcb2XCJ/Gf9Cy4gWsFmAxkD3ML9GZDD/RYB7r5BN0b+AE9l54AQLtBuF1AVxkCQroishSJ7nHiQXEM3i+5mv2mwmwn1ASJD8Exgk/wYGSaDdqAPgFSD3JOrfiZeK6ErMLiUU0f0HGTilKkpCEd0LGYqSUUQ3kEQzM7GemjIl/f//1ERhLGYhy4wdOj3KnEQzJZv3phE5jhmLnQSp4uEotYGfhWxexABjB1DX6meitDYmyIeoxnQnUWz3+64sOF1HtIhuFnA8dZ+rkggFvioJ/96sQGOgwp016dIAg94b0euqO3klZhEvopvN0V/2pMDlV1OzJV15XTV7Ev11VWbR9OJ11WxAZ8wONhSKLCkrQZaUg4iuoYMCUtc5gRkXha6NTnIS6PpqsK4pdlIpGNARAVfTfiPAfZQ57j1EmyPHmOM2mP8hwH1cyKYQ0B8V0MbVMeB14hNCVh9yAedCoP2pE8xPv7hzNPpoXw5gnnNNkgwbzJ3EPx6k+3wyCHTkiujmcQh03lACnScMgc4bxQQ6DzDY5AUbCkXAzsM8YOdjTtB2OveK0Lo5I4CgnSHA/Qdz3AeJCNpZAQTtAgHuP4UQNKA/KqCNq7NAgnZOCEGLBSbHQPtT55j7sDvfo304Tgipik/iGQ/OZpAqJKmKWBHdBIdUJYaSqoQwpCoxiklVApAQJIINhYJUJTAnVUkCSNVJgmQzcD1/3H8Q4M7EHPcRIlKVmTlugzlAkJDFgHG7D5pUAf1RAW1cBduN7/ONRLpAJ8fJwOQYaH8qC3Mfdud7tA+nCCFVqUk84wH32G9OHuUisJuczHGbHdjcFCe5hMTZ/EB/AepaXc3cbsxGUCyB3eRmjtssrsUT4M4jxF8KAP0FqGuVh7ndGI6fTGA3scxxm7wplWKRW4i/FAT6C1DXKk7A2sspgjWIROa4TxCtvSQJ8ZdCQH8B6lohxy9cEV2Th7rFcgsEfS4Y9LlQ0uVFdK81exi6FdatSBJ9Ed2iQN0gT1gfF7JRXgw4fshDC38KGb/rgOOHXJ9Eru8aHy4SVETX+Jyxm+uSAlc86CK6O4Hlq5B30osT748hiuhmTeJdRLcE8z1Go+MSBDyhJBB3jOOboQ9yXCnGtmQSfxlLoWVEC9g8QGOgqdfzDm4GcykC3PmFbIqWAk5kpYEJDNBuFFIXxEGSrIiuhCBZmnuQNBkkRZAsxHzVJhNR9nKtkCBZAhgkrwcGSaDdqGvBK0DuSdTrky4V0ZWYXUooolsGGTilKkpCEd2yGYqSUUS3HNF5KNZTU/komJoojMUsZJUnSI/Sk2im5HRnSqYaixwEY1EkSm2gqJCNTQWMHUBdq6JEaa1Koi+im4Motvt9VwWcriNaRLcCOJ66zw1JhALfkIR/b0WgMVDhrhi0Iwh6b0Svq+bglZhFvIhuJUd/lUOvq1YKc121cgSuqzKLphevq1YCylUZbCgUWVJFgiypChFdQwcFpK6rIq/CEOja6KQqga5vZL7Vb3ZSKRhQcQFX064lwF2COe7cVEc7mOM2mMsQ4C4lZFMI6I8KaOOqJPA6cWkhqw83AedCoP2p0sxPv7hzNPpoXxVgnlNNyNXk6kn840G6zyeDQEeuiG4Nh0DXDCXQNcIQ6JpRTKBrAOWqCTYUioBdg3nArsWcoOVw7hXBt+sEELRiBLgVc9zxRAStggCCVpYA9w1CCBrQHxXQxlUFIEGrKISg1QYmx0D7UxWZ+7A736N9+GYhpKpOEs94UCGDVCFJVcSK6NZ1SFW9UFJVNwypqhfFpKouUK56YEOhIFV1mZOq+gJIVWGCieomAaTqOgLc1ZjjTiUiVdUFkKpyBLhrCCFVQH9UQBtX1YGkqqYQUtUAmBwD7U/VFECq6hL48C1CSFXDJJ7xgHvsNyePbiKwm3rMcZsd2OoEuOsLibONgP4C1LWqz9xu/t0IIrCbhsxxm8W1OgS4Gwnxl8ZAfwHqWjVibjeG4zcgsJumzHGbvKkhAe5bhfhLE6C/AHWtbhWw9lKEwG5aMMddiGjtpaUQf2kK9BegrhVy/MIV0TV5qFsst3HQ5yZBn5smXV5E91b9czPdmuvWIom+iG5LoG6QJ6xLCbHtVsDxQx5auEHI+N0GHD/k+iRyfdf4cLGgIrrG54zd3JYUuOJBF9HNARxf5J301sT7Y4giuhWTeBfRvZ35HqPR8e0EeU8bIO4YxzdDH+S4UoxtmyT+MrZFy4gWsEWAxkBbM79GZDC3JcB9u5BN0bbAiawdcIIF2o1C6oI4SJIV0ZUQJNtxD5I5iGbxdsxXbcoT4b5DSJC8HRgk7wAGSaDdqDvAK0DuSdQ7ki4V0ZWYXUooonsnMnBKVZSEIrp3ZShKRhHd9kTnoVhPTR2iYGqiMBazkNWBID26O4lmSr7bmZKpxqIKwVi0j1Ib6CBk8+IeYOwA6lp1IEpr70miL6JbhSi2+33XvThdR7SI7r3geOo+HZMIBe6YhH9vJ6AxUOHuFLQjCHpvRK+rVuGVmEW8iG5nR39dQq+rdg5zXbVLBK6rMoumF6+rdgbK1QVsKBRZUieCLKkrEV1DBwWkrrsBMy4KXRuddCPQ9X3Mt/rNTioFA7pXwNW0Wwlwd2SOuzrR5kgn5rgN5jsJcHcWsikE9EcFtHHVCXiduIuQ1YfuwLkQaH+qC/PTL+4cjT7a1xWY5/QQcjX5/iT+8SDd55NBoCNXRLenQ6B7hRLonmEIdK8oJtA9gXL1AhsKRcDuyTxgP8CcoFVx7hWhdXO/AILWigB3T+a46xARtF4CCNpdBLgfEELQgP6ogDauegEJWm8hBK03MDkG2p/qzdyH3fke7cN9hJCqvkk840GvDFKFJFURK6LbzyFV/UNJVb8wpKp/FJOqfkC5+oMNhYJU9WNOqgYIIFXNCSaqgQJI1W0EuAcxx92QiFQNFkCq2hPgHiKEVAH9UQFtXA0GkqqhQkjVQGByDLQ/NVQAqepHEbOFkKrBSTzjAffYb04edSewm5HMcZsd2PsJcI8SEmeHAP0FqGs1irndmI2g3gR28yhz3GZxrS8B7seE+MtQoL8Ada0eY243huMPJLCbscxxm7xpMAHux4X4yzCgvwB1rR4XsPbSgsBuxjHH3ZRo7WW8EH8ZDvQXoK4VcvzCFdE1eahbLHdo0OdhQZ+HJ11eRPdB/fMI3R7SbWQSfRHdUUDdIE9YdxZi2w8Dxw95aOEBIeP3CHD8kOuTyPVd48PFg4roGp8zdvNIUuCKB11EtwpwfJF30h8l3h9DFNHtlMS7iO5jzPcYjY4fI8h7RgNxxzi+Gfogx5VibEcn8ZdxDFpGtIAtAzQG+hTza0QG8xgC3E8L2RQdA5zIxgInWKDdKKQuiIMkWRFdCUFyLPcgWYVoFn+W+apNByLczwkJko8Bg+TjwCAJtBv1HHgFyD2J+njSpSK6ErNLCUV0n0AGTqmKklBE98kMRckoojuO6DwU66lpfBRMTRTGYhayxhOkRxOSaKbkCc6UTDUWXQnG4sUotYHJQjYvJgJjB1DXajJRWjsxib6Iblei2O57TQ+n64gW0X0KHE/d5+kkQoGfTsK/dxLQGKhwTwraEQS9N6LXVbvySswiXkT3GUd/z4ZeV30mzHXVZyNwXZVZNL14XfUZoFzPgg2FIkuaRLGQSETX0EEBqevngRkXha6NTp4n0PULzLf6zU4qBQOaKuBq2oMEuF9mjvt+os2RV5jjNpifIMD9qpBNIaA/KqCNq1eA14mnCVl9eBE4FwLtT01jfvrFnaPRR/ueA+Y5k4VcTX4piX88SPf5ZBDoyBXRneIQ6KmhBHpKGAI9NYoJ9BSgXFPBhkIRsKcwD9gvMydoXZ17RWjdzBRA0B4mwD2LOe6+RARttgCC9iQB7jlCCBrQHxXQxtVsIEF7UwhBewWYHAPtT73J3Ifd+R6+yCKEVE1L4hkPZmeQKiSpilgR3ekOqZoRSqqmhyFVM6KYVE0HyjUDbCgUpGo6c1L1mgBS9RDBRLVQAKl6hAD328xxDyYiVYsEkKpxBLjfEUKqgP6ogDauFgFJ1WIhpOp1YHIMtD+1WACpmk7gw28IIVUzk3jGA+6x35w8epHAbj5kjtvswL5EgHupkDg7C+gvQF2rpcztxmwEvUJgNx8zx20W16YR4P5EiL/MBvoLUNfqE+Z2Yzj+6wR2s5I5bpM3zSTA/akQf5kD9BegrtWnAtZeRhLYzRfMcQ8nWnv5Uoi/vAn0F6CuFXL8whXRNXmoWyx3dtDnOUGf30y6vIjuW/rnubrN021+En0R3QVA3SBPWL8qxLYXAscPeWhhjpDxexs4fsj1SeT6rvHhkkFFdI3PGbt5OylwxYMuotsVOL7IO+mLiPfHEEV0JyXxLqL7DvM9RqPjdwjynsVA3DGOb4Y+yHGlGNvFSfxlXIKWES1gqwCNga5hfo3IYF5CgPsrIZuiS4AT2bvACRZoNwqpC+IgSVZEV0KQfJd7kOxKNIuvY75qM54I93ohQfIdYJB8DxgkgXaj1oNXgNyTqO8lXSqiKzG7lFBE931k4JSqKAlFdD/IUJSMIrofEp2HYj01LY2CqYnCWMxC1lKC9GhZEs2UvMyZkqnG4jmCsdgYpTbwrZDNi4+AsQOoa/UtUVr7URJ9Ed3niGK770NsOF1HtIjux+B46j6fJBEK/EkS/r3LgcZAhXt50I4g6L0Rva76HK/ELOJFdFc4+lsZel11RZjrqisjcF2VWTS9eF11BVCulWBDociSllMclySia+iggNT1Z8CMi0LXRiefEej6c+Zb/WYnlYIBbRFwNe0tAtxbmeN+iWhzZBtz3Abz+wS4vxOyKQT0RwW0cbUNeJ14u5DVhy+AcyHQ/tR25qdf3DkafbTvU2Ce86WQq8mrkvjHg3SfTwaBjlwR3dUOgV4TSqBXhyHQa6KYQK8GyrUGbCgUAXs184D9FXOC9pxzrwitm90CCNpCAtw/Msc9jYig7RFA0D4gwL1XCEED+qMC2rjaAyRo+4QQtLXA5Bhof2ofcx9253u0D38thFStS+IZD/ZkkCokqYpYEd31DqnaEEqq1ochVRuimFStB8q1AWwoFKRqPXNS9Y0AUjWPYKI6LIBUvU2A+2fmuGcSkapfBJCqDwlw/yqEVAH9UQFtXP0CJFVHhJCqjcDkGGh/6ogAUrWe4qy2EFK1KYlnPOAe+83Joy8I7OZ35rjNDuwqAtwnhcTZzUB/AepanWRuN2YjaC2B3Zxhjtssrq0jwP2HEH/ZAvQXoK7VH8ztxnD8jQR2c445bpM3bSLA/ZcQf9kK9BegrtVfAtZe5hPYzT/Mcb9JtPZyQYi/bAP6C1DXCjl+4YromjzULZa7Jejz1qDP25IuL6L7nf55u27f67Yjib6I7k6gbpAnrL8TYtu7gOOHPLSwV8j4/QAcP+T6JHJ91/hw6aAiusbnjN38kBS44kEX0X0OOL7IO+m7iffHEEV0lyfxLqL7I/M9RqPjHykO8gFxxzi+Gfogx5VibPck8ZdxL1pGtIC3BWgMNHMZ3sHNYN5LgDumDN4ozYPeFN0LnMj2ASdYoN0opC6IgyRZEV0JQXIf9yD5HNEsnpU4SKb7e/7NdilwZxMSJH8EBsmfgEESaDcKqYvgk6g/JV0qoisxu5RQRHc/MnBKVZSEIroHMhQlo4juQaLzUKynpkNRMDVRGItZyDpEcYA8iWZKPuxMyVRj8SnBWOSMUhu4mihFRm9e/AyMHUBdq6uJ0tqfk+iL6H5KFNt9X3TA6TqiRXR/AcdT9/k1iVDgX5Pw7z0CNAYq3EeCdgRB743oddVPeSVmES+ie9TR37HQ66pHw1xXPRaB66rMounF66pHgXIdAxsKRZZ0hCBLOk5E19BBAanrE8CMi0LXRicnCHT9G/OtfrOTSsGAcjNnQAbzdwS48zDHvYpocyQvc9wG834C3PmEbAoB/VEBbVwF241fXcQKWX34HTgXAu1PxTI//eLO0eijfceBec5JIVeTTyXxjwfpPp8MAh25IrqnHQJ9JpRAnw5DoM9EMYE+DZTrDNhQKAL2aeYB+w/mBO1T514RWjfJAgjaLgLcKcxxryMiaKkCCNoBAtz5hRA0oD8qoI2rVCBBKyCEoJ0FJsdA+1MFmPuwO9+jffhPIaTqXBLPeJCaQaqQpCpiRXT/ckjV+VBS9VcYUnU+iknVX0C5zoMNhYJU/cWcVP0tgFR9TzBRFRFAqn4gwF2UOe5NRKSqmABSdZAA93VCSBXQHxXQxlUxIKkqLoRU/QNMjoH2p4oLIFV/EfjwBSGkKpDMMx5wj/3m5NHvBHZThjluswN7igB3WSFxNhPQX4C6VmWZ243ZCDpLYDfpzHGbxbVzBLiVEH/JDPQXoK6VYm43huP/Q2A3FZnjNnmTyUnQuCsJ8ZcYoL8Ada0qCVh72UHgL1WZ495GtPZyoxB/yQL0F6CuFXL8whXRNXmoWyw3c9DnmKDPWZIvL6J7lf45q27ZdMueTF9ENwdQN8gT1vmE2HZO4PghDy3kFzJ+VwPHD7k+iVzfNT5cJqiIrvE5YzcGe+D/8O90f89lvxgy3d+jkHfScyXTztmIIrpHkngX0b2GeAzT/T3K6PgaAp6QG4g7xvHN0Ac5rhRjmzuZv4x50DKiBWwdoDHQ6syvERnMeQhw1xCyKRpsmL4nCmACA7QbhdQFcZAkK6IrIUjm5R4kTQZJESRrM1+1OUSE+2YhQfIaYJDMBwySQLtRN4NXgNyTqAZvmvOzxOxSQhHdWGTglKooCUV04zIUJaOIbjxBuvTvw3lqSoiCqYnCWMxCVgJBepSYTDMlJzpTMtVYHCfY4KsXpTZQX8jmRRIwdgB1reoTpbVJQT5ENabISzgJwHkiGafriBbRTQbHU/dJSSYUOCWZIFUGGgMV7tSgHUHQeyN6XZXKedPtnogX0c3v6K9AcuDyq6n5k6+8rlogmf66KrNoevG6an6gMxYAGwpFlpRKkCUVJKJr6KCA1HUhYMZFoWujk0IEur6W+Va/2UmlYEANBVxNu4pA342Y4z5FtDnSmDlugzmWAHcTIZtCQH9UQBtXjYHXiZsKWX1IA86FQPtTTZmffnHnaPTRvoLAPKdwsgwbLJLMPx6k+3wyCHTkiugWdQh0sVACXTQMgS4WxQS6KDDYFAMbCkXALso8YF/HnKAZO85KkLi2EkDQchLgvo057nNEBK21AIIWR4D7diEEDeiPCmjjqjWQoLURQtCKA5NjoP2pNsx92J3v0T5cQgipKpnMMx60ziBVSFIVsSK6pRxSVTqUVJUKQ6pKRzGpKgUkBKXBhkJBqkoxJ1XXCyBV2QgmqvYCSNXVBLg7MMcdILrQfLcAUhVPgPseIaQK6I8KaOPqbiCpulcIqSoDTI6B9qfuFUCqShH4cFkhpKpcMs94wD32m5NHaQR20405brMDW4QA931C4mx5oL8Ada3uY243ZiOoOIHd3M8ct1lcK0mAu6cQf0kH+gtQ16onc7sxHL8Mgd30Zo7b5E3lCHD3EeIvCugvQF2rPgLWXrIT2E1/5rizEK29DBDiLxWA/gLUtUKOX7giuiYPdYvlpgd9VkGfKyRfXkT3Bv1zRd0q6VY5mb6IbhWgbpAnrJsIse2qwPFDHlq4Xcj43QgcP+T6JHJ91/hwuaAiusbnjN3cmBy44kEX0T0OLKKLvJN+E/H+GKKIbmoy7yK61ZjvMRodVyPIe6oDccc4vhn6IMeVYmyrJ/OXsQZaRrSAtwdoDHQw82tEBnMNAtxDhGyK1gBOZDWBCQzQbhRSF8RBkqyIroQgWZN7kDQZJEWQHM581SaBKHt5UEiQrAYMkrWAQRJoN+pB8AqQexK1VvKlIroSs0sJRXRrIwOnVEVJKKJ7c4aiZBTRrUN0Hor11FQ3CqYmCmMxC1l1CdKjesk0U3I9Z0qmGouCBGMxMkptYJSQzYv6wNgB1LUaRZTW1k+mL6JbkCi2+31XA5yuI1pEtwE4nrrPLcmEAt+SjH9vQ6AxUOFuGLQjCHpvRK+rFuSVmEW8iG4jR3+NQ6+rNgpzXbVxBK6rMoumF6+rNgLK1RhsKBRZUkOCLKkJEV1DBwWkrpsCMy4KXRudNCXQ9a3Mt/rNTioFA3pUwNW0GwhwP8YcdxGizZHRzHH/u/JEgHuMkE0hoD8qoI2r0cDrxGOFrD40A86FQPtTY5mffnHnaPTRvibAPKe5kKvJLZL5x4N0n08GgY5cEd2WDoFuFUqgW4Yh0K2imEC3BMrVCmwoFAG7JfOAfRtzglbQuVeE1s0EAQStKgHuicxxlyQiaE8JIGg3E+B+WghBA/qjAtq4egpI0CYJIWitgckx0P7UJOY+7M738ELYQkhVm2Se8eCpDFKFJFURK6Lb1iFV7UJJVdswpKpdFJOqtkC52oENhYJUtWVOqu4QQKoqEUxULwogVTcS4J7MHHc5IlL1kgBSVYcA9xQhpArojwpo4+olIKmaKoRU3QlMjoH2p6YKIFVtCXz4LiGkqn0yz3jAPfabk0fNCOxmBnPcZge2BQHu14TE2Q5AfwHqWr3G3G7MRlBrAruZyRy3WVxrQ4B7lhB/uRvoL0Bdq1nM7cZw/DsJ7OZN5rhN3tSeAPdbQvzlHqC/AHWt3hKw9lKZwG7mM8ddgWjtZYEQf7kX6C9AXSvk+IUromvyULdY7t1Bn+8J+nxv8uVFdDvqnzvp1lm3Lsn0RXS7AnWDPGE9RohtdwOOH/LQwtNCxu8+4Pgh1yeR67vGh9ODiuganzN2c19y4IoHXUS3IHB8kXfSuxPvjyGK6DZM5l1EtwfzPUaj4x4Eec/9QNwxjm+GPshxpRjb+5P5y9gTLSNawDYBGgNdxPwakcHckwD3O0I2RXsCJ7JewAkWaDcKqQviIElWRFdCkOzFPUgWJJrF32W+alOXCPd7QoJkD2CQfAAYJIF2o94DrwC5J1EfSL5URFdidimhiG5vZOCUqigJRXT7ZChKRhHdvkTnoVhPTf2iYGqiMBazkNWPID3qn0wzJfd3pmSqsWhCMBYfRqkNLBWyeTEAGDuAulZLidLaAcn0RXSbEMV2v+8aiNN1RIvoDgTHU/cZlEwo8KBk/HsHA42BCvfgoB1B0Hsjel21Ca/ELOJFdIc4+hsael11SJjrqkMjcF2VWTS9eF11CFCuoWBDociSBhNkScOI6Bo6KCB1PRyYcVHo2uhkOIGuH2S+1W92UikY0McCrqZ1JMD9CXPcLYg2R5Yzx20w9ybAvULIphDQHxXQxtVy4HXilUJWH0YA50Kg/amVzE+/uHM0+mjfMGCe85CQq8kjk/nHg3SfTwaBjlwR3VEOgX44lECPCkOgH45iAj0KKNfDYEOhCNijmAfsR5gTtCbOvSK0blYJIGjdCHCvZo67DRFBWyOAoPUhwP2VEIIG9EcFtHG1BkjQ1gohaI8Ck2Og/am1zH3Yne/RPvyYEFI1OplnPFiTQaqQpCpiRXTHOKRqbCipGhOGVI2NYlI1BijXWLChUJCqMcxJ1eMCSFVngolqowBSdR8B7m+Z425PRKo2CSBVfQlwbxZCqoD+qIA2rjYBSdUWIaTqCWByDLQ/tUUAqRpD4MNPCiFV45J5xgPusd+cPBpBYDc7mOM2O7AjCXDvFBJnxwP9BahrtZO53ZiNoEcJ7GY3c9xmcW00Ae4fhfjLBKC/AHWtfmRuN4bjP0FgN/uY4zZ50zgC3D8J8ZeJQH8B6lr9JGDtpQuB3RxkjvteorWXQ0L85SmgvwB1rZDjF66IrslD3WK5E4I+Twz6/FTy5UV0n9Y/T9LtGd2eTaYvovscUDfIE9YrhNj288DxQx5a+ErI+L0AHD/k+iRyfdf4cIWgIrrG54zdvJAcuOJBF9FtAhxf5J30F4n3xxBFdAcn8y6iO5n5HqPR8WSCvOclIO4YxzdDH+S4UoztS8n8ZZyClhEtYNsAjYH+wvwakcE8hQD3r0I2RacAJ7KpwAkWaDcKqQviIElWRFdCkJzKPUg2IZrFjzFftelHhPu4kCA5GRgkXwYGSaDdqOPgFSD3JOrLyZeK6ErMLiUU0X0FGTilKkpCEd1XMxQlo4juNKLzUKynpulRMDVRGItZyJpOkB7NSKaZkmc4UzLVWAwjGIvfo9QGTgrZvHgNGDuAulYnidLa15Lpi+gOI4rtft/1Ok7XES2i+zo4nrrPG8mEAr+RjH/vTKAxUOGeGbQjCHpvRK+rDuOVmEW8iO4sR3+zQ6+rzgpzXXV2BK6rMoumF6+rzgLKNRtsKBRZ0kyCLGkOEV1DBwWkrt8EZlwUujY6eZNA128x3+o3O6kUDOiMgKtpTxPg/oM57pFEmyNnmeM2mF8hwP2nkE0hoD8qoI2rs8DrxOeErD7MBc6FQPtT55iffnHnaPTRvjnAPGeekKvJ85P5x4N0n08GgY5cEd0FDoFeGEqgF4Qh0AujmEAvAMq1EGwoFAF7AfOA/TZzgjbMuVeE1k2gLH/czxPgzsQc92gigpaZOW6D+VUC3DFg3O6DJmhAf1RAG1fBduNXF1mIdIFOjhcBk2Og/akszH3Yne/RPvyOEFK1OJlnPEDG/gxSFbkiukscUvVuKKlaEoZUvRvFpGoJUK53wYZCQaqWMCdV7wkgVc8QTFQ5BZCqFwhwX80c9zgiUpVLAKmaRoD7GiGkCuiPCmjjKheQVOUWQqreBybHQPtTuQWQqiUEPvyBEFL1YTLPeMA99puTR3MJ7CaeOW6zAzufAHeCkDi7FOgvQF2rBOZ2YzaCFhHYTTJz3GZxbTEB7hQh/rIM6C9AXasU5nZjOP77BHZTgDlukzd9SIC7oBB/+QjoL0Bdq4IC1l6eJbCbNOa4nyJaeyksxF8+BvoLUNcKOX7hiuiaPNQtlrss6PNHQZ8/Tr68iO4n+ufluq3QbWUyfRHdT4G6QZ6w/lPISebPgOOHPLQQIyQ2fA4cP+T6JHJ91/hwxaAiusbnjN18nhy44kEX0R0GHF/knfQviPfHEEV0ZybzLqL7JfM9RqPjLwnynlVA3DGOb4Y+yHGlGNtVyfxlXI2WES1guwCNgRYryzu4GcyrCXBfJ2RTdDVwIlsDnGCBdqOQuiAOkmRFdCUEyTXcg+Qwolm8JPNVm+lEuEsJCZJfAoPkV8AgCbQbVQq8AuSeRP0q+VIRXYnZpYQiumuRgVOqoiQU0f06Q1EyiuiuIzoPxXpqWh8FUxOFsZiFrPUE6dGGZJopeYMzJVONxRyCsSgTpTZQVsjmxTfA2AHUtSpLlNZ+k0xfRHcOUWz3+66NOF1HtIjuRnA8dZ9vkwkF/jYZ/95NQGOgwr0paEcQ9N6IXledwysxi3gR3c2O/raEXlfdnHzlddUtEbiuyiyaXryuuhko1xawoVBkSZsIsqStRHQNHRSQut4GzLgodG10so1A198x3+pvF6BhQOkCrqZ9QoBbMcc9n2hzpAJz3AbzWgLcNwjZFAL6owLauKoAvE5cUcjqw3bgXAi0P1WR+ekXd45GH+3bCsxzvhdyNXlHMv94kO7zySDQkSuiu9Mh0LtCCfTOMAR6VxQT6J1AuXaBDYUiYO9kHrB/YE7Q5jj3itC6uUkAQfuMAHc15rgXExG06gII2tcEuGsIIWhAf1RAG1fVgQStphCCthuYHAPtT9Vk7sPufI/24R+FkKo9yTzjQfUMUoUkVRErorvXIVX7QknV3jCkal8Uk6q9QLn2gQ2FglTtZU6qfhJAqlYQTFT1BJCqzwlw12eO+0MiUtVAAKlaR4D7FiGkCuiPCmjjqgGQVDUUQqr2A5NjoP2phgJI1V4CHz4ghFQdTOYZD7jHfnPyaDuB3TRjjtvswO4gwN1cSJw9BPQXoK5Vc+Z2YzaCdhPYTSvmuM3i2h4C3LcJ8ZfDQH8B6lrdxtxuDMffT2A3bZjjNnnTQQLcbYX4y89AfwHqWrUVsPayksBu7mSO+2OitZe7hPjLL0B/AepaIccvXBFdk4e6xXIPB33+OejzL8mXF9H9Vf98RLejuh1Lpi+iexyoG+QJ6xuE2PYJ4PghDy3UEDJ+vwHHD7k+iVzfNT5cOaiIrvE5Yze/JQeueNBFdOcAxxd5J/134v0xRBHdTcm8i+ieZL7HaHR8kiDvOQXEHeP4ZuiDHFeKsT2VzF/G02gZ0QLeEaAx0LuZXyMymE8T4L5HyKboaeBEdgY4wQLtRiF1QRwkyYroSgiSZ7gHyTlEs3gn5qs264lwdxYSJE8Cg+QfwCAJtBvVGbwC5J5E/SP5UhFdidmlhCK6Z5GBU6qiJBTR/TNDUTKK6J4jOg/Femr6KwqmJgpjMQtZfxGkR+eTaabk886UTDUWWwnGoluU2sB9QjYv/gbGDqCu1X1Eae3fyfRFdLcSxXa/7/oHp+uIFtH9BxxP3edCMqHAF5Lx7w2k4IyBCreRMYB9b0Svq27llZhFvIhuJkd/mVMCl19NNf8Qel3V/Ke0EKHQ11WZRdOL11UzAZ0xcwrWUCiypEAKPkuKScEFiWAbRAcFpK6zpAAnBAJdG51kIdD1VWBdU+ykUjCg+wVcTfuVAHdP5rh3EG2O9GKO22A+S4D7ASGbQkB/VEAbV72A14l7C1l9yAqcC4H2p3ozP/3iztHoo30xwDwnW4oMG8yewj8epPt8Mgh05Iro5nAIdM5QAp0jDIHOGcUEOgcw2ORMwRoKRcDOwTxgX82coG117hWhdTNQAEE7QYB7EHPce4gI2mABBO1PAtxDhBA0oD8qoI2rwUCCNlQIQcsFTI6B9qeGMvdhd75H+/A1QkhV7hSe8WBwBqlCkqqIFdHN45CqvKGkKk8YUpU3iklVHiAhyJuCNRQKUpWHOanKJ4BUHSVINkcKIFW/EeAexRz3QSJS9bAAUnWOAPcjQkgV0B8V0MbVw0BS9agQUhULTI6B9qceFUCq8hCQqjghpCo+hWc84B77zcmjrAR28wRz3GYHNjsB7ieFxNkEoL8Ada2eZG43ZiMoF4HdTGCO2yyu5SbAPVGIvyQC/QWoazWRud0Yjh9LYDeTmOM2eVM8Ae5nhPhLEtBfgLpWzwhYezlGwMWfZ477F6K1lxeE+Esy0F+AulbI8QtXRNfkoW6x3MSgz0lBn5NTLi+im6J/TtUtv24FUuiL6BYE6gZ5wvoBIbZdCDh+yEMLQ4SM37XA8UOuTyLXd40PVw0qomt8ztjNtSmBKx50Ed2twHv+yDvpacT7Y4giuoEU3kV0CzPfYzQ6LkzAE4oAccc4vhn6IMeVYmyLpPCXsShaRrSAdwZoDPQl5teIDOaiBLinCNkULQo86FEMmMAA7UYhdUEcJMmK6EoIksW4B0mTQVIEyVeYr9r8RYT7VSFBsjAwSF4HDJJAu1GvgleA3JOo16VcKqIrMbuUUES3ODJwSlWUhCK6JTIUJaOIbkmi81Csp6ZSUTA1URiLWcgqRZAelU6hmZJLO1My1VjEEIzFjCi1gdeEbF5cD4wdQF2r14jS2utT6IvoxhDFdr/vKoPTdUSL6JYBx1P3KZtCKHDZFPx7ywGNgQp3uaAdQdB7I3pdNYZXYhbxIrrlHf2lh15XLR/mump6BK6rMoumF6+rlgfKlQ42FIosqRxBlqSI6Bo6KCB1XQGYcVHo2uikAoGub2C+1W92UikY0EwBV9NSCHDPYo47O9HRjtnMcRvMxQlwzxGyKQT0RwW0cTUbeJ34TSGrDxWBcyHQ/tSbzE+/uHM0+mifAuY5lYRcTa6cwj8epPt8Mgh05IroVnEIdNVQAl0lDIGuGsUEugpQrqpgQ6EI2FWYB+wbmRO0GOdeEVo3CwUQtEIEuN9mjjs3EUFbJICglSDA/Y4Qggb0RwW0cbUISNAWCyFoNwGTY6D9qcXMfdid79E+XE0IqaqewjMeLMogVUhSFbEiujUcUlUzlFTVCEOqakYxqaoBlKsm2FAoSFUN5qSqlgBSlZ9govpQAKm6lgD3Uua444lI1TIBpKokAe6PhJAqoD8qoI2rZUBS9bEQUlUbmBwD7U99LIBU1SDw4ZuFkKo6KTzjAffYb04eVSSwm8+Y4zY7sJUJcH8uJM7WBfoLUNfqc+Z2YzaCbiKwm1XMcZvFteoEuFcL8Zd6QH8B6lqtZm43/3J8ArtZyxy3yZvqEOD+Woi/1Af6C1DX6msBay8FCOxmA3PcyURrL98I8ZcGQH8B6lohxy9cEV2Th7rFcusFfa4f9LlByuVFdG/RPzfUrZFujVPoi+g2AeoGecJ6jhDbbgocP+ShhXeEjN+twPFDrk8i13eND98UVETX+Jyxm1tTAlc86CK6McDxRd5Jb0a8P4YoolsuhXcR3ebM9xiNjpsT5D0tgLhjHN8MfZDjSjG2LVL4y9gSLSNawLsCNAa6ifk1IoO5JQHuzUI2RVsCJ7JWwAkWaDcKqQviIElWRFdCkGzFPUjGEM3i25iv2pQiwv2dkCDZHBgkbwMGSaDdqO/AK0DuSdTbUi4V0ZWYXUoootsaGTilKkpCEd3bMxQlo4huG6LzUKynprZRMDVRGItZyGpLkB61S6GZkts5UzLVWCiCsdgRpTawU8jmxR3A2AHUtdpJlNbekUJfRFcRxXa/77oTp+uIFtG9ExxP3eeuFEKB70rBv7c90BiocLcP2hEEvTei11UVr8Qs4kV0Ozj6uzv0umqHMNdV747AdVVm0fTiddUOQLnuBhsKRZbUniBLuoeIrqGDAlLX9wIzLgpdG53cS6Drjsy3+s1OKgUD2i3gatotBLh/ZI67MtHmyB7muA3m1gS49wrZFAL6owLauNoDvE68T8jqQyfgXAi0P7WP+ekXd45GH+27B5jndBZyNblLCv94kO7zySDQkSui29Uh0N1CCXTXMAS6WxQT6K5AubqBDYUiYHdlHrDvY07QlHOvCK2bwwIIWlMC3D8zx12diKD9IoCg3U6A+1chBA3ojwpo4+oXIEE7IoSgdQcmx0D7U0eY+7A736N9uIcQUnV/Cs948EsGqUKSqogV0e3pkKpeoaSqZxhS1SuKSVVPoFy9wIZCQap6MidVDwggVY0IJqrfBZCqWwlwn2SOuw4RqTolgFS1IcB9WgipAvqjAtq4OgUkVWeEkKrewOQYaH/qjABS1ZPAh/sIIVV9U3jGA+6x35w86kRgN+eZ4zY7sF0IcP8tJM72A/oLUNfqb+Z2YzaCuhPYTaAcb9xmce1+AtyZysnwl/7Ik6k4zCoTc7sxHL83gd1kYY7b5E19CXBfJcRfBgD9BahrdRVzuzFrL40J7CY7c9wNiNZecgjxl4FAfwHqWiHHL1wRXZOHusVy+wd9HhD0eWDK5UV0B+mfB+s2RLehKfRFdIcBdYM8Yb1XCNcYDhw/5KGFX4WM34PA8UOuTyLXd40PVw8qomt8ztjNgymBKx50EV0FHF/knfQRxPtjiCK67VN4F9F9iPkeo9HxQwR5z0gg7hjHN0Mf5LhSjO3IFP4yjkLLCK+rEKAx0FzleAc3g3kUAe5riAgJelN0FHAiexg4wQLtRiF1QRwkyYroSgiSD3MPkopoFs/LfNWmLRHufEKC5EPAIPkIMEgC7UblA68AuSdRH0m5VERXYnYpoYjuo8jAKVVREoroPpahKBlFdEcTnYdiPTWNiYKpicJYzELWGIL0aGwKzZQ81pmSqcbiHoKxiI9SG0gQsrH5ODB2AHWtEojS2sdT6Ivo3kMU2/2+6wmcriNaRPcJcDx1nydTCAV+MgX/3nFAY6DCPS5oRxD03oheV72HV2IW8SK64x39TQi9rjo+zHXVCRG4rsosml68rjoeKNcEsKFQZEnjCLKkiUR0DR0UkLp+CnlUmUDXRidPEej6aeZb/WYnlYIBJTNnQAbzIALcKcxxdyHaHElljttgfpQAd34hm0JAf1RAG1fBduNXFwWErD5MAs6FQPtTBZiffnHnaPTRvonAPOcZIVeTn03hHw/SfT4ZBDpyRXSfcwj086EE+rkwBPr5KCbQzwHleh5sKBQB+znmAfsF5gTtHudeEVo3RQQQtOEEuIsyx30/EUErJoCgPUaA+zohBA3ojwpo46oYkKAVF0LQXgQmx0D7U8WZ+7A736N9eLIQUvVSCs94UCyDVCFJVcSK6E5xSNXUUFI1JQypmhrFpGoKUK6pYEOhIFVTmJOqlwWQqiEEE1UZAaTqQQLcZZnj7ktEqsoJIFWjCXCXF0KqgP6ogDauygFJVboQUvUKMDkG2p9KF0CqphD48KtCSNW0FJ7xgHvsNyePJhHYTWXmuM0O7LMEuKsIibPTgf4C1LWqwtxuzEbQiwR2cxNz3GZx7SUC3NWE+MsMoL8Ada2qMbcbw/FfIbCbmsxxm7xpGgHuWkL85TWgvwB1rWoJWHsZSmA3dZjjHki09lJXiL+8DvQXoK4VcvzCFdE1eahbLHdG0OfXgj6/nnJ5Ed039M8zdZul2+wU+iK6c4C6QZ6wzi/Ett8Ejh/y0MJ1QsbvLeD4Idcnkeu7xodrBhXRNT5n7OatlMAVD7qI7j3A8UXeSZ9LvD+GKKI7LoV3Ed15zPcYjY7nEeQ984G4YxzfDH2Q40oxtvNT+Mu4AC0jWsAOARoDbcD8GpHBvIAA9y1CNkUXACeyhcAJFmg3CqkL4iBJVkRXQpBcyD1I3kM0izdmvmozhgh3EyFBch4wSL4NDJJAu1FNwCtA7knUt1MuFdGVmF1KKKK7CBk4pSpKQhHddzIUJaOI7mKi81Csp6YlUTA1URiLWchaQpAevZtCMyW/60zJVGMxkWAsmkWpDTQXsnnxHjB2AHWtmhOlte+l0BfRnUgU2/2+632criNaRPd9cDx1nw9SCAX+IAX/3g+BxkCF+8OgHUHQeyN6XXUir8Qs4kV0lzr6WxZ6XXVpmOuqyyJwXZVZNL14XXUpUK5lYEOhyJI+JMiSPiKia+iggNT1x8CMi0LXRicfE+j6E+Zb/WYnlYIBtRJwNe0NAty3Mcf9LNHmSGvmuA3mRQS4bxeyKQT0RwW0cdUaeJ24jZDVh+XAuRBof6oN89Mv7hyNPtr3ETDPWSHkavLKFP7xIN3nk0GgI1dE91OHQH8WSqA/DUOgP4tiAv0pUK7PwIZCEbA/ZR6wP2dO0CY694rQumkvgKC9SYC7A3PcLxERtLsFELR3CHDfI4SgAf1RAW1c3Q0kaPcKIWhfAJNjoP2pe5n7sDvfo334SyGkalUKz3hwdwapQpKqiBXRXe2QqjWhpGp1GFK1JopJ1WqgXGvAhkJBqlYzJ1VfCSBVswgmqm4CSNVbBLjvY457GhGp6i6AVC0mwN1DCKkC+qMC2rjqDiRV9wshVWuByTHQ/tT9AkjVagIf/loIqVqXwjMecI/95uTRcgK76csct9mBXUmAu5+QOLse6C9AXat+zO3GbAR9QWA3A5njNotrqwhwDxLiLxuA/gLUtRrE3G4Mx19LYDdDmeM2edM6AtzDhPjLN0B/AepaDROw9jKbwG5GMMf9OtHay0NC/GUj0F+AulbI8QtXRNfkoW6x3A1Bn78J+rwx5fIiut/qnzfptlm3LSn0RXS3AnWDPGF9uxDb3gYcP+ShhXuEjN93wPFDrk8i13eND9cOKqJrfM7YzXcpgSsedBHdicDxRd5J3068P4YoovthCu8iut8z32M0Ov6eIO/ZAcQd4/hm6IMcV4qx3ZHCX8adaBnRAt4doDHQh5lfIzKYdxLgfkTIpuhO4ES2CzjBAu1GIXVBHCTJiuhKCJK7uAfJiUSz+GjmqzZLiHCPERIkvwcGyR+AQRJoN2oMeAXIPYn6Q8qlIroSs0sJRXR3IwOnVEVJKKL7Y4aiZBTR3UN0Hor11LQ3CqYmCmMxC1l7CdKjfSk0U/I+Z0qmGouPCMbiiSi1gSeFbF78BIwdQF2rJ4nS2p9S6IvofkQU2/2+az9O1xEtorsfHE/d50AKocAHUvDvPQg0BircB4N2BEHvjeh11Y94JWYRL6J7yNHf4dDrqofCXFc9HIHrqsyi6cXrqoeAch0GGwpFlnSQIEv6mYiuoYMCUte/ADMuCl0bnfxCoOtfmW/1m51UCgY0QcDVtG8JcE9kjnsl0ebIU8xxG8y7CXA/LWRTCOiPCmjj6ingdeJJQlYfjgDnQqD9qUnMT7+4czT6aN/PwDznqJCrycdS+MeDdJ9PBoGOXBHd4w6BPhFKoI+HIdAnophAHwfKdQJsKBQB+zjzgP0bc4L2kXOvCK2bFwUQtG0EuCczx72KiKC9JICg/UiAe4oQggb0RwW0cfUSkKBNFULQfgcmx0D7U1OZ+7A736N9+KQQUnUqhWc8eCmDVCFJVcSK6J52SNWZUFJ1OgypOhPFpOo0UK4zYEOhIFWnmZOqPwSQqs0EE9UMAaTqOwLcrzHHvY6IVL0ugFTtIcD9hhBSBfRHBbRx9TqQVM0UQqrOApNjoP2pmQJI1WkCH/5TCKk6l8IzHnCP/ebk0RECu5nLHLfZgT1GgHuekDj7F9BfgLpW85jbjdkI+p3AbhYyx20W104R4H5biL+cB/oLUNfqbeZ2Yzj+WQK7Wcwct8mbzhHgXiLEX/4G+gtQ12qJgLWXLQR28z5z3BuJ1l4+EOIv/wD9BahrhRy/cEV0TR7qFss9H/T576DP/6RcXkT3gtnoSNX/plvmVPoiujGpuPFEnrB+WohtZwGOH/LQwhQh43cVcPyQ65PI9V3jw3WCiuganzN2Y7AH/g//Tvf3XPaLIdP9PQp5Jz1rKu2cjSiiezCFdxHdbMRjmO7vUUbHRka0brIDccc4vhn6IMeVYmyzp/KXMQdaRrSA9wRoDHQZ82tEBnMOAtwfCdkUDTZMv5hzAhMYoN0opC6IgyRZEV0JQTIn9yBpMkiKILmc+arNXiLcK4QEyWzAIHk1MEgC7UatAK8AuSdRDd4052eJ2aWEIrq5kIFTqqIkFNG9JkNRMoro5iZIl/59OE9NeaJgaqIwFrOQlYcgPcqbSjMl53WmZKqx+Jlgg++zKLWBz4VsXuQDxg6grtXnRGltviAfohpT5CWcPMB5Ihan64gW0Y0Fx1P3iUslFDguFf/eeKAxUOGOD9oRBL03otdVqZw33e6JeBHdBEd/iamBy6+mJqReeV01MZX+uiqzaHrxumoC0BkTwYZCkSXFE2RJSUR0DR0UkLpOBmZcFLo2Okkm0HUK861+s5NKwYBWCbiadoEA92rmuI8RbY6sYY7bYM5FgPsrIZtCQH9UQBtXa4DXidcKWX1IBc6FQPtTa5mffnHnaPTRviRgnpM/VYYNFkjlHw/SfT4ZBDpyRXQLOgS6UCiBLhiGQBeKYgJdEBhsCoENhSJgF2QesK9lTtB+du8VgXWzUQBBy0KA+1vmuE8REbRNAgjaNQS4NwshaEB/VEAbV5uABG2LEIKWBkyOgfantjD3YXe+R/twYSGkqkgqz3iwKYNUIUlVxIroFnVIVbFQUlU0DKkqFsWkqiiQEBQDGwoFqSrKnFRdJ4BUZSKYqHYIIFVXEeDeyRz3OSJStUsAqcpNgPsHIaQK6I8KaONqF5BU7RZCqooDk2Og/andAkhVUQIfLiGEVJVM5RkPuMd+c/IolcBu9jPHbXZgCxDgPiAkzpYC+gtQ1+oAc7sxG0FpBHZzmDlus7hWhAD3z0L8pTTQX4C6Vj8ztxvD8YsT2M0R5rhN3lSSAPdRIf5yPdBfgLpWRwWsvWQmsJsTzHH/Q7T28psQfykD9BegrhVy/MIV0TV5qFsst3TQ5+uDPpdJvbyIbln9czndyuuWnkpfRFcBdYM8Yf2VENuuABw/5KGFzULG7wbg+CHXJ5Hru8aH6wUV0TU+Z+zmhtTAFQ+6iO7PwCK6yDvpFYn3xxBFdONTeRfRrcR8j9HouBJB3lMZiDvG8c3QBzmuFGNbOZW/jFXQMqIFvDdAY6CnmF8jMpirEOA+LWRTtApwIqsKTGCAdqOQuiAOkmRFdCUEyarcg6TJICmC5FnmqzZ5iLKXP4UEyUrAIHkjMEgC7Ub9CV4Bck+i3ph6qYiuxOxSQhHdm5CBU6qiJBTRrZahKBlFdKsTnYdiPTXViIKpicJYzEJWDYL0qGYqzZRc05mSqcYiiWAszkepDfwtZPOiFjB2AHWt/iZKa2ul0hfRTSKK7X7fVRun64gW0a0Njqfuc3MqocA3p+LfWwdoDFS46wTtCILeG9Hrqkm8ErOIF9Gt6+ivXuh11bphrqvWi8B1VWbR9OJ11bpAueqBDYUiS6pDkCXVJ6Jr6KCA1HUDYMZFoWujkwYEur6F+Vb/vQEaBhQozxu3wVyWAHcm5rgLEG2OZGaO22C+iQB3THmaWI5eeQP6owLauAq2G7+6yEKkCzRTbgicC4H2p7IQ+zAib2pAcLSvPjDPaSTkanLjVP7xIN3nk0GgI1dEt4lDoJuGEugmYQh00ygm0E2AcjUFGwpFwG7CPGDfypygJTn3itC6ySmAoFUgwH01c9xFiAhaLgEErRoB7muEEDSgPyqgjatcQIKWWwhBawZMjoH2p3Iz92F3vkf7cHMhpKpFKs94kCuDVCFJVcSK6LZ0SFWrUFLVMgypahXFpKolUK5WYEOhIFUtmZOq2wSQqvIEE1W8AFJ1AwHuBOa4SxKRqkQBpKo6Ae4kIaQK6I8KaOMqEUiqkoWQqtbA5BhofypZAKlqSeDDtwshVW1SecYD7rHfnDxqSGA3hZjjNjuwjQlwXyskzrYF+gtQ1+pa5nZjNoKaEdhNEea4zeJaCwLcRYX4SzugvwB1rYoytxvD8VsT2E1x5rhN3tSGAHcJIf5yB9BfgLpWJQSsvaQT2E1p5rjLEK29XC/EX+4E+gtQ1wo5fuGK6Jo81C2W2y7o8x1Bn+9MvbyI7l365/a6ddDt7lT6Irr3IG+lAHUTI8S27wWOH/LQwjVCxq8jcPyQ65PI9V3jww2CiuganzN20zE1cMWDLqKbBBxf5J30TsT7Y4giunVSeRfR7cx8j9HouDNB3tMFiDvG8c3QBzmuFGPbJZW/jF3RMqIF7BigMdByzK8RGcxdCXCXF7Ip2hU4kXUDTrBAu1FIXRAHSbIiuhKCZDfuQTKJaBavwHzVpgYR7huEBMnOwCB5HzBIAu1G3QBeAXJPot6XeqmIrsTsUkIR3e7IwClVURKK6PbIUJSMIrr3E52HYj019YyCqYnCWMxCVk+C9KhXKs2U3MuZkqnGoj7BWFSOUhuoImTz4gFg7ADqWlUhSmsfSKUvolufKLb7fVdvnK4jWkS3Nzieuk+fVEKB+6Ti39sXaAxUuPsG7QiC3hvR66r1eSVmES+i28/RX//Q66r9wlxX7R+B66rMounF66r9gHL1BxsKRZbUlyBLGkBE19BBAanrgcjjSgS6NjoZSKDrQcy3+jsGaBjQTQKupt1FgLsac9yNiTZHqjPHbTB3J8BdQ8imENAfFdDGVXXgdeKaQlYfBiOP9gF1UZP56Rd3jkYf7RsAzHOGCLmaPDSVfzxI9/lkEOjIFdEd5hDo4aEEelgYAj08ign0MKBcw8GGQhGwhzEP2A8yJ2j1nXtFaN3UE0DQ7iXAXZ857hZEBK2BAILWgwD3LUIIGtAfFdDGVQMgQWsohKCNACbHQPtTDZn7sDvfo334ISGkamQqz3jQIINUIUlVxIrojnJI1cOhpGpUGFL1cBSTqlFAuR4GGwoFqRrFnFQ9IoBUdSCYqJoJIFUdCXA3Z467DRGpaiGAVN1PgLulEFIF9EcFtHHVAkiqWgkhVY8Ck2Og/alWAkjVKAIffkwIqRqdyjMecI/95uTRYAK7accct9mBHUqA+w4hcXYM0F+AulZ3MLcbsxE0gsBu2jPHbRbXRhLg7iDEX8YC/QWoa9WBud0Yjv8ogd3cyxy3yZtGE+DuKMRfHgf6C1DXqqOAtZe7CeymC3PcdxKtvXQV4i9PAP0FqGuFHL9wRXRNHuoWyx0b9PnxoM9PpF5eRPdJ/fM43cbrNiGVvojuRKBukCesawix7aeA44c8tHCLkPF7Gjh+yPVJ5Pqu8eGGQUV0jc8Zu3k6NXDFgy6iWx84vsg76ZOI98cQRXT7pvIuovsM8z1Go+NnCPKeZ4G4YxzfDH2Q40oxts+m8pfxObSMaAE7BWgMtDvza0QG83MEuHsI2RR9DjiRPQ+cYIF2o5C6IA6SZEV0JQTJ57kHyfpEs3gv5qs2PYlwPyAkSD4DDJIvAIMk0G7UA+AVIPck6gupl4roSswuJRTRfREZOKUqSkIR3ckZipJRRPclovNQrKemKVEwNVEYi1nImkKQHk1NpZmSpzpTMtVYDCAYi75RagP9hGxevAyMHUBdq35Eae3LqfRFdAcQxXa/73oFp+uIFtF9BRxP3efVVEKBX03Fv3ca0BiocE8L2hEEvTei11UH8ErMIl5Ed7qjvxmh11Wnh7muOiMC11WZRdOL11WnA+WaATYUiixpGkGW9BoRXUMHBaSuXwdmXBS6Njp5nUDXbzDf6jc7qRQMaKCAq2lPEuAexBz3UKLNkcHMcRvMLxLgHiJkUwjojwpo42ow8DrxUCGrDzOBcyHQ/tRQ5qdf3Dk6NM9J9/eo14B5ziwhV5Nnp/KPB+k+nwwCHbkiunMcAv1mKIGeE4ZAvxnFBHoOUK43wYZCEbDnMA/YbzEnaAOce0Vo3YwUQNCeIsA9ijnukUQE7WEBBG0yAe5HhBA0oD8qoI2rh4EE7VEhBG0uMDkG2p96lLkPu/M92ofnCSFV81N5xoOHM0gVklRFrIjuAodULQwlVQvCkKqFUUyqFgDlWgg2FApStYA5qXpbAKkaTzBRPSGAVD1NgPtJ5rhHE5GqcQJI1UsEuMcLIVVAf1RAG1fjgKRqghBStQiYHAPtT00QQKoWEPjwO0JI1eJUnvGAe+w3J49mUhTxYI7b7MDOJsD9nJA4uwToL0Bdq+eY243ZCJpLYDcvMsdtFtfmE+CeLMRf3gX6C1DXajJzuzEcfxHFPULmuE3etJgA98tC/OU9oL8Ada1eFrD2MoHAbqYxx/0E0drLdCH+8j7QX4C6VsjxC1dE1+ShbrHcd4M+vxf0+f3Uy4vofqB//lC3pbotS6UvovsRUDfIE9ZDhNj2x8DxQx5aeETI+H0CHD/k+iRyfdf4cOOgIrrG54zdfJIauOJBF9EdABxf5J305cT7Y4giutNSeRfRXcF8j9HoeAVB3rMSiDvG8c3QBzmuFGO7MpW/jJ+iZUQL2DlAY6CvM79GZDB/SnHVV8im6KfAiewz4AQLtBuF1AVxkCQroishSH7GPUgOIJrFZzNftZlChHuOkCC5AhgkPwcGSaDdqDngFSD3JOrnqZeK6ErMLiUU0f0CGTilKkpCEd0vMxQlo4juKqLzUKynptVRMDVRGItZyFpNkB6tSaWZktc4UzLVWLxGMBZzo9QG5gnZvPgKGDuAulbziNLar1Lpi+i+RhTb/b5rLU7XES2iuxYcT93n61RCgb9Oxb93HdAYqHCvC9oRBL03otdVX+OVmEW8iO56R38bQq+rrg9zXXVDBK6rMoumF6+rrgfKtQFsKBRZ0jqCLOkbIrqGDgpIXW8EZlwUujY62Uig62+Zb/WbnVQKBrRQwNW0Dwhwv80c92yizZFFzHEbzF9QXEUUsikE9EcFtHG1CHideLGQ1YdNwLkQaH9qMfPTL+4cjT7a9w0wz9ks5GryllT+8SDd55NBoCNXRHerQ6C3hRLorWEI9LYoJtBbgXJtAxsKRcDeyjxgf8ecoL3m3CtC6+ZDAQTtYwLcS5njnk9E0JYJIGhfEuD+SAhBA/qjAtq4WgYkaB8LIWjbgckx0P7Ux8x92J3v0T78vRBStSOVZzxYlkGqkKQqYkV0dzqkalcoqdoZhlTtimJStRMo1y6woVCQqp3MSdUPAkjVUoKJ6jMBpOoTAtyfM8e9mIhUfSGAVK0iwP2lEFIF9EcFtHH1BZBUrRJCqnYDk2Og/alVAkjVTgIf/lEIqdqTyjMecI/95uTRJgK7Wccct9mB3UKAe72QOLsX6C9AXav1zO3GbARtJ7Cbjcxxm8W1HRQnH4X4yz6gvwB1rb5lbjeG4+8msJstzHGbvGkPAe6tQvzlJ6C/AHWttgpYe1lGYDfbmeN+n2jt5Xsh/rIf6C9AXSvk+IUromvyULdY7r6gzz8Ffd6fenkR3QP654O6HdLtcCp9Ed2fgbpBnrB+R4ht/wIcP+ShhY+EjN+vwPFDrk8i13eNDzcNKqJrfM7Yza+pgSsedBHd14Dji7yTfoR4fwxRRHddKu8iukeZ7zEaHR8lyHuOAXHHOL4Z+iDHlWJsj6Xyl/E4Wka0gOYdFAa6i/k1IoP5OAHuH4Rsih4HTmQngBMs0G4UUhfEQZKsiK6EIHmCe5B8jWgW38N81WY1Ee69QoLkUWCQ/A0YJIF2o/aCV4Dck6i/pV4qoisxu5RQRPd3ZOCUqigJRXRPZihKRhHdU0TnoVhPTaejYGqiMBazkHWaID06k0ozJZ9xpmSqsfiGYCz2R6kNHBCyefEHMHYAda0OEKW1f6TSF9H9hii2+33XWZyuI1pE9yw4nrrPn6mEAv+Zin/vOaAxUOE+F7QjCHpvRK+rfsMrMYt4Ed2/HP2dD72u+leY66rnI3BdlVk0vXhd9S+gXOfBhkKRJZ0jyJL+JqJr6KCA1PU/wIyLQtdGJ/8Q6PoC861+8w4KBnRYwNW0AwS4f2aOewvR5sgvzHEbzL8T4P5VyKYQ0B8V0MbVL8DrxEeErD4E8uPGD2h/6gjz0y/uHI0+2vc3MM/JlF+GDWbOzz8epPt8Mgh05IroxuT/788s5s9gsmz+IZRAm/+UFiJUtBDomPw4ubLkxxoKRcA2eDkH7Kvy00566f6ef4nKQYLE9XcBBO0XAtwnmePeQUTQTgkgaCcJcJ8WQtCA/qiANq5OAQnaGSEELSswOQbanzrD3Ifd+R7tw9mEkKrs+XnGg1MZpApJqiJWRDeHQ6pyhpKqHGFIVc4oJlU5gKQqZ36soVCQqhzMSdXVAkjVIYJk87wAUvUrxY42c9x7iEjVPwJI1SmKXW0hpArojwpo4+ofIKkKpMtIjnMBk2Og/Sn0+FGQqhwEpOoaIaQqd36e8YB77DcnjwIEdpOVub+YHdjMFIsQQuJsHqC/AHWtsjG3G7MRlJXAbnIyx20W17IT4L5aiL/kBfoLUNfqauZ2Yzh+LgK7yc0ct8mbchPgziPEX/IB/QWoa5WHud184xQGRdtNLHPc+4nWXuKE+Ess0F+AulbI8QtXRNfkoW6x3LxBn/MFfY7Nf3kR3Tj9c7xuCbol5qcvopsE1A3yhPWvQjbKk4Hjhzy0cFrI+KUAxw+5Polc3zU+3CyoiK7xOWM3KfkDVzzoIrrfAG+dIe+kpxLvjyGK6J5jXkQ3P/M9RqPj/AQ8oQAQd4zjm6EPclwpxrZAfv4yFkTLiBawS4DGQBPTeQc3g7kgAe4kIkKC3hQtCDwsUwiYwADtRiF1QRwkyYroSgiShbgHSZNBUgTJVOarNqeJcOcXEiTzA4PktcAgCbQblR+8AuSeRL02/6UiuhKzSwlFdNOQgVOqoiQU0S2coSgZRXSLEJ2HYj01FY2CqYnCWMxCVlGC9KhYfpopuZgzJVONxd8EG3yFotQGrhWysXkdMHYAda2uJUprr3N8KJI34JCXcgCxPuJ1OYs7m0QlQm/AFQ9zA65EBG7AUSnE7w244sCkoATYUCh2p4rn5707VZL57pRZ/KeYtIsIuE0RRzBpF2WOOzPRbmQx5rgN5jQC3NcJWccE+qMC2rgKthu/uiguJGEuBUyYgfanigsgWsUJfLi0kBtw1+fn78PpPp8MUhW5Wo1lHFJVNpRUlQlDqspGMakqAyRVZZnXajRBtgxzUlWOOakydhxPMFGVEUCqkglwl2WOOzsRqSongFQVJsBdXgipAvqjAtq4KgckVelCSFV5YHIMtD+VLoBUlSHw4XQhpErl5xkPymWQKiSpilitxgoOqbohlFRVCEOqbohiUlUBSKpuYF6r0QTZCsxJVUUBpCqBYKKqLIBUpRDgrsIcd24iUlVVAKkqQoD7RiGkCuiPCmjjqiqQVN0khFRVAibHQPtTNwkgVRUo5iohpKpKfp7xgHvsN6eFShHYTW3muM0O7PUEuG8WEmerAv0FqGt1M3O7MRtB5Qnsph5z3GZxTRHgri/EX24E+gtQ16o+c7sxHL8Sgd00ZI7b5E1VCHA3EuIvNwH9Bahr1Yi53Zi1l0QCu2nKHHcs0drLrUL8pRrQX4C6VsjxC1ersWpQTcYbgz7fFPS5Wkitxur65xq61dStllOr0Ww4ZQ2E33AKQG31hm5Gploh70b7Q4kA3m7h3FGAjKUEyFhagIzXC5CxjAAZywqQsZwAGcsLkDFdgIxKgIwVBMh4gwAZKwqQsZIAGSsLkLGKABmrCpDxRgEy3iRAxmoCZKwuQMYaAmSsKUDGWgJkrC1AxpsFyFhHgIx1BchYT4CM9QXI2ECAjLcIkLGhABkbCZCxsQAZmwiQsakAGW8VIGMzATI2FyBjCwEythQgYysBMt4mQMbWAmS8XYCMbQTI2FaAjO0EyHiHABnvFCDjXQJkbC9Axg4CZLxbgIz3CJDxXgEydhQgYycBMnYWIGNAgIxdCGUkuTSIEtYcwMwW+O8QZuiDljtTAD/IwY/fd6tO3Sp0VZUU5RhUJ7qYiZbzXB4Zch7Ow9um3Cdz8Dudyi835xcSJIIr0dQm/sUwtZlXP6lD9At36hCP6835A3CjjlYbqEtkA3X/HzbgV2YT0M0YoMc1eKLwfZuWaFzrhameFQMeh7rIm6bAilf1ica0PmG8cm0V7QMNiMaiQQTmRPRY3EI0FrcE/dKr7IFI3Oz6j1hkCnk353zqMiFDr9aNyXzpCp35Uvez+SWz7ucXYi6/WtdQD3oj3Rrr1iT/pb93n8xg40EObNcAwcASYAayV9UtQpjT/T3qPuD4HcwjA3N3IOZDQjD3AGJGM3L0xBenY+fjV+Pf2yKdP+4j1+Df2zJCV/XT/T3qfuC7gLpWVOOHjhE9gTbTUMgqaK+ADDkfECJnbyFy9gnwjuUmjv+VB4+7b0BGLOoHHMvzQnY6+gdkyDlAiJwDhcg5SIicg4XIOUSInEOFyDlMiJzDhcj5oBA5RwiR8yEhco4UIucoIXI+LETOR4TI+agQOR8TIudoIXKOESLnWCFyPi5EzieEyPmkEDnHCZFzvBA5JwiRc6IQOZ8SIufTRHJyPi8wKUKY0/096hng+CXFyLDHZwMy5HxOiJzPC5HzBSFyvihEzslC5HxJiJxThMg5VYicLwuR8xUhcr4qRM5pQuScLkTOGULkfE2InK8LkfMNIXLOFCLnLCFyzhYi5xwhcr4pRM63hMg5V4ic84TIOV+InAuEyLlQiJxvC5FzkRA53xEi52Ihci4RIue7QuR8T4ic7wuR8wMhcn4oRM6lQuRcJkTOj4TI+bEQOT8RIudyIXKuECLnSiFyfipEzs+EyPm5EDm/ECLnl0LkXCVEztVC5FwjRM6vhMi5VoicXwuRc50QOdcLkXODEDm/ESLnRiFyfitEzk1C5NwsRM4tQuTcKkTObULk/E6InNuFyPm9EDl3CJFzpxA5dwmR8wchcu4WIuePQuTcI0TOvULk3CdEzp+EyLlfiJwHhMh5UIich4TIeViInD8LkfMXIXL+KkTOI0LkPCpEzmNC5DwuRM4TQuT8TYicvwuR86QQOU8JkfO0EDnPCJHzDyFynhUi559C5DwnRM6/hMh5XoicfwuR8x8hcl4QIqd5oQQ5MwmRM7MQOWOEyJlFiJxXCZEzqxA5swmRM7sQOXMIkTOnEDmvFiJnLiFyXiNEztxC5MwjRM68QuTMJ0TOWCFyxgmRM16InAlC5EwUImeSEDmThciZIkTOVCFy5hciZwEhchYUImchIXJeK0TONCFyFhYiZxEhchYVImcxIXJeJ0TO4kLkLCFEzpJC5CwlRM7SQuS8XoicZYTIWVaInOWEyFleiJzpQuRUQuSsIETOG4TIWVGInJWEyFlZiJxVhMhZVYicNwqR8yYhclYTImd1IXLWECJnTSFy1hIiZ20hct4sRM46QuSsK0TOekLkrC9EzgZC5LxFiJwNhcjZSIicjYXI2USInE2FyHmrEDmbCZGzOVjOUPkQv48+b1487hZE+skMxg+UU7WMQsytIoQ53d+jbsvkf/y6VEzvorp2Sjf+QoEZ7YOtmceew3loYs/tzHEbzNXz43G3EYD7ZgLcbYXEoHaZcGPZIL8MzHcAMd+SX0bcvVNIbnqXEDnbC5GzgxA57xYi5z1C5LxXiJwdhcjZSYicnYXI2UWInF2FyNlNiJz3CZGzuxA5ewiR834hcvYUImcvIXI+IETO3kLk7CNEzr5C5OwnRM7+QuQcIETOgULkHCREzsFC5BwiRM6hQuQcJkTO4ULkfFCInCOEyPmQEDlHCpFzlBA5HxYi5yNC5HxUiJyPCZFztBA5xwiRc6wQOR8XIucTQuR8Uoic44TIOV6InBOEyDlRiJxPCZHzaSFyThIi5zNC5HxWiJzPCZHzeSFyviBEzheFyDlZiJwvCZFzihA5pwqR82Uhcr4iRM5Xhcg5TYic04XIOUOInK8JkfN1IXK+IUTOmULknCVEztlC5JwjRM43hcj5lhA55wqRc54QOecLkXOBEDkXCpHzbSFyLhIi5ztC5FwsRM4lQuR8V4ic7wmR830hcn4gRM4Phci5VIicy4TI+ZEQOT8WIucnQuRcLkTOFULkXClEzk+FyPmZEDk/FyLnF0Lk/FKInKuEyLlaiJxrhMj5lRA51wqR82shcq4TIud6IXJuECLnN0Lk3ChEzm+FyLlJiJybhci5RYicW4XIuU2InN8JkXO7EDm/FyLnDiFy7hQi5y4hcv4gRM7dQuT8UYice4TIuVeInPuEyPmTEDn3C5HzgBA5DwqR85AQOQ8LkfNnIXL+IkTOX4XIeUSInEeFyHlMiJzHhch5QoicvwmR83chcp4UIucpIXKeFiLnGSFy/iFEzrNC5PxTiJznhMj5lxA5zwuR828hcv4jRM4LQuQMZJYhZyYhcmYWImeMEDmzCJHzKiI5M4PlzBokp9/f6fhHHhmYswEx1xfyeyyzC/GbHELkzClEzquFyJlLiJzXCJEztxA58wiRM68QOfMJkTNWiJxxQuSMFyJnghA5E4XImSREzmQhcqYIkTNViJz5hchZQIicBYXIWUiInNcKkTNNiJyFhchZRIicRYXIWUyInNcJkbO4EDlLCJGzpBA5SwmRs7QQOa8XImcZIXKWFSJnOSFylhciZ7oQOZUQOSsIkfMGIXJWFCJnJSFyVhYiZxUhclYVIueNQuS8SYic1YTIWV2InDWEyFlTiJy1hMhZW4icNwuRs44QOesKkbOeEDnrC5GzgRA5bxEiZ0MhcjYSImdjIXI2ESJnUyFy3ipEzmZC5GwuRM4WQuRsKUTOVkLkvE2InK2FyHm7EDnbCJGzrRA52wmR8w4hct4pRM67hMjZXoicHYTIebcQOe8RIue9QuTsKETOTkLk7AyWM1Q+v/efr9LvePxq/Htbp/PHfeQa/HtvT6exyxiwXXbB2aUC6lpRjV9m8Ph1zYyzmQt5ePtKtgBNjGjHPEYY3BQx4g4hMaIbMEYAda3uYG432Yn8pb0A3BT+0kGIv9wH9BegrlUH5naTg8hf7hWAm8JfOgrxl+5AfwHqWnVkbjc5ifyliwDcFP7SVYi/9AD6C1DXqitzu7mayF+6C8BN4S89hPjL/UB/AepaUY1fZvD49QSucWTOy9tXtJuQxIhezGOEwU0RIx4QEiN6AWMEUNfqASEx4gFgjLiKeYzQy7QkMaIv8xhhcFPEiH5CYkRvYIwA6lr1ExIj+gBjRHbmMSJfgCZGDGQeIwxuihgxSEiM6AuMEUBdq0FCYkQ/YIy4mnmMiAvQxIihzGOEwU0RI4YJiRH9gTECqGs1jLndxBP5ywgBuCn85SEh/jIA6C9AXauHmNtNApG/PCwAN4W/PCLEXwYC/QWoa/UIc7tJJPKX0QJwU/jLGCH+MgjoL0BdqzFCONtgIGfLzZyzJQdoYsQTzGOEwU0RI54UEiOGAGMEUNfqSeZ2k0LkLxME4Kbwl4lC/GUo0F+AulYTmdtNKpG/TBKAm8JfnhHiL8OA/gLUtXqGud3kJ/KX5wXgpvCXF4T4y3CgvwB1rV5gbjcFiPzlJQG4KfxlihB/eRDoL0BdqynM7aYgkb+8IgA3hb+8KsRfRgD9Bahr9SpzuylE5C8zBOCm8JfXhPjLQ0B/AepaUY1fZvD4jQSuof+aRwbmUUDMx4RgfhiI+TchmB8BYj7FvEZK0QDN/DeT+fxncFPMf7OEzH+PAuc/oK7VLOZ2U4zIX94UgJvCX94S4i+PAf0FqGv1FnO7uY7IX+YLwE3hLwuE+MtooL8Ada2Q42d0m8V5V9egsTR/n9kZU/PvpmZjVt1MXTZTa8rUzzE1QUydg1y6mbvMuXUz9xXz6mbuJMXqZu4dmLPU5nyoOfOWpJs512L26s3+o9lTMevEZu3L8PlrdUvTrbBuRXQzOY6J28YWi+tWQreSupXSrbRu1+tWRreyupXTrbwZE92UbhWMrepWUbdKulXWrYpuVXW7UbebdKumW3XdauhWU7dajv3crFsd3erqVk+3+ro10O0W3Rrq1ki3xro10a2pbrfq1ky35rq10K2lbq10u0231rrdrlsb3drq1k63O3S7U7e7dGuvWwfd7tbtHt3u1a2jbp1066xblyC9pGW+pKtuut2nW3fdeuh2v249deul2wO69datj259deunW3/dBug2ULdBug3WbYhuQ3Ubpttw3R7UbYRuD+k2UrdRuj2s2yO6ParbY7qN1m2MbmN1e1y3J3R7Urdxuo3XbYJuE3V7SrendZuk2zO6Pavbc7o9r9sLur2o22TdXtJtim5TdXtZt1d0e1W3abpN122Gbq/p9rpub+g2U7dZus3WbY5ub+r2lm5zdZun23zdFui2ULe3dVuk2zu6LdZtiW7v6vaebu/r9oFuH+q2VLdlun2k28e6faLbct1W6LZSt091+0y3z3X7QrcvdVul22rd1uj2lW5rdftat3W6rddtg27f6LZRt29126TbZt226LZVt226fafbdt2+122Hbjt126XbD7rt1u1H3fbotle3fbr9pNt+3Q7odlC3Q7od1u1n3X7R7Vfdjuh2VLdjuh3X7YRuv+n2u24ndTul22ndzuj2h25ndftTt3O6/aXbed3+1u0f3S7oZoJBJt0y6xajWxbdrtItq27ZdMuuWw7dcup2tW65dLtGt9y65dEtr275dIvVLU63eN0SdEvULUm3ZN1SdEvVLb9uBXQrqFsh3a7VLU23wroV0a2obsV0u0634rqV0K2kbqV0K63b9bqV0a2sbuV0K6+bCXJKtwq63aBbRd0q6VZZtyq6VdXtRt1u0q2abtV1q6FbTd1q6VZbt5t1q6NbXd3q6VZftwa63aJbQ90a6dZYtya6NdXtVt2a6dZctxa6tdStlW636dZat9t1a6NbW93a6XaHbnfqdpdu7XXroNvdut2j2726ddStk26ddeuiW1fduul2n27ddeuh2/269dStl24P6NZbtz669dWtn279dRug20DdBuk2WLchug3VbZhuw3V7ULcRuj2k20jdRun2sG6P6Paobo/pNlq3MbqN1e1x3Z7Q7Undxuk2XrcJuk3U7SndntZtkm7P6Pasbs/p9rxuL+j2om6TdXtJtym6TdXtZd1e0e1V3abpNl23Gbq9ptvrur2h20zdZuk2W7c5ur2p21u6zdVtnm7zdVug20Ld3tZtkW7v6LZYtyW6vavbe7q9r9sHun2o21Ldlun2kW4f6/aJbst1W6HbSt0+1e0z3T7X7QvdvtRtlW6rdVuj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","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_notes_internal","get_collapse_hints","pack_arguments_oracle_wrapper","call_private_function_internal","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000f518d98e"},{"kind":"string","value":"EntitlementNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_start","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_end","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"destination","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"spot","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000f518d98e"},{"kind":"string","value":"EntitlementNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_start","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_end","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"destination","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"spot","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b3dd3286"},{"kind":"string","value":"ParticipantNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrow"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseRegistry"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"escrow_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"managed_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"participants","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"participant_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::DKIMKeyHashRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_parameters"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow_contract_id","type":{"kind":"field"}},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseRegistry::constructor_abi"}]}},"file_map":{"103":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"104":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"105":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"108":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"112":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"114":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"},"116":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"117":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"118":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"119":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"120":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"122":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"123":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"127":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"128":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n"},"129":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"130":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"131":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"134":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"143":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"144":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"147":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"157":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::{NoteInterface, NullifiableNote}}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = unsafe {\n            get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier)\n        };\n\n        // 2) First we prove that the tree leaf in the witness is present in the nullifier tree. This is expected to be\n        // the leaf that contains the nullifier we're proving inclusion for.\n        assert(\n            self.state.partial.nullifier_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n\n        // 3) Then we simply check that the value in the leaf is the expected one. Note that we don't need to perform\n        // any checks on the rest of the values in the leaf preimage (the next index or next nullifier), since all we\n        // care about is showing that the tree contains an entry with the expected nullifier.\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, let N: u32>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N> + NullifiableNote;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, let N: u32>(\n        self,\n        note: Note,\n        context: &mut PrivateContext\n    ) where Note: NoteInterface<N> + NullifiableNote {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"158":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"161":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"166":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"167":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LTE, rhs), \"Expected lhs to not be less than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n    }\n}\n"},"168":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"172":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"173":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"175":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"178":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"180":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"187":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"194":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"196":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"197":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"203":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"218":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"258":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"271":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"274":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"282":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"286":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"287":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"289":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"324":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"325":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"326":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"327":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"333":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_escrow/src/types/entitlement_note.nr","source":"use aztec::{\n    encrypted_logs::encrypted_event_emission::encode_and_encrypt_event,\n    keys::getters::get_public_keys,\n    macros::notes::note_custom_interface,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::{random::random, notes::check_nullifier_exists, debug_log::debug_log_format},\n    prelude::{NoteHeader, NullifiableNote, NoteInterface, PrivateContext},\n    protocol_types::{\n        address::AztecAddress,\n        traits::{Serialize, Deserialize},\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::{poseidon2_hash_with_separator, poseidon2_hash_bytes},\n        utils::field::field_from_bytes,\n    },\n};\nuse compressed_string::CompressedString;\nuse generators::GENERATORS;\nuse std::{embedded_curve_ops::multi_scalar_mul, hash::from_field_unsafe};\nuse crate::ZImburseEscrow::{SpotReimbursementClaimed, RecurringReimbursementClaimed, EntitlementNullified};\n\nglobal ENTITLEMENT_NOTE_LENGTH: u32 = 8;\n\n#[note_custom_interface]\npub struct EntitlementNote {\n    // the user that is allowed to use this entitlement\n    recipient: AztecAddress,\n    // the type of receipt verifier that this entitlement can be used for\n    verifier_id: u8,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // date range that verified emails can be used for\n    date_start: u32,\n    date_end: u32,\n    // destination if used for travel\n    destination: Field,\n    // whether or not the entitlement is a spot entitlement\n    spot: bool,\n    // blinding factor & nullifier secret for the note\n    randomness: Field,\n}\n\nimpl NoteInterface<ENTITLEMENT_NOTE_LENGTH> for EntitlementNote {\n\n    fn serialize_content(self) -> [Field; ENTITLEMENT_NOTE_LENGTH] {\n\n        [\n            self.recipient.to_field(),\n            self.verifier_id as Field,\n            self.max_value.to_integer(),\n            self.date_start as Field,\n            self.date_end as Field,\n            self.destination,\n            self.spot as Field,\n            self.randomness\n        ]\n    }\n\n    fn deserialize_content(serialized_note: [Field; ENTITLEMENT_NOTE_LENGTH]) -> EntitlementNote {\n        EntitlementNote {\n            recipient: AztecAddress::from_field(serialized_note[0]),\n            verifier_id: serialized_note[1] as u8,\n            max_value: U128::from_integer(serialized_note[2]),\n            date_start: serialized_note[3] as u32,\n            date_end: serialized_note[4] as u32,\n            destination: serialized_note[5],\n            spot: serialized_note[6] as bool,\n            randomness: serialized_note[7],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn to_be_bytes(self, storage_slot: Field) -> [u8; ENTITLEMENT_NOTE_LENGTH * 32 + 64] {\n        let serialized_note = self.serialize_content();\n        let mut buffer: [u8; ENTITLEMENT_NOTE_LENGTH * 32 + 64] = [0; ENTITLEMENT_NOTE_LENGTH * 32 + 64];\n        let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n        let note_type_id_bytes: [u8; 32] = EntitlementNote::get_note_type_id().to_be_bytes();\n        for i in 0..32 {\n            buffer[i] = storage_slot_bytes[i];\n            buffer[32 + i] = note_type_id_bytes[i];\n        }\n        for i in 0..serialized_note.len() {\n            let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n            for j in 0..32 {\n                buffer[64 + i * 32 + j] = bytes[j];\n            }\n        }\n        buffer\n    }\n\n    fn get_note_type_id() -> Field {\n        comptime\n        {\n            let bytes = \"EntitlementNote\".as_bytes();\n            let hash = poseidon2_hash_bytes(bytes);\n            let hash_bytes = hash.to_be_bytes::<4>();\n            field_from_bytes(hash_bytes, true)\n        }\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn compute_note_hash(self) -> Field {\n        let serialized = self.serialize_content();\n        std::embedded_curve_ops::multi_scalar_mul(\n            [GENERATORS[0], GENERATORS[1], GENERATORS[2], GENERATORS[3], GENERATORS[4], GENERATORS[5], GENERATORS[6], GENERATORS[7]],\n            [\n            from_field_unsafe(serialized[0]),\n            from_field_unsafe(serialized[1]),\n            from_field_unsafe(serialized[2]),\n            from_field_unsafe(serialized[3]),\n            from_field_unsafe(serialized[4]),\n            from_field_unsafe(serialized[5]),\n            from_field_unsafe(serialized[6]),\n            from_field_unsafe(serialized[7]),\n            // do not use slot so it can be used for the nullifier\n        ]).x\n    }\n}\n\nimpl NullifiableNote for EntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = self.randomness; // use as nullifier_secret so that admin and recipient can nullify\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = self.randomness; // use as nullifier secret so that admin and recipient can nullify\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for EntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient)\n            & (self.max_value == other.max_value)\n            & (self.randomness == other.randomness)\n            & (self.verifier_id == other.verifier_id)\n    }\n}\nimpl EntitlementNote {\n    \n    /**\n     * EntitlementNote constructor for recurring entitlements\n     *\n     * @param recipient - the address of the recipient of the entitlement (NOT THE OWNER OF THE NOTE)\n     * @param verifier_id - the type of verifier that the entitlement can be used for\n     * @param max_value - the maximum value that can be withdrawn from the escrow using the entitlement\n     * @param randomness - blinding factor for the note (inputted since must be same between the two notes)\n     */\n    fn new_spot(\n        recipient: AztecAddress,\n        verifier_id: u8,\n        max_value: U128,\n        date_start: u32,\n        date_end: u32,\n        destination: str<31>,\n        randomness: Field\n    ) -> Self {\n        let destination_compressed: CompressedString<1, 31> = CompressedString::from_string(destination);\n        Self {\n            recipient,\n            verifier_id,\n            max_value,\n            date_start,\n            date_end,\n            destination: destination_compressed.value[0],\n            spot: true,\n            randomness,\n            header: NoteHeader::empty()\n        }\n    }\n\n    /**\n     * EntitlementNote constructor for recurring entitlements\n     * @todo: allow destinations on recurring?\n     *\n     * @param recipient - the address of the recipient of the entitlement (NOT THE OWNER OF THE NOTE)\n     * @param verifier_id - the type of verifier that the entitlement can be used for\n     * @param max_value - the maximum value that can be withdrawn from the escrow using the entitlement\n     * @param randomness - blinding factor for the note (inputted since must be same between the two notes)\n     */\n    fn new_recurring(\n        recipient: AztecAddress,\n        verifier_id: u8,\n        max_value: U128,\n        randomness: Field\n    ) -> Self {\n        Self {\n            recipient,\n            verifier_id,\n            max_value,\n            date_start: 0,\n            date_end: 0,\n            destination: 0,\n            spot: false,\n            randomness,\n            header: NoteHeader::empty()\n        }\n    }\n\n    /**\n     * Determine if the entitlement is a spot entitlement by checking if date_start is set\n     *\n     * @return true if entitlement can only be used once, and false if it is recurring\n     */\n    fn is_spot(self) -> bool {\n        self.date_start != 0\n    }\n\n    /**\n     * Return the destination of the entitlement\n     *\n     * @return the utf8 bytes of the destination\n     */\n    fn destination(self) -> [u8; 31] {\n        CompressedString::<1, 31> { value: [self.destination] }.to_bytes()\n    } \n\n    /**\n     * Constrain a given timestamp to be within the date range of the entitlement\n     *\n     * @param timestamp - the timestamp to check\n     */\n    fn check_date_range(self, timestamp: u32) {\n        debug_log_format(\"\\n\\n\\n\\nChecking date range:\\nStart: {0}\\nTimestamp:{1}\\nEnd:{2}\", [\n            self.date_start as Field,\n            timestamp as Field,\n            self.date_end as Field\n        ]);\n        assert(\n            (timestamp >= self.date_start) & (timestamp <= self.date_end),\n            \"Receipt is out of entitlement date range\"\n        );\n    }\n\n    /**\n     * Determine the amount to reimburse for a given claimed amount (lesser of the two)\n     *\n     * @param claimed - the amount claimed by the user\n     * @return the amount to reimburse\n     */\n    fn amount_to_reimburse(self, claimed: U128) -> Field {\n        if self.max_value >= claimed {\n            claimed.to_field()\n        } else {\n            self.max_value.to_field()\n        }\n    }\n\n    /**\n     * Derives the nullifier for recurring notes\n     * @dev recurring notes are nullified for a scope (month) without destroying the ntoe\n     *      prove nullifier non-inclusion to use\n     *\n     * @param timestamp - the timestamp (month/ year) from the email receipt verifier\n     * @return - the month nullifier for the note\n     */\n    fn derive_recurring_nullifier(self, timestamp: Field) -> Field {\n        poseidon2_hash_with_separator(\n            [self.randomness, timestamp],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    /**\n     * This check is not safe but simulates desired behavior of check_nullifier and can be used in txe\n     */\n    fn check_nullifier_txe(self, context: &mut PrivateContext) -> Field {\n        let nullifier = self.compute_nullifier_without_context();\n        let nullifier_exists = unsafe { check_nullifier_exists(nullifier) };\n        assert(!nullifier_exists, \"Entitlement has already been claimed\");\n        nullifier\n    }\n\n    /**\n     * Ensure that the note nullifier has not been used before\n     *\n     * @param context - the private context to use for the oracle call\n     * @return - the nullifier for the note\n     */\n    fn check_nullifier(self, context: &mut PrivateContext) -> Field {\n        let nullifier = self.compute_nullifier_without_context();\n        context.historical_header.prove_nullifier_non_inclusion(nullifier);\n        nullifier\n    }\n\n    /**\n     * Assert that a recurring nullifier has not been used before and emits it\n     * @dev uses oracle check_nullifier_exists which is technically unsafe but will be caught by kernel\n     *\n     * @param context - the private context to use for the oracle call\n     * @param timestamp - the timestamp to check\n     */\n    fn check_and_emit_recurring_nullifier(self, context: &mut PrivateContext, timestamp: Field) {\n        // derive recurring nullifier for the month\n        let recurring_nullifier = self.derive_recurring_nullifier(timestamp);\n        let recurring_nullifier_exists = unsafe { check_nullifier_exists(recurring_nullifier) };\n        // check the nullifeir has not been emitted via oracle call (rely on kernel to actually constrain)\n        assert(!recurring_nullifier_exists, \"Entitlement has already been claimed for this month\");\n        // emit the nullifier\n        context.push_nullifier(recurring_nullifier);\n    }\n\n    /**\n     * Emit an event to the admin notifying them of a recurring claim\n     *\n     * @param context - the private execution context\n     * @param admin - the address of the admin of the escrow to notify\n     * @param amount - the amount claimed\n     * @param timestamp - the timestamp of the claim\n     */\n    fn emit_recurring_claim(self, context: &mut PrivateContext, admin: AztecAddress, amount: Field, timestamp: Field) {\n        RecurringReimbursementClaimed {\n            claimant: self.recipient,\n            amount,\n            verifier_id: self.verifier_id,\n            timestamp\n        }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(self.recipient).ovpk_m,\n                get_public_keys(admin).ivpk_m,\n                admin\n            )\n        );\n    }\n\n    /**\n     * Emit an event to the admin notifying them of a spot claim\n     *\n     * @param context - the private execution context\n     * @param admin - the address of the admin of the escrow to notify\n     * @param amount - the amount claimed\n     */\n    fn emit_spot_claim(self, context: &mut PrivateContext, admin: AztecAddress, amount: Field) {\n        SpotReimbursementClaimed {\n            claimant: self.recipient,\n            amount,\n            verifier_id: self.verifier_id,\n        }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(self.recipient).ovpk_m,\n                get_public_keys(admin).ivpk_m,\n                admin\n            )\n        );\n    }\n\n    /**\n     * Admin or recipient notifies counterparty that note has been nullified\n     * @dev admin emits event when revoking entitlement, recipient emits when claiming spot\n     * @dev clients must scan for these events to prune notes that are no longer valid\n     *\n     * @param context - the private execution context\n     * @param to - the address of the counterparty to notify\n     * @param from - the address of the notifier who nullified the entitlement note\n     */\n    fn emit_nullified(self, context: &mut PrivateContext, to: AztecAddress, from: AztecAddress) {\n        EntitlementNullified { randomness: self.randomness }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(from).ovpk_m,\n                get_public_keys(to).ivpk_m,\n                to\n            )\n        );\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"344":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"345":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"444":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod test;\nmod types;\nmod verifiers;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\n#[aztec]\ncontract ZImburseRegistry {\n    use dep::aztec::{\n        prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map},\n        macros::{storage::storage, events::event, functions::{private, public, view, initializer}},\n        note::{\n        note_viewer_options::NoteViewerOptions, note_getter_options::NoteGetterOptions,\n        note_getter::{get_notes, view_notes}, constants::MAX_NOTES_PER_PAGE\n    },\n        protocol_types::{\n        contract_instance::ContractInstance, address::partial_address::PartialAddress,\n        contract_class_id::ContractClassId, abis::function_selector::FunctionSelector, traits::Serialize\n    },\n        oracle::{get_contract_instance::get_contract_instance, header::get_header_at_oracle},\n        keys::getters::get_public_keys, utils::comparison::Comparator,\n        encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note_unconstrained, encode_and_encrypt_note},\n        unencrypted_logs::unencrypted_event_emission::emit\n    };\n    use std::{meta::derive, collections::bounded_vec::BoundedVec};\n    use dep::address_note::address_note::AddressNote;\n    use dep::z_imburse_escrow::ZImburseEscrow;\n    use crate::{\n        types::{registry_definition::RegistryDefinition, participant_note::{ParticipantNote, NAME_LENGTH}},\n        BULK_KEY_LENGTH\n    };\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyHashRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        definition: SharedImmutable<RegistryDefinition, Context>,\n        escrow_registry: Map<AztecAddress, SharedImmutable<bool, Context>, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n        managed_escrows: PrivateSet<AddressNote, Context>,\n        participants: Map<AztecAddress, PrivateSet<ParticipantNote, Context>, Context>,\n        participant_escrows: PrivateSet<AddressNote, Context>,\n    }\n\n    /**\n     * Initialize the Z-Imburse registry contract\n     *\n     * @param usdc - The address of the USDC token\n     * @param contract_class_id - The class ID of the escrow contract that all escrows must be instances of\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys to add to the registry\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        usdc: AztecAddress,\n        escrow_contract_id: Field,\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // initialize the registry definition\n        let definition = RegistryDefinition::new(context.msg_sender(), usdc, escrow_contract_id);\n        storage.definition.initialize(definition);\n        // add any DKIM key hashes that were passed in at initialization\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(\n                    &mut context,\n                    DKIMKeyHashRegistered { dkim_key_hash: dkim_key_hashes[i], verifier_id: verifier_ids[i] }\n                );\n            }\n        }\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(\n                    &mut context,\n                    DKIMKeyHashRegistered { dkim_key_hash: dkim_key_hashes[i], verifier_id: verifier_ids[i] }\n                );\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(\n            &mut context,\n            DKIMKeyHashRegistered { dkim_key_hash, verifier_id }\n        );\n    }\n\n    /**\n     * Check the authenticity and deployment status of an escrow contract and register it in the Z-Imburse registry\n     * @dev the header will not include the contract address and the contract \n     *\n     * @param escrow_contract - the address of the escrow contract to register\n     */\n    #[private]\n    fn register_escrow(escrow_contract: AztecAddress) {\n        // check the contract class ID by recomputing the contract address\n        let definition = storage.definition.read_private();\n        let contract_instance: ContractInstance = unsafe {\n            get_contract_instance(escrow_contract)\n        };\n        let exected_escrow_address = AztecAddress::compute(\n            contract_instance.public_keys_hash,\n            PartialAddress::compute(\n                ContractClassId::from_field(definition.escrow_contract_id), // constrained here\n                contract_instance.salt,\n                contract_instance.initialization_hash,\n                contract_instance.deployer\n            )\n        );\n        assert(\n            exected_escrow_address == escrow_contract, \"Escrow contract class ID does not match expected class ID\"\n        );\n        // check that the contract has been deployed\n        // annoying that we can't use this in the deploy tx\n        context.historical_header.prove_contract_initialization(escrow_contract);\n\n        // check that the contract has not already been registered\n        let registration_status = storage.escrow_registry.at(escrow_contract).read_private();\n        assert(!registration_status, \"Escrow contract has already been registered\");\n\n        let escrow_params = ZImburseEscrow::at(escrow_contract).get_registration_params().view(&mut context);\n        assert(\n            escrow_params[0] == context.this_address(), \"Escrow contract registry does not match this contract\"\n        );\n        assert(escrow_params[1] == definition.usdc, \"Escrow contract USDC does not match registry USDC\");\n        assert(\n            escrow_params[2] == context.msg_sender(), \"Escrow contract admin does not match sender of message\"\n        );\n\n        // privately add the escrow contract to the list of managed escrows\n        let admin_keys = get_public_keys(context.msg_sender());\n        let mut escrow_note = AddressNote::new(escrow_contract, admin_keys.npk_m.hash());\n\n        // use unconstrained - why would you lie here\n        storage.managed_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                admin_keys.ovpk_m,\n                admin_keys.ivpk_m,\n                context.msg_sender()\n            )\n        );\n\n        // publicly add the escrow contract to the list of participant escrows\n        ZImburseRegistry::at(context.this_address()).set_contract_registered(escrow_contract).enqueue(&mut context);\n    }\n\n    /**\n     * Publicly set the contract registration status\n     *\n     * @param escrow_contract - the address of the escrow contract that has privately been constrained to be valid\n     */\n    #[public]\n    #[internal]\n    fn set_contract_registered(escrow_contract: AztecAddress) {\n        storage.escrow_registry.at(escrow_contract).initialize(true);\n    }\n\n    #[private]\n    fn check_and_register_participant(participant: AztecAddress, participant_name: str<60>, escrow: AztecAddress) -> bool {\n        // todo: switch to check that the sender is an escrow\n        // check that sender is admin\n        let admin = storage.definition.read_private().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        let is_registered = storage.escrow_registry.at(escrow).read_private();\n        assert(is_registered, \"Escrow contract is not registered\");\n        // check if the participant has already been registered\n        let options = NoteGetterOptions::new().select(AddressNote::properties().address, Comparator.EQ, participant).set_limit(1);\n        let participant_exists = storage.participants.at(escrow).get_notes(options).len() == 0;\n        // if the participant has not been registered, enqueue a private call to register the participant\n        // do this instead of if statement here to make adding first time expensive but cheap if already registered\n        let mut added = false;\n        if participant_exists {\n            added = true;\n            ZImburseRegistry::at(context.this_address()).register_participant(participant, participant_name, admin, escrow).call(&mut context);\n        }\n        added\n    }\n\n    #[private]\n    #[internal]\n    fn register_participant(participant: AztecAddress, participant_name: str<60>, admin: AztecAddress, escrow: AztecAddress) {\n        let admin_keys = get_public_keys(admin);\n        let participant_keys = get_public_keys(participant);\n        // add escrow to the participant's set of escrows\n        let mut escrow_note = AddressNote::new(escrow, participant_keys.npk_m.hash());\n        storage.participant_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note(\n                &mut context,\n                admin_keys.ovpk_m,\n                participant_keys.ivpk_m,\n                participant\n            )\n        );\n        // add the participant to the admin set of participants\n        let mut participant_note = ParticipantNote::new(participant, participant_name, admin_keys.npk_m.hash());\n        storage.participants.at(escrow).insert(&mut participant_note).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, admin)\n        );\n    }\n\n    // todo: add ability to remove participant\n    // todo: add ability to remove participant escrows by looking up nullifications\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n\n    /** Get the class ID that all escrow contracts must match */\n    #[public]\n    #[view]\n    fn get_escrow_class_id() -> Field {\n        storage.definition.read_public().escrow_contract_id\n    }\n\n    /** Get the registration status of an escrow contract */\n    #[public]\n    #[view]\n    fn get_escrow_registry_status(escrow_contract: AztecAddress) -> bool {\n        storage.escrow_registry.at(escrow_contract).read_public()\n    }\n\n    /**\n     * Get a page of the list of escrows administrated by a given address (private)\n     *\n     * @param admin - the address of the admin\n     * @param page_index - the index of the page to retrieve\n     * @return managed_escrows - the list of managed escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_managed_escrows(offset: u32) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.managed_escrows.view_notes(options);\n        let mut managed_escrows = BoundedVec::new();\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                managed_escrows.push(notes.get_unchecked(i).address);\n            }\n        }\n        (managed_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of escrows participated in by a given address (private)\n     *\n     * @param admin - the address of the participant\n     * @param page_index - the index of the page to retrieve\n     * @return participant_escrows - the list of enrolled escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_participant_escrows(\n        participant: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participant_escrows.view_notes(options);\n        let mut participant_escrows: BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE> = BoundedVec::new();\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                participant_escrows.push(notes.get_unchecked(i).address);\n            }\n        }\n        (participant_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of of participants in an escrow (private)\n     *\n     * @param admin - the address of the escrow\n     * @param page_index - the index of the page to retrieve\n     * @return participants - the list of participating addresses\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participants(\n        escrow: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<ParticipantNote, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participants.at(escrow).view_notes(options);\n        (notes, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n}\n\n"},"445":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_registry/src/types/participant_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator, traits::{Serialize, Deserialize}\n},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\nuse dep::compressed_string::CompressedString;\n\nglobal NAME_LENGTH: u32 = 60;\nglobal NAME_SERIALIZED_LENGTH: u32 = 2;\n\n#[note]\npub struct ParticipantNote {\n    address: AztecAddress,\n    name: [Field; 2],\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n\nimpl NullifiableNote for ParticipantNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for ParticipantNote {\n    // does not check for participant name\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl ParticipantNote {\n    pub fn new(address: AztecAddress, name: str<NAME_LENGTH>, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        let name_serialized: CompressedString<NAME_SERIALIZED_LENGTH, NAME_LENGTH> = CompressedString::from_string(name);\n        ParticipantNote { address, name: name_serialized.value, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_name(self) -> [u8; NAME_LENGTH] {\n        CompressedString::<NAME_SERIALIZED_LENGTH, NAME_LENGTH> { value: self.name }.to_bytes()\n    }\n}\n"},"446":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_registry/src/types/registry_definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal REGISTRY_DEFINITION_LENGTH: u32 = 3;\n\npub struct RegistryDefinition {\n    admin: AztecAddress,\n    usdc: AztecAddress,\n    escrow_contract_id: Field\n}\n\nimpl Serialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn serialize(self: Self) -> [Field; REGISTRY_DEFINITION_LENGTH] {\n        [self.admin.to_field(), self.usdc.to_field(), self.escrow_contract_id]\n    }\n}\n\nimpl Deserialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn deserialize(fields: [Field; REGISTRY_DEFINITION_LENGTH]) -> Self {\n        RegistryDefinition {\n            admin: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            escrow_contract_id: fields[2]\n        }\n    }\n}\n\nimpl RegistryDefinition {\n    /**\n     * Create a new definition for a Z-Imburse escrow registry contract\n     *\n     * @param admin - The address that can add dkim keys to the registry\n     * @param usdc The address of the USDC token\n     * @param escrow_contract_id The ID of the escrow contract\n     * @return The new escrow registry definition\n     */\n    pub fn new(admin: AztecAddress, usdc: AztecAddress, escrow_contract_id: Field) -> Self {\n        RegistryDefinition { admin, usdc, escrow_contract_id }\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"71":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"75":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"77":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"78":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"80":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"83":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"94":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"98":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"99":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"}}}