{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseRegistry","functions":[{"name":"register_escrow","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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b7redL3petP1putN15uuN11vul4/1ktZN3adLeHZO2qOB2ak+1e63nS96XrT9abrTdebrjddb7pef9ZLWHfVtfngAL4RnSMdx3S96XrT9abrTdebrjddb7redL3petP1putN15uuN11vut50vel60/Wm603Xm643XW+63nS96XqJ666L5/yOEvAiT84XT6brTdebrjddb7redL3petP1putN1+ulXsK6q57zQ08gsF3S9abrTdebrjddb7redL3petP1putN15uuN11vut50ven7nLs46v4v/qiihHeucLQjVX+yKkpi8YpICXW9XHw1bW6+5O93F/DMwOAM/3PcPv1cQ7redL3petP1putN15uuN11vul6f1ktYd9U8d2kA34jOkY5jut50vel60/Wm603Xm643XW+63nS96XrT9abrTdebrjddb7redL3petP1putN15uuN11vut50vel60/Wm603Xm643XW+63nS96XrT9abrTdebrjddb7redL11UG+67nTd6bqT29Rz9DkBfOPin65XZr1cdVN/JzpbCM8cITxzhfDME8IzXwjPAiE86wvh2UAIz4ZCeDYSwrOxEJ5NhPBsKoTnNkJ4NhPCs7kQni2E8GwphGcrITy3FcJzOyE8Wwvhub0QnjsQ8jTfM+jcONoiXW+63nS96XrT9abrTdebrjddb7redL3petP1putN15uuN11vut50vel60/X++/VS1q3WmZsE8E1au6TrTdebrjdd7/9LvZR1K51vEMA3ae2Srjddb7peuTrUPIBv0tolXW+63nS96XrT9abr3Vq9Un7jl5rn3AIZPBcK4cnx+9PmJqDuEs72bSOkHwSF8LSE8AwJ4bmbEJ67C+HZTQhPwrqCmQbP5QU214xN/z8W/r8CcBxgJeB4wAmAEwEnAU4GnAI4FXAaYBXgdMAZgDMBZwHOBpwDOBdwHuB8wAWACwEXAS4GXAK4FHAZ4HLAFYArAVcBrgZcA7gWsBpwHeB6wA2AGwE3AW4GrAHcArgVcBvgdsAdgDsBdwHuBqwF3AO4F3Af4H7AA4AHAesA6wEPAR4GPAJ4FPAY4HHABsATgCcBTwGeBjwDeBbwHGAj4HnAC4AXAS8BXga8AngV8BrgdcAbgDcBbwHeBrwDeBfwHuB9wAeADwEfAT4GfAL4FPAZ4HPAF4AvAV8BvgZ8A/gW8B3ge8APgB8BPwF+BvwC+BXwG+B3wB+APwF/Af4GBOpDzAEZgExAFiAbkAPIBeQB8gEFgPqABoCGgEaAxoAmgKaAbQDNAM0BLQAtAa0A2wK2A7QGbA/YAdAGsCOgLaAQ0A6wE2BnQHtAB0BHQCfALoBdAZ0BXQBdAbsBdgd0AwQB6kvpIUAYUAQoBpQASgERQBlgD8CegO6AvQA9AHsDegL2AfQC9Ab0AfQF9APsC9gP0B8wALA/4ADAQMAgwIGAwYAhgKGAYYDhgBGAgwAHAw4BjASMAowGjAEcChgLGAcYD4gCygEVgBggDkgAJgAmAiYBDgNMBkwBTAVMA0wHzADMBFQCZgFmA+YADgfMBcwDzAcsACwELAIsBiwBHAFYCjgScBRgGeBowDGA5YBjASsAxwFWAo4HnAA4EXAS4GTAKYBTAacBVgFOB5wBOBNwFuBswDmAcwHnAc4HXAC4EHAR4GLAJYBLAZcBLgdcAbgScBXgasA1gGsBqwHXAa4H3AC4EXAT4GbAGsAtgFsBtwFuB9wBuBNwF+BuwFrAPYB7AfcB7gc8AHgQsA6wHvAQ4GHAI4BHAY8BHgdsADwBeBLwFOBpwDOAZwHPATYCnge8AHgR8BLgZcArgFcBrwFeB7wBeBPwFuBtwDuAdwHvAd4HfAD4EPAR4GPAJ4BPAZ8BPgd8AfgS8BXga8A3gG8B3wG+B/wA+BHwE+BnwC+AXwG/AX4H/AH4E/AX4G+AuhFUD5AByARkAbIBOYBcQB4gH1AAqA9oAGgIaARoDGgCaArYBtAM0BzQAtAS0AqwLWA7QGvA9oAdAG0AOwLaAgoB7QA7AXYGtAd0AHQEdALsAtgV0BnQBdAVsBtgd0A3QBCgXvYQAoQBRYBiQAmgFBABlAH2AOwJ6A7YC9ADsDegJ2AfQC9Ab0AfQF9AP8C+gP0A/QEDAPsDDgAMBAwCHAgYDBgCGAoYBhgOGAE4CHAw4BDASMAowGjAGMChgLGAcYDxgCigHFABiAHigARgAmAiYBLgMMBkwBTAVMA0wHTADMBMQCVgFmA2YA7gcMBcwDzAfMACwELAIsBiwBLAEYClgCMBRwGWAY4GHANY3sC+BmhgX8Bk2n/VRUKhw6YuFPIcthWI7TjEthKxHY/YTkBsJyK2kxDbyYjtFMR2KmI7DbGtQmynI7YzENuZiO0sxHY2YjsHsZ2L2M5DbOcjtgsQ24WI7SLEdjFiuwSxXYrYLkNslyO2KxDblYjtKsR2NWK7BrFdi9hWI7brENv1iO0GxHYjYrsJsd2M2NYgtlsQ262I7TbEdjtiuwOx3YnY7kJsdyO2tYjtHsR2L2K7D7Hdj9geQGwPIrZ1iG09YnsIsT2M2B5BbI8itscQ2+OIbQNiewKxPYnYnkJsTyO2ZxDbs4jtOcS2EbE9j9heQGwvIraXENvLiO0VxPYqYnsNsb2O2N5AbG8itrcQ29uI7R3E9i5iew+xvY/YPkBsHyK2jxDbx4jtE8T2KWL7DLF9jti+QGxfIravENvXiO0bxPYtYvsOsX2P2H5AbD8itp8Q28+I7RfE9iti+w2x/Y7Y/kBsfyK2vxDb34hNTdydtnqILQOxZSK2LMSWjdhyEFsuYstDbPmIrQCx1UdsDRBbQ8TWCLE1RmxNEFtTxLYNYmuG2JojthaIrSVia4XYtkVs2yG21ohte8S2A2Jrg9h2RGxtEVshYmuH2HZCbDsjtvaIrQNi64jYOiG2XRDbroitM2Lrgti6IrbdENvuiK0bYgsiNguxhRBbGLEVIbZixFaC2EoRWwSxlSG2PRDbnoitO2LbC7H1QGx7I7aeiG0fxNYLsfVGbH0QW1/E1g+x7YvY9kNs/RHbAMS2P2I7ALENRGyDENuBiG0wYhuC2IYitmGIbThiG4HYDkJsByO2QxDbSMQ2CrGNRmxjENuhiG0sYhuH2MYjtihiK0dsFYgthtjiiC2B2CYgtomIbRJiOwyxTUZsUxDbVMQ2DbFNR2wzENtMxFaJ2GYhttmIbQ5iOxyxzUVs8xDbfMS2ALEtRGyLENtixLYEsR2B2JYitiMR21GIbRliOxqxHYPYliO2YxHbCsR2HGJbidiOR2wnILYTEdtJiO1kxHYKYjsVsZ2G2FYhttMR2xmI7UzEdhZiOxuxnYPYzkVs5yG28xHbBYjtQsR2EWK7GLFdgtguRWyXIbbLEdsViO1KxHYVYrsasV2D2K5FbKsR23WI7XrEdgNiuxGx3YTYbkZsaxDbLYjtVsR2G2K7HbHdgdjuRGx3Iba7EdtaxHYPYrsXsd2H2O5HbA8gtgcR2zrEth6xPYTYHkZsjyC2RxHbY4jtccS2AbE9gdieRGxPIbanEdsziO1ZxPYcYtuI2J5HbC8gthcR20uI7WXE9gpiexWxvYbYXkdsbyC2NxHbW4jtbcT2DmJ7F7G9h9jeR2wfILYPEdtHiO1jxPYJYvsUsX2G2D5HbF8gti8R21eI7WvE9g1i+xaxfYfYvkdsPyC2HxHbT4jtZ8T2C2L7FbH9hth+R2x/ILY/EdtfiO1vxKZu3Dtt9RBbBmLLRGxZiC0bseUgtlzElofY8hFbAWKrj9gaILaGiK0RYmuM2JogtqaIbRvE1gyxNUdsLRBbS8TWCrFti9i2Q2ytEdv2iG0HxNYGse2I2NoitkLE1g6x7YTYdkZs7RFbB8TWEbF1Qmy7ILZdEVtnxNYFsXVFbLshtt0RWzfEFkRsFmILIbYwYitCbMWIrQSxlSK2CGIrQ2x7ILY9EVt3xLYXYuuB2PZGbD0R2z6IrRdi643Y+iC2voitH2LbF7Hth9j6I7YBiG1/xHYAYhuI2AYhtgMR22DENgSxDUVswxDbcMQ2ArEdhNgORmyHILaRiG0UYhuN2MYgtkMR21jENg6xjUdsUcRWjtgqEFsMscURWwKxTUBsExHbJMR2GGKbjNimILapiG0aYpuO2GYgtpmIrRKxzUJssxHbHMR2OGKbi9jmIbb5iG0BYluI2BYhtsWIbQliOwKxLUVsRyK2oxDbMsR2NGI7BrEtt23mZn9fgOwLDscUVNcVDpYUFcVLQ3ErbEWDobLySHGwqLi8JGJFrOJIcSwUCYfjkaJIaVl5WWmwzCoKx61EcVk4YVe2ogHtF+50O6h6C+Gv+gHEhrbdudUjbpflBbQvX9gcOCa+xxbQf6GGmuMKARyPE8BxpQCOxwvgeIIAjicK4HiSAI4nC+B4igCOpwrgeJoAjqsEcDxdAMczBHA8UwDHswRwPFsAx3MEcDxXAMfzBHA8XwDHCwRwvFAAx4sEcLxYAMdLBHC8VADHywRwvFwAxysEcLxSAMerBHC8WgDHawRwvFYAx9UCOF4ngOP1AjjeIIDjjQI43iSA480COK4RwPEWARxvFcDxNgEcbxfA8Q4BHO8UwPEuARzvFsBxrQCO9wjgeK8AjvcJ4Hi/AI4PCOD4oACO6wRwXC+A40MCOD4sgOMjAjg+KoDjYwI4Pi6A4wYBHJ8QwPFJARyfEsDxaQEcnxHA8VkBHJ8TwHGjAI7PC+D4ggCOLwrg+JIAji8L4PiKAI6vCuD4mgCOrwvg+IYAjm8K4PiWAI5vC+D4jgCO7wrg+J4Aju8L4PiBAI4fCuD4kQCOHwvg+IkAjp8K4PiZAI6fC+D4hQCOXwrg+JUAjl8L4PiNAI7fCuD4nQCO3wvg+IMAjj8K4PiTAI4/C+D4iwCOvwrg+JsAjr8L4PiHAI5/CuD4lwCOfwvgqH4nzu8c6wngmCGAY6YAjlkCOGYL4JgjgGOuAI55AjjmC+BYIIBjfQEcGwjg2FAAx0YCODYWwLGJAI5NBXDcRgDHZgI4NhfAsYUAji0FcGwlgOO2AjhuJ4BjawEctxfAcQcBHNsI4LijAI5tBXAsFMCxnQCOOwnguLMAju0FcOwggGNHARw7CeC4iwCOuwrg2FkAxy4COHYVwHE3ARx3F8CxmwCOQQEcLQEcQwI4hgVwLBLAsVgAxxIBHEsFcIwI4FgmgOMeAjjuKYBjdwEc9xLAsYcAjnsL4NhTAMd9BHDsJYBjbwEc+wjg2FcAx34COO4rgON+Ajj2F8BxgACO+wvgeIAAjgMFcBwkgOOBAjgOFsBxiACOQwVwHCaA43ABHEcI4HiQAI4HC+B4iACOIwVwHCWA42gBHMcI4HioAI5jBXAcJ4DjeAEcowI4lgvgWCGAY0wAx7gAjgkBHCcI4DhRAMdJAjgeJoDjZAEcpwjgOFUAx2kCOE4XwHGGAI4zBXCsFMBxlgCOswVwnCOA4+ECOM4VwHGeAI7zBXBcIIDjQgEcFwnguFgAxyUCOB4hgONSARyPFMDxKAEclwngeLQAjscI4LhcAMdjBXBcIYDjcQI4rhTA8XgBHE8QwPFEARxPEsDxZAEcTxHA8VQBHE8TwHGVAI6nC+B4hgCOZwrgeJYAjmcL4HiOAI7nCuB4ngCO5wvgeIEAjhcK4HiRAI4XC+B4iQCOlwrgeJkAjpcL4HiFAI5XCuB4lQCOVwvgeI0AjtcK4LhaAMfrBHC8XgDHGwRwvFEAx5sEcLxZAMc1AjjeIoDjrQI43iaA4+0CON4hgOOdAjjeJYDj3QI4rhXA8R4BHO8VwPE+ARzvF8DxAQEcHxTAcZ0AjusFcHxIAMeHBXB8RADHRwVwfEwAx8cFcNwggOMTAjg+KYDjUwI4Pi2A4zMCOD4rgONzAjhuFMDxeQEcXxDA8UUBHF8SwPFlARxfEcDxVQEcXxPA8XUBHN8QwPFNARzfEsDxbQEc3xHA8V0BHN8TwPF9ARw/EMDxQwEcPxLA8WMBHD8RwPFTARw/E8DxcwEcvxDA8UsBHL8SwPFrARy/EcDxWwEcvxPA8XsBHH8QwPFHARx/EsDxZwEcfxHA8VcBHH8TwPF3ARz/EMDxTwEc/xLA8W8BHAMN/M+xngCOGQI4ZgrgmCWAY7YAjjkCOOYK4JgngGO+AI4FAjjWF8CxgQCODQVwbCSAY2MBHJsI4NhUAMdtBHBsJoBjcwEcWwjg2FIAx1YCOG4rgON2Aji2FsBxewEcdxDAsY0AjjsK4NhWAMdCARzbCeC4kwCOOwvg2F4Axw4COHYUwLGTAI67COC4qwCOnQVw7CKAY1cBHHcTwHF3ARy7CeAYFMDREsAxJIBjWADHIgEciwVwLBHAsVQAx4gAjmUCOO4hgOOeAjh2F8BxLwEcewjguLcAjj0FcNxHAMdeAjj2FsCxjwCOfQVw7CeA474COO4ngGN/ARwHCOC4vwCOBwjgOFAAx0ECOB4ogONgARyHCOA4VADHYQI4DhfAcYQAjgcJ4HiwAI6HCOA4UgDHUQI4jhbAcYwAjocK4DhWAMdxAjiOF8AxKoBjuQCOFQI4xgRwjAvgmBDAcYIAjhMFcJwkgONhAjhOFsBxigCOUwVwnCaA43QBHGcI4DhTAMdKARxnCeA4WwDHOQI4Hi6A41wBHOcJ4DhfAMcFAjguFMBxkQCOiwVwXCKA4xECOC4VwPFIARyPEsBxmQCORwvgeIwAjssZOLK0ZQEDz2xAI0BGoOaNyoF6RqNwNVKnAE8wN28ZxIRXGL0vHCwpKoqXhuJW2IoGQ2XlkeJgUXF5ScSKWMWR4lgoEg7HI0WR0rLystJgmVUUjluJ4rJwwq7suAa0wcq0A6TqLbQ7S2NADtIu1IGsF+ANpNe6KywrGI1EopxtsH+GDGVaIURBswL+7lN6M0VyZQPHSZwC5FU0KBt4F6YGpvaZUFysXYX4nEHoc2chPmcS+txFiM+EImd1rSOfg942azfC9pMy6O4ekMGzmxCeQSE8LSE8Q0J4hoXwLBLCs1gIzxIhPEuF8IwI4VkmhOceQnjuKYRndyE89xLCs4cQnnsL4dlTCM99hPDsJYRnbyE8+wjh2VcIz35CeO4rhOd+Qnj2F8JzgBCe+wvheYAQngOF8BwkhOeBQngOFsJziBCeQ5l4+vle6LA68jnobbOGE7bfgULuF40IyOB5kBCeBwvheYgQniOF8BwlhOdoITzHCOF5qBCeY4XwHCeE53ghPKNCeJYL4VkhhGdMCM+4EJ4JITwnCOE5UQjPSUJ4HiaE52QhPKcI4TlVCM9pQnhOF8JzhhCeM4XwrBTCc5YQnrOF8JwjhOfhQnjOFcJznhCe84XwXCCE50IhPBcJ4blYCM8lQngeIYTnUiE8jxTC8yghPJcJ4Xm0EJ7HCOG5XAjPY4XwXCGE53FCeK4UwvN4ITxPEMLzRCE8TxLC82QhPE8RwvNUITxPE8JzlRCepwvheYYQnmcK4XmWEJ5nC+F5jhCe5wrheZ4QnucL4XmBEJ4XCuF5kRCeFwvheYkQnpcK4XmZEJ6XC+F5hRCeVwrheZUQnlcL4XmNEJ7XCuG5WgjP64TwvF4IzxuE8LxRCM+bhPC8WQjPNUJ43iKE561CeN4mhOftQnjeIYTnnUJ43iWE591CeK4VwvMeITzvFcLzPiE87xfC8wEhPB8UwnMdE88MYp7rjbq8viPpqAIZPj9E6HObAhn98eGADJ6PCOH5qBCejwnh+bgQnhuE8HxCCM8nhfB8SgjPp4XwfEYIz2eF8HxOCM+NQng+L4TnC0J4viiE50tCeL4shOcrQni+KoTna0J4vi6E5xtCeL4phOdbQni+LYTnO0J4viuE53tCeL4vhOcHQnh+KITnR0J4fiyE5ydCeH4qhOdnQnh+LoTnF0J4fimE51dCeH4thOc3Qnh+K4Tnd0J4fi+E5w9CeP4ohOdPQnj+LITnL0J4/iqE529CeP4uhOcfQnj+KYTnX0J4/i2Ep6pQAs96QnhmCOGZKYRnlhCe2UJ45gjhmSuEZ54QnvlCeBYI4VlfCM8GQng2FMKzkRCejYXwbCKEZ1MhPLdh4pnh4On1ez2dCH1uJsTneoQ+N/8PxrmFkBxsWc97+8XCZSErXFrOybOVkPbcth5df+TkuV0d5WTQ22a1JmzPHYR8J3V7Qp8HZ8jweQdCn7cX8j3cNkI0bUchPNsK4VkohGc7ITx3EsJzZyE82wvh2UEIz45CeHYSwnMXITx3FcKzsxCeXYTw7CqE525CeO4uhGc3ITyDQnhaQniGhPAMC+FZJIRnsRCeJUJ4lgrhGRHCs0wIzz3+g/fE9vwP+tz9P+jzXkJysAfB+rsVLS+PFyWKOHnuLaQPZRH63FPIvbp9CO/hrGwgw+dehD6vaCBDK3oL0bQ+Qnj2FcKznxCe+wrhuZ8Qnv2F8BwghOf+QngeIITnQCE8BwnheaAQnoOF8BwihOdQITyHCeE5XAjPEUJ4HiSE58FCeB4ihOdIITxHCeE5WgjPMUJ4HiqE51ghPMcJ4TleCM+oEJ7lQnhWCOEZE8IzLoRnQgjPCUJ4ThTCc5IQnocJ4TlZCM8pQnhOFcJzmhCe04XwnCGE50whPCuF8JwlhOdsITznCOF5uBCec4XwnCeE53whPBcI4blQCM9FQnguFsJziRCeRwjhuVQIzyOF8DxKCM9lQngeLYTnMUJ4LhfC81ghPFcI4XmcEJ4rhfA8XgjPE4TwPFEIz5OE8DxZCM9ThPA8VQjP04TwXCWE5+lCeJ4hhOeZQnieJYTn2UJ4niOE57lCeJ4nhOf5QnheIITnhUJ4XiSE58VCeF4ihOelQnheJoTn5UJ4XiGE55VCeF4lhOfVQnheI4TntUJ4rhbC8zohPK8XwvMGITxvFMLzJiE8bxbCc40QnrcI4XmrEJ63CeF5uxCedwjheacQnncJ4Xm3EJ5rhfC8RwjPe4XwvE8Iz/uF8HxACM8HhfBcJ4TneiE8HxLC82EhPB8RwvNRITwfY+KZ4eDp9b3EHQl9fryOfA5626wN9eja7zgh77J+gtDnY4X4/CShz8cI+d3Zpwh8jidgiyVinLF5mjA2y4XE5hkhY9ezQng+J4TnRiE8nxfC8wUhPF8UwvMlITxfFsLzFSE8XxXC8zUhPF8XwvMNITzfFMLzLSE83xbC8x0hPN8VwvM9ITzfF8LzAyE8PxTC8yMhPD8WwvMTITw/FcLzMyE8PxfC8wshPL8UwvMrITy/FsLzGyE8vxXC8zshPL8XwvMHITx/FMLzJyE8fxbC8xchPH8VwvM3ITx/F8LzDyE8/xTC8y8hPP8WwlM9bCGBZz0hPDOE8MwUwjNLCM9sITxzhPDMFcIzTwjPfCE8C4TwrC+EZwMhPBsK4dlICM/GQng2EcKzqRCe2wjh2UwIz+ZCeLYQwrOlEJ6thPDcVgjP7YTwbC2E5/ZCeO4ghGcbITx3FMKzrRCehUJ4thPCcychPHcWwrO9EJ4dhPDsyMQzw8HT6/dMswl97iTE5xxCn3cR4nMuoc+7CvE5j9DnzkJ8zif0uYsQnwsIfe4qxOf6hD7vJsTnBoQ+7y7E54aEPncT4nMjQp+DQnxuTOizJcTnJoQ+h4T43JTQ57AQn7ch9LlIiM/NCH0uFuJzc0KfS4T43ILQ51IhPrck9DkixOdWhD6XCfF5W0Kf9xDi83aEPu8pxOfWhD53F+Lz9oQ+7yXE5x0Ife4hxOc2hD7vLcTnHQl97inE57aEPu8jxOdCQp97CfG5HaHPvYX4vBOhz32E+Lwzoc99hfjcntDnfkJ87kDo876EPqvnAbLsunYx/K9nt0GmvV/dP1f3k9X9VXW/Ud1/U/ej1P0Zdb9Crd+r9Wy1vqvWO9X6n1oPU+tDar1ErR+o+bSaX6r5lpp/qOtxdX2qrtfU9Ysaz9X4VghQ+qf0QOWH6i+q/dT77jsZHAszqnnvCugM6ALoCtgNsDugm2ojgAUIqTgCigDFgBJAKSACKAPsAdgT0B2wF6AHYG87bvsAegF6A/oA+gL6AfYF7AfoDxgA2B9wAGAgYBDgQMBgwBDAUMAwwHDACMBBgIMBhwBGAkYBRgPGAA4FjAWMA4wHRAHlgAqAerl3HJAATABMBEwCHAaYDJgCmAqYBpgOmAGYCagEzALMBswBHA6YC5gHmA9YAFgIWARYDFgCOAKwFHAk4CjAMsDRgGMAywHHAlYAjgOsBBwPOAFwIuAkwMmAUwCnAk4DrAKcDjgDcCbgLMDZgHMA5wLOA5wPuABwIeAiwMWASwCXAi4DXA64AnAl4CrA1YBrANcCVgOuA1wPuAFwI+AmwM2ANYBbALcCbgPcDrgDcCfgLsDdgLWAewD3Au4D3A94APAgYB1gPeAhwMOARwCPAh4DPA7YAHgC8CTgKcDTgGcAzwKeA2wEPA94AfAi4CXAy4BXAK8CXgO8DngD8CbgLcDbgHcA7wLeA7wP+ADwIeAjwMeATwCfAj4DfA74AvAl4CvA14BvAN8CvgN8D/gB8CPgJ8DPgF8AvwJ+A/wO+APwJ+AvwN8AJQb1ABmATEAWIBuQA8gF5AHyAQWA+oAGgIaARoDGgCaApoBtAM0AzQEtAC0BrQDbArYDtAZsD9gB0AawI6AtoBDQDrATYGdAe0AHQEdAJ8AugF0BnQFdAF0BuwF2B3QDKJGzACFAGFAEKAaUAEoBEUAZYA/AnoDugL0APQB7q++dA/YB9AL0BvQB9AX0A+wL2A/QHzAAsD/gAMBAwCDAgYDBgCGAoYBhgOGAEYCDAAcDDgGMBIwCjAaMARwKGAsYBxgPiALKARWAGCAOSAAmACYCJgEOA0wGTAFMBUwDTAfMAMwEVAJmAWYD5gAOB8wFzAPMBywALAQsAiwGLAEcAVgKOBJwFGAZ4GjAMYDlgGMBKwDHAVYCjgecADgRcBLgZMApgFMBpwFWAU4HnAE4E3AW4GzAOYBzAecBzgdcALgQcBHgYsAlAPU79Oo33tXvp6vfJle/+61+U1v9XrX6LWj1O8vqN4zV7wOr395Vv2urfjNW/R6r+q1T9Tui6jc61e9fqt+WVL/bqH4TUf3eoPotP/U7eeo36NTvu6nfTlO/S6Z+8+sBgPqtKvU7UOo3ltTvF6nfBlK/u6N+00b9Xoz6/RT12yTqtzrUb1eo33JQv5OgfjdAvZNfve9evUtevaddvQNdvV9cvbtbvRdbvXNavc9ZvStZvYdYveNXvT9XvZtWvff1HYB6X6l6F6h6z6Z6h6V6P6R696J6r6F6Z6B6H5961516j5x6R5t6/5l6t5h6b5d6J5Z635R6l5N6T5J6B5F6v496d456L41654t6n4p6V4l6D4h6x4Z6f4V6N4R674K6EFDvC1DfxVffc1ffIVffz1bffVbfK1bf2VXfh1XfNVXf41TfkVTfP1Tf7VPfm1PfSVPf91LfpVLfU1LfAVLfr1HfXVHfC1HfuVDfZ1DfFVDP4atn3NXz4+rZbPXcsxrn1fO66llY9ZypeoZTPR+pnj1Uz+KpZ9PUs1rq2SX1LI96tkU966GefVDPAqh74+pesbp3qu4lqntr6l6Tuvei7kWotXm1Vq3WbtVaplrbU2tdau2nai0EoObKau6o5lJqbqGutdW1p7oWO05dJNlbs+qPVdc1aovOnh2fOmN24ezphdFYrHDupNkTC6cfHq9MTJmuht+qa6NUyygt0lsH++/gyumHT5o2oXDGnPIpkyoKD49OmRMvnDStYsqcWZOmTytMRCdNiVf9MMgBRuHt7b8V0SlTqs42a1a8cva4qdF548onzR43a9ICdalRpWUpFjk49SIjUy8yJvUiY1MvMiH1IpNSLzI99SIzUy8yJ/Uic1MvsjT1IkelXuSY1Iscm3qRU1IvclrqRc5Ovci5qRe5PPUiV6Ze5MbUi9ycepFbUy9ye+pF7k+9yIOpF3k09SKPp17kqdSLPJN6kVdSL/Ja6kXeTL3I26kX+ST1Ip+lXuSb1It8l3qRX4wiXe2/gzddLMSis6OFsyvj6oIhFp9XGJsenzWt0+zCqdHZFRPV5ce0+Cy1dlB1oei1jt8I6mhtXHSlfAHUPjPltuuYepFuqRexUi9SlHqRktSL7J16kX1SL7Jv6kX6p15kYOpFDky9yCGpFxmVepFDUy8yLvUiE1MvcljqRWakXqQy9SKLUi+yJPUix6Ze5LjUi5yQepGTUi9yVupFzkm9yEWpF7kk9SJXpF7kqtSL3JR6kTWpF7kt9SJ3pF7kgdSLrEu9yGOpF9mQepFnjSJuLzyeI6hjI0Ed32VV15HyBdAfWSm33V+pF8nNTrlIfupFGqRepFHqRVqlXmS71Iu0Tb1Iu9SLdEi9SKfUiwRTLxJKvUhx6kVKUy/SM/UivVIvsl/qRQakXmR46kUOSr3IuNSLRFMvEku9SCL1ItNTLzIz9SJzUy8yP/Uii1MvckTqRVakXmRl6kVOTL3IyakXOTv1IuemXuTi1ItcmnqRq40ibi88riGo41qCOu426iiz//adVVE5fW5hxfRpsyujFbMLK6ZAQxT271NVS+G06bqa+LwZ8YrZ8djmA1ThoTnVFe6kSdlXVNPmTJkyKTEpXoleTg0zSu5q/x20uYTj3PqqzPRlpFFBd/vvsNnTK6MT4oWzpkDRYFUFENzpc+Ox3QvNfbMKp86ZNbtw1uxo5ezCROX0qYWWevIpMC+3us4ODne2eoF4lFE4yb51dOpFTky9yMmpFzkt9SKnp17kgtSLXJR6kStSL3JV6kVWp17k+tSL3J56kTtTL7I29SL3pl7kkdSLPJZ6kadTL/Js6kVeS73IG6kX+TD1Ih+nXuSz1It8kXqRH1Mv8nPqRf5MvcjfqRfJzEu5SHbqRRqlXqRJ6kWapV6kRepFdky9SGHqRTqmXmSX1IvsbhRxe2HWjaCOIEEdexh1dLH/Oi8QJ0ZnwVVVZTwam19YHo9PK6yMT5g0a3a8ctNl0N5GFck+mtXXKFNcw2k3naVyvvPacPbESbM2H6UK9jMqs2qobMSwPr2dFW0+gdqpCu1rVFRSQ0XR2FS4LHXUNCsOrVxZOD1ROBXaFS46VcllRm3t7b/9p8Hl5KSYvracHJ8/q3DipGlwTTq9UrVUpR2Wk1206aqC1MuclWIZdVNa+3JoIOC6bNQou539d5/Kyuh8u79OnzNbtWb59DnTYrPMghPdFpzlgu2+9j34kFG23T/LzppTvqlv1FhBSaqsdcG93BY8wIW7/e2yu6d6Ul1wTw8n3dvtSQe5OOkwu2yxUTalwOoKylJlrQv2dFvwQBfujnIb2FEeAjvKbWBHeQhshdfAVrgNbIXbwFZ4COxhXt09zK27h7l19zAP7la67ceVHvpxpdt+XOmhHy/yGthFbgO7yG1gF3kI7DK3gV3mIbDL3AZ2mYfAnuA1sCe4DewJbgN7gofArvLq7iq37q5y6+4qD+5e5PWC8SK3F4wXub1gvMjDBeMlbtP2Eg9pe4nbtL3EQ9qu9tqPV7vtx6vd9uPVHvrxGreBXeMhsGvcBnaNh8Cu9RrYtW4Du9ZtYNd6COw6r+6uc+vuOrfurvPg7ga3/XiDh368wW0/3uChH7/gNbAvuA3sC24D+4KHwL7uNrCvewjs624D+7qHwH7gNbAfuA3sB24D+4GHwH7u1d3P3br7uVt3P/fg7p922UM9lI2mSlgXnOi2oJu11Lb247yuL411BSlfGuuCe7kt6ObSuJ1dNmWB0gXdCJQum7JA6YJuBKqLXdZ1xuoKUs5YXbCn24JuMjbkNrAhD4ENuQ1syENg9/Qa2D3dBnZPt4Hd00Nge3l1t5dbd3u5dbeXB3cHuO3HAzz04wFu+/EAD/14uNfADncb2OFuAzvcQ2BHuw3saA+BHe02sKM9BDbmNbAxt4GNuQ1szENgJ3t1d7Jbdye7dXeyB3fner1gnOv2gnGu2wvGuR4uGOe7Tdv5HtJ2vtu0ne8hbZd57cfL3PbjZW778TIP/Xil28Cu9BDYlW4Du9JDYFd5Dewqt4Fd5TawqzwE9lyv7p7r1t1z3bp7rgd3L3Xbjy/10I8vdduPL/XQj6/zGtjr3Ab2OreBvc5DYG9xG9hbPAT2FreBvcVDYO/xGth73Ab2HreBvcdDYNd7dXe9W3fXu3V3vQd3X7TLHuqhbDRVwrrgRLcF3ayl/my/ZsD1pbGuIOVLY11wL7cF3Vwa/2qXTVmgdEE3AqXLpixQuqAbgcq0v67pOmN1BSlnrC7Y021BNxlbYJdNObC6oJvA6rIpB1YXdBPYZl4D28xtYJu5DWwzD4Ft7dXd1m7dbe3W3dYe3N3JbT/eyUM/3sltP97JQz/u6jWwXd0GtqvbwHb1ENiw28CGPQQ27DawYQ+B7e41sN3dBra728B29xDY3l7d7e3W3d5u3e3twd0D7bKuLxh1BSlfMOqCe7kt6OaCcYjbtB3iIW2HuE3bIR7SdrTXfjzabT8e7bYfj/bQj8vdBrbcQ2DL3Qa23ENgJ3sN7GS3gZ3sNrCTPQS20qu7lW7drXTrbqUHdxe47ccLPPTjBW778QIP/fhor4E92m1gj3Yb2KM9BPZ4t4E93kNgj3cb2OM9BPZ0r4E93W1gT3cb2NM9BPY8r+6e59bd89y6e54Hd++1y870UHZOqoR1wUVuCx7rge3JHsquckv43FQLjrbfgeZmjVuXjbo96US3Bd2scS+238rjesqiK0h5yqIL7uW2oJspyxF22ZQHDl3QzcChy6Y8cOiCbgaO4+yyrpVUV5CykuqCPd0WdKOkp7gN7CkeAnuK28Ce4iGw53gN7DluA3uO28Ce4yGwF3t192K37l7s1t2LPbh7tdt+fLWHfny12358tYd+vMZrYNe4Dewat4Fd4yGwd7kN7F0eAnuX28De5SGw67wGdp3bwK5zG9h1HgL7uFd3H3fr7uNu3X3cg7sver1gfNHtBeOLbi8YX/Rwwfiy27R92UPavuw2bV/2kLbveu3H77rtx++67cfveujHn7gN7CceAvuJ28B+4iGw33oN7LduA/ut28B+6yGwv3h19xe37v7i1t1fPLgbsF9hmXI/1gXd9GNdNuV+rAu66ccFdlnXgdUVpBxYXbCn24JuAtvUbWCbeghsU7eBbeohsK29Bra128C2dhvY1h4C286ru+3cutvOrbvtPLi73G0/Xu6hHy9324+Xe+jHK9x6usKDpyvcerrCg6cr3Xq60oOnK916utKDp6fYZY/MqC6rve4dnVY4fdqU+YXxqZNmF0bVi6rjhVOmT9j0lulphfF5k2bNrvrFFtixu1lbHPnRPahNvel6VrxyUnTKpAXxwhnT1Ruro7PBrcSkaZNmzy+Mziosnz87PmuLun7NdO/Vzdl0PN7Lds/jrxw6Ht1y3fOI5dHxOC3Fd4ubZUfk0/FYnu+ex+VG2db234pJMybGK2fH580unBKfNgFKTp00q+r97GbJJ42SyS2J2wXf8ED3fOM16ymNqLqCiwtcsr7J65lvdXvm+128Wl6XfcQr6w1uWb/pgfUntbOeOmfK7EkzQJVrrOALr25/47WCH9y22+9uC+bWd9/gLet7dHfH+i5Zd/bAOuSh7B61e7z1LtbDa5P18sC+n9vmHuzhpAd7KDvaLeFytwWneWA7x+1Jl3o46SleO9TZbllf7oH1dR7K3uo1B+/02mT3eGD/gNvm3uDhpM+5PekbHk76sdc4fevh5H96jfFeDdyf/IAGHk8+vIHLeI33wHqih7Izavd467Ge7bXJ5nlgv8htcy/3cNITPZQ91S3hs90WvMwD29Ueyt5glG1m/+1fO9Vb3Pq41m3BRz04+LSHshvdEn7VbcEPPbD9wkPZb9wS/tltweyG7tnmN3R50iZuC27ngW2hh7Lt3RLu4rZgqQe2+xhlXQ0yfd2yPsBtwdEe3I0aZZPUzoRbntPcFpzvwcEj3Z50hduCqzywPcdD2QvcEr7cbcE73RZ8wG3Bx9wWfNFDw37i9qS/uS2Y18g924iHsn0auSR8gNuCw90WjHpwc6KHslPcEp7ltuARHtgud3vSE90WPNsD24s8lL3MLeFr3Ra8zQPbu9ye9AG3BZ8xCrq6rnne7Zlfc1vwUw8N/I3bk/7p4aT1Grs8aZPG7k/ayu1Jd3RbcFcPbLt5KBt2S3gPtwX7GwVdJc1At2ce76GdJtfOeusLbdO9uj3LawVz3bbbErcFV3po8HO8unuJW9bXe2B9m4ey93rtYg96bbKHPbB/3G1zP+/hpK95KPuWW8Ifui34rQe2v7g9aWYT9ydtZpR11aG2b+KSdScPrLt5KFtau8dbz8E9vTbZ3h7Y93bb3AM9nHS425OOdlsw4YHtNLcnneO24FIPbI/32ptOdsv6TLcFr/Dg7mqjbJILpze55Xmn24LrPTj4hNuTbnRb8E0PbN/3UPZjt4S/clvwT6+5Uq+pyzM3b+q+ndo2rZX11gecnZt6dLuT1wq6uG23kNuCPTw0+ECv7o5wyzrqgfUkD2Vneu1ic7w22XwP7Be7be5jPZz0JA9lT3NL+By3Ba/wwPY6tye9w8NJH/XaoZ5xy/p1D6zf91D2c685+LXXJvveA/uf3TZ3vW3cnzRvG5cnbey2YGsPbHdye9Jd3RYs8sB2b6Osq97U2y3rAW4LjvTg7jijbJLziphbnlPcFpzrwcEj3J50uduCp3pge5aHsue5JXyp24I3e82V29ye+TEP7fR87ay3PuC87NXt171W8LbbdvvIbcHvPDR4vWYe3c1v5pJ1i2buWbfxULZD7R5vvYvt6rXJdvPA3nLb3Ht6OGkvD2X7uSU80G3BkR7Yjnd70skeTrrQa4da5pb1yR5Yn+Wh7EVec/Ayr012lQf2q902920eTnqP25Oud1vwaQ9sX3J70jfdFvzEA9vvvfamn92y/sttwYbN3bvbvLnLk7bzcNIObk9a5OGkfd2edLSHkyaMsq7E7TAPJ5/moWyl29aa77bgMR7YnuD2pKvcFrzQA9srPJS9xi3hm9wWvN9rF17vwd1H3bLe6OGkb7k96UduC37ltuDvHtxs3MLlSdu5LdithXu24zyUneyW8Cy3BRe6LbgiRTcDer5/lv1XvepIv1dMVax+0rin/f+gt80yXqNEW3ekNKTqzubhXVV3Dk/dQfVmsN528DR/fa5MY5/+q8/f0N5v7mto71NbH30PAdAyUL2/b1513drWz7ZlGbZ9HZyUbb+8LfkpW3/blmu0jxnnrMDmF6xu7ldqf0FgS3962v8PetkiRVFVd32OuoOhSFWb51X7sLnNbVuBYcu2bZqL+u9c+7O6UNdx2M0oY7xxbvM5cnl8iddznCvL+KzPWRBg6/dWPeM8+vz6XLqfqC9Qb2t/nhCfPXhO+ZRJFX2is6PDK+PxgyfNnhafNauewU/Xt5th03+d/u7mOJfaMh18nPvrBbZsp3zj/9S6kEz7qGPyHMfkGp/V1tjwK8/gzdOvNsU1PwneBY5jdJlcg7fmW2DwzufhHVL11U+CdwPHMfUNbpq35tuAn3cY44Txbug4pgHCW/uij800jnNqaqZR1jx/JtImugxjOxRhPmLt0MhxTEOkHbQ/jYz2MPu0rivgqCvgOF9+YEtOPWl8DTZ0+KHP1djgRjhWlNXmqz5ngcGJQ1MaO87fCGnrJjz+R+oZdevzN3H4r2LS1GFT5fT1dbZdTh/TxOCvj9nGKJdt/L+PUaapcT59bFMHt6ZG3WpTedDDqEP35UYG38YOG9bmjR31NnHUEQiw9sMIX4yDxVXXbIavut0OcJwvEKiOZbbD92zjmJFGHQcax+Ua7aRtzniYY6ipnWrD2t68FtWczGtRrYMNDJvmmWfY9Odcw6Y/1zf+NjbKmzyd/TDb4KqP0X06x3GMLmv2+7H2X+Oe9OZNnbeZUS9hP4up+pobfMycambY9THltfA069Ltgo1LzRzH6DKmpmzj4JBvHMehec0cbaBjZbaNPmZSLW1gzpvMfpOVx8K9TFV7lHHuzX3LOJ+zvZ2aicXNbA+1NTGOMbV7G0c5fbzzmlttzjxwjhdqm+3YZ26mnptjg7M+U8uqrv9Z2n7TvCUvb0sf9Ll0+2cYx+QZPLKN/x8ZqLbnG5OcqmtPveagVyKVf3penldzuSxHuSbGMTlGuVxHuVyDd9WxgHn25/qO82ci9WTZyHHUk20cs9yoe4X92VxHyDTWXs5E9uuttmu1LGPtIp8x/gWO+OtzZRn+62MKHPHX/z/d8Kd+DfHPN+Kv+039vJrLZTvKNTGOyaul3+Qj8T/e/lwQ2FJXKK97zVirfqavI2Su0RaV/D+u0aayDmtekznXYc01wXpGnFl8sjbNIc31JX2+PI7zBUNWbbpkrvNwrkvVtFamc0mNn82NmOQ4+BXqwmbQ/dR4mSznxxsvs4bGMy9samw850p3sqsp5mprPToHg00MTuZdkDwXPJsY5ba42jXqoAuOlWBcVQuy3amxR5r6PPGsqrsBC+9Q0Ly61u2u+k4H43za7pw5NTDs+pguRh272J8bB2ofafQ+ffWp6zLvtDlXNvUVlrZ3M+rvj3DX7ZblOKe50uqcvZjH6mPC9t+aZvE8q4ahoLmCtflK1P5/I8OujymthadZl/bTOXpgq8vmqljA/n9DBwfuNmiSRBvoY3pspQ2cq6CZSbRBE8NP3QbYamO+Ucbsv+aqo7Oueg7+fe2/zj5t+orVbep/I8Om86l+DfU673Q5V99qyxVTI/QxA+2/Na2i1KY7Q4x9UmcHWYy8mWYeW8wOnFqJzQ6cM4E+yBMZfR31NTOOM6+HWHyyZwd1+DSCJeFpBOfswLmqV6gLm4kaMAjX5KAZUHNW0ZPGuaqLW83H7GS5Ljg2McqZdWW69DeP3l+rSQB/5IFndmYF6+oCnKyNrE318jwmFbTM5Q9zoNrJOJ/zAtl5O8q8QO5s1KEHu8aB6gQ1b8M5k9LkgomyrsN5IW0OtA1Z2mnTxVmjGtqhoWHXx+gL9pouzpwXXsk8BtLI+BwIbPn4g/kYiD7OfNTDPNbM/4bGebFy5ud8RxlTqxog58mtxRdnHzL7WU6g5vbVx3S3//phouKcJJgTlZ618MQmKsk8BmM+xhAI4LelMwP/nFQ6j8102PV5sXLm5waOMuY4k5/CefT+AqOeTMdxWBvpfmFqYk19x4yVPkYvzdd04e4sa+rhQfbf9LL+P7b/y2V98zzZxrHmmGnqHOXCWLZx7qEGF3MxguU6yZ5UOB+j41tgrH1SUWD8Zbp2qzp/TY+51jSpcD7yWqgL13TL4d9uPM5bDs7G29oth1obz81SPvctB+dtgoaBLZ1OlmcToxz/LQfe2QPf0v2mmRrP1XwwYS6ZmPfAdnGcT236Ks/5YJ750M/uRh36FoH5AKH54J5z1qPKDDfK6Dp1HzGvzM0+Ys42QkZd2EOQ+rO5vKntjQyb6Sc2qymx/9Z01c30MCm6NI5d4elj9qiFp1lXIIArPXbV2cT4rM9bhw/UVrVB0yTaQB+zz1bawPkAaGYSbdDU+KzP63y42ux3+vaAuUyvz+Gsq56D/372X2efNn3F6ja12pyh6HzKraHeLIev5mqDPqamXDG1Qh8z2P5b0yyjNv3Zmk7UdHtRz1KEzk7K/ku3FbB80eWducjGPVJUxDhrK8YeJja/hGm2Ubbx0KRuo1b2Z/OWilnGbDfWdgoGS2q7tjNvJXL133qBLe9UmPqv+0mDQPWDzxPis3tPn1b1Apv+02bNjk6r2Pw9UrMqs7n0X6erzmPUlonY1GZ2d3OhRsJzzO0Mn/z4HPO2Rns+bH+WKfXFsf/HhSiqdwDo90JQvwOgXmDrz1Wy3SCzh3eeNRCryBxqzOmW+Ry9tmlN0FzUf6+wP5uLgNsaZeruDrtVJuEOuxpq2tifYagZNGfKlEmJSfHKgfGp5fHKWRMnzajlS//bGjb91+n0to4Tqi3VL/1j1wj/5t39un2Qe9MXrWvy1S8PcpsrzfpY84tS5oWG8xEu7IuWVOWaBKrbC3vRgdlmTh/zkPqda0GMcbfq6ikH4rrDNT02FzLOp+fjzsd1Cwy7PuZ4o45i+7P50gdzHcMZa2z9zKk5ZlyzkHLajt3Vdb7AwlwL1pycX+jFyhUgdSfz4gt9vga1lMPqrunlFOaai/PlFHzrxJteBtIoCd41vZTAvJvtfNQ0M7DlHUOTv/nCDfM+gHnn3elzw8CWbaz3BRzcAg7+2L0GvqccrOLaODUyfOb6ukEyMeVba7WKsP7ifAxaxaSJw4at0TrXR821z6ZGOXPtU7+QoIlR3hzPanrBhTlZHGbU4eyn5tq1GUNnmztf3GGuo/I/Em8V8cU4WFTTWBM1zlfTV0PMJ330MVONOmKB6nbW+7EnpMy2d2qF/j/W9uZTX877NeZEE3s5xBYTIfuz84URTs5YnzOf5NPH6P7rfHzevHejj6m0/9Z0L8n8kj5hn0JfltDEwcV8WcLhtfA069Ltgo31zpcM6DKmNjR1nCc/wPXSjE365nx5gY6V2Tb6mMUObuZmTrzzDe48L4ywilW1Nxnn3ty3jPM529upj1jczPYI2GX0MaZO1/TilNqeZMRenKKPWWH/remFEQ2Mz2priNRn6pZ5/WVekzZIgndNX38x73nrY06phTfjmBBx3gM0tRJ7AvP0Wnhi43wqT2Bi14784+KmF8k574djY5M+5rxa2sDMX3OewJO/wSJn/m6OpXE+51jjfJkVFhOzPQKBLV+6ZD6xbM759D5nPzfnnBJuXNwYqLb78cbFlfZnqhew3GrUfbv9uaYXsDyE7NdbbfMcSS9gWReotvvxBSx32Z+5X8CiY6362a72Z6HPQhQx3iCzpNwgY3sehLd9g4xruyHs5ozzWi7V13b45aaSuZ5qzs3rsi1zkLas7RkWc46d7ej36r/bmWXsz+Y52tufzWdcAobvfr/22DlQbffjtUdr+3N9XSbgOFdgyzLmtxXNewHOZ2+c97HUtaO+zpwRrZi8T+WEOVPj02bPMhPPrNDcsJucGYF/Cih2szMDqU8528n+LHQALGe8iVXCeBNriwHQ+RU3FVud5H0cia326Sc7+iH79BMe+xr76tn79JMe+zn2JfvUiTkJ6mvYdL/rZ9h0H97XsOk83M94AkMvnqj9+pcnzKdYBjhEtZlxHHZzWG+cNyBrGyT98jUk8yG/iuiUKYMrJx0enR3vN2daxexJ06eZz1Rg98H035okyLxuwJ63UJuphebxprbmIfsDxvmzarHVQ7hyXrNi4wL2nYCaxgDNy7yvar7FoaZ7xJmBf441uozzWqGewYvzGi07iXbIcxyTjbQD9t0X54OhphSZ97p3sj8LHbpK2eYt6efY8Y33OfYwx3Ps5lDo1ELGGNf6TJifnmPX19Jzpqmr6aHx2XMqp23xMKEpsNqm/zqdxJ5WTz/B/u8+wT7J/iz0CXbrvyTy5hPpybwDzXxK3ax7X4c4mk+pmwsp/Y1za9sAx5xK2fbXC+OG7QC9uG3YBto288GJQcb8Rf890LaZN44GG/miNlPEzbJ1KOJxKSK+o/158y/C7R+fP2ufabHB0crZk6JT9onFKh2PiJu9Rdv0X0ypA4HkVD0/wPb+gyr1ztlKa9S21Gi+9Mb5tU9G3lYyy2HY5X4uwtu5bMrIO4Rxwng7H/vOQ3g7H4vKDOCPeOuVFufLP3QZZ5uY01amdghjPmLtUNOKgtkO2h/z9/uYeBdhnDDeNT3qbPLWvtTn512MccJ41/T4tcnb+Sif+Vt85uqWs9+Z589E2qQO+l0J5iPWDg0dxzRA2gF7VJyJdynGCeNd0+8Omrydjxwx8o5gnDDeNT3ibvLGHnF3PiaD9Tvz/JlIm9RBvyvDfMTaoabHh8x2cL42gpF3FOOE8XY+WtgE4a19acrPuxzjhPF2Pm7ZFOHtfMQ2M/DP31fE+p15/swA/jg8c7+rwHzE2qGmR0rNdnD+Nh12W9i882LOgJxjtPm1EHNmg/0mqrO/Y68QwV47UtOj485xt2Hgn1reMPBPvTEf+Wtq1GFed0h9XIdrfsG40rDFaoBz1SsvsGX/cx7XLLDlYzxqU31P9zWY9Q2NTotNn9pvUnxKLJlZmnNTPaOj/Vloz4gyPsBSyvlFT7NnmLM6HT+9RtPfsSaa7D1nxpsBxYxtHq7je9K1Ltj75Z60eYNkixf0IOtz2Y4+pf6ab1pwfinLHA33Q55DMNcKd7ZtSpkGmFP0gIz1e33j06/r9/phNv0wVU03gs01QD3KT5s+e1Jifu/KeHR2PDZo+uwtFjHNzmtu5iIj9jSCScLcjz2VYNZlbtjSYmYNx+np/C0tqnmLG5QqolWD0uEcdYdKqsR3Lk+bbDEoaf5zjZjpGxF9k3y4Sk83anu4qqaBTu3TNwwORPYNsW1DkH3DbNswZN8I2zYC2TfKto1yCIjaV27bypFyFbatAtkXs20xZF/ctsWRfZNs2yRk32G27TBk32TbNhnZN8W2TUHiMN22TUf2zbBtM5A6K21bJbJvtm2bjew7XPczZN882zYP2bfAti1A9i2ybYuQfUts2xJk31LbthTZd5RtOwrZd7RtOxrZt9y2LUf2rbBtK5B9K23bSmTfCbbtBGTfSbbtJGTfKbbtFGTfqbbtVGTfKtu2Ctl3hm07A9l3lm07C9l3jm07B9l3nm07D9l3gW27ANl3kW27CNl3iW27BNl3mW27DNl3hW27Atl3lW27Ctl3jW27Btm32ratRvZdb9uuR/bdaNtuRPbdbNtuRvatsW1rkH232bbbkHy/27bdjey737bdj+x7yLY9hOx73LY9jux72rY9jex73rY9j+x7xba9gux707a9iex7z7a9h+z72LZ9jOz7wrZ9gez71rZ9i+z7ybb9hOz73bb9juzb4ivfjn2Zti3T2Kdjm23bspF9ubYtF9mXb9vykX31bVt9ZF9D29YQ2dfYtjVG9jW1bU2Rfc1sWzNkXwvb1gLZ18q2tUL2bWfbtkP2bW/btkf2tbFtbZB9bW1bW2RfO9vWDtm3s23bGdnX3ra1R/Z1tG0dkX272rZdkX1dbVtXZF8329YN2ReybSFkX7FtK0b2RWxbBNm3p23bE9nXw7b1QPbtY9v2Qfb1sW19kH372rZ9kX0DbNsAZN9A2zYQ2TfYtg1G9g2zbcOQfSNs2whk30jbNhLZN8q2jUK0YLRtG43sG2vbxiJ1jrNt45B9FbatAtkXs20x5Hxx2xZH9k20bROROifZtknIvqm2bSqyb5ptm4acb7ptm47sq7RtlUids2zbLGTfXNs2F9k3z7bNQ84337bNR/Ytsm2LkDoX27bFyL4ltm0Jsu8o23YUsm+ZbVuGcDnath2N7Ftu25Yjda60bSuRfcfbtuOROk+wbScg+06ybSchdZ5m205D9q2ybauQOk+3bacj+860bWcidZ5r285F9p1n285D6jzftp2P7LvQtl2I1HmpbbsU2XeZbbsMqfNy23Y5su9K23YlUue1tu1aZN9q27YaqfM623Ydsu8G23YDUuca27YG2XeLbbsFqfNW23Yrsu9223Y7Uufdtu1uZN9a27YWqfMe23YPsu8+23YfUuc627YO2bfetq1H6nzItj2E7HvEtj2C1LnBtm1A9j1h255A6nzStj2J7Hvatj2N1LnRtm1E9j1v255H6nzBtr2A7HvJtr2E1PmabXsN2fe6bXsdqfMN2/YGsu8t2/YWUud7tu09ZN/7tu19pM4PbNsHyL6PbNtHSJ2f2bbPkH2f27bPkTq/sG1fIPu+sm1fIXV+Z9u+Q/Z9b9u+R+r8wbb9gOz7ybb9hNT5m237Ddn3u237HanzD9v2B7LvL9v2F1Ln37btb2Rfpn3HRP8192XZtqyCf54v27ZlI/tybVsuUmeBbStA9jW0bQ2RfY1sWyNkXxPb1gTZ19K2tUT2bWvbtkX2tbZtrZF9O9i2HZB97WxbO2OfXjfdxbbtgpTrbNs6I/u62rauyL7dbdvuyL6gbQsi+0K2LYTsK7JtRci+EttWguyL2LYIsm8P27YHsq+7beuO7Oth23og+3ratp7Ivl62rReyr49t64Ps62fb+iH79rNt+yH7Bti2Aci+A2zbAci+QbZtELJvsG0bjOwbatuGIvuG27bhyL6DbNtByL5DbNshyL5Rtm0Usm+MbRuD7Btr28Yi+8bbtvHIvnLbVo7si9m2GLIvYdsSyL4Jtm0Csm+SbZuE7Jtq26Yi+2batpnIvjm2bQ6yb55tm4fsW2DbFiD7Ftu2xci+pbZtKbJvmW1bhuw7xrYdg+xbbtuWIzp/nG07Dtl3vG07Htl3km07Cdl3im07Bdm3yratQvadYdvOQPadbdvORvZdbNsuRny/zLZdhpS70rZd6dj3b70IwXxYpL9hs+ltfkjBfHxuf8OmH+U7wLDpR+oGGjb9yJX5pSb9mN2Bhk0//jfYsOkb9EMMm350cahh048sDjNszW3bcMOmvyw2wrC1tG0HGTb9rdiDDZt+EOQQw6YfOhhp2PRbXUYZtu1t22jDtoNtG2PY9M9WHGrY9BeVxhq2trZtnGErtG3jDVs72xY1bPpBjnLDtrNtqzBs7W1bzLB1sG1xw6YfgksYNv2ClwmGbRfbNtGw7WrbJhm2zrbtMMOmf7lysmHratumGLbdbNtUw6Z/AXOaYetm26YbtqBt0/dpVW5Ytk3neE/7/0EvW6S06vkJlmccgqGqX/LQzx3oTZ1vHs/5av2JX33OggDbcxdV55/nOL8+F/YQmGXY9ANI8wybfihKx0f9Ny+jer8uP9coo9/IearRd8Ic/kbKQoyxrLHvMPXVWvuOPid33znccf7a+k7YsGU5+onZd3R8nH1Hlzf7TpH9eY3Rd4o5/I2Uh/liWVzHulMsTneKDZsb3dHlzb6jf/VY38dWf0o5/C0LFqV159/TnVLD5kZ3dHmz70Tsz+2NvlPG4W9ZqJgvluE61p2wON0pM2xudEeXN/uO/hXzEUbf2ZPD37LiEkbdidSx7pRJ0509DZsb3dHlzb7T3f68xOg7e3H4W1aa4ItlpI51JyJOd/YybG50R5c3+04P+7O+L6VsewcM521bT90Ghm0fzdWw9bJtmYatt/bPsPWxbdmGra9tyzFs/Wybvo+laO6ruQQI4xENRvj6WrCkbnVx0+sPzM3vurivYXOji7q82bf3sz83MvpTf9vW2LANsG1NDNv+tq2pYTvAtm1j2AbatmaGbZBta27YDrRtLQzbYNvW0rANsW2tDNtQ27atYdO/+LadYRtu21obthG2bXvDdpBt28GwHWzb2hi2Q2zbjoZN/1pdW8M2yrYVGrbRtq2dYRtj23YybIfatp0N21jb1t6wjbNtHQzbeNvW0dCGqG2j1YZQKV+uFtXxuFckbtyLGjY3454ub2pDuf15gtF3Kjj8jZYwjitWHc/zLXHz/ArD5mZc0eXNvhOzP88z+k6cw99oaRnjNUJF3epOMCZNd+KGzY3u6PJm30nYn48x+s4EDn+jEcZ5vlVUx7pTLE13Jhg2N7qjy5t9Z6L9+VzjGmiSbTvPsB1m2843bJNt2wWGbYptu9CwTbVtFxm2abbtYsM23bZdYthm2LZLDdtM23aZYdO/Bnu5YZtl264wbLNt25WGbY5tu8q2qXZrZrTb1bZdP/+h4ra113Wqfuv8Jfie9v+DXrZotEq/8zjqDgWDZn8zXydV268VaS7O/naN/fCJ+cuwui0zMox2ymPwJUj3Uo1tMqrtfnypRr79H/X8j+qjOr9nVhfdYgxWW0/7b9DjpuI8P7Dlps61IFDtA2FMa32ZjT5ngcGJQ7MXOM6vz2Vq9kIHpyaGzRw/FzrqWuioi7JcY4OP2T5OfxYgdc13+PNfqKuho5yuK+CoK4DU5eSQH9gyT3raf4OpbWGnwexrAeNciwy+hP2/1msmfc4CgxNH/i1ynN/Z91WbLHZwamLYzDxa7KhrsaOuf7Oc7i+NDT/MdnW2wyKkLn283tfQUU7XFXDUFUDqcnLA+l4ydZm5QD3mmz7PN3gudslziXF8PWKemtMS43xH8LRL1XMhS3nqrnpO8kieuqtelne4I57qmmewcU2m5xz6Gk8ff6Rh18f81by6jmF2HY2NMosD/6w3y/7/4Y54mfUebNdV0y+kz0V8GGn4cLjDh7mID/qYFw0fxhg+6DFnEXJevTGu/fhyPu0c55X/U3jOX3VtOtlxfud8Xj0rv43BU3OZbJRRm9YBU3fnGj6Y4zuhLlmmLpnnWLAVvzDfnddAjY26Jxu+mH20J40fIezaLd84b132fX3OggDbvMiqrf11jNR0vJX9eUJ89v7x+QdFp0yKRdWvPg6Nz5wTnzW7nkHP2SXNfTW5m2HYzCF3LrLf3OoFtuwGGP3a0kvLJNbFKC7jzSGaR76sIGP3DJmXauYQtKiWIUgfP9ew62PuNIagI5BhdAFS5qhahkjnsJRB53uwJingGQaitd7O0ufkloIpjvNjwyDLLYJgtGrZbYLj/BMc/pu3Lcw46Nsbug/qYyYY/PUx5u2xbOP/p9pONjHKm31L2wKOc5hLascbfVrzM+PlbN8pjjpM7TB9NsvpugKOugJIXU4ObEts1qZ8meDgpc6X4DjfVh7z1ucsCHD110354uwTZn9Tm7psU5I31REHXa4wYDQUy31b+/l7vd6sT2yuzevzqv8eb7xfeKrBh1BYy52dgq7uTd+BibPUXRQz77ebcWN5VmMrHVyfs8DgxNHBKxzn1+cy18zKHZyaGDZTQMsddZU76kqXS5dLl0uXS5f7/y7nfDaWboyOFJucoi59meqyXMJlubjRLkzXEsGaJvJfZfyTs3MiX2HY9TErjIn8txnV/Key8C+qkf8PBv8JNfA/0rDrY0oN/j/bdahJm35eSU+ckvtZKXMqWttmPiWlN9VqE43ydXUFqc9ZYHDiuIKc6Di/PpfOBD1Fck5VdbnCgNF4ZmWacE0Omqmmy5mPTE5wWdcEpK6Ei7rMqYraetp/g942y1y/MKUlRn0uK1hjWjbIrG6HmmTFXB/UxzQx0rKxXYdKS91pdBwbG58nGD5OSN1Ha2tuBgJbrvVMcHAJOM6ruZp9ImH4OsVRJtvY38r2uabbgdj6CtNtqXCy65Gc6yvO9TLn+gq2Hmj2f1PYtrZ+Z5bTsTXbN1Czb6GKhBUujpcWB0uiRcWxknAoFioNxoqKE5YVsUJlRZFwOFFRFIlFQuFEqDRUgWmGOlc5T1vW+vibPmdBgGutblMsy7fS/ubXYzbrgWEzl3WijrqijrrMclNcllti8DK5q43t611biZU+Z0GAra9YWDs5Y6X8H89z/irdGec4/wTk/GN5zh9S9R3qOL/z8r2pHQPdTuPtv5q35qbrMR8BT2ylbuz8uox5S3yK4xzJ8K5ncNPH6DJLjboTDj+wcljdzrjpMpONuvX59LGZgX+2l75XnGmcxzx/pnFsuaNMTfnK1F9qzVd9Tu583VpszK+t6mObGLZKg5szhuMcdZnlZrksN9vgZXJXW75xXF3GSp+zIMDWVyysnbDlkfE85w9j2o5p6xie81dp62jH+cc6zq+1VbfTePuv5q256XpMbR2zlbox/3UZU1tHO86JlcPqHu84RpdZatStzze+lnJY3c5+o8uY2qrPZ2rreMQXra1jHVx0GX3sWEcZU2uyAlu2i/l4oz4msZX5TNRh49Pp2hdDTJ1muq5Dddp5/akXQ3T/W+DgVxgwGmo8T0Ntcb9Yn9i8X6zPa94vrilpnMk+2uGwecGt91HW1dBRTtcVcNQVQOpyckh32Jo7rBa1Gjus+dKNgEG4JgfNQOhy5oxsrMu6xjrqciYS3c2IcJnzSoau7lDVi2JHsdRdVvXQ/0iWusurXkBxCEvdiaq6D+Zp76qXrhzEU3cV7xE8dVf91txwlrpjVb9/N4yl7oqq3BnKUne4KneGsNRtVeXOYJa6o1XtfSBPm1TVPYil7kTVj74P5Gnvqtw5gKd/Vz1ZvT9P/66qewBL3aGqPtifJ5ZVvPcz6qa74LAS5svT9KbO14/lfLVfYOlzFgSYXvJnX2D1c5xfn8tcuenr4NTEsJkPXvR11NXXUde/We4Ql+WGuSw3yGW5/imUU32zj3E8odZbJqc+KXLqzcKpKGJy6u2yfUe6LDfcZbkDXZYbkEI51ea9jOMJ9bbI5NQrRU77sHCyykxO+7hs31Euy41wWW6wy3L7p1BOtXlP43jC3AuanHqmyGlvFk6xcpPT3i7bd5zLcge5LOdWR4a4LHdACuVUrHoYxxPO6bfQ7h4pctqLhVPpFn16L5ftO95luYNdlhvqspye/9T0xNSnxhNT+jovO1Dzg5j6mC+aVdfxhfHElC4zxuCkP5svA8l3/J8uvpFgtnHObzOreWZmVfOM2vvNxd+xDht2nYzdIXHGQ5cx7+xoPn2NcuZaYk3tpOvKcRyjy5ox+W0rdz2cL5NVMchieZlZyFLVXtii+tyad3beP30LBLa8I5ZK25p93bzDrGOo63TG3xlrbMGe745kKFTbHFCfsyCwZV+kngM671o6b2xwz4Gd8e/n8N+cg5px0D/2oHXKOU/NMI7pbpTLNv6/jd3gbueYVU+bGv3JeXcYa19n/8b6KcX9ClPT+iG8amp3jFc/g5fWDXP8aJP1z3p1XPTx2Pix0Rg/CpG8HGP4UFvb6n6ZTNuadY1F6grUUpeTl1MbCNdES7EboYxaHXJq9eY4GuerSYdNre7uOEaXMb+g2d3RjjU9iWOOk3S+1v7id31O7idxnG3pvKbID2ypW4T+B7E4dXf4r2Kyp8Omyu1hf9b5rY/pbvDXx+xhlMs2/r+Xobu6vKm72hZwnMPU3VJDL5xjf7LXx2Md/jV0lNN1BRx1BZC6nBw44mclIuFYWbSc40exSqLBsnhJSdW9xj2I6y4ujwcrYlYZxw/BlZeXlEbjkWIVu0hgy02dr5T4fPZW6w9u6XMWGJw4NKTUcX59LnP9vsTBqYlhM/tQiaOuEkddZrmyFMqpGFD/6Gi4oiSeCJeGTE7FKXIqIuYULS5KJIrDUZNTUYqcqH/Yt9gKxotDpQmTUzhFTiFiTmXlweKSSKTC5BRKgZNZrrvLclrf1Nih88LMU2delSJ16ePNH9A0y+m6Ao66AkhdTg5m3qZaly5nrjvoH5Y2x0fLUZeF1KWPN3/Y2iyn60qGl5OD6ltBow7KeWVN85RKY56if6jdOU8JGnZ9zJ3GPGUOsn6kfTPbOmr4lkxbc9ZVt+s+Rf9Y99E8alv3cfphxkgfo8sEDV/1MQsNW1+H/1is6gWS+0aWMwZ8374KbTGe6XOYc7GAcd6Ag3sA4d4PaYd+SDsksxagj++XZF31COtKhRcWf6xd+da1wmW16Yvpw+72524Gj4aBLfu95robC9faf8hKn7PAwZH6OnY3x/m7GW2k/e/K43/VXLir4/xdHf6rmHRx2FS5zvZnHWN9TFeDvz6ms1Eu2/j/1cZcWJc3XzSubQHHOcy58KVZ1e3E00+CCcVZ99fVWdXnfswYD7XfZl+pqW3NHNbH630NHeV0XQFHXQGkLieHhgZv81rgFuNaQLepjqM+3nxLgD5munEtcLvhu+XwwWyPUoSL3vKNuutyjqrPWWBw4shtZ/91jvPK/84s59+U27s6zt8VOf8uPP5HVH2dHOff3XF+9SWGZkY76bbQvDU3XY/+bR2zf5nxSybf9PFdDVupoy5sLuHMd31sX4STLksxl9ndqL+Lw5aMRpo+6318eReOmNe8uj1U2z1vaI62a82xHPyyjWPGGJrzkqH1PGPiph+ANnOS7r7Gph9e2JWn7qp21/kSMOLciaedatVXfc6CAJu+WJi+6HOZa4AdHZyaGDZz3b2jo66OjrrS5bZerrPLcjonTO0wdfcbQzt0HJ3aYWqKPqaHoR3fG9qt92uNbRz4p96a62q672LrarsjdWmbmXvmtQ82FjYxjjfHob6Ousx7PpTrb7XdB8oPcF0n1f5dAH3OggDX/dBNOuKMDfYsXgmP/0Gzn+nzO/uiqWNmHDrYn3Uu6GPMfqqP6WCUyzb+3zB701+3+a9yK9euA7suSrbv93X4h80Xku3T2LWZbhNzfpbMurk+nvKazpyfYXq3fXZ1vbq9nXpnzs/0MT9uU13HjkZMatM7U0PMWKtN9Xuz39TV9YM+Z4HBiSPvOzjOr9vJzPv2LOffND/b2XF+7B7UTjz+V83P2jnO78xtPT/T7aTbQvPW3HQ95vxM+2LGL5l8c2qYOUZ1NNqFqV+U1pSTVvY//ajtGkQfc72Rk0XZ/2yf2vQuP7DlmnBdrX3qc3Kvjzjv5zjHBb75y6b8c84fOjn8VzHp4LCpcjoPdPz1MaZ+6GNM/cg2/t/bGHd1eXPcdWpTB6Nutan+tJfRnzQ/M17J3C/b3eEfxX1Oc82iE8KrpnbHeHUyeJnldF3J8HJyMK+XzRwfYuS489pKH2+Ou/qYhUaOD8+uPofzOoFvPK39OtocT3muY/Hx1Knv+qUlmtsCB7/CgNFQPAPvlm/Z2XwRHKi+IazP63zLjjPJzc5tJo8ur7cCNl82Nfq/dxGxafLivIhwCpU6ptBxTCfkmDaOY9o7jlHtvaP9uY1Rrq2jXBtHuab235ouWprYfwsd/9f16nOawqht+Q4uhLGt+oKEPo/2DfM/4Dgm4OBotpHmqP9viqS2WYZvPINvOGiKRVZgy8HJXODRx8y2RbWmL/Z0cNj4JuzhWoVWn7MgwDZxsrALaWfOKf8LefwPYvlc6PBfxaSdw2b2Zz2o6mMKDf76GLP/Zhv/P8q4cNLlzQsnpx61M+pWmxqkFyEX4ma8kpmodHD4R7EwYI5H2AXKSuMCReuZ8wLFzB99zBjjAuVE5KKxNh/4xuLaXwuqz8l90dLecX5nrBsa7aiPbWLYphvcnGPxzo66zHIzXJabafByXmvkG8fVZaz0Of9/r3U2vcLVqS3YK1wLec4fwq51nNdI+hWuNV3rFNp/dT3mK1ynb6VuTBd1GfOBW90/S2oph9U9w3GMLrPUqFufb0Yt5bC6ne2my5ivcNXnM9tmBuJLPXtfewcXXUYf295RxtSarMCW7WK+wlUfs2Yr1zx1p9O1Ty79otN6cqn73wIHv8KA0VAzeBpqi8mlPrE5udTndU4usaTRNu3wTIfD5oWD3kdZV0NHOV1XwFFXAKnLySHdYWvusFrUauywDQNbqrMmXJODZiB0OfMVru1d1tUeqQu7Sn3euErVHd55lWp+JVofEzGuUl8yrlL1/ukGJ2wkyDbsr2VX1/UFUpeZMNMdttpGOnNUqSnA5mio/TU7uhnLDOOYhcj5cxzH6LLmLYb3tzJSZDrEpy5fe6F5m19/cLat8ytGybSt2R+nGzYdQ12nM/7OWJuCaX69PhnBHO2oi0IwzVcXlCK8kvl6lj7evLWrY2/m6S/Z/6xX56k+3sxTfcyORp7+7qFtdd9Lpm3NuqYjdQVqqcvJy8wJva8uXy+geZg5UboVP2rLG/P1AvoY85UP2kfzK3DTHXVNd5zP/Aqc3kcxDo01eP0Xvn6oNcpse6e2tUfq0sebF5Fex23zNwUwPSjMqa7Xubqkjw8adn1MlqEHO9t1mPmqz2+2h6kBybQHZ12mHuh9dfkVQc3D1INkZrXO1RBnjMxVI/MrgtMd/mOxSlZbnTGo6Wt8XsdFDq5bq6seYV2p8MJihLWrWX9tX7VzXvPqa2Vt38/OWfUnbuSv3t/NKOfslzOM82ie+ni9r6GjnK4r4KgrgNTl5GD2JVO7BteiXfp489a9PmZt0+o6hiHapc9vtoc57jg1mXEFtsyPK7DO/sy3Amuhd5tnIOcv5PE/kuwKbLNA8iuw5iNz2hczfsnkm3Ml0ryuwfTDzBss36cbnHR5yrtcZk65vRuij9/Z4OXUX+XadEMXNo+zgS37rvm1I33M1YYuVOb88xxmG85O4hxdkXOsNM4x14iDs80bB/7ZduZ8QPdz7C7lDKQuyn72v/a+BLyuqvr+NlOblJCUQVCGpiMdGF7adIAiVKClDiAOINK0NGnTtE0haZu2UNoSFAQcmVRAGUQmFQdQERQREAXFGRxARURFUFEQVJzw/7vJXsl6O+sOr333pfw/8n39+t7a++xzzj5nD2e496lcAlgx8/NOIX8eyUqznpnnZBVjPcNXzF9K8fJCmrP+OquKl+B5Dc3ZS2jOKtt+OV4O5Ynly/Fye+JllN1cXzW4rjhfD55/1g/I+ERCzMVnvjKbxr8d6GQVw7/xVd5Zol1p9mvAX8x4wFd51Tjdto3+7T4ap69Q3Pf+OMNHwlLfMMvmEFPfMPN2FHWVF+UaAlJUNg42/7SVE9Skq7xoNCYTT242Hp/olvrEUDnrbIJl31Xesa7+Cle/Cijq8MZfW/VBL9S3v14blmtw5fZ15Sz3iHwOyWw38mov6mTHCKzataWIYyuv7qj+B44ncG1kHaGN+M5OEhgflMwiuRxA+LogeB4xx6cOFNlWJgj5qEMFAvAXMxDwlUkVCB5PEbBZB+C5kQLB70TAjutDOJdY90WcS7HX8FBnTZDZu18bVTLSap/ZT2XkJ3uv4fnnTNQ1vIyS+mkqqfdzHdfwoCd/vdf7L76G15ogW9WPMnzw1O7qSNNuFYNQpodkt7p+qHJKth83lOFreKgPvOVE574MM9osJwNlwDvLlfG+kPXC1/DA878YX8hXg/GX3XuX4xNDfu9yRgtq+d5lvzmHxBDzb5NrX0NAiurIRlF5iSE7aiSGqNcnhspogKHD3tnwKRtoxZRV68pBVuBkBUKWb8PLEzZ6wsKpRU7Y2iDfO6PBUR3kgUA5dXWuUFmzhCyV+TQMH5CLSOQzn6WEg+dsynzGmQw+EuNoj8/+aBH4fsMHZB0sZLHBdDpMRUO/7aEGWEVDGDxPdM5iyojnDFF/leNhfYInZ/1LuoaX/RWDwdfw0G6+YuB120G6AE+SbtUWPTseyPTj78eaHSZfFUvjMBc6WcVwmHwNr0O0q8PJ6ohpVwe1S9npvOGD5cbZKXhWkZ0u2A7dYu6l0W0dYbzC4V8OqwgG/5IWbynyL44N5TU8tINtoj2hH2rsUYav4YHnpXAND23ka3hpfhEK/MX85S6+hre9Nqz8P+s+jQ2Dn22Yy0FWmnb5NkT5g1PIH8Dfen+QIxw8x5E/6BKxlldZ+MxxO40+spQ11NfwtjVGet/Xnw9QX8GjruGxLnMOG0YY5OdcG3hucZ2wg5ZgoI8sC/IDJz8Q8nMZtjVJ1rAiyiqkXWqMlF5Zftw1vBYnH7ky8A9SrnwL2S/m00FUzs/LVtEf8INWjPVL0rWCK8h3oV9xx27gGU6+6+qYNQfrg+OO98nZ/VJF/LUC1FkTZLW50beobXH1q2t42fxyat+1gqh1QQl2gGcre/Z+GdcKoCf/SAzaBjl8rQB94fFLY2/gbyWs2clS+Ym3d7/G5DYVc43DvrzFYWqOtQhZ4OcY42027N8dKXKaqYSD5/m6ARlfGz64Dtbh3Snq2F/U8ROq417hd9U6ivWUZh3VIWT5+ZI2b/Lzk+MU+0lgxczPXwrX8KAXjpdp9Ar+Yub6SfHyUZqzmBtx8RI876M5+2uas8q2/VpU5QE7QrxszaZ+GS/ViWEp42WHqL+U8dLHr+2Jl8X0Y81OVpTdPJdiz4x9PXjmkd38PSHm7qjX8NpFu9Lsk4K/mDlE0jU8tZaO82/g2ZXGaYTJ4HFSMZn17f1bqf3LKvvM9t2cSf0tObUHkWYvv13wTHE83k/w+pp/7cFfF5ziyuHmFvTkf9Heln95v9QbBIP9DtsSsOx+RanvtkfU3gHXGTiewLWRdYQ2qsc1gPFcXuXkh/1tz6S/8Qe2qLOG2pSFLXlf5m0JB7Zb7Psm176GgJS3Jcj/S+vgUO40krW9zpJlbW9i2UaylOOdSo63kI2YP+08IONA4Xihlzr6HBdQwsmazWSZHTtZUWdNkJWx9E3WVa5+lVhmk1jPzsUt0lfRmDQ7jAMG5gR4eJEPHk6MK+n7YTY/OHHbQLxJh0jhHJtNcwzt4/Hy+vXOgO2L++ydZlr78m2ImtPZjGm8A+bFUpZzOmmxBAe8wr5vcu1rCEhR2WQ9+Ve8ePcJp0Wol6941VKjuY1DPZgrMqlfDybq8oO50r6/pAYTjeY2DvVgrsykfj2YqMsP5nr7/pIZzGHU6Ar73m3f+VYueNpMVtRdq26HVVPZUk4M1FlDbcpiYqx39aMuPzHW2vdNrn0NASkqIwvKmxiomCcG6vW3ctFoViAwdHit63A98a+lurgcZAVOViBk+Ta8PMmiJ9k6+x45yWqJKaAGR3WQBwLl+Pbr+m2UtV7IUoupd6ZYTPENPfDcT4upd1Gii3rXUZvwmSdQJeHvHjEg66NCFiZoiPmJPywY/CIiP3gqvHhd1FF72EmwIXBfzhD1VzkelK0knosTvLt3IqW8SYt2886m1y2PK3iSdFtPPN2EYQwh04+/cnLrneywzFXU3v4+WFvAz3MYPO+gOXyNyagmenH1PTMX1f7rqP1rU7QfPMuo/TeOGNCRd95pfEZ1kB9A5m5bn2d4gP1OQHVllErOiOsr6qwJBr8IrUj19waTla5+f4OF12rgrSfsNGrbCifLr3GGshz7ZfSD9er1sFLIAj9oaumTZv6q9W/actuy+ck3S7jPUZtWqs8tGciqduXm2v+57fqbPkvdsMjuZDn+WWDUWRNktdLrs2N/8uQ3+fhJJz7tmeXGZFiQ7hlyYKdtZzleIDQT5m2UbbmHMNiDykM5bj2cIm6dSTh4flY7IOMXIt/jDUCUwcrZ57Us97GE3GqL6MPj1If1rg/gP4tw8HyW+vA70Qf2Z2oxxflrqeIf6sx6MeUXsNAJ5xoZxd9ev+FvaKjF3C7UTn9bHzrD3GXb4fwV83Qz9WVlQt1qsYky6hl33kxQ8yibPCp+Uc55VJbzKEmXUc9jo1xDQIrKaPcib+eHjb7CLeSinsfeka66cCLH7UqTyIF/exO5etGGKOc9snpAbpTz5pNg8Gwh572zyWDnjZMyPrlbSRg+8xh44/z/18n2nc56J+tPL9ViYqXg8UmWN3J+jI+TTZ8c+8cZcS0nysnjGs4K9x1y+Uppu8MyTHx7r+VEnS5znYHjCVwbWUdoo1pAAGunvmUTVA7unTerqM3s41BnJfFMMNuMSujU9aFs/PzBqXeps7w+5BMHdRUvmwPXvrGL2hzgJKXDYTyf4ZvBw5sL4OH5W0nfp9tc4JtCfCMj6Vpu6OsPiPH1Sr/ep/ItCu7z9m7S8+0OFefmUJzzCy3ws/2AZzHFucOo790p+pDZImVarjHtIiUbWx7i+Dktl1Mb62tc/9mWeBwwV7wt8SYjeHhus189pgi2dDTNJ7SPxyvNKaY/4CnGKSa3wR+7L7Lv6tj9hIRYs8hhO8KJ6KJM6texBnX5xddq+x577J5NIpp87I56/eILjWYFAkOHV7sO1xM/aMWUVevKQVbgZAVClm/DyxM2esIut++xR/jLg/y/tAOBclkd4avsYCNlB+zZODvg40PwHELZwSby5qAvpzb5fiGi9OPVA7IuELLYYLY4TEXDLVQ3eHxUUkf40Bk/xMr35MuIJ+4Iv3+nwP7nI/xzEyIFHBL6Xsoj/P5dkJgjfJ/ppNEtZwpbCMMYQqYffz/WtaQXnsMXx+zkgJ/nMHj2pjn8oer4Oi6lOrZE1LEf4eB5cqcBGR8xGdVEL+6YLs1Ftf/KFDpaKXT0bWr/xzJvf2vOZ15sz52ifdfF2FNmQatxRqSebyQ9d0fomecPeG4gPX9K2AAfl/ev0KhvaTLmxU5WMTJmfmEWjjL4hVmbnazNQhb4N1O7uBxkpWmXb0Moa842ykI5jG84LE0ko5iruqj5dGcKu+UHesHz2MgBGXeLmDonGCy3wsk9Rcj9BsXq+6qjdcV0dR2Lr8yhbMjeRe0qnl9p6vUr7D/4OloX4eD5bso43U1tL9ULufp/25Dq4wepOQZznO5yPCgDPdQTD7+Qy++C83jy4qzbyfe78XzlpFvI4jl5RoSsHuLhq3/Mg7J8Xe+XMePJ8xdlt/UqHF+fYH2tcxi3H7LWCVngXyfKYR6jzfOpfKcox/P7j2THT4rcB/VyXoh6wjLPU5l1gv40+a0zXHvBz/4FPN8lv/UM+Q/Q+Z75Vlcvt/UU0VaWw+PAuTzrU40DaPwSLl7XRO3MsSyvY7axrYRhTq4X8v1VGR77+aKPlYT3rqaDPt3sUzPQH8g6iMql2dU+yLWzGOtWfkEMdM6xZUTNgFyfZ4GfT2/BczbNr5HU962uD6yPzaIt+KsOMjupjX1BDOqsCQbP3yLV36h8OvTEO93ZXHluzKVZf2aXM/S9IMbHVe8b8IIY6Mn7ebQNcixk5805Hr+tQX59Xt/1xM++YrOTFZWTsb2Dl3Oy9fYZZYuRP7PP9DE6bd4Q5/95/2A/8gtR+fJUwsGzhvzClJqBOtTJ1lDbe5YnW34s1ttnvrbqH1Hhx4/4JChNfvNyucHl/KFHiM+177nt+mvMcZsKzUV9X6LWrEfExGa1ZgXPW8gG54m8BP6kLhjsW4YF+euHCvqu/AjLAsZ25dcfKif0ebE6SeT9mmLub6j9oHkkK81+0Dwnqxj7QfzCQcwTzic3OFkbhCzw8zzjcpCVpl2+DVFz9mSas369An7OJ8FTQ3O2VcRW1M/64HkAmfjL7qAtPr7wQdvGbOqXB23errKLr335pPdzG0T9GV0vn632YDa6+pFPQk9JeSXnk+gLj18aewP/BsI2O1lRdtOdwm7Y14PnHlqDbhTrsGL6pDaS1baNslCO31W1vT4csqqD/Md2ijjn2kLZ2awPG9tCHeAxB54T59CcwEE55gT4DyAcPJfSnDhP+FJ+VAJloGe/ThpGbQLPJlc3n1mAt5zoPL7My/OR61Xl+LNft/F8byOsTdTD8duX8Z99O3svtdjnLYTh5xVPJazSyRtpbdrkZLN+/b7ZmYTDf2CPFjT2FeC5wsY86ixvg6tvrn3PbdfftJxaK6JvGwgHz8di2qlinJqb3i/7R+TqgsF+uZzonDcwL88ZXrupcmwf/kIL+ylu0+kp61lGclRODD7MM7ZpjC98Ypr5BF6eTzcP4Xzy6x70jecTeL6YMJ+S9uDUfEIZ1Bs1n0D3eSjnJX5u+M9+bnG8VDcq0UaMXQ/xRI0v2yd47orRW60oy7GJ9cE+zc+JifZ9q+gH2gjaRGojeO5LmIMZ7SXNVudE6BvPTfA8kDAHfd7s81Y1T/1+Aa/lwVtOdJ4fUXtvGa1NYh99RZ1Z771tdPX7vTdcQoS+vO1WsPLUoclPKTHjxawK3mxoj1Fi9ohI+FE5DKEnGFyPNxaVADyaYNC+LC9AVBBkgy4L8h0KX7DL5gAjlxcIcLnCv6eJA8FTpFss8MqDfONVh42QjTI8hmuc7CQDhw4W2Hd2iGhnlWvTAtGXpxPq845WvRvJ1wfaOlHfs0PjaJt4rLwtsaMFz98S9OI3CNSFS+9o/aUNvnDQnbkOpuXUwbQKNuD5T4Kd43LNRmp7qS7B9o9lzCVY8MSNCcrwporfzOHkmA8x/RzAuPYQj7/8coaTw8F9hG1SRunbl+VYUYyLMKeJujgu1Y0c3K+4uASeA2jzdRf7rDZflX/DYl35Ux+reLMCPHvE6JQvh3CiA/36DcZy4uOxLxdyUCa7g+/Ggi/LjU6YX7BnjEt29tw4yJ77/U/MZTn1no1CLsvxRR7v9+IWcD3EEzX3lP+cmqBvX5YPOFRs4D6UEX0ZtW9dij50RfSBbRo802P6wLJ83gZZ4Rzih0CKnbd1Ul8rqC7uC3jmkP9aZRjyti5XLuTpcLJRhn1ch5OdNm/DxTf2DWh7lWsTX8ADz+EpxwXtV3mbr0/5DvAcGVNfdmOsLwSjfasJB8/RCXrxPkXlbf7Jvk6nF7ZN8HLcYBv03/3BkMo3lB2r3MLbscq7wfOmlLkF5yt1FKvV5V/fRlzY2RrTxqkxbTwxYY51ktxib8LwXGKfyHMPPM0Jc8zPHzXH/DxEGT508JfSstNBU97rXnwuwToAz9KUucRQXLzvH0uqzz/85p/WVWOCMpxLeF/AF+jYB/o5oOKwXzf7Byl53dyZMpdgn35EzOWc7PZTmuQ6U+UY/WuvlHNpPbW9VHNJ5aVp3kXtfaO/hB516SzqUKonGFy/nze8+Q6es2J0y3M37YVNvlgYUJsC1278qYtpvM5EvbzOPJ/yND+PwK/2zm6gdeZ7RexSF/T9OpPzo6j4yutM8FyYsM70uUGYL3hfwutM73tRRuWpWGdmExv61pk+Pq5x7eP4eNkOExsaU73/3Ptq9f7zqHjNa0oVGzDnssztrtuG3G4ExQb/8BL3oYzoy6h9a1L0oTOiD2zT4Pl0yrzdrzMhK5xD/EKAYq8zV1NfOTfgvoDni+S/VhqGdWanK8drUchGGfZxq5zsKD15v4a1I/sGtL3KtYnXmeC5vcD1lNoH8/Up3wGeryasAbIZ4ybp49A+zovBc3eBawB1GSAqJ0W9bJvg5bjBNui/+7VD1IXyqFymh3i8L/IPTrIveiDBF/myHO/VA4RZr3n8mKs1D3h+tMPsnzalOg/xc1Cdh0TFNbXm4TzVnymDvycYXL/fX+IzZfD8MiFP9fvuaR5o5bycfSGfKWd0iTjvEjP8ul8D8BnJkxQzoG/EDP9LYmyTkK18eJeTnXQGspjkp3lAFvz8ELL3SWnXBqoNPk+CHk4hHp9j+L00zjH+mjKWwRc0xcj6B601/mafox5srthpoI6uiDrUGXRALxv518jBMoZFyIjTS5Poy4sJfs3vC/e+QGmnwfTTI+g+B2adRJWvitGZ/60p1tn5pLNq+xz1YH/U2pJ11D+3Se4uJFc9+J/Gdnx7+IyZ9bQL6WFdivaCZ3dq7x47DdThH1ZnOu8/RNWRtBdcEUTbKvtjrkvdE9mH2n/IToPrVi8oOUi0B21SD8od5Oovxt4GP8DkLwuHfZlIuo56SQDf+QLPXNLHZNKH1yHrgx9gUr8rkFHsi32ACXVm/er0oXsgPf9cHvWrh0czOhedrdYWfo9yVND3AFPUA/BoG+TwA0z+XDqtval7NZudLLb3tPuhUfvo7MvAc5jJTtpHZ/94J71EpcuVSesfUI73Pv0L+HofqKW++3wE/LwvAJ6l5B8WJMQnv57Cfibvj/rcHTTe+wTPMTE6rSM+viuJeeVtgPc4eQ6XCzm895nNvkBj3uvs4/YFwHN8wvwqd2+tLeXep1oj+h+oV2vEqJ+B4L0FP54cE+PuzGFe9RBP1NxT9xJaEvTty3IMrgsG79lyH/gFTcuofZ0p+tAR0Qe157Uypg8sy+998rlwNj/nkMvF7U9yX8CzhvwXfvYB69gOVy7kWeFkowz7uBVOdtL6ze99sm9A26tcm3jdDJ71KccF7Vd7u74+5Tv6fxsqpr7sxrhJ+rj+uUk4eLYk6MX7FHU+utLxrHJ6YdvkPXQ/hwLx3ecuHH95jkTtXfcQTyF71+cm+CJfluM9nxGuiWmjuivk/WV3MLiN4Hl/whzLJI5OyxUcRy8qcI6leZm0j1ucm3SQDrL5eZf4OzasG/BcljKX6KK2l2q/uX9uxdyx4TM78PhxU3dswMO5YdR9xh7iKeQ+47UxuuX9SPQhah+sKmZvQq2L/Avfea3qcwV1V+amBLuIunfTKWR9NkGW13mrfcZ4ss9S91h9G9Q4fCHBH2WzRu/7Ca7VEf2Ly1fVPT2/hs6s3eZHo3wI6xc8d6T0IZnfxZiWK9o9PT8myoeoO/+wyyzv6d2fcn+BfdWN4ier4nwIYl2cDwGP8iHfHxKbOzhXqG94MME/+bFL83zIS81+H0lpv5nfjXwJ22/UiwB4LoLniW2w3ytjfgiA60cb/bPFyn7VGRd4nk6w32z2lafLuat0CZ5nC1w/N9rnuGcxUEbZ7+qsdRCxjlkvdACeF1La7xZqe6nst38sY/YDee8JPH5M/M8l1geD70dybOM1ZpoXV3c4+aoc9gjYpqDTKsfDNtXPU9v3f5RNZXNWNl3OJ//icZ5PNTHtTLuf68/GUIZtaotrQ9Y/lejzgvXBYB2AZ1SCDqJ8RpwOUIbnMHj4ZVx+n4rjEu8b+HEoJC7xfADPq2L6XCvK8o8hReWVXgf+fpRaU4NHjcuYBBvK5oxmWqwNqb2lCQXaUCF7S2xDam8py/21FU4Ha4QOwLN/wnwayryyfyypPv+zxOqnyP2Y9J8b2P9R51Tbar/eNpT9gmf2NtjvxeIHgTg+qh+24DzxsNoBWSfWDvAwf9juBfadfywsaj3J75ABzxEvEbufX6DdH22fC7V7b3dZ62BFCh2A55gEHXg7W5RCByuEDnyc5HlXEeTPX7ZlL2uYa/9bE+Z0ZYTs0M6XO9n8fA7uoUTJRbthBz3Uvihb4TaBpznBD/iyvS/eTfgZZr/nCxntov7WhPFPujdURzw8tqsi2qDssH1I/EXfnm/U2WRHjA76zz1JB6Wz8YOljSv9gqczZWxfS23P5tzo4MxjO/9QqX8ma1gw+AX7hdgvyrL9bIrRLfsT9KFWyAvrmSNyc9hrduvNaXIPx6/1eA/nHdvpL9Q6A2XYnta6NmSng8ZYe2IdgOf8HSVXFne61B6Ot6c0619lT+DhNWMae/LrWmVP4LkkwZ5gE3wvxN9N4Tp9u/hFpCsi2sX7QeC5fEj2g/rss4XaE7UXAp4rE+yzJcjXSxr7bHF6qQsGr6WqiS8L+4zKaVg34LkupX1yrC6VffbPrQJ/rNuPm9+LqieeFYT5Pc6o+DNSxJ8VVD/bapStgOfzlJP/qHawXLSJ/TywDPO9JmVLKm8Cz+0F2hK/7B88Ph6iTFzuyHrpzl4v00N5zUGyXsBzd4JemoPC9dIs9NLi2hAE+fEGegNfhs+wNMXpiH0TeL61w+QIuRneB/XbANXnxww8cXHBj5nKEdgHQSb7hbhY3UN1s69K8j8/Sbmm5rzk8RED9LWuTIbzKvYF5vxs1Nps6pfPRnl75TnDe6felymf6OcRl+vYxnKrt7Ec9nuyy1W0n8A849gDnqeK4Eu9DlCG8zXvKznGtIv6KoJ8u9sq2v5MTNtZ/ooI+dyfs4T8nXbu+7/3x6BrB8vlHyP3uU8dyQEWjvssakuxY+hM6gOPwyzCwfPvHWZPJtfk48NCtJfqm0ntqyAenoezHA/KQA/1xMP3AEBfSLL8vG929dUTf3NMOcyLHuLxsaTFyeFYUm1zMOk9FAsJW+HkhfXMMDkcX/g5v513Hmifz1GVjYBnDtnIKPucZCOIx7VBvr7Cv+ogfxxKFetQZ02QP57FjnULXf0+XmToI5qUHfl5PSrom2toJ9oyk8qEf3geiseVcwQf31RcBH9LSlnBNspqLlBWs5M11P5Q5cszE/oR5w9Pp74qf+hjtcrR1DskWmJkNRcoq9nJYl/XQthKJ5/9X4/9z/6P/S/qV89LRj0DofbgD47x0bWibCjzYRtLlTuoHM7Pb85TDicfvHjnwXJ5v6PZYaXyN74fKieZF6PHNL4rbs7z+zm8b2O9dGevl95cLRck6wU8xyToJRcUrpec0MtM14YgyI/P0Bv4qulzFnMnSkc8p8BzfIINwn/zXk2p9jtUPuvHTOWzfr77MasPdI4L24ZM9gsqBkJeD9XNuWOS/2lN0L0vy/km54p83ylqT5qfM/XPMqtzCfCsjGljOBfY9xb7/ITvPXA7+cwPPKck2Hp7kK8XdX7iz9tQhtfjK10bstPBbHmGtEboADzdKW05+1xs9qDzk/6xpPq8PYEnbkzUfhZ4VhLWf0eFZPk5oPKXKNvguQienpT5SzvJvI7yF//M8I50Hnlugj2lGbs055Gluy/QZ0/NKXQAnventCf+jZxS2ZNa22zPWYC6Lx93X0DZjv+NNJX7g+eyGN2ybbQI+WiDejcV+OPe0412LSWe5oi283OX4Lk6ISZmacMLqT1R8xc81ybYsN9TgR+Nmy8owzbs15xZ2/Asp4N1Qgfg+VSCDnx+n8ZmUIafc/Trdc5f1d4K79Wl2VvxslQ5/87SuHmt8tFbE+Z1Nr8zMk2OqbI/8Hy5wDFFvOYx9T4BZdS8Xpe5DmbLuzItQgfguTtBB1F2G6cDv3/F7/7ieQ1d8d45cphZxKf2b64S+zd8b8bvIYbt5Dn6HdqzeUKszTAuC+w7+yFvC6DxsxDg+UGCLWSz165twfsMtoWHCrQF9SyEjwMow37Ln/VkrYOZKXQAnp8XuP/VnUIHM4UO/LzneVcR5M/fWVSHlzXMtf/xhDldGSGb7ZNtVj0L8UTMPoZ6X1aUrai48YeEPNmXDWW+U/gBfna6lPaF9in7erZA+1J33qPsK+4stZz4OK9nXr5fxf5dlePP3pbCObPF8XE97TF9QR/4fi6Pc5R+wfNigp/NZi9Z+xi/v802WlYX3U7lY9Q8iNpjR71sC+AtDwbnfp6X50F/eyPK8edmV4bvabcUUA/oy0hOh+NTOlJ+J2ru8FiBZ1TMmNSKsqHMqeR3Wg3vtP/D+ZbNGbZeu/k1A6/d9kyYb94O1bMBfj8AZdjvtLg2ZKeDxljfyzoAz+iE8cX+Syu1vVT3wdXZhLdvlXP7MfGxQJ2jp43Z0ENczAbPlBjdhm2ATbBvwud2UadvF8eDWRHtaqV2gScX066s7dPHA7SP5yZ4mgqMB2nsc6bTC+ecbJ/ZnB02yv1R5X/BMyelffKaoVT22T+3YvZHwRN3dqjuU/jzXo6brdR/lfdWUvxBGZ7TrUG+fia6+uNiJHg5Rr4uwZ4yujM2W/l69E3l2ccm2JP3req8ISrPZnvyuW850dnH1rrv4V91kO/7inn2PczVVUGfUWdNkNn95947dv58zO9Djvq/f7uRvja59lWw8uDw+LLkSXUDjfeHu+DnF4aDZ2ndgIxFJMM/jKKCIh++MU+HqKclZULJL5N+bnjfZzboTqqfnUxFoH/wMqMLM3lJZ0WgEw5OOleTbnFpAi99b3Xl2FlCNsrwGM50spMM3G/gsUPkixncpgWiL10J9XlHi/o7YuoDbZaor3toHK288IN2sqMFz2kJevEXbLwTUI4WZfhBOL9ZVuoNQxVswHNmysSFH+TPJnGZNihx6R/LmEur4EmzgQk98CESJy7wVTmS5ecAxrWHeHxS3+HkcHB/T4K+fVmOFSoQxwVLdRjMP9aDMeW4dBH5Pb9IVz9kAZ7PUVz6oH3mOKB8CebPAfad/WnUQol/rAc8l8folO0POgj9uE9c0ZZy4uO5Vi7koEzWCxHv0/wlSvZp1+ww9tyY6qJGGh8bZfO8aasWIphzhW4eRM093jwAz2dS5km8UHmU8iS1MckHJqAvo/YtTNGHmRF9UDHg1pQLeJ+3cTybQvzFztty1NcKqkvF9DvJf00yDHmb32QOeSY72SjDPm6yk520EQkd4PIB+wa0vcq1iX+sBzz3FLixojalfH3Kd4Dnmwl5WzZj3CR9HNo3hXDwfLvAvE1tbkxxPDmnF7ZN8HLcYBv03/0DTxx/eY54O8a49RCP90XtTk7eAXiCL/JlOd7zIQDPH+8vp9rnNaIfVY6H/SV4fp4wxzJa/81WeTH6oA65flWg7cFvpDnk4kMHn4dmpwNtZy1CB+B5Yoc5dBj8Yz39YxmTS3DcAk/UQyzQAz/QxvkFbKLQQzxvG2oTGTx/3YZDvLspl/D2m906s6ngywP/3IHnkspL01yGTLrMwOvMDVQu6qCoJxhcf5qDoor6vv+TXjiGPtQKeWE9dwwfoPv4lnadiXK8zkS9vM7cqX5AbtQlL87BwDOlfkBGnX3mzWzey/J+VK0zo/JkXmeCZ7cYPfPDb7yh7vMKXmeCj/2WyjF4nZlz2FzI2K6/vnXmBOozz2eOGeDZO0YXpX1YLt2B9ARqH+fBbM8+fqAMryn9eIaY319Lu0bjNWGU/wTPpAR9+7KhzCsoNviYxn3gi1LLqH2zUvQhF9EHlU/kYvrAsvw6k3Oj8cRf7HXmBOprBdXFfQHPbPJfYw3DOjPnyoU845xslGEfN87JTns+gLUj+wa0vcq1ideZ4Dk05big/WofzNenfAd45sbUl90YN0kfh/aNJxw8RyXoxfsUdbFhvOOZ4PTCtglejhtsg/77TCdL7WvH5TI9xOPjoFoXgOfYBF/ky3K85zyVX16Zzf7ptEY15ioHB8/xBY55moeuUYbXfX6PIDsd9M378Sl0AJ7mlLF9KHL1/rGk+qJsLG5MUCbuMkvaGBh12Yxtp39tlpCrwybQh1ohL6znFIrtKMPrvlJeFo7bR+lMsCc/LjiDK3QfpdW1IUMdxPoUlStsSGlP2b/Md9q0NPso3sel2UfxPo73UXhNlmbty3dKota+4Dkr5doXfYha+84je8Ic5HMY/yPtw1w7zqN16TWUGzJ/2Bf1MFZUfxeI/r43IXfKKI7K3Al9U3H0ggLjqHoYKyqOol72fdnH0WkyjiodgOfDCTrwcWtcCh2MFzqY4NrA864iyJ+/HBu9rGGu/VcmzOnKCNm8Ju4kDPbED2MpuWh3Ib6B2wSe61OumTtJZgP5gS7DOY5E+X2uHzw3FTj+3s/WEQ+vicZFtIHnJnhuHpK1Vt8P04yL6N/4GB2gDMf2Ca5cdu3u+/HKsSn0C57bU8b2Lmp7NrF9+qBcuX+eUH1jqX1RPsePCcpwbAfPBCrX5cop+wW/t1+UZfu5NyG2wy7Rh1ohr/fF2FV9n3mPlh90GkftK3a8iJpLbMPg+U6Cv/Bjhz7y2Hmb82PHPmVc5jro21cek0IH4HkwpT1xvC/VvnL/WFJ9Y6h9rO+4MUEZtifwxPnGQu75sK8Cz6MJ9gSbQB/q6PMsUadv10biGRPRLs6TwPPbhBiVpX02UHs4RvHcBM+TCfbZEOTrJY19ogzfOxnj2lBNfFnYZ1Q+0UA4eP6S0j7HUttLZZ9qLRuVg/CYNDgen4PUE88YwvweHscf2F84/28T8YftyecyE1393I+4B53A82KCPY119c2177nt+5utfD36xnEQPGWjotupfKsaOx8TUQb11pFe+JzGx8Dwr9Z9D/8yfEFp7INOqLMmyMr/9T3o5H25zwfxoBP0tcm1r4KVB4eX91b4UQON9xuH4FcPyewxakDGKJKRJsmMCopdop7dYyZhVEJ5fUxCyQYd96DTGOIv4qDmJZ0VgU44OOlsIN2ONgwHmX6TnJ0lZKMMj2GDk51k4H5zjB0i2lnl2rRA9GV8Qn3e0aL+rpj6QBsj6psUU1+GjraJx8rbEjta8OyfoJfR9D1qUegdLcqgXk5cxmauA528qWADnukJdl66hcXgB536x5Lqa6D2sb7jxgRloId64uHEBb5qNMnycwDj2kM8PqnvcnI4uB+eoG9flmOFCsRxwZIvoKEcX0DDmHJcmk9+zy/S+x+OIxw8yyguvdY+cxxQvgTzR11Ai1oo8QU08Bwbo1O1cAj9eIN99r62nPgaSE65kIMyWS9EvE8b69rHPu2EHcaeG1NtvKXxsQ2OB2Wgh6iFCOYcj5df+Kg8KWruqY2Z1pR5Ei9ULqQ8aayjcx/KiL6M2jc2RR8aIvqgYsCqhDjYQO3hvI3j2b7EX+y8bTT1tYLqUjF9LfmvvQ1D3tbgyoU8+zjZKMM+bh8nO2kjEjrApbIGwtH2KtcmvoAGng0pxwXtR/0zY+pTvgM8mxLytmzGuEn6uAb7vi/h4NlaYN7G647A6QU8KNNg/7NtgpfjBtug/z7GyeL4y3PE2zHGrYd4vC+a6eSwLzovwRf5shzveQOc54/3l+pBJ782AI/azP9AwhzLaP03W+XF6AOvYcBzcYG2N8k+8xwb43hQhg8dfB6anQ60nY0TOgDP5SlzifHU9lJdeGtAe2NyCfDEjQnKQA/1weD1Gl+CayBZDU6WisPeNtQmMniuT5lLNJDMbsolvP1mt85sij3AUr7p0zvwXFJ5qZ8nadb+KMMb5ODZQOXGu3KF5KAoy7q9LUa3PHfVgTBvyHdWDdB9fBvmvketM1GO15mol9eZd1Ge5ucR+DkHA8+jtM78OsUulOF1pvejap3ZQG2KWmeC5/6EdSb4eEPd5xW8zgQf+y2VY/A6c7TD5tr33Hb99a0zOdfi+cwxAzw/SGnPfFg3lAfSPt9TB9I+fqAMryn9ePI6My63UzYedXjF/hM8v0gZGzjeHEexwcc07kMZ0ZdR+8ak6MPoiD6ofOK3KfN2v87k3Ggf4i/2OnNf6msF1cV9Ac+fyH/tZRjWmaNdOV6LQjbKsI/b28lOez6AtSP7BrS9yrWJ15ngeabA9RTqHxdTn/Id4Hk+YQ2QzRg3SR+H9u1DOHheSNCL9ylqnbmP49nX6YVtE7wcN9gG/fcGJ0vta8flMj3E02Cfq4LodQF4ykwhUb7Il+V4z7Gac71s1jx9DyU0UB+izq7AUx3TN5YVBPn+Ls26j8+Ehnrdp3TQP48Sxrd0sT37dR/0oNZ9Ko6r8x8fx9WZI3j2itEtXyBtsP9rhbzeC9kU2/0LFrK7CDxNXoxC+8aL/o5LsCe/v6QedBrveHyuz+dM47PXQSPPizgdgGdKSnvih7RK9aBTsS9Dsz2p/UR/sUbZk3/JR5eTU0k8MxLsyZ+/1Ap5YT0vVPZ95gccOJ6r9SXP80N3GZB1wi4DPMwf9gX3M9RD8P4hcb7LAZ65Mf3N+l4Bx4ooPweeoxLs3vtj9aBT1P4K273fVy/13QqlA/C8vsBcIs1FvgahAxW3uqgMz98xVIeXNcy1/80Jc7oyQjbfpVD+gB90UnLRbthBD7Uvyla4TeA5KcHv+rKhzAfJD0AO+y/v9yGjkXDwLCnQBvz6gceWc8OGiDaofLYtwV9kk3P2PejUENG/uLUJyswiHZQuV54uc2Wl3/719A6TK0/PPFfmF/4on+NzOWW//jzEP6zE9nNaQmz3ZzK1Ql5Yz7vJpicYDnst9YNOcf3tSfAXUefFPHZRDzqxPY13bSj1g05KB+A5N6U9TaC2v1QfdGJ7SvOgk7In/+Cgf2kOPzh4UYI9wSbQB/a9+4k6fbviHnQCDz8oDJ5LE2JUKR90QvvUg04fLUI+F/WgE+rdER50wlg1EA6ej6e0T87HS2Wf/XMr5kEn8PCYNDgelGH7BA/nuLCJCdR/b3/h/H8TxZ/9nGy2J+hnon1vJJzlVRCNH3QCzy1DYk99d2x8vFP2BJ5bC4x30F2aeMf25ONdeTD44fnwr9Z9D/+qg3zfV0R9xT7ohDprgsxeRtC7j7Wfq9+vQfCgE/S1ybWvgpWnLpTfQws8FIq7UA6eB2jx+Q2S4TeQYAg9weB6vLHMFPV8K8Gh+bKhzEZh0AdS/exkKqh/nHRms0mRy3PoFUG+UfAiFTwPkW4bDMNBpk+WObBDNsqoyxoPpTRwvznGDtEv+EFTm2M/S6jPO1rUPzOmPnXhsv9QfmgcbZNKXOKe0H6swMTFO4G4xIWf0B7r2pB18uYXFirYgOf3KROX/ajtpXrQqQHtjVlYgCfNwgJ6UBePQwy+qoFkNThZ6jKyX7z7BTgH9+cS9O3LcqzgZC6g+gPXRvzxBTSU4wtoSJI4Lv2L/B4vljgBY58Gnj13HZDxX5NRR2XYl/jAjUtl7E+9vwGNL6D1H8BY3VEX0MAHHfAlM2+HnARxolUu5KBMdnFLbxSMd+1je66J0QXbM8ZlqBci3p7VQiTqwAN64AsefGEZc47Hyy/SVZ4UNfd4kQ6eVyTo25cNZe5FedJ4R+c+lBF9GbVvfJDch7ERfWCbBs++MX1gWT5vg6zsFuK5XFxuxX0Bz8RdB9rBD6hwXsP+J+ohKvZxo53stA+M41IZ+4YG++wfPOILaOCZknJc0H7UPzGmPuU7wHNgTH3ZjbG+NI/2NRAOnmkJevE+RS2QGxwPyvAm33jXBo4bfkHM31Vu4RfWyo4xbj3E433RRCcn77A9wRf5shzvec3GsXqiayMeYuJY7TdbwcObMOA5MmGOZbSon6029JRPBM/RCXPM55iT7HOaCzqot7RvK2ySBy9qPoHn2JS5RPZrg6bM31YIPai3FaqHRdQcUHHY20ajk8O2cVLKXIJ9wjOW8IdzaX/D+UGnydSWYs+lSdQH7ttkwsHTknIu7U9tL9Vc6v/VQKpvErWvgnh4Lk12PCgDPdQTDz/otL8rp+YNZPl5g7Ks29UxuuW5iz7UCnm9lzwqBuhTnJy060yU43Um4gGvM7spT+P5wvFD/armRbTO3Gif66jM/sFguX6dyXuSXs+g8ToTPJsT1png41+AhG+c5NpSTny82Vwu5PA6M5tN9751JsfrUPZk175K4jk7pT1jXEq5zlT27PMYZc9+0x9loAc+3JpEGOYcj5f/xVDMqx7igW783ONfMQXPBQn69mVDmZ+n2DDZ0bkPZURfRu2bnKIP+0X0gW0aPJcm5FScp/M6E7LCOeT3Xuba99x2/vEcwVpwgugLeK4m/8UHaLzeYP8z3slWD3OOd7Kj9OT9GtaO6jJClWsTrzPBc23KcUH7Uf/UmPqU7wDPjQlrgGzGuEn6OH9YzWN8U4JevE9BTC0TegHPRKcXtk3en/RzKBDfJzlZHH95jng7xrj1EI+Pg1OdHI6Dtyb4Il+W433Y34MM53O/A6gtxRvzvocSOGcKZbfYd47x4Plqwpj73G2+feYxP8DxoAzqDXXg84zsdNA376em0AF47k0Z2w+itpcqV+8fS6pvKrWP9R03Jv5Xp+sDnR8e6MqBv4d4oIcqx4OylcTz/YRc3efltUJeWM9aiu2Yg832fzgeh1L7imhPvXNpDvWL+3so4eD5aYI9zaHvoazF9pnH7lDHgzJsT/NcGzLUQa9POSSFDsDzaEp7mk9tL9WDTv1jSfUdQu1jfceNCcqwPYFnHpWb58ope4IevD2hbCXxPJVgT7AJ9KFWyAvr2UfYE89F8M6ndlYS/gytS2t2G9wXjOMC+34G4fNcf0HjuxzgeT4hdyql3aNvyu5fKNDu1YNOUXaPekts9zll90oH4Plfgg68nbWk0MEhQgdzXBt43lUE+fOXbdnLGubaX2XzOGpOV0bIZrubTxjsiR90UnLRbthBD7Uvyla4TeDZ2WRH+V1fNpT5VHnfZ/6VwBX2fzi3llBbij23TqY+cN+WEA6e3WP6xrICk7XSPvPcWuJ4UAb18i+lg7ec+FqoPPMuJ3wJ1avKcTtbXZlwzqxwfHX0uT2mL+gDX76HfD93ULaSeMbG6Lc6yP8142LPg8XUngpqXwvh4JmYMA8W0/eoedDieFBmif3PtgDecqK3Unnm5XnAsVSV488nuzL8y4ytCfWcTPWAvozkLHd8ylaU34maO2yz4JmR0u+cTDJ3Kh+gL3dlwvnWRm0p4r5X753JwPUff6izhtpU5Pp7c+k2Vz/qKiOdLXNtqidsBbVtmZO1zMniciu3sdwq+786yN8vLaJepvOc8/FgGeHgmZ/gB1pd/7yOlQ5QhuNBm2tD1HxtzUQvfWuvwLUTf6gz6/mapEs8HABdbXLtawhIUdlMoGk59dPbIYaFJeoNv76HFoRwtHxYdzwlaegUJiX4lxIOnsWUQJ5IMlAmCKId7nKqn3naqR7wNKd0uO0k83kbLZ7Uq6l+dgBcP/qZXRLQdxjRSvrhxQHrGTztpFsEFRxGLHPlOFmCbJ/4VRJPe4Jj8ckDDhh4XvvgCZ4W0ZeOhPq8k4KM9pj6WlybuL7OhEQvI0cmE36f5HDCv67AhF85eO+4fCLNSXxr5jpoyfFchA6WCR2AZ1OCncPftVHbs9lIaxm0Md0/llTfEmof6ztuTFCGk1affIcYfFVcIotx7SEeyKhyPDwXwfOuBH37shwrOEFHW6tde7NeOKkkHTzvK3DhhL7y2Hl9owwnTEtcG7LTQZ89LUqhA/BcktKe2BeUyp76x5LqW0Ttizos8GOCMtBDPfEsoXJLXLlCFoEoy3Hlqhjdsm0sFvLRBnznRQj4W2PKIdbzJvMi1/alTg7Pi+sTYmKWNtxM7Ymav+D5ZIINNwf5evGLOjVfUIZteJFrQ9Y2vNDpoFXoADw3J+hgoetfGptBGdTLNgNdhDYKXfFGDXx9M/F5Ownn4J/LBurfQG3iMe+w/0N9c35X7Fx7NfWdfT3qrySeu8RaCLn2BleO1zGQjTKcay93sqPG0q+bUF8P8aCdVY6nXfTl3gQ75/VQse08ah25mnDw3J+gF7+BhLdIlAm9gKfN6SW08w2uDXVE3yTqw5ii3KnEA2xEkD92vIEFmRtEOchXcQgyfBxCWdbdgynXxhtI5mZaGwPnWMJjFNa/UdQPnodpD+CF3QbLxWFQHZUBlqHdN7Ft+n6oPYZfJcxB3gSroL7wHPT2izIbSQcdrg2sl03Z62W6sk2lF/D8vkDbTKOXNqGX5a4NQZBv09Ab+KqDfD9c7LkTpSOOGeD5S8o8ewO1PZs8OzfD59n9NkD1JW3ID6N+gsePWT3xrCYMts37ey9QTPX+D/J6qG4f4+L8z38SdO/LhjLfXja4Lowz+M4SdQ3bfUBGM+l4tas367nJf7xBjjprgqxie98GuZ8b3uZ57wC8fMjXSW3zvsGvw7lc1zaWwxzI2q/6eKNyM/DU2/zJIt6g3qR4s0XUVxHk28VW0fY9YtrO8s+IkM/9OUvIn052ttfug+VuorraXV0cS4BlfZDHe/Y8DrwfDZ6xMbrjWMF7ahnFiiYfK/pjHtW3lNrHcSDuYBFl+uc68WA+8tzkw2/vWzpcffXE3xFTTu2N+jMntQ4ETy5mnDi353zfr2uj4gSfvc3YfaB97CeibKT/DIFsZHZKG0FsLvElhNg3vg3VJQQfLzL0EU3KjtSh8i7B4AP4pVQm/DvT/udx5Vjv45uKi+BvTykr2EZZywuU5dcAQ+0P++0xxh+qc4Mof3g69VX5Q69Lta/h8wDOc1YLWcsLlLXcyWJf106Yz/PZ//XY/+z/VP1qf4t9J/Nwng6eJQmx1JcNZR5Hex8+d1A5nB8TjhHLyQefs/tgubz3sdxhpfI3vh8qJ1mdkIsm+a64Oc9z0vs21sum7PUiL10pvYCnO0Ev23PpivWy1LUhCPLjM/TGd1P4vkex506UjtTdlM0p89l2anup9j5UPuvHTOWzfr77MasPdI4L2+b923NEfge5kNdDdfscNc7/nJ+ge1+W881wHKqyGYfeX8GAznF2gjFHnWH7Rthn0MI2VWfTpt4ziZoRAzqsoLrQ1jLiqaF2VNL3K2g8R7i2jiA5wEcaFhgP7AF115FORo5ILjeCyg0voBzqqyee4QXUx+V43lS7ctVOB+Gc+4DpbKTrbznJQVuwP1Dl5FQSzzUUd68le690ckP6LYKOv7h1yVDPyYoC5uTnaE6mmW8jUsybyph5M6LA8b/B2lcT5PviYq7xeKzDeTbBGlAd5NtjMeusHuh6cWW3NM2oNt0VXfa03LRQ9vBsdJIL5R5J9hdQXeVEO9LNg5B2lGFHEa3MaPMMmydo8/GAraAdbdjRgrbAsAWC9lrDXitorzPsdYL2esNeL2hvMOwNgnaMYccI2rGGHStobzTsjYJ2nGHHCdqbDHuToL3ZsDcL2lsMe4ugvdWwtwra8YYdL2gnGHaCoL3NsLcJ2omGnShobzfs7YJ2kmEnCdpCwxYKWrNhzYK2yLBFgrbYsMWCdrJhJwvaEsOWCFqLYS2C1mpYq6AtNWypoC0zbJmgtRnWJmjLDVsuaO2GtQvaCsNWCNpKw1YK2irDVglah2EdgrbasNWCdophpwjaqYadKmidhnUKWpdhXYK2xrA1grbWsLWCts6wdYLWbVi3oK03bL2gbTBsg6BtNGyjoJ1m2GmCdrphpwvaJsM2CdoZhp0haJsN2yxoWwzbImhbDdsqaGcadqag9RjWI2hnGXaWoL3DsHcI2jsNe6egnW3Y2YJ2jmHnCNq7DHuXoJ1r2LmCdp5h5wna+YadL2jvNuzdgvYew94jaO817L2C9j7D3ido7zfs/YL2AcM+IGgXGHaBoF1o2IWCdpFhFwnaxYZdLGiXGHaJoH3QsA8K2ocM+5CgfdiwDwvapYZdKmiXGXaZoF1u2OWC9hHDPiJoHzXso4J2hWFXCNqVhl0paFcZdpWgXW3Y1YL2McM+JmjXGHaNoH3csI8L2rWGXSto1xl2naBdb9j1gnaDYTcI2o2G3ShonzDsE4L2ScM+KWifMuxTgnaTYTcJ2qcN+7SgfcawzwjaZw37rKB9zrDPCdrNht0saLcYdougfd6wzwvaFwz7gqB90bAvCtqtht0qaF8y7EuCdpthtwna7YbdLmhfNuzLgvYVw74iaHcYdoegfdWwrwranYbdKWhfM+xrgnaXYXcJ2t2G3S1o9xh2j6B93bCvC9q9ht0raN8w7BuC9k3Dvilo9xl2n6Ddb9j9gvYtw74laN827NuC9oBhDwjadwz7jqB917DvCtr3DPueoH3fsO8L2g8M+4Gg/dCwHwrajwz7kaA9aNiDgvaQYQ8J2o8N+7Gg/cSwnwjaTw37qaD9zLCfCdrDhj0saI8Y9oig/dywnwvaLwz7haD90rBfCtqjhj0qaL8y7FeC9phhjwnarw37taA9btjjgvYbw34jaL817LeC9jvDfidoTxj2hKD93rDfC9qThj0paE8Z9pSg/cGwPwjaHw37o6D9ybA/CdrThj0taH827M+C9hfD/iJozxj2jKA9a9izgvZXw/4qaM8Z9pygPW/Y84L2N8P+Jmh/N+zvgvYPw/4haC8Y9oKg/dOwfwravwz7l6D927B/C9p/DPuPoP3XsP8K2ouGvSho/zPsf4IWYIO3ejBtGDBBKzOsTNDKDSsXtArDKgSt0rBKQasyrErQhhs2XNBGGDZC0KoNqxa0GsNqBG2kYSMFbSfDdhK0WsNqBW1nw3YWtDrD6gSt3rB6QRtl2ChB28WwXQRtV8N2FbTdDNtN0HY3bHdBe4VhrxC0PQzbQ9D2NGxPQXulYa8UtFcZ9ipB28uwvQRtb8P2FrR9DNtH0PY1bF9BG23YaEFrMKxB0MYYNkbQxho2VtDGGTZO0MYbNl7QJhg2QdAmGjZR0PYzbD9Bm2TYJEGbbNhkQZti2BRBm2rYVEHb37D9Be0Aww4QtAMNO1DQDjLsIEHLGZYTNByeNQraNMOmCdp0w6YLWpNhTYI2w7AZgjbTsJmCNsuwWYI227DZgnawYQcL2iGGHSJocwybI2iHGnaooL3asFcL2mGGHSZohxt2uKDNNWyuoL3GsNcI2hGGHSFoRxp2pKAdZdhRgjbPsHmCNt+w+YJ2tGFHC9oCwxYI2msNe62gvc6w1wna6w17vaC9wbA3CNoxhh0jaMcadqygvdGwNwracYYdJ2hvMuxNgvZmw94saG8x7C2C9lbD3ipoxxt2vKCdYNgJgvY2w94maCcadqKgvd2wtwvaSYadJGgLDVsoaM2GNQvaIsMWCdpiwxYL2smGnSxoSwxbImgthrUIWqthrYK21LClgrbMsGWC1mZYm6AtN2y5oLUb1i5oKwxbIWgrDVspaKsMWyVoHYZ1CNpqw1YL2imGnSJopxp2qqB1GtYpaF2GdQnaGsPWCNpaw9YK2jrD1glat2HdgrbesPWCtsGwDYK20bCNgnaaYacJ2umGnS5omwzbJGhnGHaGoG02bLOgbTFsi6BtNWyroJ1p2JmC1mNYj6CdZdhZgvYOw94haO807J2CdrZhZwvaOYadI2jvMuxdgnauYecK2nmGnSdo5xt2vqC927B3C9p7DHuPoL3XsPcK2vsMe5+gvd+w9wvaBwz7gKBdYNgFgnahYRcK2kWGXSRoFxt2saBdYtglgvZBwz4oaB8y7EOC9mHDPixolxp2qaBdZthlgna5YZcL2kcM+4igfdSwjwraFYZdIWhXGnaloF1l2FWCdrVhVwvaxwz7mKBdY9g1gvZxwz4uaNcadq2gXWfYdYJ2vWHXC9oNht0gaDcadqOgfcKwTwjaJw37pKB9yrBPCdpNht0kaJ827NOC9hnDPiNonzXss4L2OcM+J2g3G3azoN1i2C2C9nnDPi9oXzDsC4L2RcO+KGi3GnaroH3JsC8J2m2G3SZotxt2u6B92bAvC9pXDPuKoN1h2B2C9lXDvipodxp2p6B9zbCvCdpdht0laHcbdreg3WPYPYL2dcO+Lmj3GnavoH3DsG8I2jcN+6ag3WfYfYJ2v2H3C9q3DPuWoH3bsG8L2gOGPSBo3zHsO4L2XcO+K2jfM+x7gvZ9w74vaD8w7AeC9kPDfihoPzLsR4L2oGEPCtpDhj0kaD827MeC9hPDfiJoPzXsp4L2M8N+JmgPG/awoD1i2COC9nPDfi5ovzDsF4L2S8N+KWiPGvaooP3KsF8J2mOGPSZovzbs14L2uGGPC9pvDPuNoP3WsN8K2u8M+52gPWHYE4L2e8N+L2hPGvakoD1l2FOC9gfD/iBofzTsj4L2J8P+JGhPG/a0oP3ZsD8L2l8M+4ugPWPYM4L2rGHPCtpfDfuroD1n2HOC9rxhzwva3wz7m6D93bC/C9o/DPuHoL1g2AuC9k/D/ilo/zLsX4L2b8P+LWj/Mew/gvZfw/4raC8a9qKg/c+w/wla7wMr9D/ThgETtDLDygSt3LByQaswrELQKg2rFLQqw6oEbbhhwwVthGEjBK3asGpBqzGsRtBGGjZS0HYybCdBqzWsVtB2NmxnQaszrE7Q6g2rF7RRho0StF0M20XQdjVsV0HbzbDdBG13w3YXtFcY9gpB28OwPQRtT8P2FLRXGvZKQXuVYa8StL0M20vQ9jZsb0Hbx7B9BG1fw/YVtNGGjRa0BsMaBG2MYWMEbaxhYwVtnGHjBG28YeMFbYJhEwRtomETBW0/w/YTtEmGTRK0yYZNFrQphk0RtKmGTRW0/Q3bX9AOMOwAQTvQsAMF7SDDDhK0nGE5QWs0rFHQphk2TdCmGzZd0JoMaxK0GYbNELSZhs0UtFmGzRK02YbNFrSDDTtY0A4x7BBBm2PYHEE71LBDBe3Vhr1a0A4z7DBBO9ywwwVtrmFzBe01hr1G0I4w7AhBO9KwIwXtKMOOIlr4bGCt0XvL2T2d6mDgeV3wzbXvue35m93Ue3yc0bOXvb/bguch8RfWNyKb+mJ/UAd11gSZPQ/aW/8IVz/qKrP/+T0RFYThGegRhOH54Srqwx5lVMbw4VzGPmNehWXGWpnwNxznGY6/cDz42fhiP/ON56fxzDfq4vcQgIefta6k72PKBnD/DDZ0Cbn8zD0/y+7LVbhy9cTDz/wPd+WGU7t7ef/v3572ZaSVqQpcXUF+mZ2Cvh9VCv/aTlnZPe/UpWtP7+puW3ZsZ3fbGzr51Rm9f+Xic149ZQP0SlEG4zrM/jFe5sqDN+zLZMOqiaXYNlMt2lkU2bP7niuvzKbd0zLzm7n858rR/ioa16jnyocidmSk38bM4oS9s4XjUgX1g/0v2zHaEbhy+IO8miCzedGo2o26YJ/1xIM+lVqXHK+gy7iYlxe/3LwPv76Sy9hnrmO8fe6NbxyAg5dGfBsXDOA7Ynx7lX1GfPPj7eNbXTD4fRjoc15drlwYF2vtc1fL0o7XrG1ff0rbqd3r2PBYIP9RDOt3gmXBYAfKfJgQZUJe2Fl7x8pLNQD23peqzqbdvfdHa7KRnRcA0f4aGlv18hS8WEW9IAU09YKUYUZTL0gJ/6mgyo7oKMIw1+YRhnk3nzDM4aMJgx0uoIUAXnYW0vFyFrRl1yD/hS3hX2hAcJZtp65Z37a+7bj1ratXLp2//tSl3Ss7Tz2yZfVqnug8OfiPIx9nkhzxKiP42TuMEPSA6qyIwThbVYOBto+kejKclL0Z38hsZOdYZzXUL/zB+VQ4XfnPZUG+o/J0hdWKenYVWDX9vxvJKLYz3D0b2Xk6RvuVgw+KWGcoA/O1Uui0kug8h4cVvy2NJLLvVCfI/+MxB+3/AeFbPaT7MxAA","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_contract_instance_internal","get_nullifier_membership_witness","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_integer_quotient","directive_invert"]},{"name":"get_managed_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"boolean"},{"kind":"integer","sign":"unsigned","width":32}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_managed_escrows"]},{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim_bulk"],"assert_messages":{"326":"Array index out of bounds","573":"Array index out of bounds","762":"attempt to add with overflow","515":"Array index out of bounds","488":"Array index out of bounds","549":"Array index out of bounds","290":"Array index out of bounds","741":"attempt to add with overflow","220":"DKIM key has already been registered","930":"Array index out of bounds","854":"attempt to add with overflow","83":"Sender is not the registry contract","531":"Array index out of bounds","333":"Array index out of bounds","202":"Storage slot 0 not allowed. Storage slots must start from 1.","589":"Array index out of bounds","720":"Array index out of bounds","129":"Array index out of bounds","446":"Array index out of bounds","638":"Array index out of bounds","312":"SharedImmutable already initialized","775":"Array index out of bounds","434":"attempt to add with overflow","751":"Array index out of bounds","620":"Array index out of bounds","943":"attempt to add with overflow","964":"attempt to add with overflow","224":"Array index out of bounds","602":"attempt to add with overflow","791":"Array index out of bounds","922":"Array index out of bounds","465":"attempt to add with overflow","523":"attempt to add with overflow","712":"Array index out of bounds","453":"Array index out of bounds","581":"Array index out of bounds","840":"Array index out of bounds","700":"attempt to add with overflow","441":"attempt to add with overflow","822":"Array index out of bounds","499":"attempt to add with overflow","560":"attempt to add with overflow","48":"Not initialized","953":"Array index out of bounds","804":"attempt to add with overflow","481":"Array index out of bounds","286":"Storage slot 0 not allowed. Storage slots must start from 1.","539":"attempt to add with overflow","411":"Array index out of bounds","405":"attempt to add with overflow","914":"Array index out of bounds","728":"Array index out of bounds","783":"Array index out of bounds","140":"Array index out of bounds","902":"attempt to add with overflow","652":"attempt to add with overflow"}},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"get_escrow_class_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQQKAAIGBAUhAAAPAAU6AQAAHgALAAQkAAcBBgoABwQGBSEAABQABToBAAAqAAAEJAAEBAUAAAQABQAkAQQBBAAABAQCBSoABQckAAcACCoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBAUAAAQFAgUqAgUEKgAABQAABAACACoCBAUkAAQBCCQABAMEJAAEAAcqAAcDIAArDAAEAwQHIQAANAAHIAAuKgEFBCQABAIFAAAEBAIGAAAEBgUHKgEHAyMqAQUHHAAHAwkAAAcGCQosAAAAAAoAAAAJJAAEAwsMAAQDCwwhAAA8AAw6AQAAKwAABwgDJQAEAAQIBCIAAABKKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMICQ4ABAMJByEAAEcABzoBAAAqAgoFKgAJAyAAKysBCAMIBgsABAgGAAIIByEAAE4IByAAUCsACAMIBSAAXisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABcCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAFMlAQQAAQgFIABeIysAGMoYyg==","debug_symbols":"1ZrRbuIwEEX/xc882GOPPcOvrFZVaKGKFIUK6EorxL9v0k1C2iBHpaXtfUEErpl7Ysc3jHI0D+vV8+NdWW+2e7P8dTTV9r44lNu6OTqeFma1K6uqfLwbf2xs+yIv8v1TUbdH+0OxO5ilSxQWZl0/tG99aH5gU1ZrswyUTouJWn3qxMpp0DqmC9pATjtxIJKz2sUL6ijOd+oopK/UvxdGP+7dWTeo7Uj9Be6d/YRTn/oKqnOn3lHoxY5UZ8yL496HuPFvd+bdZ5pvTv1r920FunkFf/MK4eYV+OMVmLUvwdHOLYwkxJ06SZDJwojvNdQOStcMkmsG6RWD6PKVSkFouKDY0dxWE8/yZEcz2W4N00nR2G81rGpnJoWTd706eXo7KeTQAQgdwKMDBHQARgeI6AAJHUDQARQcwKMnsUdPYo+exB49iT16Env0JPboSezRkzgAXMQsAwBPmj8BYAmlMACInQB8yxIaelLRWp5rVAxdDbFjH/JiX7DtK7R9ttj2Ae6BsrsP//ztU9yw/wu5CUD4+TOgMQcAcA8k/gxAM2oNvl9wGtIUFz3uGOCOKQ8A0LvIAwD0LrIAEaB3kQcA6F3kAQByOw8A8LcnDwCQ23kAgNzOA6AncURP4oiexBE9iRN6EifsJD41h3+KXVmsqnX3gNrmub4fPa92+Pv0/5tG/A8=","brillig_names":["get_escrow_class_id"],"assert_messages":{"14":"Not initialized","59":"Array index out of bounds","70":"attempt to add with overflow","19":"Function get_escrow_class_id can only be called statically"}},{"name":"check_and_register_participant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_notes_internal","get_collapse_hints","pack_arguments_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"register_participant","is_unconstrained":false,"custom_attributes":["private","interal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_escrow_registry_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_escrow_registry_status"],"assert_messages":{"311":"Array index out of bounds","180":"Array index out of bounds","20":"Function get_escrow_registry_status can only be called statically","113":"Storage slot 0 not allowed. Storage slots must start from 1.","148":"Array index out of bounds","299":"attempt to add with overflow","340":"attempt to add with overflow","159":"attempt to add with overflow","188":"Array index out of bounds","319":"Array index out of bounds","237":"Array index out of bounds","327":"Array index out of bounds","219":"Array index out of bounds","251":"attempt to add with overflow","15":"Not initialized","172":"Array index out of bounds","201":"attempt to add with overflow"}},{"name":"get_participant_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_participant_escrows"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow_contract_id","type":{"kind":"field"},"visibility":"private"},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"768":"attempt to add with overflow","1085":"Array index out of bounds","1341":"attempt to add with overflow","1658":"Array index out of bounds","1560":"attempt to add with overflow","1646":"attempt to add with overflow","1256":"Array index out of bounds","1506":"Array index out of bounds","799":"attempt to add with overflow","153":"Array index out of bounds","787":"Array index out of bounds","915":"Array index out of bounds","1354":"Array index out of bounds","775":"attempt to add with overflow","1598":"attempt to add with overflow","1531":"Array index out of bounds","1330":"Array index out of bounds","1519":"attempt to add with overflow","745":"Array index out of bounds","873":"attempt to add with overflow","739":"attempt to add with overflow","1062":"Array index out of bounds","1117":"Array index out of bounds","1312":"Array index out of bounds","404":"SharedImmutable already initialized","660":"Array index out of bounds","142":"attempt to add with overflow","849":"Array index out of bounds","1416":"Array index out of bounds","1666":"Array index out of bounds","1398":"Array index out of bounds","1075":"attempt to add with overflow","624":"Array index out of bounds","1264":"Array index out of bounds","667":"Array index out of bounds","923":"Array index out of bounds","1362":"Array index out of bounds","1490":"Array index out of bounds","972":"Array index out of bounds","1478":"attempt to add with overflow","1539":"Array index out of bounds","1277":"attempt to add with overflow","954":"Array index out of bounds","558":"Array index out of bounds","936":"attempt to add with overflow","1125":"Array index out of bounds","1320":"attempt to add with overflow","857":"attempt to add with overflow","1046":"Array index out of bounds","1174":"Array index out of bounds","1296":"Array index out of bounds","1430":"attempt to add with overflow","1034":"attempt to add with overflow","1674":"Array index out of bounds","1156":"Array index out of bounds","833":"attempt to add with overflow","894":"attempt to add with overflow","1138":"attempt to add with overflow","815":"Array index out of bounds","620":"Storage slot 0 not allowed. Storage slots must start from 1.","108":"attempt to add with overflow","1248":"Array index out of bounds","474":"Array index out of bounds","986":"attempt to add with overflow","1236":"attempt to add with overflow","1370":"Array index out of bounds","1498":"Array index out of bounds","907":"Array index out of bounds","1096":"attempt to add with overflow","1547":"Array index out of bounds","1687":"attempt to add with overflow","377":"Initializer address is not the contract deployer","822":"Array index out of bounds","371":"Initialization hash does not match","883":"Array index out of bounds","1584":"Array index out of bounds","554":"DKIM key has already been registered","1383":"attempt to add with overflow","1188":"attempt to add with overflow","164":"attempt to add with overflow","1566":"Array index out of bounds","865":"Array index out of bounds","1054":"Array index out of bounds","536":"Storage slot 0 not allowed. Storage slots must start from 1.","1109":"Array index out of bounds","146":"Array index out of bounds","463":"Array index out of bounds","780":"Array index out of bounds","1304":"attempt to add with overflow","646":"SharedImmutable already initialized"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"2426":"attempt to add with overflow","4986":"Array index out of bounds","2292":"Array index out of bounds","945":"Storage slot 0 not allowed. Storage slots must start from 1.","1969":"Array index out of bounds","2804":"Array index out of bounds","5230":"attempt to add with overflow","2725":"Array index out of bounds","354":"Array index out of bounds","3938":"Array index out of bounds","4962":"Array index out of bounds","4505":"attempt to add with overflow","4694":"Array index out of bounds","4371":"attempt to add with overflow","5151":"attempt to add with overflow","4749":"Array index out of bounds","5553":"Array index out of bounds","4292":"Array index out of bounds","2433":"Array index out of bounds","3134":"Array index out of bounds","4481":"Array index out of bounds","3000":"attempt to add with overflow","3512":"attempt to add with overflow","2354":"attempt to add with overflow","3701":"Array index out of bounds","4024":"attempt to add with overflow","3433":"attempt to add with overflow","3622":"Array index out of bounds","5048":"Array index out of bounds","5371":"attempt to add with overflow","660":"attempt to add with overflow","1873":"attempt to add with overflow","3409":"attempt to add with overflow","3732":"Array index out of bounds","4299":"Array index out of bounds","5457":"Array index out of bounds","2306":"attempt to add with overflow","3196":"Storage slot 0 not allowed. Storage slots must start from 1.","5110":"attempt to add with overflow","2227":"Array index out of bounds","1904":"attempt to add with overflow","1770":"Array index out of bounds","1179":"Function set_contract_registered can only be called internally","2203":"Array index out of bounds","4952":"attempt to add with overflow","1990":"attempt to add with overflow","3014":"Array index out of bounds","4038":"Array index out of bounds","4928":"Array index out of bounds","5062":"attempt to add with overflow","3959":"attempt to add with overflow","2100":"Array index out of bounds","5306":"Array index out of bounds","4526":"attempt to add with overflow","5361":"attempt to add with overflow","1832":"attempt to add with overflow","5574":"attempt to add with overflow","4770":"attempt to add with overflow","4447":"Array index out of bounds","217":"attempt to add with overflow","1430":"Not initialized","3344":"attempt to add with overflow","3021":"Array index out of bounds","4045":"Array index out of bounds","4880":"Array index out of bounds","571":"Initialization hash does not match","1784":"attempt to add with overflow","3832":"Array index out of bounds","5179":"Array index out of bounds","3375":"attempt to add with overflow","1705":"Array index out of bounds","2918":"Array index out of bounds","2595":"Array index out of bounds","4454":"Array index out of bounds","5478":"attempt to add with overflow","2138":"attempt to add with overflow","3351":"attempt to add with overflow","3863":"Array index out of bounds","1681":"Array index out of bounds","2193":"attempt to add with overflow","2382":"Array index out of bounds","2571":"Array index out of bounds","4186":"DKIM key has already been registered","5375":"Array index out of bounds","5564":"attempt to add with overflow","2169":"Array index out of bounds","3894":"attempt to add with overflow","365":"attempt to add with overflow","877":"Sender is not the registry contract","3949":"attempt to add with overflow","2468":"Array index out of bounds","4973":"attempt to add with overflow","5138":"Array index out of bounds","2633":"Array index out of bounds","5382":"Array index out of bounds","963":"DKIM key has already been registered","3200":"Array index out of bounds","4547":"Array index out of bounds","2475":"Array index out of bounds","3499":"Array index out of bounds","4066":"attempt to add with overflow","5468":"attempt to add with overflow","1238":"Storage slot 0 not allowed. Storage slots must start from 1.","3853":"attempt to add with overflow","3530":"Array index out of bounds","5578":"Array index out of bounds","1860":"Array index out of bounds","2561":"attempt to add with overflow","1915":"Array index out of bounds","3963":"Array index out of bounds","2537":"Array index out of bounds","166":"attempt to add with overflow","2214":"attempt to add with overflow","3750":"Array index out of bounds","1434":"Function get_escrow_class_id can only be called statically","5585":"Array index out of bounds","142":"attempt to add with overflow","3970":"Array index out of bounds","4994":"Array index out of bounds","1977":"Array index out of bounds","118":"attempt to add with overflow","2733":"Array index out of bounds","5482":"Array index out of bounds","2788":"Array index out of bounds","3812":"attempt to add with overflow","2142":"Array index out of bounds","4001":"attempt to add with overflow","2008":"Array index out of bounds","3032":"attempt to add with overflow","4056":"attempt to add with overflow","4190":"Array index out of bounds","2764":"Array index out of bounds","4489":"attempt to add with overflow","4568":"attempt to add with overflow","771":"Sender is not the registry contract","4678":"Array index out of bounds","4757":"Array index out of bounds","5403":"attempt to add with overflow","3764":"attempt to add with overflow","3441":"Array index out of bounds","3630":"Array index out of bounds","4465":"attempt to add with overflow","4788":"Array index out of bounds","2149":"Array index out of bounds","3685":"Array index out of bounds","3039":"Array index out of bounds","1692":"attempt to add with overflow","3874":"attempt to add with overflow","2582":"attempt to add with overflow","4252":"Storage slot 0 not allowed. Storage slots must start from 1.","5489":"Array index out of bounds","3661":"Array index out of bounds","2826":"Array index out of bounds","2503":"Array index out of bounds","1022":"Storage slot 0 not allowed. Storage slots must start from 1.","2235":"Array index out of bounds","4070":"Array index out of bounds","5338":"attempt to add with overflow","5015":"attempt to add with overflow","5393":"attempt to add with overflow","2510":"Array index out of bounds","4936":"attempt to add with overflow","2754":"attempt to add with overflow","2108":"Array index out of bounds","3321":"Array index out of bounds","4400":"attempt to add with overflow","4077":"Array index out of bounds","5290":"Array index out of bounds","2651":"Array index out of bounds","4888":"Array index out of bounds","4431":"attempt to add with overflow","1926":"attempt to add with overflow","3651":"attempt to add with overflow","3840":"Array index out of bounds","5510":"attempt to add with overflow","4407":"attempt to add with overflow","1713":"Array index out of bounds","2926":"Array index out of bounds","2603":"Array index out of bounds","5163":"Array index out of bounds","5407":"Array index out of bounds","1500":"attempt to add with overflow","2713":"attempt to add with overflow","3548":"Array index out of bounds","5596":"attempt to add with overflow","2256":"attempt to add with overflow","2957":"Array index out of bounds","3981":"attempt to add with overflow","2177":"attempt to add with overflow","2366":"Array index out of bounds","2665":"attempt to add with overflow","1318":"attempt to add with overflow","5414":"Array index out of bounds","4256":"Array index out of bounds","3610":"attempt to add with overflow","2775":"attempt to add with overflow","2129":"attempt to add with overflow","4555":"Array index out of bounds","1160":"attempt to add with overflow","5445":"attempt to add with overflow","5122":"Array index out of bounds","5500":"attempt to add with overflow","2160":"attempt to add with overflow","4909":"attempt to add with overflow","1514":"Not initialized","2026":"Array index out of bounds","2404":"attempt to add with overflow","3050":"Array index out of bounds","3562":"attempt to add with overflow","3483":"Array index out of bounds","3672":"attempt to add with overflow","4586":"Array index out of bounds","844":"attempt to add with overflow","1734":"attempt to add with overflow","2947":"attempt to add with overflow","2624":"attempt to add with overflow","3459":"Array index out of bounds","4806":"Array index out of bounds","820":"attempt to add with overflow","1332":"Not initialized","1844":"Array index out of bounds","2545":"attempt to add with overflow","2088":"attempt to add with overflow","3112":"Storage slot 0 not allowed. Storage slots must start from 1.","2978":"attempt to add with overflow","2844":"Array index out of bounds","2521":"attempt to add with overflow","1174":"Not initialized","3222":"SharedImmutable already initialized","3356":"Array index out of bounds","5002":"Array index out of bounds","5514":"Array index out of bounds","4868":"attempt to add with overflow","2040":"attempt to add with overflow","2741":"Array index out of bounds","4088":"attempt to add with overflow","2796":"Array index out of bounds","1961":"Array index out of bounds","3363":"Array index out of bounds","858":"Not initialized","1882":"attempt to add with overflow","2906":"attempt to add with overflow","1937":"Array index out of bounds","4497":"Array index out of bounds","4686":"Array index out of bounds","4820":"attempt to add with overflow","4741":"Array index out of bounds","3906":"Array index out of bounds","4095":"Array index out of bounds","5198":"Array index out of bounds","3449":"attempt to add with overflow","3638":"Array index out of bounds","3315":"attempt to add with overflow","5521":"Array index out of bounds","3693":"Array index out of bounds","2858":"attempt to add with overflow","4717":"Array index out of bounds","3236":"Array index out of bounds","3425":"Array index out of bounds","2456":"attempt to add with overflow","597":"SharedImmutable already initialized","2968":"attempt to add with overflow","2243":"Array index out of bounds","2487":"attempt to add with overflow","5425":"attempt to add with overflow","1518":"Function get_escrow_registry_status can only be called statically","3243":"Array index out of bounds","2408":"Array index out of bounds","2274":"Array index out of bounds","2463":"attempt to add with overflow","4377":"Array index out of bounds","4944":"Array index out of bounds","2116":"Array index out of bounds","2817":"attempt to add with overflow","1336":"Function check_dkim_key_hash_public can only be called statically","5298":"Array index out of bounds","2415":"Array index out of bounds","1257":"SharedImmutable already initialized","2982":"Array index out of bounds","4707":"attempt to add with overflow","4896":"Array index out of bounds","5030":"Array index out of bounds","5542":"attempt to add with overflow","343":"attempt to add with overflow","3927":"attempt to add with overflow","3470":"attempt to add with overflow","3714":"attempt to add with overflow","3391":"Array index out of bounds","4604":"Array index out of bounds","1721":"Array index out of bounds","2934":"Array index out of bounds","2611":"Array index out of bounds","752":"Not initialized","2989":"Array index out of bounds","3824":"Array index out of bounds","4013":"Array index out of bounds","5171":"Array index out of bounds","1886":"Array index out of bounds","1752":"Array index out of bounds","2185":"Array index out of bounds","2374":"Array index out of bounds","3398":"Array index out of bounds","3130":"DKIM key has already been registered","4666":"attempt to add with overflow","1893":"Array index out of bounds","1948":"attempt to add with overflow","5532":"attempt to add with overflow","3917":"attempt to add with overflow","4106":"Array index out of bounds","711":"attempt to add with overflow","4618":"attempt to add with overflow","577":"Initializer address is not the contract deployer","5130":"Array index out of bounds","4539":"Array index out of bounds","4728":"attempt to add with overflow","309":"attempt to add with overflow","5319":"attempt to add with overflow","1577":"Storage slot 0 not allowed. Storage slots must start from 1.","5350":"Array index out of bounds","3491":"Array index out of bounds","4515":"Array index out of bounds","5216":"Array index out of bounds","1041":"SharedImmutable already initialized","4168":"Storage slot 0 not allowed. Storage slots must start from 1.","5192":"attempt to add with overflow","3010":"attempt to add with overflow","4034":"attempt to add with overflow","1852":"Array index out of bounds","2553":"Array index out of bounds","4278":"SharedImmutable already initialized","1395":"Storage slot 0 not allowed. Storage slots must start from 1.","4412":"Array index out of bounds","5546":"Array index out of bounds","5278":"attempt to add with overflow","347":"Array index out of bounds","2395":"attempt to add with overflow","3931":"Array index out of bounds","4419":"Array index out of bounds"}},{"name":"get_participants","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"kind":"array","length":10,"type":{"kind":"array","length":60,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_participants"]},{"name":"set_contract_registered","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["set_contract_registered"],"assert_messages":{"180":"attempt to add with overflow","369":"Array index out of bounds","14":"Not initialized","139":"SharedImmutable already initialized","206":"Array index out of bounds","238":"Array index out of bounds","357":"attempt to add with overflow","398":"attempt to add with overflow","188":"Array index out of bounds","217":"attempt to add with overflow","246":"Array index out of bounds","19":"Function set_contract_registered can only be called internally","112":"Storage slot 0 not allowed. Storage slots must start from 1.","377":"Array index out of bounds","295":"Array index out of bounds","196":"attempt to add with overflow","385":"Array index out of bounds","277":"Array index out of bounds","309":"attempt to add with overflow","172":"Array index out of bounds","230":"Array index out of bounds","259":"attempt to add with overflow"}},{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim"],"assert_messages":{"329":"Array index out of bounds","637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","50":"Sender is not the registry contract","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","713":"attempt to add with overflow","457":"attempt to add with overflow","137":"Storage slot 0 not allowed. Storage slots must start from 1."}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"admin","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"is_admin","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"admin","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"is_admin","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b3dd3286"},{"kind":"string","value":"ParticipantNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrow"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"recurring_entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"entitlement_nullifiers","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseRegistry"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"escrow_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"managed_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"participants","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"participant_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::DKIMKeyHashRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_parameters"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_parameters"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow_contract_id","type":{"kind":"field"}},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_abi"}]}},"file_map":{"100":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"},"101":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"104":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"105":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"108":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"109":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"111":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"112":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"116":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"128":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"129":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"134":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"135":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"144":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"146":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"150":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::{NoteInterface, NullifiableNote}}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = unsafe {\n            get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier)\n        };\n\n        // 2) First we prove that the tree leaf in the witness is present in the nullifier tree. This is expected to be\n        // the leaf that contains the nullifier we're proving inclusion for.\n        assert(\n            self.state.partial.nullifier_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n\n        // 3) Then we simply check that the value in the leaf is the expected one. Note that we don't need to perform\n        // any checks on the rest of the values in the leaf preimage (the next index or next nullifier), since all we\n        // care about is showing that the tree contains an entry with the expected nullifier.\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, let N: u32>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N> + NullifiableNote;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, let N: u32>(\n        self,\n        note: Note,\n        context: &mut PrivateContext\n    ) where Note: NoteInterface<N> + NullifiableNote {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"152":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"155":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LTE, rhs), \"Expected lhs to not be less than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n    }\n}\n"},"156":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"158":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"161":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"162":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"163":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"166":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"167":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"168":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n"},"169":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"171":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"172":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"174":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"175":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"176":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"177":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"189":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"191":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"192":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"201":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"207":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"208":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"209":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"211":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"212":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"214":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"234":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"236":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"239":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"265":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"286":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"290":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"309":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"334":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/recurring_entitlement_note.nr","source":"use dep::aztec::protocol_types::{\n    address::AztecAddress,\n    traits::{Serialize, Deserialize},\n    constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_bytes},\n    utils::field::field_from_bytes,\n    scalar::Scalar,\n    point::Point\n};\nuse dep::aztec::note::utils::compute_note_hash_for_nullify;\nuse dep::aztec::oracle::random::random;\nuse dep::aztec::macros::notes::note_custom_interface;\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, NoteInterface, PrivateContext};\nuse dep::aztec::keys::{\n    getters::{get_public_keys, get_nsk_app},\n    point_to_symmetric_key::point_to_symmetric_key\n};\nuse dep::compressed_string::CompressedString;\nuse std::embedded_curve_ops::multi_scalar_mul;\nuse std::hash::from_field_unsafe;\nuse dep::generators::GENERATORS;\n\n// serializes verifier_id and max_value into one field element\nglobal RECURRING_ENTITLEMENT_NOTE_LENGTH: u32 = 4;\n\n#[note_custom_interface]\npub struct RecurringEntitlementNote {\n    // admin of the escrow contract (really just needed to comply with interface)\n    admin: AztecAddress,\n    // the user that is allowed to use this entitlement\n    recipient: AztecAddress,\n    // basically a selector for which sk and pk to use when nullifying\n    is_admin: bool,\n    // the type of receipt verifier that this entitlement can be used for\n    verifier_id: u8,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // blinding factor for the note\n    randomness: Field,\n}\n\nimpl NoteInterface<RECURRING_ENTITLEMENT_NOTE_LENGTH> for RecurringEntitlementNote {\n    \n    fn serialize_content(self) -> [Field; RECURRING_ENTITLEMENT_NOTE_LENGTH] {\n        // serialize max_value and verifier_id together\n        let max_value_bytes: [u8; 16] = self.max_value.to_le_bytes();\n        let mut packed_bytes: [u8; 18] = [0; 18];\n        for i in 0..16 {\n            packed_bytes[i] = max_value_bytes[i];\n        };\n        packed_bytes[16] = self.verifier_id;\n        packed_bytes[17] = self.is_admin as u8;\n        let packed = field_from_bytes(packed_bytes, true);\n        // return serialized content\n        [\n            self.admin.to_field(),\n            self.recipient.to_field(),\n            packed,\n            self.randomness\n        ]\n    }\n\n    fn deserialize_content(serialized_note: [Field; RECURRING_ENTITLEMENT_NOTE_LENGTH]) -> RecurringEntitlementNote {\n        // unpack verifier_id and max_value\n        let packed = serialized_note[2];\n        let packed_bytes: [u8; 18] = packed.to_be_bytes();\n        let verifier_id = packed_bytes[16];\n        let is_admin = packed_bytes[17] == 1;\n        let mut max_value_bytes: [u8; 16] = [0; 16];\n        for i in 0..16 {\n            max_value_bytes[i] = packed_bytes[i];\n        }\n        let max_value = U128::from_le_bytes(max_value_bytes);\n        // return deserialized note\n        RecurringEntitlementNote {\n            admin: AztecAddress::from_field(serialized_note[0]),\n            recipient: AztecAddress::from_field(serialized_note[1]),\n            is_admin,\n            verifier_id,\n            max_value,\n            randomness: serialized_note[3],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn to_be_bytes(self, storage_slot: Field) -> [u8; RECURRING_ENTITLEMENT_NOTE_LENGTH * 32 + 64] {\n        let serialized_note = self.serialize_content();\n        let mut buffer: [u8; RECURRING_ENTITLEMENT_NOTE_LENGTH * 32 + 64] = [0; RECURRING_ENTITLEMENT_NOTE_LENGTH * 32 + 64];\n        let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n        let note_type_id_bytes: [u8; 32] = RecurringEntitlementNote::get_note_type_id().to_be_bytes();\n        for i in 0..32 {\n            buffer[i] = storage_slot_bytes[i];\n            buffer[32 + i] = note_type_id_bytes[i];\n        }\n        for i in 0..serialized_note.len() {\n            let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n            for j in 0..32 {\n                buffer[64 + i * 32 + j] = bytes[j];\n            }\n        }\n        buffer\n    }\n\n    fn get_note_type_id() -> Field { \n        comptime {\n            let bytes = \"RecurringEntitlementNote\".as_bytes();\n            let hash = poseidon2_hash_bytes(bytes);\n            let hash_bytes = hash.to_be_bytes::<4>();\n            field_from_bytes(hash_bytes, true)\n        }\n    }\n\n     fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn compute_note_hash(self) -> Field {\n        let serialized = self.serialize_without_is_admin();\n        std::embedded_curve_ops::multi_scalar_mul(\n            [GENERATORS[0], GENERATORS[1], GENERATORS[2], GENERATORS[3], GENERATORS[4]],\n            [\n            from_field_unsafe(serialized[0]),\n            from_field_unsafe(serialized[1]),\n            from_field_unsafe(serialized[2]),\n            from_field_unsafe(serialized[3]),\n            from_field_unsafe(self.get_header().storage_slot)\n        ]\n        ).x\n    }\n}\n\nimpl NullifiableNote for RecurringEntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = self.derive_nullifier_secret_with_context(context);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = self.derive_nullifier_secret();\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for RecurringEntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.admin == other.admin)\n            & (self.recipient == other.recipient)\n            & (self.max_value == other.max_value)\n            & (self.randomness == other.randomness)\n            & (self.verifier_id == other.verifier_id)\n    }\n}\n\nimpl RecurringEntitlementNote {\n    /**\n     * Entitlement Receipt, shadows an entitlement send to a recepient\n     * Cannot be used to claim a reimbursement, but can be used to nullify the sent entitlement\n     *\n     * @param recipient - the address of the recipient of the entitlement (NOT THE OWNER OF THE NOTE)\n     * @param npk_m_hash - the nullifying public key hash of the escrow admin (NOT THE RECIPIENT OF THE ENTITLEMENT)\n     *                     note: this is a bit confusing but it is different because nullifcation of reads\n     * @param verifier_id - the type of verifier that the entitlement can be used for\n     * @param max_value - the maximum value that can be withdrawn from the escrow using the entitlement\n     * @param randomness - blinding factor for the note (inputted since must be same between the two notes)\n     */\n    fn new(\n        admin: AztecAddress,\n        recipient: AztecAddress,\n        is_admin: bool,\n        verifier_id: u8,\n        max_value: U128,\n        randomness: Field\n    ) -> Self {\n        Self {\n            admin,\n            recipient,\n            is_admin,\n            verifier_id,\n            max_value,\n            randomness,\n            header: NoteHeader::empty()\n        }\n    }\n\n    /**\n     * Derives the nullifier for recurring notes\n     * @dev recurring notes are nullified for a scope (month) without destroying the ntoe\n     *      prove nullifier non-inclusion to use\n     *\n     * @param timestamp - the timestamp (month/ year) from the email receipt verifier\n     * @return - the month nullifier for the note\n     */\n    fn derive_recurring_nullifier(self, timestamp: Field) -> Field {\n        let base_nullifier_secret = self.derive_nullifier_secret();\n        poseidon2_hash_with_separator(\n            [\n                base_nullifier_secret,\n                timestamp\n            ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    fn derive_nullifier_secret_with_context(self, context: &mut PrivateContext) -> Field {\n        // get pubkeys for the admin and recipient\n        let admin_keys = get_public_keys(self.admin);\n        let recipient_keys = get_public_keys(self.recipient);\n        // determine which sk and pk to use\n        let mut sk: Scalar = Scalar::empty();\n        let mut pk: Point = Point::empty();\n        if self.is_admin {\n            pk = recipient_keys.npk_m.to_point();\n            let nsk_app = context.request_nsk_app(admin_keys.npk_m.hash());\n            sk = from_field_unsafe(nsk_app);\n        } else {\n            pk = admin_keys.npk_m.to_point();\n            let nsk_app = context.request_nsk_app(recipient_keys.npk_m.hash());\n            sk = from_field_unsafe(nsk_app);\n        }\n        // derive the shared secret\n        let secret_bytes = point_to_symmetric_key(sk, pk);\n        // set the highest byte to be 0 to ensure that the secret is not too large\n        let mut resized: [u8; 31] = [0; 31];\n        for i in 0..31 {\n            resized[i] = secret_bytes[i + 1];\n        }\n        field_from_bytes(resized, true)\n    }\n\n    fn derive_nullifier_secret(self) -> Field {\n        // get pubkeys for the admin and recipient\n        let admin_keys = get_public_keys(self.admin);\n        let recipient_keys = get_public_keys(self.recipient);\n        // determine which sk and pk to use\n        let mut sk: Scalar = Scalar::empty();\n        let mut pk: Point = Point::empty();\n        if self.is_admin {\n            pk = recipient_keys.npk_m.to_point();\n            let nsk_app = get_nsk_app(admin_keys.npk_m.hash());\n            sk = from_field_unsafe(nsk_app);\n        } else {\n            pk = admin_keys.npk_m.to_point();\n            let nsk_app = get_nsk_app(recipient_keys.npk_m.hash());\n            sk = from_field_unsafe(nsk_app);\n        }\n        // derive the shared secret\n        let secret_bytes = point_to_symmetric_key(sk, pk);\n        // set the highest byte to be 0 to ensure that the secret is not too large\n        let mut resized: [u8; 31] = [0; 31];\n        for i in 0..31 {\n            resized[i] = secret_bytes[i + 1];\n        }\n        field_from_bytes(resized, false)\n    }\n\n    fn serialize_without_is_admin(self) -> [Field; RECURRING_ENTITLEMENT_NOTE_LENGTH] {\n        // serialize max_value and verifier_id together\n        let max_value_bytes: [u8; 16] = self.max_value.to_le_bytes();\n        let mut packed_bytes: [u8; 17] = [0; 17];\n        for i in 0..16 {\n            packed_bytes[i] = max_value_bytes[i];\n        };\n        packed_bytes[16] = self.verifier_id;\n        let packed = field_from_bytes(packed_bytes, true);\n        // return serialized content\n        [\n            self.admin.to_field(),\n            self.recipient.to_field(),\n            packed,\n            self.randomness\n        ]\n    }\n}"},"339":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n  value: [Field; N]\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1,11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5,118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3,118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"354":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"355":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"427":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod test;\nmod types;\nmod verifiers;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\n#[aztec]\ncontract ZImburseRegistry {\n    use dep::aztec::{\n        prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map},\n        macros::{storage::storage, events::event, functions::{private, public, view, initializer}},\n        note::{\n            note_viewer_options::NoteViewerOptions, note_getter_options::NoteGetterOptions,\n            note_getter::{get_notes, view_notes}, constants::MAX_NOTES_PER_PAGE\n        },\n        protocol_types::{\n            contract_instance::ContractInstance,\n            address::partial_address::PartialAddress,\n            contract_class_id::ContractClassId,\n            abis::function_selector::FunctionSelector,\n            traits::Serialize\n        },\n        oracle::{get_contract_instance::get_contract_instance, header::get_header_at_oracle},\n        keys::getters::get_public_keys,\n        utils::comparison::Comparator,\n        encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note_unconstrained, encode_and_encrypt_note},\n        unencrypted_logs::unencrypted_event_emission::emit\n    };\n    use std::meta::derive;\n    use dep::address_note::address_note::AddressNote;\n    use dep::z_imburse_escrow::ZImburseEscrow;\n    use crate::{\n        types::{\n            registry_definition::RegistryDefinition,\n            participant_note::{ParticipantNote, NAME_LENGTH}\n        },\n        BULK_KEY_LENGTH\n    };  \n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyHashRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        definition: SharedImmutable<RegistryDefinition, Context>,\n        escrow_registry: Map<AztecAddress, SharedImmutable<bool, Context>, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n        managed_escrows: PrivateSet<AddressNote, Context>,\n        participants: Map<AztecAddress, PrivateSet<ParticipantNote, Context>, Context>,\n        participant_escrows: PrivateSet<AddressNote, Context>,\n    }\n\n    /**\n     * Initialize the Z-Imburse registry contract\n     *\n     * @param usdc - The address of the USDC token\n     * @param contract_class_id - The class ID of the escrow contract that all escrows must be instances of\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys to add to the registry\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        usdc: AztecAddress,\n        escrow_contract_id: Field,\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // initialize the registry definition\n        let definition = RegistryDefinition::new(\n            context.msg_sender(),\n            usdc,\n            escrow_contract_id\n        );\n        storage.definition.initialize(definition);\n        // add any DKIM key hashes that were passed in at initialization\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(&mut context, DKIMKeyHashRegistered {\n                    dkim_key_hash: dkim_key_hashes[i],\n                    verifier_id: verifier_ids[i]\n                });\n            }\n        }\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(verifier_ids: [Field; BULK_KEY_LENGTH], dkim_key_hashes: [Field; BULK_KEY_LENGTH]) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(&mut context, DKIMKeyHashRegistered {\n                    dkim_key_hash: dkim_key_hashes[i],\n                    verifier_id: verifier_ids[i]\n                });\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(&mut context, DKIMKeyHashRegistered { dkim_key_hash, verifier_id });\n    }\n\n    /**\n     * Check the authenticity and deployment status of an escrow contract and register it in the Z-Imburse registry\n     * @dev the header will not include the contract address and the contract \n     *\n     * @param escrow_contract - the address of the escrow contract to register\n     */\n    #[private]\n    fn register_escrow(escrow_contract: AztecAddress) {\n        // check the contract class ID by recomputing the contract address\n        let definition = storage.definition.read_private();\n        let contract_instance: ContractInstance = unsafe { get_contract_instance(escrow_contract) };\n        let exected_escrow_address = AztecAddress::compute(\n            contract_instance.public_keys_hash,\n            PartialAddress::compute(\n                ContractClassId::from_field(definition.escrow_contract_id), // constrained here\n                contract_instance.salt,\n                contract_instance.initialization_hash,\n                contract_instance.deployer\n            )\n        );\n        assert(exected_escrow_address == escrow_contract, \"Escrow contract class ID does not match expected class ID\");\n        // check that the contract has been deployed\n        // annoying that we can't use this in the deploy tx\n        context.historical_header.prove_contract_initialization(escrow_contract);\n\n        // check that the contract has not already been registered\n        let registration_status = storage.escrow_registry.at(escrow_contract).read_private();\n        assert(!registration_status, \"Escrow contract has already been registered\");\n        \n        let escrow_params = ZImburseEscrow::at(escrow_contract).get_registration_params().view(&mut context);\n        assert(escrow_params[0] == context.this_address(), \"Escrow contract registry does not match this contract\");\n        assert(escrow_params[1] == definition.usdc, \"Escrow contract USDC does not match registry USDC\");\n        assert(escrow_params[2] == context.msg_sender(), \"Escrow contract admin does not match sender of message\");\n\n\n        // privately add the escrow contract to the list of managed escrows\n        let admin_keys = get_public_keys(context.msg_sender());\n        let mut escrow_note = AddressNote::new(escrow_contract, admin_keys.npk_m.hash());\n\n        // use unconstrained - why would you lie here\n        storage.managed_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, context.msg_sender())\n        );\n\n        // publicly add the escrow contract to the list of participant escrows\n        ZImburseRegistry::at(context.this_address()).set_contract_registered(escrow_contract).enqueue(&mut context);\n    }\n\n    /**\n     * Publicly set the contract registration status\n     *\n     * @param escrow_contract - the address of the escrow contract that has privately been constrained to be valid\n     */\n    #[public]\n    #[internal]\n    fn set_contract_registered(escrow_contract: AztecAddress) {\n        storage.escrow_registry.at(escrow_contract).initialize(true);\n    }\n\n    #[private]\n    fn check_and_register_participant(participant: AztecAddress, participant_name: str<60>, escrow: AztecAddress) {\n        // check that the sender is the admin\n        let escrow_admin = ZImburseEscrow::at(escrow).get_admin_private().view(&mut context);\n        assert(escrow_admin == context.msg_sender(), \"Sender is not the admin of the escrow contract\");\n        // check that the escrow address is registered\n        let registration_status = storage.escrow_registry.at(escrow).read_private();\n        assert(registration_status, \"Escrow contract has not been registered\");\n        // check if the participant has already been registered\n        let options = NoteGetterOptions::new().select(AddressNote::properties().address, Comparator.EQ, participant).set_limit(1);\n        let participant_exists = storage.participants.at(escrow).get_notes(options).len() == 0;\n        // if the participant has not been registered, enqueue a private call to register the participant\n        // do this instead of if statement here to make adding first time expensive but cheap if already registered\n        if participant_exists {\n            ZImburseRegistry::at(context.this_address()).register_participant(participant, participant_name, context.msg_sender(), escrow).call(&mut context);\n        }\n    }\n\n    #[private]\n    #[interal]\n    fn register_participant(\n        participant: AztecAddress,\n        participant_name: str<60>,\n        admin: AztecAddress,\n        escrow: AztecAddress\n    ) {\n        let admin_keys = get_public_keys(admin);\n        let participant_keys = get_public_keys(participant);\n        // add escrow to the participant's set of escrows\n        let mut escrow_note = AddressNote::new(escrow, participant_keys.npk_m.hash());\n        storage.participant_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note(\n                &mut context,\n                admin_keys.ovpk_m,\n                participant_keys.ivpk_m,\n                participant\n            )\n        );\n        // add the participant to the admin set of participants\n        let mut participant_note = ParticipantNote::new(\n            participant,\n            participant_name,\n            admin_keys.npk_m.hash()\n        );\n        storage.participants.at(escrow).insert(&mut participant_note).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                admin_keys.ovpk_m,\n                admin_keys.ivpk_m,\n                admin\n            )\n        );\n    }\n\n    // todo: add ability to remove participant\n    // todo: add ability to remove participant escrows by looking up nullifications\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n\n    /** Get the class ID that all escrow contracts must match */\n    #[public]\n    #[view]\n    fn get_escrow_class_id() -> Field {\n        storage.definition.read_public().escrow_contract_id\n    }\n\n    /** Get the registration status of an escrow contract */\n    #[public]\n    #[view]\n    fn get_escrow_registry_status(escrow_contract: AztecAddress) -> bool {\n        storage.escrow_registry.at(escrow_contract).read_public()\n    }\n\n    /**\n     * Get a page of the list of escrows administrated by a given address (private)\n     *\n     * @param admin - the address of the admin\n     * @param page_index - the index of the page to retrieve\n     * @return managed_escrows - the list of managed escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_managed_escrows(\n        admin: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], bool, u32) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.managed_escrows.view_notes(options);\n        let mut managed_escrows: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                managed_escrows[i] = notes.get_unchecked(i).address;\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (managed_escrows, page_limit_reached, notes.len())\n    }\n\n    /**\n     * Get a page of the list of escrows participated in by a given address (private)\n     *\n     * @param admin - the address of the participant\n     * @param page_index - the index of the page to retrieve\n     * @return participant_escrows - the list of enrolled escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participant_escrows(\n        participant: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.participant_escrows.view_notes(options);\n        let mut participant_escrows: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                participant_escrows[i] = notes.get_unchecked(i).address;\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (participant_escrows, page_limit_reached)\n    }\n\n    /**\n     * Get a page of the list of of participants in an escrow (private)\n     *\n     * @param admin - the address of the escrow\n     * @param page_index - the index of the page to retrieve\n     * @return participants - the list of participating addresses\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participants(\n        escrow: AztecAddress,\n        page_index: u32\n    ) -> pub ([AztecAddress; MAX_NOTES_PER_PAGE], [[u8; NAME_LENGTH]; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.participants.at(escrow).view_notes(options);\n        let mut participants: [AztecAddress; MAX_NOTES_PER_PAGE] = [AztecAddress::from_field(0); MAX_NOTES_PER_PAGE];\n        let mut participant_names: [[u8; NAME_LENGTH]; MAX_NOTES_PER_PAGE] = [[0; NAME_LENGTH]; MAX_NOTES_PER_PAGE];\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                let participant_note = notes.get_unchecked(i);\n                participants[i] = participant_note.address;\n                participant_names[i] = participant_note.get_name();\n            }\n        }\n        let page_limit_reached = notes.len() != options.limit;\n        (participants, participant_names, page_limit_reached)\n    }\n}\n\n"},"428":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_registry/src/types/registry_definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal REGISTRY_DEFINITION_LENGTH: u32 = 3;\n\npub struct RegistryDefinition {\n    admin: AztecAddress,\n    usdc: AztecAddress,\n    escrow_contract_id: Field\n}\n\nimpl Serialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn serialize(self: Self) -> [Field; REGISTRY_DEFINITION_LENGTH] {\n        [self.admin.to_field(), self.usdc.to_field(), self.escrow_contract_id]\n    }\n}\n\nimpl Deserialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn deserialize(fields: [Field; REGISTRY_DEFINITION_LENGTH]) -> Self {\n        RegistryDefinition {\n            admin: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            escrow_contract_id: fields[2]\n        }\n    }\n}\n\nimpl RegistryDefinition {\n    /**\n     * Create a new definition for a Z-Imburse escrow registry contract\n     *\n     * @param admin - The address that can add dkim keys to the registry\n     * @param usdc The address of the USDC token\n     * @param escrow_contract_id The ID of the escrow contract\n     * @return The new escrow registry definition\n     */\n    pub fn new(\n        admin: AztecAddress,\n        usdc: AztecAddress,\n        escrow_contract_id: Field\n    ) -> Self {\n        RegistryDefinition { admin, usdc, escrow_contract_id }\n    }\n}\n "},"430":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_registry/src/types/participant_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator, traits::{Serialize, Deserialize}\n},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\nuse dep::compressed_string::CompressedString;\n\nglobal NAME_LENGTH: u32 = 60;\nglobal NAME_SERIALIZED_LENGTH: u32 = 2;\n\n#[note]\npub struct ParticipantNote {\n    address: AztecAddress,\n    name: [Field; 2],\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n\nimpl NullifiableNote for ParticipantNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for ParticipantNote {\n    // does not check for participant name\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl ParticipantNote {\n    pub fn new(address: AztecAddress, name: str<NAME_LENGTH>, npk_m_hash: Field) -> Self {\n        let randomness = unsafe { random()};\n        let name_serialized: CompressedString<NAME_SERIALIZED_LENGTH, NAME_LENGTH> = CompressedString::from_string(name);\n        ParticipantNote { address, name: name_serialized.value, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_name(self) -> [u8; NAME_LENGTH] {\n        CompressedString::<NAME_SERIALIZED_LENGTH, NAME_LENGTH> { value: self.name }.to_bytes()\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"71":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe { random() };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"85":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"86":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"88":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"89":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"92":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"94":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"96":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"98":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"}}}