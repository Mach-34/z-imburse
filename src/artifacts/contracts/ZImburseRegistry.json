<<<<<<< HEAD
{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseRegistry","functions":[{"name":"get_escrow_class_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQQKAAIGBAUhAAAPAAU6AQAAHgALAAQkAAcBBgoABwQGBSEAABQABToBAAAqAAAEJAAEBAUAAAQABQAkAQQBBAAABAQCBSoABQckAAcACCoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBAUAAAQFAgUqAgUEKgAABQAABAACACoCBAUkAAQBCCQABAMEJAAEAAcqAAcDIAArDAAEAwQHIQAANAAHIAAuKgEFBCQABAIFAAAEBAIGAAAEBgUHKgEHAyMqAQUHHAAHAwkAAAcGCQosAAAAAAoAAAAJJAAEAwsMAAQDCwwhAAA8AAw6AQAAKwAABwgDJQAEAAQIBCIAAABKKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMICQ4ABAMJByEAAEcABzoBAAAqAgoFKgAJAyAAKysBCAMIBgsABAgGAAIIByEAAE4IByAAUCsACAMIBSAAXisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABcCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAFMlAQQAAQgFIABeIysAGMoYyg==","debug_symbols":"1ZrRTuMwEEX/Jc99sMdje6a/slqhFFoUKUpRW1ZaVf13EkhMIJUjCgXuS9W015k5sTPXGeVY3K1Xj/c3VbPZ7ovln2NRb2/LQ7Vt2qPjaVGsdlVdV/c3458L033Is3z/UDbd0f5Q7g7F0kbiRbFu7rqvjtsTbKp6XSyZ6bSYqNXFXqw+Jq3157RMVnsxE8mr2oYz6iDW9eogpG/UfxeFfj53a2xSm5H6G7K35gsufRwiqM5deks8iC2pziQv1g95iB2fu0/efmXy7aV/m30Xga4ewV09Al89gv98BO91COGDmVsYUcj36igsk4URPppQNyheMkguGaQXDKLzdyqxDemGYg5zpaYtAimIGc1kVxqmk6JhKDVe1cxMio/ODuro6P2kkEUHIHQAhw7A6AAeHSCgA0R0AEEHUHAAh+7EDt2JHboTO3QnduhO7NCd2KE7sUN3Yga4ib0kAD9p/jDAEoqcAMRMAH5kCaWeVDDGzzUqUldDDI3y4Of0BTt9hU7fG+z0AfZA2erjf3/5FJvqv5CdAPDvnwENOQCAPZC4VwCaUSu7YcEpxykuut15gB1THgCgd5EHAOhdZAECQO8iDwDQu8gDAPh2HgDgsScPAODbeQAA384DoDtxQHfigO7EAd2JI7oTR2wnPrWH/8pdVa7qdf+C2uaxuR29r3b4//DyTyt+Ag==","brillig_names":["get_escrow_class_id"],"assert_messages":{"14":"Not initialized","59":"Array index out of bounds","70":"attempt to add with overflow","19":"Function get_escrow_class_id can only be called statically"}},{"name":"set_contract_registered","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["set_contract_registered"],"assert_messages":{"180":"attempt to add with overflow","369":"Array index out of bounds","14":"Not initialized","139":"SharedImmutable already initialized","206":"Array index out of bounds","238":"Array index out of bounds","357":"attempt to add with overflow","398":"attempt to add with overflow","188":"Array index out of bounds","217":"attempt to add with overflow","246":"Array index out of bounds","19":"Function set_contract_registered can only be called internally","112":"Storage slot 0 not allowed. Storage slots must start from 1.","377":"Array index out of bounds","295":"Array index out of bounds","196":"attempt to add with overflow","385":"Array index out of bounds","277":"Array index out of bounds","309":"attempt to add with overflow","172":"Array index out of bounds","230":"Array index out of bounds","259":"attempt to add with overflow"}},{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim_bulk"],"assert_messages":{"326":"Array index out of bounds","573":"Array index out of bounds","762":"attempt to add with overflow","515":"Array index out of bounds","488":"Array index out of bounds","549":"Array index out of bounds","290":"Array index out of bounds","741":"attempt to add with overflow","220":"DKIM key has already been registered","930":"Array index out of bounds","854":"attempt to add with overflow","83":"Sender is not the registry contract","531":"Array index out of bounds","333":"Array index out of bounds","202":"Storage slot 0 not allowed. Storage slots must start from 1.","589":"Array index out of bounds","720":"Array index out of bounds","129":"Array index out of bounds","446":"Array index out of bounds","638":"Array index out of bounds","312":"SharedImmutable already initialized","775":"Array index out of bounds","434":"attempt to add with overflow","751":"Array index out of bounds","620":"Array index out of bounds","943":"attempt to add with overflow","964":"attempt to add with overflow","224":"Array index out of bounds","602":"attempt to add with overflow","791":"Array index out of bounds","922":"Array index out of bounds","465":"attempt to add with overflow","523":"attempt to add with overflow","712":"Array index out of bounds","453":"Array index out of bounds","581":"Array index out of bounds","840":"Array index out of bounds","700":"attempt to add with overflow","441":"attempt to add with overflow","822":"Array index out of bounds","499":"attempt to add with overflow","560":"attempt to add with overflow","48":"Not initialized","953":"Array index out of bounds","804":"attempt to add with overflow","481":"Array index out of bounds","286":"Storage slot 0 not allowed. Storage slots must start from 1.","539":"attempt to add with overflow","411":"Array index out of bounds","405":"attempt to add with overflow","914":"Array index out of bounds","728":"Array index out of bounds","783":"Array index out of bounds","140":"Array index out of bounds","902":"attempt to add with overflow","652":"attempt to add with overflow"}},{"name":"get_participant_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_participant_escrows"]},{"name":"register_participant","is_unconstrained":false,"custom_attributes":["private","interal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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/gLLXpftF1j2uj+/wDI8iYon0bDlllhsuSUWW26JZa9b7otbri23wnK25ZZYbLklFltuicWWW2IZsFRY9rrlvsCy1y33BZa9brkvsNhySyy23ArLxZZbYrHlllj2uuU+FwuXvW65L7AMWCosXG6JxZZb3nJtuSUWW26JxZZbYbnackssttwSC5dbYuFySywDlgoLl1tiseWWWGy5JRZbbonFllthue11y30uFm573XJfYOFySyxcbolluOVWt1xbbonFlltiseWWWGy5JRZbboVlt4ecvsDC5ZZYuNwSC5dbYhmwVFhsuSUWW26JxZZbYvEZC5VY2O15mk+xnHd7ROYLLFxuicWWW9xyz7s9m/IFlgFLhcWWW2Kx5ZZYbLklFi63xMLlVlh2e8DiCyxcbonFlltiseWWWAYsFRZbbonFJ4lVYmG3pwS+wMLllli43ArLbo/ne37L3e2Jey+w2HJLLLbcEsuApcJiyy2xcLklFi63xMLllli43ArLbg93e4HFlltiseWWWGy5JZZBLBRiwdlnNRYut8TC5ZZYbLnlLdeWW2Fx9lmNxZZbYrHlllhsuSWWAUuFhcstsXC5JRYut8Riyy2x2HIrLM4+q7HYckssPkmsEgu7PfvsBZYBS4WFyy2x2HLLW64tt8Riyy2x2HIrLM4+q7HYckssXG6JhcstsQxYKixcbonFlltiseWWWGy5JRZbboVlt2efPRcLuz377AUWLrfEwuWWWIZbbnXLteWWWGy5JRZbbonFlltiseVWWHZ79tkLLFxuiYXLLbFwuSWWAUuFxZZbYrHlllhsuSUWnyRWiYXdnn32HMtuzz57gYXLLbHYcqtbrrPPaiwDlgqLLbfEYsstsdhySyxcbomFyy2wXHZ79tkLLFxuicWWW2Kx5ZZYBiwVFltuicUniRVi4bLbs89eYOFySyxcboXF2WflLdfZZzUWW26JxZZbYhmwVFhsuSUWLrfEwuWWWLjcEguXW2Fx9lmNxZZbYrHlllhsuSWWQSwUYmG3Z5+9wMLllli43BKLLbe85dpyKyzOPqux2HJLLLbcEostt8QyYKmwcLklFi63xMLlllhsuSUWW26FxdlnNRZbbonFJ4lVYmG3Z5+9wDJgqbBwuSUWW255y7XlllhsuSUWW26FxdlnNRZbbomFyy2xcLkllgFLhYXLLbHYckssttwSiy23xGLLrbDs9uyz52Jht2efvcDC5ZZYuNwSy3DLrW65ttwSiy23xGLLLbHYckssttwKy27PPnuBhcstsXC5JRYut8QyYKmw2HJLLLbcEostt8Tik8QqsbDbs8+eY9nt2WcvsHC5JRZbbnXLdfZZjWXAUmGx5ZZYbLklFltuiYXLLbFwuRWW3Z599gILl1tiseWWWGy5JZYBS4XFllti8UlilVjY7dlnL7BwuSUWLrfAcnX2WXXLvTr7rMZiyy2x2HJLLAOWCostt8TC5ZZYuNwSC5dbYuFyKyzOPqux2HJLLLbcEostt8QyiIVCLOz27LMXWLjcEguXW2Kx5Za3XFtuhcXZZzUWW26JxZZbYrHlllgGLBUWLrfEwuWWWLjcEostt8Riy62wOPusxmLLLbH4JLFKLOz27LMXWAYsFRYut8Riyy1vubbcEostt8Riy62wOPusxmLLLbFwuSUWLrfEMmCpsHC5JRZbbonFlltiseWWWGy5FZbdnn32XCzs9uyzF1i43BILl1tiGW651S3XlltiseWWWGy5JRZbbonFllth2e3ZZy+wcLklFi63xMLlllgGLBUWW26JxZZbYrHlllh8klglFnZ79tlzLLs9++wFFi63xGLLrW65zj6rsQxYKiy23BKLLbfEYsstsXC5JRYut8Ky27PPXmDhckssttwSiy23xDJgqbDYckssPkmsEgu7PfvsBRYut8TC5VZYnH1W3nKdfVZjseWWWGy5JZYBS4XFllti4XJLLFxuiYXLLbFwuQWWm7PPaiy23BKLLbfEYsstsQxi4VexcNvt2WcvsHC5JRYut8Riyy1vubbcCouzz2osttwSiy23xGLLLbEMWCosXG6JhcstsXC5JRZbbonFllthcfZZjcWWW2LxSWKVWNjt2WcvsAxYKixcbonFllvecm25JRZbbonFllthcfZZjcWWW2LhckssXG6JZcBSYeFySyy23BKLLbfEYsstsdhyKyy7PfvsuVjY7dlnL7BwuSUWLrfEMtxyq1uuLbfEYsstsdhySyy23BKLLbfCstuzz15g4XJLLFxuiYXLLbEMWCosttwSiy23xGLLLbH4JLFKLOz27LPnWHZ79tkLLFxuicWWW91ynX1WYxmwVFhsuSUWW26JxZZbYuFySyxcboVlt2efvcDC5ZZYbLklFltuiWXAUmGx5ZZYfJJYJRZ2e/bZCyxcbomFy62wOPusvOU6+6zGYsstsdhySywDlgqLLbfEwuWWWLjcEguXW2Lhcisszj6rsdhySyy23BKLLbfEMoiFQizs9uyzF1i43BILl1tiseWWt1xbboHl7uyzGostt8Riyy2x2HJLLAOWCguXW2LhckssXG6JxZZbYrHlVlicfVZjseWWWHySWCEW7rs9++wFlgFLhYXLLbHYcstbri23xGLLLbHYcisszj6rsdhySyxcbomFyy2xDFgqLFxuicWWW2Kx5ZZYbLklFltuhWW3Z589Fwu7PfvsBRYut8TC5ZZYhltudcu15ZZYbLklFltuicWWW2Kx5VZYdnv22QssXG6JhcstsXC5JZYBS4XFlltiseWWWGy5JRafJFaJhd2effYcy27PPnuBxZZb3VucfVZjseWWWAYsFRZbbonFllti8RkL5QPalltiseVWWHZ79tnze8tuzz57gcWWW2Kx5ZZYBiwVFltuicUniZUPaFtuicWWW2Kx5VZYnH1W3nKdfVZjseWWWGy5JZYBS4XFllti4XJLLH5jocTi93JLLH4vt8Li7LMay1633Nty+7j2djr8gmWvW+7pcPq49nS8f8Xy68XnZfm4+LyM4y8M97oSJxkODN9muNdlO8lwr5t5kuFe1/gkw73u/EmGey0IQYa7PWMuyXCv1SPJUE95n6Ge8j7DgeHbDPWU9xnqKe8z1FPeZ6invM9QT3mX4fGw22MCoxA1lQBEVSUAUVcJQBwgvg9RWwlAVFcCEPWVAESFJQBRY3kf4m6PfIxC1FgCEDWWAESNJQBxgPg+RI0lAFFjCUDUWAIQNZYARI3lfYi7Pb4zClFjCUDUWAIQNZYAxAHi+xA1lgBEjSUAUWMJQNRYAhA1lvch7vYo1ihEB7cWHyf2g4uTW2sujm6tuQxcSi4+JKr4xJIfXHxKVM3Fx0TVXHxOVM3FB0WVXHZ7guuL59Fuj3B9xcW+W3Ox79Zchvtued+179Zc7Ls1F/tuzcW+W3Ox75ZcdnuW6ysuDgCouTgBoObiCICay8Cl5GLfrbnYd2su9t2ai9OuSs/gUNeay25PdX3Fhd+tudh3y/uug10fcBm4lFzsuzUX+27Nxb5bc+F3ay78bsnF+a4PuPC7NRf7bs3FvltzGbiUXOy7NZe97rsvPMNuj3l9xYXfrbnwuyUXJ73W993dHvX6iot9t+Zi3625DFxKLvbdmgu/W3Phd2su/G7Nhd8tuez2LNJXXOy7NRf7bs3FvltzGTxD5Rl2e17nKy78bs2F36252Hfr+659t+Jy3O2Rlq+42HdrLvbdmot9t+YycCm58Ls1F3635sLv1lzsuzUX+27JZbcHIr7iYt+tufg8ssozHHd7EuErLgOXkgu/W3Ox79b3XftuzcW+W3Ox75Zcdnuc3isu9t2aC79bc+F3ay4Dl5ILv1tzse/WXOy7NRf7bs3Fvlty2e1hbC88g/PVHnDhd2su/G7NZbjvlvdd+27Nxb5bc7Hv1lzsuzUX+27JZbfnq73iwu/WXPjdmgu/W3MZuJRc7Ls1F/tuzcW+W3PxeWSlZ9jt+WovuOz2fLVXXPjdmot9t7zvOl/tAZeBS8nFvltzse/WXOy7NRd+t+bC75Zcdnu+2isu/G7Nxb5bc7Hv1lwGLiUX+27NxeeRlZ5ht+erveLC79Zc+N2Si/PV6vuu89UecLHv1lzsuzWXgUvJxb5bc+F3ay78bs2F36258LslF+erPeBi36252HdrLvbdmsvgGSrPsNvz1V5x4XdrLvxuzcW+W9937bslF+erPeBi36252HdrLvbdmsvApeTC79Zc+N2aC79bc7Hv1lzsuxWXxflqD7jYd2suPo+s8gzLbs9Xe8Vl4FJy4XdrLvbd+r5r36252HdrLvbdkovz1R5wse/WXPjdmgu/W3MZuJRc+N2ai3235mLfrbnYd2su9t2Sy27PV3vhGXZ7vtorLvxuzYXfrbkM993yvmvfrbnYd2su9t2ai3235mLfLbns9ny1V1z43ZoLv1tz4XdrLgOXkot9t+Zi36252HdrLj6PrPQMuz1f7QWX3Z6v9ooLv1tzse+W913nqz3gMnApudh3ay723ZqLfbfmwu/WXPjdkstuz1d7xYXfrbnYd2su9t2ay8Cl5GLfrbn4PLLSM+z2fLVXXPjdmgu/W3Jxvlp933W+2gMu9t2ai3235jJwKbnYd2su/G7Nhd+tufC7NRd+t+TifLUHXOy7NRf7bs3FvltzGTxD5Rl2e77aKy78bs2F36252Hfr+659t+TifLUHXOy7NRf7bs3FvltzGbiUXPjdmgu/W3Phd2su9t2ai3235OJ8tQdc7Ls1F59HVnqG3Z6v9orLwKXkwu/WXOy79X3Xvltzse/WXOy7FZeT89UecLHv1lz43ZoLv1tzGbiUXPjdmot9t+Zi36252HdrLvbdkstuz1d77hlOuz1f7RUXfrfmwu/WXIb7bnnfte/WXOy7NRf7bs3Fvltzse+WXHZ7vtorLvxuzYXfrbnwuzWXgUvJxb5bc7Hv1lzsuzUXn0dWeobdnq/2gstuz1d7xYXfrbnYd8v7rvPVHnAZuJRc7Ls1F/tuzcW+W3Phd2su/G7JZbfnq73iwu/WXOy7NRf7bs1l4FJyse/WXHweWekZdnu+2isu/G7Nhd8tuThfrb7vOl/tARf7bs3FvltzGbiUXOy7NRd+t+bC79Zc+N2aC79bcnG+2gMu9t2ai3235mLfrbkMnqHyDLs9X+0VF3635sLv1lzsu/V9175bcnG+2gMu9t2ai3235mLfrbkMXEou/G7Nhd+tufC7NRf7bs3Fvltycb7aAy723ZqLzyMrPcNuz1d7xWXgUnLhd2su9t36vmvfrbnYd2su9t2Si/PVHnCx79Zc+N2aC79bcxm4lFz43ZqLfbfmYt+tudh3ay723YrL2O35as89w9jt+WqvuPC7NRd+t+Yy3HfL+659t+Zi36252HdrLvbdmot9t+Sy2/PVXnHhd2su/G7Nhd+tuQxcSi723ZqLfbfmYt+tufg8stIz7PZ8tRdcdnu+2isu/G7Nxb5b3nedr/aAy8Cl5GLfrbnYd2su9t2aC79bc+F3Sy67PV/tFRd+t+Zi36252HdrLgOXkot9t+bi88hKz7Db89VeceF3ay78bsnF+Wr1fdf5ag+42HdrLvbdmsvApeRi36258Ls1F3635sLv1lz43ZKL89UecLHv1lzsuzUX+27NZfAMlWfY7flqr7jwuzUXfrfmYt+t77v23ZKL89UecLHv1lzsuzUX+27NZeBScuF3ay78bs2F36252HdrLvbdkovz1R5wse/WXHweWekZdnu+2isuA5eSC79bc7Hv1vdd+27Nxb5bc7Hvllycr/aAi3235sLv1lz43ZrLwKXkwu/WXOy7NRf7bs3Fvltzse+WXHZ7vtoLz7Db89VeceF3ay78bs1luO+W9137bs3Fvltzse/WXOy7NRf7bsXlvNvz1V5x4XdrLvxuzYXfrbkMXEou9t2ai3235mLfrbn4PLLKM5x3e77aCy67PV/tFRd+t+Zi3y3vu85Xe8Bl4FJyse/WXOy7NRf7bs2F36258Lsll92er/aKC79bc7Hv1lzsuzWXgUvJxb5bc/F5ZKVn2O35aq+48Ls1F3635OJ8tfq+63y1B1zsuzUX+27NZeBScrHv1lz43ZoLv1tz4XdrLvxuycX5ag+42HdrLvbdmot9t+YyeIbKM+z2fLVXXPjdmot9t76/2HdrLvbdkovz1R5wse/WXOy7NRefz1A+p52v9oCLfbfmwu/W9xf7bs3Fvltzse+WXJyv9oCLfbfm4vPIyuf0bs9Xe8Vl4FJyse/WXOy79X3Xvltzse/WXOy7JRfnqz3gYt+tufC7NRe/z1BzGbiUXPz+bs3Fvltz2eu+e1tuH9feTodfuex13z0dTh/Xno73r1x+vfi8LB8Xn5dx/BXiXpfjJMTdntwWhbjXtTsKca87ehTiXhf6KMQB4vsQ91oVohD32iuiEPdaQqIQNZYARI3lfYi7PXsvClFjCUDUWAIQNZYAxAHi+xA1lgBEjSUAUWMJQNRYAhA1lrchXnZ7emIUosYSgKixBCBqLAGIA8T3IWosAYgaSwCixhKAqLEEIGos70Pc7fmXUYgaSwCixhKAqLEEIA4Q34eosQQgaiwBiBpLAKLGEoCosbwPcbcnmEYhaiwBiBpLAKLGEoA4QHwfosYSgKixBCA6/LX6sLGLw18fcHH4a8llt4e/vuLiw6OqDzG5OPz1ARcfHlVzGbiUXHx4VM3FYVj188i+W3Ox79Zc7LslF4e/1vddh78+4GLfrbnYd2suA5eSi3235uLDUmsuDgeouTgcoObicICSi8NfH3Cx79Zc7Ls1F/tuzWXwDJVncPjrAy78bs2F36252Hfr+659t+Ti8NcHXOy7NRf7bs3FvltzGbiUXPjdmgu/W3Phd2su9t2ai3235OLw1wdc7Ls1l73uuy88w24Pf33FZeBScuF3ay723fq+a9+tudh3ay723ZLLbo9ofcXFvltz4XdrLvxuzWXgUnLhd2su9t2ai3235mLfrbnYd0suuz3g84Vn2O2Zna+48Ls1F3635jLcd8v7rn235mLfrbnYd2su9t2ai3234nLd7fGQr7jwuzUXfrfmwu/WXAYuJRf7bs3Fvltzse/WXHweWeUZrrs9ifAFl90eLviKC79bc7Hvlvfd3Z7q94rLwKXkYt+tudh3ay723ZoLv1tz4XdLLrs9mu4VF3635mLfrbnYd2suA5eSi3235uLzyErP4Hy1B1z43ZoLv1ty2e35ai/uu85Xe8DFvltzse/WXAYuJRf7bs2F36258Ls1F3635sLvllycr/aAi3235mLfrbnYd2sug2eoPMNuz1d7xYXfrbnwuzUX+25937Xvllycr/aAi3235mLfrbnYd2suA5eSC79bc+F3ay78bs3Fvltzse+WXJyv9oCLfbfm4vPISs+w2/PVXnEZuJRc+N2ai323vu/ad2su9t2ai3235OJ8tQdc7Ls1F3635sLv1lwGLiUXfrfmYt+tudh3ay723ZqLfbfkstvz1V54ht2er/aKC79bc+F3ay7Dfbe879p3ay723ZqLfbfmYt+tudh3Sy67PV/tFRd+t+bC79Zc+N2ay8Cl5GLfrbnYd2su9t2ai88jKz3Dbs9Xe87lttvz1V5x4XdrLvbd6r57c77aAy4Dl5KLfbfmYt+tudh3ay78bs2F3y257PZ8tVdc+N2ai3235mLfrbkMXEou9t2ai88jKz3Dbs9Xe8WF36258LslF+er1fdd56s94GLfrbnYd2suA5eSi3235sLv1lz43ZoLv1tz4XdLLs5Xe8DFvltzse/WXOy7NZfBM1SeYbfnq73iwu/WXPjdmot9t77v2ndLLs5Xe8DFvltzse/WXOy7NZeBS8mF36258Ls1F3635mLfrbnYd0suzld7wMW+W3PxeWSlZ9jt+WqvuAxcSi78bs3Fvlvfd+27NRf7bs3Fvltycb7aAy723ZoLv1tz4XdrLgOXkgu/W3Ox79Zc7Ls1F/tuzcW+W3LZ7flqLzzDbs9Xe8WF36258Ls1l+G+W9537bs1F/tuzcW+W3Ox79Zc7Lsll92er/aKC79bc+F3ay78bs1l4FJyse/WXOy7NRf7bs3F55GVnmG356u94LLb89VeceF3ay723fK+63y1B1wGLiUX+27Nxb5bc7Hv1lz43ZoLv1txue/2fLVXXPjdmot9t+Zi3625DFxKLvbdmovPI6s8w32356u94sLv1lz43ZKL89Xq+67z1R5wse/WXOy7NZeBS8nFvltz4XdrLvxuzYXfrbnwuyUX56s94GLfrbnYd2su9t2ay+AZKs+w2/PVXnHhd2su/G7Nxb5b33ftuyUX56s94GLfrbnYd2su9t2ay8Cl5MLv1lz43ZoLv1tzse/WXOy7JRfnqz3gYt+tufg8stIz7PZ8tVdcBi4lF3635mLfre+79t2ai3235mLfLbk4X+0BF/tuzYXfrbnwuzWXgUvJhd+tudh3ay723ZqLfbfmYt8tuez2fLUXnmG356u94sLv1lz43ZrLcN8t77v23ZqLfbfmYt+tudh3ay723ZLLbs9Xe8WF36258Ls1F3635jJwKbnYd2su9t2ai3235uLzyErPsNvz1V5w2e35aq+48Ls1F/tued91vtoDLgOXkot9t+Zi36252HdrLvxuzYXfLbns9ny1V1z43ZqLfbfmYt+tuQxcSi723ZqLzyMrPcNuz1d7xYXfrbnwuwWX5eB8teq++4OLfbfmYt+tudh3ay4Dl5KLfbfmwu/WXPjdmgu/W3Phd0suzld7wMW+W3Ox79Zc7Ls1l8EzVJ5ht+erveLC79Zc+N2ai323vu/ad0suzld7wMW+W3Ox79Zc7Ls1l4FLyYXfrbnwuzUXfrfmYt+tudh3Sy7OV3vAxb5bc/F5ZKVn2O35aq+4DFxKLvxuzcW+W9937bs1F/tuzcW+W3JxvtoDLvbdmgu/W3Phd2suA5eSC79bc7Hv1lzsuzUX+27Nxb5bctnt+WovPMNuz1d7xYXfrbnwuzWX4b5b3nftuzUX+27Nxb5bc7Hv1lzsuyWX3Z6v9ooLv1tz4XdrLvxuzWXgUnKx79Zc7Ls1F/tuzcXnkZWeYbfnq73gstvz1V5x4XdrLvbd8r7rfLUHXAYuJRf7bs3Fvltzse/WXPjdmgu/W3LZ7flqr7jwuzUX+27Nxb5bcxm4lFzsuzUXn0dWeobdnq/2igu/W3Phd0suzler77vOV3vAxb5bc7Hv1lwGLiUX+27Nhd+tufC7NRd+t+bC71Zcjs5Xe8DFvltzse/WXOy7NZfBMxSe4bjb89VeceF3ay78bs3Fvlvfd+27JRfnqz3gYt+tudh3ay723ZrLwKXkwu/WXPjdmgu/W3Ox79Zc7LslF+erPeBi3625+Dyy0jPs9ny1V1wGLiUXfrfmYt+t77v23ZqLfbfmYt8tuThf7QEX+27Nhd+tufC7NZeBS8mF36252HdrLvbdmot9t+Zi3y257PZ8tReeYbfnq73iwu/WXOy79f1l4FJyse/WXOy7NRf7bs3Fvltz8fkM5XPa+WoPuNh3ay78bnl/2e35aq+4DFxKLvbdmot9t+Zi3625+Dyy+jlt3y257PZ8tVdc7Ls1F/tued91vtoDLgOXkot9t+Zi36252HdrLvxuzcXvM5Rcdnu+2isufn+35mLfrbnsdd+9LbePa2+nw69cRm8ux3H4+D6W5dXV1/vHt3H78fP9vLYCc1o+B+a0HA//cvUfZJpvvH8dmdP19PE9j8PhxdXjsHx86XG4fhmw+z8xNl+Qu2A8nu4fGI/3468Ym+/Tfx3GHzg+MY7xCuO4feqg8/Hn97FU38bpOo4/cVy/XvwH8+a7+rdkfrt8PLtOt4p58x4wI/PuZ9pNybx5f5mSefNuNCXz5r1rSuYD89WZ77Ytbsh8t9VyQ+Yz9dD76ePbuF+WVxTvH1zO42uZPxfXnj/93PmLy7vf/h0dtPt5jd+O96v5nql/fgPe3c+XnI73TL3zO/CeqXN+B94z9c3vwHvgvSrvmXrmd+A9U8f8Drz1y9e8L4cPGJfT+Tnv2+Xj0tvt51vl4/mfv/7R/XjU74b7/vlrPPevv8XzA3fxLZwOH78gME7Hn7/Hs1QXn3/8+B/f8DKOXy/+I0i9dYogl+4H0AryzwapaU8SpAo/SZDcwCRBDkHOESSbMUmQNMkkQfIvkwTJ7EwSJLMzR5Ddj1oX5J8NktmZJEhmZ5IgmZ1JghyCnCNIZmeSIJmdSYJkdiYJktmZJEhmZ44gF2ZnkiCZnUmCZHYmCZLZmSTIIcg5gmR2JgmS2ZkkSGZnkiCZnUmCZHbmCPLE7EwSJLMzSZDMziRBMjuTBDkEOUeQzM4kQTI7kwTJ7EwSJLMzSZDMzhxBDmZnkiCZnUmCZHYmCZLZmSTIIcg5gmR2JgmS2ZkkSGZnkiCZne2CvJw/T7a6XK6/ZkPWtM3mzL/0zYZS6ZsNS7JdNtfDB4pxPRbZEB99sxmyaZsNPdE3G8ahbzYkQt89jRfomw0v0DabCy/QNxteoO0ucOEF+mbDC/TNZsimbTa8QN9seIG+2fACfbPhBfpmwwu0zebKC/TNhhfomw0v0DcbXqBvNkM2bbPhBdq+I7jyAn2z4QX6ZsML9M2GF2i7C9x4gb7Z8AJ9s+EF+mbDC/TNZsimbTa8QN9seIG+2fACfbPhBfpmwwu0zebOC/TNhhfomw0v0DcbXqDtO4L7kE3bbHiBvtnwAn2z4QX67gK8QN9seIGu2ZwOvEDfbHiBvtnwAn2z4QX6ZjNk0zYbXqBvNrxA32x4gb7Z8AJ9s+EF2mZz5AX6ZsMLdH1HcDryAn2z4QX6ZjNk0zYbXqDvLsAL9M2GF+ibDS/QNxteoG02Cy/QNxteoG82vEDfbHiBvtkM2bTNhhfomw0v0DcbXqBvNrxA32x4gbbvCE68QN9seIG+2fACfbPhBdruAqchm7bZ8AJ9s+EF+mbDC/TNhhfomw0v0DabwQv0zYYX6JsNL9A3G16gbzZDNm2z4QX6ZsML9M2GF2j7jmDwAn2z4QXaZnPmBfpmwwu03QXOvEDfbHiBvtkM2bTNhhfomw0v0DcbXqBvNrxA32x4gbbZXHiBvtnwAn2z4QX6ZsML9M1myKZtNrxA23cEF16gbza8QN9seIG+2fACbXeBKy/QNxteoG82vEDfbHiBvtkM2bTNhhfomw0v0DcbXqBvNrxA32x4gbbZ3HiBvtnwAn2z4QX6ZsMLtH1HcBuyaZsNL9A3G16gbza8QN9dgBfomw0v0DabOy/QNxteoG82vEDfbHiBvtkM2bTNhhfomw0v0DcbXqBvNrxA32x4ga7ZjAMv0DcbXqDrO4Jx4AX6ZsML9M1myKZtNrxA312AF+ibDS/QNxteoG82vEDbbI68QN9seIG+2fACfbPhBfpmM2TTNhteoG82vEDfbHiBvtnwAn2z4QXaviNYeIG+2fACfbPhBfpmwwu03QWWIZu22fACfbPhBfpmwwv0zYYX6JsNL9A2mxMv0DcbXqBvNrxA32x4gb7ZDNm0zYYX6JsNL9A3G16g7TuCEy/QNxteoG02gxfomw0v0HYXGLxA32x4gb7ZDNm0zYYX6JsNL9A3G16gbza8QN9seIG22Zx5gb7Z8AJ9s+EF+mbDC/TNZsimbTa8QNt3BGdeoG82vEDfbHiBvtnwAm13gQsv0DcbXqBvNrxA32x4gb7ZDNm0zYYX6JsNL9A3G16gbza8QN9seIG22Vx5gb7Z8AJ9s+EF+mbDC7R9R3AdsmmbDS/QNxteoG82vEDfXYAX6JsNL9A2mxsv0DcbXqBvNrxA32x4gb7ZDNm0zYYX6JsNL9A3G16gbza8QN9seIG22dx5gb7Z8AJt3xHceYG+2fACfbMZsmmbDS/QdxfgBfpmwwv0zYYX6JsNL9A1m/OBF+ibDS/QNxteoG82vEDfbIZs2mbDC/TNhhfomw0v0DcbXqBvNrxA13cE5yMv0DcbXqBvNrxA32x4gba7wHHIpm02vEDfbHiBvtnwAn2z4QX6ZsMLtM1m4QX6ZsML9M2GF+ibDS/QN5shm7bZ8AJ9s+EF+mbDC7R9R7DwAn2z4QXaZnPiBfpmwwu03QVOvEDfbHiBvtkM2bTNhhfomw0v0DcbXqBvNrxA32x4gbbZDF6gbza8QN9seIG+2fACfbMZsmmbDS/Q9h3B4AX6ZsML9M2GF+ibDS/Qdhc48wJ9s+EF+mbDC/TNhhfom82QTdtseIG+2fACfbPhBfpmwwv0zYYXaJvNhRfomw0v0DcbXqBvNrxA23cElyGbttnwAn2z4QX6ZsML9N0FeIG+2fACbbO58gJ9s+EF+mbDC/TNhhfom82QTdtseIG+2fACfbPhBfpmwwv0zYYXaJvNjRfomw0v0PYdwY0X6JsNL9A3myGbttnwAn13AV6gbza8QN9seIG+2fACbbO58wJ9s+EF+mbDC/TNhhfom82QTdtseIG+2fACfbPhBfpmwwv0zYYX6PqO4HLgBfpmwwv0zYYX6JsNL9B1F7gchmzaZsML9M2GF+ibDS/QNxteoG82vEDbbI68QN9seIG+2fACfbPhBfpmM2TTNhteoG82vEDfbHiBtu8IjrxA32x4gbbZLLxA32x4gba7wMIL9M2GF+ibzZBN22x4gb7Z8AJ9s+EF+mbDC/TNhhdom82JF+ibDS/QNxteoG82vEDfbIZs2mbDC7R9R3DiBfpmwwv0zYYX6JsNL9B2Fxi8QN9seIG+2fACfbPhBfpmM2TTNhteoG82vEDfbHiBvtnwAn2z4QXaZnPmBfpmwwv0zYYX6JsNL9D2HcF5yKZtNrxA32x4gb7Z8AJ9dwFeoG82vEDbbC68QN9seIG+2fACfbPhBfpmM2TTNhteoG82vEDfbHiBvtnwAn2z4QXaZnPlBfpmwwu0fUdw5QX6ZsML9M1myKZtNrxA312AF+ibDS/QNxteoG82vEDbbG68QN9seIG+2fACfbPhBfpmM2TTNhteoG82vEDfbHiBvtnwAn2z4QXaviO48wJ9s+EF+mbDC/TNhhdouwvch2zaZsML9M2GF+ibDS/QNxteoG82vEDXbK4HXqBvNrxA32x4gb7Z8AJ9sxmyaZsNL9A3G16gbza8QNd3BNcDL9A3G16gbTZHXqBvNrxA213gyAv0zYYX6JvNkE3bbHiBvtnwAn2z4QX6ZsML9M2GF2ibzcIL9M2GF+ibDS/QNxteoG82QzZts+EF2r4jWHiBvtnwAn2z4QX6ZsMLtN0FTrxA32x4gb7Z8AJ9s+EF+mYzZNM2G16gbza8QN9seIG+2fACfbPhBdpmM3iBvtnwAn2z4QX6ZsMLtH1HMIZs2mbDC/TNhhfomw0v0HcX4AX6ZsMLtM3mzAv0zYYX6JsNL9A3G16gbzZDNm2z4QX6ZsML9M2GF+ibDS/QNxteoG02F16gbza8QNt3BBdeoG82vEDfbIZs2j5veIG+2fACfbPhBfpmwwv0zYYXaJvNlRdou0NfeYG+2fACfbPhBfo+b4Zs2mbDC/TNhhfomw0v0DcbXqBvNrxA2x36xgv0zYYX6JsNL9A3G16g7S5wG7Jpmw0v0DcbXqBvNrxA32x4gb7Z8AJts7nzAn2z4QX6ZsML9M2GF+ibzZDNZtnclttHNrfT4ddseIFoNsdx+vCXx/H3RJ6mczktx8+vPMbXdCrIl48of/D++aWX6ls+nY73j4tPy/nrxX/kzjnsM3c+Y5+5cyX7zJ2HmTP3H0F9XDzOt3+b++3A8ewzd/5o0tyvn5GM+/L84uV++/zKh8PhxcXj/EFuGdfb84vPh0/Kp+O/LZO3A0Fm+DYbPgbQ8P3m8N0/vvJyXg5vDd8wfIZvq+HjcA3f7w3f9XM0/v4ngy8uPoyPH3A5XMZbk8o6m9TvMak8uUn9Kyf1+qFtl+NheWtSmX2T+j0m1bsIk3o6LONzUk8vvvJyun1O6jicvl78j4k6esthon5vonLC8ehVi+HbbPi8ajF8mw2fVy2G7zeHL2a7j8PwGb6ths+rFsP3e8N3+Ryo5fJ1oj4qrFciJio7UV5dmKjsRHnFYKKyE+VVgIn6vYn6nZdWx9tn2sf78df3Bov3BsZvw/Hz5sD4/XXjF/w1qMVrBpP6PSbVOwmT+j0mdZhUk/oXTmrsF/YWbztM6veYVG9RTOrp+Pk5dKfj6d2O7i2KicpOlLcoJuq3JipZOrxwMXxbDd/J6xbDt9nwedli+H5z+GK99OT9ieHbbPi8Eplz+M7n08fF58uLv+T5vb8Mf/H3tqdhokzURh/wd/I2wvBtNnxeMBi+zYbPuwjDt9WnS568tjB8mw2f1xaG7/eG78VfHg3vIkxUdqK8YDBR2Yny1sBEZSfKqwAT9dd9SOyrX30bw/gZv+3Gz5sD4/ctjh0YXjOY1O8xqd5JmNTvMaleYJjUb3FAxvC2w6R+i0k9e4tiUrf6+PmzFy6Gb7Ph827G8G318fNnr3EM32bDNwyf4fsOn7B29r7HpH6PSfW+x6R+i09YO3vfY1K/x6R632NSo5/cdvZexkRFJ+ri/YmJ2uoTsS7enxi+zYbP+xPDt9nweX9i+Lb6OLbLMHyGb6vh80okO3y3T9zH23L8l+H7AzizvzJwgnpl4DzrysBpyL8O+HH8CvzK0q0MnJlaGTgbszJwBmJl4APwdYFrmuuuhVdNc2XgmubKwDXNlYFrmusCv2maKwPXNFcGrmmuDFzTXBn4AHxd4JrmysA1zdV+g+EP4JrmysA1zZWBa5rrAr9rmisD1zRfA7+Oj2/5djw8B345fPxO3GX58mt8x+WfuPXMVXFrmaviHnCviVvDXBW3frkqbu1yVdy65aq4NcsVcd8PeuWquLXKVXFrlavi1ipXxT3gXhO3Vrkqbq1yVdxa5aq4tcpVcWuVa+I+apWr4tYqV8WtVa6KW6tcFfeAe03cWuWquLXKVXFrlavi1ipXxa1Vrol70SpXxa1Vropbq1wVt1a5Ku4B95q4tcpVcWuVq+LWKlfFrVWuilurXBP3SatcFbdWuSpurXJV3FrlqrgH3Gvi1ipXxa1Vropbq1wVt1a5Km6tck3cQ6tcFbdWuSpurXJV3FrlqrgH3Gvi1ipXxa1Vropbq1wVt1a5Km6tck3cZ61yVdxa5aq4tcrXuG/3j1Pr768+43i5fHzZ5QuJ07n8Dj5AnI/XF5ceLh9xjOPx8vXiP1JUVmdIcUhxghRV6xlS1NhnSJEImCFFfmGGFGmLCVK8sCEzpEiyzJAidzNDitzNDCkOKU6QInczQ4rczQwpcjczpMjdzJAidzNBilfuZoYUuZsZUuRuZkiRu5khxSHFCVLkbmZIkbuZIUXuZoYUuZsZUuRuJkjxxt3MkCJ3M0OK3M0MKXI3M6Q4pDhBitzNDClyNzOkyN3MkCJ3M0OK3M0EKd65mxlS5G5mSJG7mSFF7maGFIcUJ0iRu5khRe5mhhS5mxlS5G5mSJG7+fYpng4H7maGFLmbGVLkbmZIkbuZIcUhxQlS5G5mSJG7mSFF7maGFLmbGVLkbiZI8cjdzJAidzNDitzNDClyNzOkOKQ4QYrczQwpcjczpMjdfIcUl9vHlx2nsTy/eDkeP77d5TjGr5ETPbuLnBXaW+QLhbS7yPmm3UVOTu0uciZrd5EPke8tco5sd5ETaruLnH3bXeTs2+4iZ9/2FvmJfdtd5Ozb7iJn33YXOfu2u8iHyPcWOfu2u8jZt91Fzr7tLnL2bXeRs297i3ywb7uLnH3bXeTs2+4iZ992F/kQ+d4iZ992Fzn7trvI2bfdRc6+7S5y9m1vkZ/Zt28Q+Xm5ffxk59Ny/jVFQm2GFDmyGVKkvWZIcUhxghTJqRlS5JtmSJFCmiFFVmiGFImeCVK8cDczpMjdzJAidzNDitzNDCkOKU6QInczQ4rczQwpcjczpMjdzJAidzNBilfuZoYUuZsZUuRuZkiRu5khxSHFCVLkbmZIkbuZIUXuZoYUuZsZUuRuJkjxxt3MkCJ3M0OK3M0MKXI3M6Q4pDhBitzNDClyNzOkyN3MkCJ3M0OK3M0EKd65mxlS5G5mSJG7mSFF7maGFIcUJ0iRu5khRe5mhhS5mxlS5G5mSJG7+f4pHg/czQwpcjczpMjdzJAidzNDikOKE6TI3cyQInczQ4rczQwpcjczpMjdTJDikbuZIUXuZoYUuZsZUuRuZkhxSPEbpHi+fl57vt9/TZG7mSFF7maGFLmbGVLkbmZIkbuZIMWFu5khRe5mhhS5mxlS5G5mSHFIcYIUuZsZUuRuZkiRu5khRe5mhhS5mwlSPHE3M6TI3cyQInczQ4rczQwpDilOkCJ3M0OK3M0MKXI3M6TI3cyQInczQYqDu5khRe5mhhS5mxlS5G5mSHFIcYIUuZsZUuRuZkiRu5khRe5mhhS5mwlSPHM3M6TI3cyQInczQ4rczQwpDilOkCJ3M0OK3M0MKXI3M6TI3cyQInczQYoX7maGFLmbGVLkbmZIkbuZIcUhxQlS5G5mSJG7mSFF7maGFLmbGVLkbiZI8crdzJAidzNDitzNDClyNzOkOKQ4QYrczQwpcjczpMjdzJAid/MNUrws4/jPay+nw+nXFLmbCVK8cTczpMjdzJAidzNDitzNDCkOKU6QInczQ4rczQwpcjczpMjdzJAidzNBinfuZoYUuZsZUuRuZkiRu5khxSHFCVLkbmZIkbuZIUXuZoYUuZsZUuRuvn+Ky4G7mSFF7maGFLmbGVLkbmZIcUhxghS5mxlS5G5mSJG7mSFF7maGFLmbCVI8cjczpMjdzJAidzNDitzNDCkOKU6QInczQ4rczQwpcjczpMjdzJAid/MdUvxxxUeK5zF+SXHhbmZIkbuZIUXuZoYUuZsZUhxSnCBF7maGFLmbGVLkbmZIkbuZIUXuZoIUT9zNDClyNzOkyN3MkCJ3M0OKQ4oTpMjdzJAidzNDitzNDClyNzOkyN1MkOLgbmZIkbuZIUXuZoYUuZsZUhxSnCBF7maGFLmbGVLkbmZIkbuZIUXuZoIUz9zNDClyNzOkyN3MkCJ3M0OKQ4oTpMjdzJAidzNDitzNDClyNzOkyN1MkOKFu5khRe5mhhS5mxlS5G5mSHFIcYIUuZsZUuRuZkiRu5khRe5mhhS5mwlSvHI3M6TI3cyQInczQ4rczQwpDilOkCJ38x1SvF0/vuzlfrj8miJ3M0OK3M0MKXI33yHF+3L4TPF8eH7x7XT6+MK30/ny4uLxgez2JYzP6eCETMfD6bhxTabj8XRwWKbj8XRwY6bj8XRwbqbj8XQM02E6Hk4HR2g6Hk8H92g6Hk8Hp2k6Hk8HV2o6Hk8HV2o6Hk7HnSs1HY+ngys1HY+ngys1HY+ngys1HY+nY5gO0/FwOrhS0/F4OrhS0/F4OrhS0/F4OrhS0/F4OrhS0/FoOk4HrtR0PJ4OrtR0PJ4OrtR0PJ4OrtR0PJ6OYTpMx8Pp4EpNx+Pp4EpNx+Pp4EpNx+Pp4EpNx+Pp4EpNx8PpOHKlpuPxdHClpuPxdHClpuPxdHClpuPxdAzTYToeTgdXajoeTwdXajoeTwdXajoeTwdXajoeTwdXajoeTsfClZqOx9PBlZqOx9PBlZqOx9PBlZqOx9MxTIfpeDgdXKnpeDwdXKnpeDwdXKnpeDwdXKnpeDwdXKnpeDgdJ67UdDyeDq7UdDyeDq7UdDyeDq7UdDyejmE6TMfD6eBKTcfj6eBKTcfj6eBKTcfj6eBKTcfj6eBKTcfD6Rhcqel4PB1cqel4PB1cqel4PB1cqel4PB3DdJiOh9PBlZqOx9PBlZqOx9PBlZqOx9PBlZqOx9PBlZqOh9Nx5kpNx+Pp4EpNx+Pp4EpNx+Pp4EpNx+PpGKbDdDycDq7UdDyeDq7UdDyeDq7UdDyeDq7UdDyeDq7UdDycjgtXajoeTwdXajoeTwdXajoeTwdXajoeT8cwHabj4XRwpabj8XRwpabj8XRwpabj8XRwpabj8XRwpabj4XRcuVLT8Xg6uFLT8Xg6uFLT8Xg6uFLT8Xg6hukwHQ+ngys1HY+ngys1HY+ngys1HY+ngys1HY+ngys1HQ+n48aVmo7H08GVmo7H08GVmo7H08GVmo7H0zFMh+l4OB1cqel4PB1cqel4PB1c6XzTcTx9Tsdl/Bo5Abq7yFnNvUV+pyp3Fzn/uLvIScXdRc4U7i7yIfK9Rc7p7S5yom53kbNv00U+zp++9ce/8fzi5X69fXzD9/vP+VguxcXnw+cwnQ+n49eL/xgmXs8wxYaJMTRMoWEaBy7SMMWGieU0TLFh4k8NU2yYmFnDFBumYZgMU2qY2GTDFBsmntowxYaJATdMsWFiwA1TbJgYcMOUGqYjA26YYsPEgBum2DAx4IYpNkwMuGGKDdMwTIYpNUwMuGGKDRMDbphiw8SAG6bYMDHghik2TAy4YUoN08KAG6bYMDHghik2TAy4YYoNEwNumGLDNAyTYUoNEwNumGLDxIAbptgwMeCGKTZMDLhhig0TA26YUsN0YsANU2yYGHDDFBsmBtwwxYaJATdMsWEahskwpYaJATdMsWFiwA1TbJgYcMMUGyYG3DDFhokBN0ypYRoMuGGKDRMDbphiw8SAG6bYMDHghik2TMMwGabUMDHghik2TAy4YYoNEwNumGLDxIAbptgwMeCGKTVMZwbcMMWGiQE3TLFhYsANU2yY9mrAr+ePL3y9nV8M0zgdPiCO0/H+gviP7/OD+DIK4gPxlYnv1aVuR3yvwnE74nu1ctsR36u62o74Xv3OZsQve5Ug2xHfqynYjvhe6/R2xHXOtYkPxFcmrnOuTVznXJu4zrk2cZ1zbeI658rErzrn2sR1zrWJ65xrE9c51yY+EF+ZuM65NnGdc23iOufaxHXOtYnrnCsTv+mcaxPXOdcmrnOuTVznXJv4QHxl4jrn2sR1zrWJ65xrE9c51yauc65M/K5zrk1c51ybuM65NnGdc23iA/GVieucaxPXOdcmrnOuTVznXJu4zrku8fNB51ybuM65NnGd808Qv5yPH8Qvl+uvENXIAMQB4vsQlb0ARP3tT0C8Hj6+53E9FhBVsgBELSsAUXF6H+JRFwpAVG/efzofNZYARI0lAHGA+D5EjSXwYNFYAhA1lgBEjSUAUWN5H+KisQQgaiwBiBpLAKLGEoA4QHwfosYSgKixBCBqLAGIGksAosbyvgo7aSwBiBpLAKLGEoCosbz/YDkNEN+HqLEEIGosAYgaSwCixhKAqLG8D3FoLAGIGksAosYSgKixBCAOEN+HqLEEIGosAYgay/sqbGgsAYgay/sQzxpLAKLG8v6D5ayxBCBqLAGIA8T3IWosAYgaSwCixhKAqLEEIGos70O8aCwBiBpLAKLGEoCosQQgDhDfh6ixvK/CLhpLAKLGEoCosQQgaizvP1iuGksAosYSgKixBCBqLAGIA8T3IWosAYgaSwCixhKAqLEEIGos70O8aSwBiBpLAKLGEoCosbyvwm4DxPchaiwBiBpLAKLGEniwaCwBiBrL+xDvGksAosYSgKixBCBqLAGIA8T3IWosAYgaSwCixhKAqLEEIGosb0O8HDSWAESN5W0VdnHmfQKixhKAOEB8H6LGEniwaCwBiBpLAKLGEoCosbwP0Zn3CYgaSwCixhKAqLEEIA4Q34eosQQgaiwBiBpLAKLGEoCosbyvwpx5n4CosQQgaiwBiBrL+w8WZ94nIGosAYgaSwCixhKAqLEEIGos70N05n0CosYSgKixBCBqLAGIA8T3IWosAYgaSwCixvK+CnPmfQKixvI+RGfeJyBqLO8/WJx5n4CosQQgDhDfh6ixBCBqLAGIGksAosYSgKixvA/RmfcJiBpLAKLGEoCosQQgDhDfh6ixvK/CnHmfgKixBCBqLAGIGsv7DxZn3icgaiwBiBpLAKLGEoA4QHwfosYSgKixBCBqLAGIGksAosbyPkRn3icgaiwBiBpLAKLG8r4Kc+Z9AqLGEoCosQQgaiyBB4vGEoCosbwP0Zn3CYgaSwCixhKAqLEEIA4Q34eosQQgaiwBiBpLAKLGEoCosbwP0Zn3CYgay/sqzJn3CYgaSwDiAPF9iBpL4MGisQQgaiwBiBpLAKLG8jbEqzPvExA1lgBEjSUAUWMJQBwgvg9RYwlA1FgCEDWWAESNJQBRY3lbhV2deZ+AqLEEIGosAYgay/sPFmfeJyBqLAGIGksAosYSgKixBCBqLO9DdOZ9AqLGEoCosQQgaiwBiAPE9yFqLAGIGksAosbyvgpz5n0CosbyPkRn3icgaizvP1iceZ+AqLEEIA4Q34eosQQgaiwBiBpLAKLGEoCosbwP0Zn3CYgaSwCixhKAqLEEIA4Q34eosbyvwpx5n4CosQQgaiwBiBrL+w8WZ94nIGosAYgaSwCixhKAOEB8H6LGEoCosQQgaiwBiBpLAKLG8j5EZ94nIGosAYgaSwCixvK+CnPmfQKixhKAqLEEIGosgQeLxhKAqLG8D9GZ9wmIGksAosYSgKixBCAOEN+HqLEEIGosAYgaSwCixhKAqLG8D9GZ9wmIGsv7KsyZ9wmIGksA4gDxfYgaS+DBorEEIGosAYgaSwCixvI+RGfeJyBqLAGIGksAosYSgDhAfB+ixhKAqLEEIGosAYgaSwCixvK2Crs58z4BUWMJQNRYAhA1lrcfLLfDAPF9iBpLAKLGEoCosQQgaiwBiBrL+xCdeZ+AqLEEIGosAYgaSwDiAPF9iBpLAKLGEoCosbyvwpx5n4CosbwP0Zn3CYgay/sPFmfeJyBqLAGIA8T3IWosAYgaSwCixhKAqLEEIGos70N05n0CosYSgKixBCBqLAGIA8T3IWos76swZ94nIGosAYgaSwCixvL+g8WZ9wmIGksAosYSgKixBCAOEN+HqLEEIGosAYgaSwCixhKAqLG8D9GZ9wmIGksAosYSgKixvK/CnHmfgKixBCBqLAGIGkvgwaKxBCBqLO9DdOZ9AqLGEoCosQQgaiwBiAPE9yFqLAGIGksAosYSgKixBCBqLO9DdOZ9AqLG8r4Kc+Z9AqLGEoA4QHwfosYSeLBoLAGIGksAosYSgKixvA/RmfcJiBpLAKLGEoCosQQgDhDfh6ixBCBqLAGIGksAosYSgKixvK/CnHmfgKixBCBqLAGIGsv7DxZn3icgaiwBiBpLAKLGEoCosQQgaixvQ7w78z4BUWMJQNRYAhA1lgDEAeL7EDWWAESNJQBRY3lbhd2deZ+AqLG8D9GZ9wmIGsv7DxZn3icgaiwBiAPE9yFqLAGIGksAosYSgKixBCBqLO9DdOZ9AqLGEoCosQQgaiwBiAPE9yFqLO+rMGfeJyBqLAGIGksAosby/oPFmfcJiBpLAKLGEoCosQQgDhDfh6ixBCBqLAGIGksAosYSgKixvA/RmfcJiBpLAKLGEoCosbyvwpx5n4CosQQgaiwBiBpL4MGisQQgaizvQ3TmfQKixhKAqLEEIGosAYgDxPchaiwBiBpLAKLGEoCosQQgaizvQ3TmfQKixvK+CnPmfQKixhKAOEB8H6LGEniwaCwBiBpLAKLGEoCosbwP0Zn3CYgaSwCixhKAqLEEIA4Q34eosQQgaiwBiBpLAKLGEoCosbyvwpx5n4CosQQgaiwBiBrL+w8WZ94nIGosAYgaSwCixhKAqLEEIGos70N05n0CosYSgKixBCBqLAGIA8T3IWosAYgaSwCixvK+CnPmfQKixvIuxHFw5n0Cosby7oPlB0SNJQBRYwlAHCC+D1FjCUDUWAIQNZYARI0lAFFjeR+iM+8TEDWWAESNJQBRYwlAHCC+D1FjeV+FOfM+AVFjCUDUWAL3RI3lfYjOvE9A1FgCEDWWAESNJQBxgPj2iuPM+wREjSUAUWMJ3BM1lgBEjeV9iM68T0DUWAIQNZYARI3l/RXHmfcJiBpLAKLGEoCosQQeLBpLAKLG8j5EZ94nIGosAYgaSwCixhKAOEB8H6LGEoCosQQgaiwBiBrLn4B4W24fEG+nw68Qd9tY7h/X3k7Hf4H4Dy5THWN/PCznz+/6fHhBZtw/Lj6Pw4vxOo/Pa28/r71XP+DpOo4/YXz5z3n8k/hMjaUH8dvl49rTrSI+U735HsRn6kLfg/hAfGXiM7Ws70F8pkr2PYjP1N++B/GZyt73ID5TM/wWxC86558hfjl84Liczs+J3y4fl95uX0r++Z/y46JyhoHfL+PDwHz5r+HvwItv4XQ4faip0/H+VU0V/5n9APDxDS/j+IvHuuiy00SpJE8T5RDlLFGq9dNEyRdMEyURMU2UDMc0UVIns0R55WSmiZLtmSZKtmeaKNmeaaIcopwlSrZnmijZnmmiZHumiZLtmSZKtmeWKG9szzRRsj3TRMn2TBMl2zNNlEOUs0TJ9kwTJdszTZRszzRRsj3TRMn2zBLlne2ZJkq2Z5oo2Z5pomR7polyiHKWKNmeaaJke6aJku2ZJkq2Z5oo2Z5Jojwe2J5pomR7pomS7ZkmSrZnmiiHKGeJku2ZJkq2Z5oo2Z5pomR7pomS7ZklyiPbM02UbM+WUT4/fPt4JHA6p8PJdE5nSKdxOszJluk8P/3zeCRDOqfDb3ROh7LonA4L0TidhVhovLMtXEHndLiCzulwBZ3TGdJpvBVwBZ3T4Qo6p8MVdE6HK+icDlfQOJ0TV9A5Ha6gczpcQed0uILO6QzpNE6HK+icDlfQOR2uoHM6XEHjNwgnrqBxOoMr6JwOV9A5Ha6g8VYwuILO6QzpNE6HK+icDlfQOR2uoHM6XEHndLiCxumcuYLO6XAFndPhCjqnwxV0TmdIp3E6XEHndLiCxm8QzlxB53S4gs7pcAWN07lwBY23ggtX0DkdrqBzOlxB53SGdBqnwxV0Tocr6JwOV9A5Ha6gczpcQeN0rlxB53S4gs7pcAWd0+EKOqczpNP3DcKVK+icDlfQOR2uoHM6XEHnrYAraJzOjSvonA5X0DkdrqBzOlxB53SGdBqnwxV0Tocr6JwOV9A5Ha6gczpcQeN07lxB53S4gs7pcAWN3yDcuYLO6QzpNE6HK+icDlfQeSvgCjqnwxV0Tocr6JvOcuAKOqfDFXROhyvonA5X0DmdIZ3G6XAFndPhCjqnwxV0Tocr6JwOV9A4nSNX0PcNwnLkCjqnwxV0Tocr6JzOkE7jrYAr6JwOV9A5Ha6gczpcQed0uILG6SxcQed0uILO6XAFndPhCjqnM6TTOB2uoHM6XEHndLiCzulwBY3fICxcQeN0TlxB53S4gs7pcAWNt4ITV9A5nSGdxulwBZ3T4Qo6p8MVdE6HK+icDlfQOJ3BFXROhyvonA5X0DkdrqBzOkM6jdPhCjqnwxU0foMwuILO6XAFndPhChqnc+YKGm8FZ66gczpcQed0uILO6QzpNE6HK+icDlfQOR2uoHM6XEHndLiCxulcuILO6XAFndPhCjqnwxV0TmdIp+8bhAtX0DkdrqBzOlxB53S4gs5bAVfQOJ0rV9A5Ha6gczpcQed0uILO6QzpNE6HK+icDlfQOR2uoHM6XEHndLiCxuncuILO6XAFndPhChq/QbhxBZ3TGdJpnA5X0DkdrqDzVsAVdE6HK+icDlfQOJ07V9A5Ha6gczpcQed0uILO6QzpNE6HK+icDlfQOR2uoHM6XEHndLiCvumcDlxB3zcIpwNX0DkdrqBzOlxB53SGdBpvBVxB53S4gs7pcAWd0+EKOqfDFTRO58gVdE6HK+icDlfQOR2uoHM6QzqN0+EKOqfDFXROhyvonA5X0PgNwpEraJzOwhV0Tocr6JwOV9B4K1i4gs7pDOk0Tocr6JwOV9A5Ha6gczpcQed0uILG6Zy4gs7pcAWd0+EKOqfDFXROZ0incTpcQed0uILGbxBOXEHndLiCzulwBY3TGVxB461gcAWd0+EKOqfDFXROZ0incTpcQed0uILO6XAFndPhCjqnwxU0TufMFXROhyvonA5X0DkdrqBzOkM6fd8gnLmCzulwBZ3T4Qo6p8MVdN4KuILG6Vy4gs7pcAWd0+EKOqfDFXROZ0incTpcQed0uILO6XAFndPhCjqnwxU0TufKFXROhyvonA5X0PgNwpUr6JzOkE7jdLiCzulwBZ23Aq6gczpcQed0uILG6dy4gs7pcAWd0+EKOqfDFXROZ0incTpcQed0uILO6XAFndPhCjqnwxU0TufOFTR+g3DnCjqnwxV0Tocr6JzOkE7jrYAr6JwOV9A5Ha6gczpcQed0uIK+6YwDV9A5Ha6gczpcQed0uILO6QzpNE6HK+icDlfQOR2uoHM6XEHfNwjjwBU0TufIFXROhyvonA5X0HgrOHIFndMZ0mmcDlfQOR2uoHM6XEHndLiCzulwBY3TWbiCzulwBZ3T4Qo6p8MVdE5nSKdxOlxB53S4gsZvEBauoHM6XEHndLiCxumcuILGW8GJK+icDlfQOR2uoHM6QzqN0+EKOqfDFXROhyvonA5X0DkdrqBxOoMr6JwOV9A5Ha6gczpcQed0hnT6vkEYXEHndLiCzulwBZ3T4Qo6bwVcQeN0zlxB53S4gs7pcAWd0+EKOqczpNM4Ha6gczpcQed0uILO6XAFndPhChqnc+EKOqfDFXROhyto/AbhwhV0TmdIp3E6XEHndLiCzlsBV9A5Ha6gczpcQeN0rlxB53S4gs7pcAWd0+EKOqczpNM4Ha6gczpcQed0uILO6XAFndPhChqnc+MKGr9BuHEFndPhCjqnwxV0TmdIp/FWwBV0Tocr6JwOV9A5Ha6gczpcQeN07lxB53S4gs7pcAWd0+EKOqczpNM4Ha6gczpcQed0uILO6XAFjd8g3LmCvumcD1xB53S4gs7pcAV9t4LzgSvonM6QTuN0uILO6XAFndPhCjqnwxV0TocraJzOkSvonA5X0DkdrqBzOlxB53SGdBqnwxV0TocraPwG4cgVdE6HK+icDlfQOJ2FK2i8FSxcQed0uILO6XAFndMZ0mmcDlfQOR2uoHM6XEHndLiCzulwBY3TOXEFndPhCjqnwxV0Tocr6JzOkE7fNwgnrqBzOlxB53S4gs7pcAWdtwKuoHE6gyvonA5X0DkdrqBzOlxB53SGdBqnwxV0Tocr6JwOV9A5Ha6gczpcQeN0zlxB53S4gs7pcAWN3yCcuYLO6QzpNE6HK+icDlfQeSvgCjqnwxV0TocraJzOhSvonA5X0DkdrqBzOlxB53SGdBqnwxV0Tocr6JwOV9A5Ha6gczpcQeN0rlxB4zcIV66gczpcQed0uILO6QzpNN4KuILO6XAFndPhCjqnwxV0TocraJzOjSvonA5X0DkdrqBzOlxB53SGdBqnwxV0Tocr6JwOV9A5Ha6g8RuEG1fQOJ07V9A5Ha6gczpcQeOt4M4VdE5nSKdxOlxB53S4gs7pcAWd0+EKOqfDFfRN53LgCjqnwxV0Tocr6JwOV9A5nSGdxulwBZ3T4Qr6vkG4HLiCzulwBZ3T4Qoap3PkChpvBUeuoHM6XEHndLiCzukM6TROhyvonA5X0DkdrqBzOlxB53S4gsbpLFxB53S4gs7pcAWd0+EKOqczpNP3DcLCFXROhyvonA5X0Pm5wxV0TocraJzOiSvonA5X0DkdrqBzOlxB4436NKTTOB2uoHM6XEHn5w5X0DkdrqBzOlxB43QGV9A5Ha6gczpcQeONenAFndMZ0mmcDlfQOR2uoPNWwBV0Tocr6JwOV9A4nTNX0DkdrqBzOlxB53S4gs7pDOk0Tocr6JwOV9A5Ha5gy3Ruy+0jndvp8Gs6XEE4neM4fZjN4/h7Jk/zuZyW4+dXHuNrPhXmy0eYP4j//NJL9S2fTsf7x8Wn5fz14j+S5yF2mvyF49hr8vzJXpPnZmZN/kdUHxeP8+3X5HmfvSY/JD9r8tfPUMZ9eX7xcr99fuXD4fDi4nH+ILeM6+35xefDJ+XT8ZdqeSHNjN+G48cKGr/fHr/7x1dezsvhrfGjPY3fhuPH6xq/3x2/6+dwLNfr+cXFh/HxAy6Hy3hrVplos/pNZvXKnZvVv3ZWrx8id/mRz1uzyvab1e8yq95PmNW/D+gyPmf19OIrL6fb56yOw+nrxX/MlDcfZup3ZyonIK/D+Bm/7cbP6xfjt+H4ef1i/H57/GL+++r1i/HbcPy8fjF+vzt+l8+RWi5fZ+qjznpNYqbCM3XzOsNMpWfKawczlZ4prwfM1O/O1O+8yjrePvM+3o+/vku4eZdgADcdwGEADeBfOIDBX5K6efVgVr/LrHpPYVa/y6x6qWFW/9pZjf1C380bELP6XWbVmxWz+uOK4+cn2Z2Opzf7+t2bFTOVnilvVszUb85UsH7cvYQxfhuOn1cwxm/D8RvGz/j97vjFOurdOxXjt+H4eU0y6/idz6ePi8+XF3/z83t/S/7i73PvXmeYqb9t9gGBd28ojN+G4+elg/HbbPyuB+8njN/ftvp8yuvBqwzjt+H4eZVh/H53/J7/jdL14P2EmUrP1DBTZio8U94kmKn0THk9YKb+9hd+1OyLX427HrxLMICbDqC3CQbwb9/iEIPrwasHs/pNZvXoPYVZ/S6z6qWGWf3btzhw43r0BsSsfpdZ9WbFrP5tq4+yvx6H8TN+242f9zXG77fHL/arMkevdozfhuPnxY7x+9u3+Hy269E7ILP6XWbVOyCz+rdv8fls18U7ILP6XWbVOyCz+rfo575dF+9qzFR6prxTMVN/2+rTtK7LMH7Gb7vx807F+G04ft6pGL+/bfVhbtfFOxXjt+H4eU2SHr/bJ/DjbTn+y/j9gZztXxv5ibReHTn3ujpyavKvRH4cBXLmbnXkA/K1kTM0qyNnJVZHromvvrFon6sj1z7XRj60z9WRa5+rI9c+V0eufa6OfEC+NnLtc3Xk2ufqyLXP1ZFrnyu+ev8Dufa5NvKz9rk6cu1zdeTa5+rItc8/g/yHGPnntbfj4Tnyy+Hj17ouy5ffRDsu/wQ+AF8XuOa5MnC9c2XgWufKwHXOlYFrnOsCv+ibKwPXNlcGrmuuDFzTXBn4AHxd4JrmysA1zZWBa5orA9c0Vwauaa4L/Kpprgxc01wZuKa5MnBNc2XgA/B1gWuaKwPXNFcGrmmuDFzTXBm4prku8JumuTJwTXNl4JrmysA1zZWBD8D/BPDb/eNDK++vfkN8uXx82eULi9O5/A4+UJyP1xeXHi4fgYzj8fL14j9yVGDnyFEvniNHdXuOHLX4OXIkB6bI8c45zJEjlTFHjgzJHDkSL3PkOOQ4RY58zhw58jlz5MjnzJEjnzNHjnzODDneDnzOHDnyOXPkyOfMkSOfM0eOQ45T5MjnzJEjnzNHjnzOHDnyOXPkyOdMkeORz5kjRz5njhz5nDly5HPmyHHIcYoc+Zw5cuRz5siRz5kjRz5njhz5nClyXPicOXLkc+bIkc+ZI0c+Z44chxynyJHPmSNHPmeOHPmcOXLkc+bIkc+ZIscTnzNHjnzOHDnyOXPkyOfMkeOQ4xQ58jlz5MjnzJEjnzNHjnzOHDnyOVPkOPicOXLkc+bIkc+ZI0c+Z44chxynyJHPmSNHPmeOHPmcOXLkc+bIkc/5Hjkut48vO05/z+DZxcvx+PHtLscxfgn9TP7sMHSmaIeh00o7DJ2D2mHoQ+j7C53d2mHoVNgOQ+fNdhg6ybbD0Bm5/YV+YeR2GDojt8PQGbkdhs7I7TD0IfT9hc7I7TB0Rm6HoTNyOwydkdth6Izc/kK/MnI7DJ2R22HojNwOQ2fkdhj6EPr+Qmfkdhg6I7fD0Bm5HYbOyO0wdEZuf6HfGLkdhs7I7TB0Ru5bhH5ebh+Iz6fl/GuOJNscOQ45TpEjFTZHjuzWHDkSVnPkyEHNkSOtNEWOd6ZojhzJnzly5HPmyJHPmSPHIccpcuRz5siRz5kjRz5njhz5nDly5HNmyPF+4HPmyJHPmSNHPmeOHPmcOXIccpwiRz5njhz5nDly5HPmyJHPmSNHPmeKHI98zhw58jlz5MjnzJEjnzNHjkOOU+TI58yRI58zR458zhw58jlz5MjnTJHjwufMkSOfM0eOfM4cOfI5c+Q45DhFjnzOHDnyOXPkyOfMkSOfM0eOfM4UOZ74nDly5HPmyJHPmSNHPmeOHIccp8iRz5kjRz5njhz5nDly5HPmyJHPmSLHwefMkSOfM0eOfM4cOfI5c+Q45DhFjnzOHDnyOd8jx/P189rz/f5rjnzOHDnyOXPkyOdMkeOZz5kjRz5njhz5nDly5HPmyHHIcYoc+Zw5cuRz5siRz5kjRz5njhz5nClyvPA5c+TI58yRI58zR458zhw5DjlOkSOfM0eOfM4cOfI5c+TI58yRI58zRY5XPmeOHPmcOXLkc+bIkc+ZI8chxyly5HPmyJHPmSNHPmeOHPmcOXLkc6bI8cbnzJEjnzNHjnzOHDnyOXPkOOQ4RY58zhw58jlz5MjnzJEjnzNHjnzOFDne+Zw5cuRz5siRz5kjRz5njhyHHKfIkc+ZI0c+Z44c+Zw5cuRz5siRz5kgx/PhwOfMkSOfM0eOfM4cOfI5c+Q45DhFjnzOHDnyOXPkyOfMkSOfM0eOfM4UOR75nG+R42UZx39eezkdTr/myOfMkSOfM0eOfM4cOQ45TpEjnzNHjnzOHDnyOXPkyOfMkSOfM0WOC58zR458zhw58jlz5MjnzJHjkOMUOfI5c+TI58yRI58zR458zhw58jlT5Hjic+bIkc+ZI0c+Z44c+Zw5chxynCJHPmeOHPmcOXLkc+bIkc+ZI0c+Z4ocB58zR458zhw58jlz5MjnzJHjkOMUOfI5c+TI58yRI58zR458zhw58jlT5Hjmc+bIkc/5Hjn+uOIjx/MYv+bI58yRI58zR45DjlPkyOfMkSOfM0eOfM4cOfI5c+TI50yR44XPmSNHPmeOHPmcOXLkc+bIcchxihz5nDly5HPmyJHPmSNHPmeOHPmcKXK88jlz5MjnzJEjnzNHjnzOHDkOOU6RI58zR458zhw58jlz5MjnzJEjnzNFjjc+Z44c+Zw5cuRz5siRz5kjxyHHKXLkc+bIkc+ZI0c+Z44c+Zw5cuRzpsjxzufMkSOfM0eOfM4cOfI5c+Q45DhFjnzOHDnyOXPkyOfMkSOfM0eOfM4MOR4PfM4cOfI5c+TI58yRI58zR45DjlPkyOfMkSOfM0eOfM73yPF2/fiyl/vh8muOfM4cOfI5U+R45HO+R4735fCZ45cfrbz4djp9fOHb6Xx5cfH4yO72JY7P+eCJzMez+eCfzMez+eC1zMez+Rjmw3w8mQ8eznw8mw9+z3w8mw/e0Hw8mw8+0nw8mw+e03w8mY+FPzUfz+aDPzUfz+aDPzUfz+aDPzUfz+ZjmA/z8WQ++FPz8Ww++FPz8Ww++FPz8Ww++FPz8Ww++FPz8WQ+Tvyp+Xg2H/yp+Xg2H/yp+Xg2H/yp+Xg2H8N8mI8n88Gfmo9n88Gfmo9n88Gfmo9n88Gfmo9n88Gfmo8n8zH4U/PxbD74U/PxbD74U/PxbD74U/PxbD6G+TAfT+aDPzUfz+aDPzUfz+aDPzUfz+aDPzUfz+aDPzUfT+bjzJ+aj2fzwZ+aj2fzwZ+aj2fzwZ+aj2fzMcyH+XgyH/yp+Xg2H/yp+Xg2H/yp+Xg2H/yp+Xg2H/yp+XgyHxf+1Hw8mw/+1Hw8mw/+1Hw8mw/+1Hw8m49hPszHk/ngT83Hs/ngT83Hs/ngT83Hs/ngT83Hs/ngT83Hk/m48qfm49l88Kfm49l88Kfm49l88Kfm49l8DPNhPp7MB39qPp7NB39qPp7NB39qPp7NB39qPp7NB39qPp7Mx40/NR/P5oM/NR/P5oM/NR/P5oM/NR/P5mOYD/PxZD74U/PxbD74U/PxbD74U/PxbD74U/PxbD74U/PxZD7u/Kn5eDYf/Kn5eDYf/Kn5eDYf/Kn5eDYfw3yYjyfzwZ+aj2fzwZ+aj2fzwZ+aj2fzwZ+aj2fzwZ+aj8fzsRz4U/PxbD74U/PxbD74U/PxbD74U/PxbD6G+TAfT+aDPzUfz+aDPzUfz+aDPzUfz+aDPzUfz+aDPzUfT+bjyJ+aj2fzwZ+aj2fzwZ+aj2fzwZ+aj2fzMcyH+XgyH/yp+Xg2H/yp+Xg2H/yp+Xg2H/yp+Xg2H/zpjPNxPH3Ox2X8EvpCik4Y+jh//of+4994fvFyv94+vuH7/eeELJfi4vPhc5zOh9Px68V/jBOHapyC40S5GqfgODG0xik4TsM4GafcOPG/xik4TnSxcQqOE7tsnILjREYbp+A4cdfGKTdOJ1bcOAXHiRU3TsFxYsWNU3CcWHHjFBynYZyMU26cWHHjFBwnVtw4BceJFTdOwXFixY1TcJxYceOUG6fBihun4Dix4sYpOE6suHEKjhMrbpyC4zSMk3HKjRMrbpyC48SKG6fgOLHixik4Tqy4cQqOEytunHLjdGbFjVNwnFhx4xQcJ1bcOAXHiRU3TsFxGsbJOOXGiRU3TsFxYsWNU3CcWHHjFBwnVtw4BceJFTdOuXG6sOLGKThOrLhxCo4TK26cguPEihun4DgN42SccuPEihun4Dix4sYpOE6suHEKjhMrbpyC48SKG6fcOF1ZceMUHCdW3DgFx4kVN07BcWLFjVNwnIZxMk65cWLFjVNwnPZrxa/njy99vZ1fjNM4HT4wjtPx/oL5j+/0g/kyCub7VcfbMd+vX92O+X4l5GbMb/s1ddsx36/O2o75fp3Pdsz3K0a2Yz4wX535fiv2dsz10PWZ66HrM9dD12euh67O/K6Hrs9cD12fuR66PnM9dH3mA/PVmeuh6zPXQ9dnroeuz1wPXZ+5Hro289NBD12fuR66PnM9dH3meuj6zAfmqzPXQ9dnroeuz1wPXZ+5Hro+cz10deZHPXR95nro+sz10PWZ66HrMx+Yr85cD12fuR66PnM9dH3meuj6zPXQ1Zkveuj6zPXQ9Znroesz10PXZz4wX525HvqnmF/Oxw/ml8v1V4yqZQSjthjBqABGMOp0fwrj9fDxXY/r8VeMJzUtglHzimBUpiIY9aMIxgFj4El90mIiGLWYCEYtJoJRi4k8YrSYBMahxUQwajERjFpMBKMWE8E4YExg1GIiGLWYCEYtJoJRi4lg1GISGM9aTASjFhPBqMUkRNlZi4lgHDAmMGoxEYxaTOQRo8VEMGoxEYxaTALjRYuJYNRiIhi1mAhGLSaCccCYwKjFRDBqMRGMWkwEoxYTwajFJDBetZiEKLtqMRGMWkwEoxYTwThgTDxitJgIRi0mglGLiWDUYiIYtZgExpsWE8GoxUQwajERjFpMBOOAMYFRi4lg1GIiGLWYCEYtJiHKblpMAuNdi4lg1GIiGLWYxCPmrsVEMA4YExi1mAhGLSaCUYuJYNRiIhi1mADGcdBiIhi1mAhGLSaCUYuJYBwwJjBqMRGMWkxAlI2DFhPBqMVEMGoxCYxHLSbxiDlqMRGMWkwEoxYTwThgTGDUYiIYtZgIRi0mglGLiWDUYhIYFy0mglGLiWDUYiIYtZgIxgFjQJQtWkwEoxYTwajFRDBqMZFHjBaTwHjSYiIYtZgIRi0mglGLiWAcMCYwajERjFpMBKMWE8GoxUQwajEJjEOLiWDUYiIYtZiEKBtaTATjgDGBUYuJYNRiIo8YLSaCUYuJYNRiEhjPWkwEoxYTwajFRDBqMRGMA8YERi0mglGLiWDUYiIYtZgIRi0mgfGixSRE2UWLiWDUYiIYtZgIxgFj4hGjxUQwajERjFpMBKMWE8GoxSQwXrWYCEYtJoJRi4lg1GIiGAeMCYxaTASjFhPBqMVEMGoxCVF21WISGG9aTASjFhPBqMUkHjE3LSaCccCYwKjFRDBqMRGMWkwEoxYTwajFJDDetZgIRi0mglGLiWDUYiIYB4wJjFpMBKMWkxBldy0mglGLiWDUYgIYzwctJvCIOR+0mAhGLSaCUYuJYBwwJjBqMRGMWkwEoxYTwajFRDBqMQmMRy0mglGLiWDUYiIYtZgIxgFjQJQdtZgIRi0mglGLiWDUYiKPGC0mgXHRYiIYtZgIRi0mglGLiWAcMCYwajERjFpMBKMWE8GoxUQwajEJjCctJoJRi4lg1GISouykxUQwDhgTGLWYCEYtJvKI0WIiGLWYCEYtJoFxaDERjFpMBKMWE8GoxUQwDhgTGLWYCEYtJoJRi4lg1GIiGLWYBMazFpMQZWctJoJRi4lg1GIiGAeMiUeMFhPBqMVEMGoxEYxaTASjFpPAeNFiIhi1mAhGLSaCUYuJYBwwJjBqMRGMWkwEoxYTwajFJETZRYtJYLxqMRGMWkwEoxaTeMRctZgIxgFjAqMWE8GoxUQwajERjFpMBKMWk8B402IiGLWYCEYtJoJRi4lgHDAmMGoxEYxaTEKU3bSYCEYtJoJRi0lgvGsxiUfMXYuJYNRiIhi1mAjGAWMCoxYTwajFRDBqMRGMWkwEoxYTwHg5aDERjFpMBKMWE8GoxUQwDhjfF2WXgxYTwajFRDBqMRGMWkzkEaPFJDAetZgIRi0mglGLiWDUYiIYB4wJjFpMBKMWE8GoxUQwajERjFpMAuOixUQwajERjFpMQpQtWkwE44AxgVGLiWDUYiKPGC0mglGLiWDUYhIYT1pMBKMWE8GoxUQwajERjAPGBEYtJoJRi4lg1GIiGLWYCEYtJoFxaDEJUTa0mAhGLSaCUYuJYBwwJh4xWkwEoxYTwajFRDBqMRGMWkwC41mLiWDUYiIYtZgIRi0mgnHAmMCoxUQwajERjFpMBKMWkxBlZy0mgfGixUQwajERjFpM4hFz0WIiGAeMCYxaTASjFhPBqMVEMGoxEYxaTALjVYuJYNRiIhi1mAhGLSaCccCYwKjFRDBqMQlRdtViIhi1mAhGLSaB8abFJB4xNy0mglGLiWDUYiIYB4wJjFpMBKMWE8GoxUQwajERjFpMAuNdi4lg1GIiGLWYCEYtJoJxwBgQZXctJoJRi4lg1GIiGLWYyCNGiwlgvB60mAhGLSaCUYuJYNRiIhgHjAmMWkwEoxYTwajFRDBqMRGMWkwC41GLiWDUYiIYtZiAKLsetZgIxgFjAqMWE8GoxUQeMVpMBKMWE8GoxSQwLlpMBKMWE8GoxUQwajERjAPGBEYtJoJRi4lg1GIiGLWYCEYtJoHxpMUkRNlJi4lg1GIiGLWYCMYBY+IRo8VEMGoxEYxaTASjFhPBqMUkMA4tJoJRi4lg1GIiGLWYCMYBYwKjFhPBqMVEMGoxEYxaTEKUDS0mgfGsxUQwajERjFpM4hFz1mIiGAeMCYxaTASjFhPBqMVEMGoxEYxaTALjRYuJYNRiIhi1mAhGLSaCccCYwKjFRDBqMQlRdtFiIhi1mAhGLSaB8arFJB4xVy0mglGLiWDUYiIYB4wJjFpMBKMWE8GoxUQwajERjFpMAuNNi4lg1GIiGLWYCEYtJoJxwBgQZTctJoJRi4lg1GIiGLWYyCNGi0lgvGsxEYxaTASjFhPBqMVEMA4YExi1mAhGLSaCUYuJYNRiIhi1mADG20GLiWDUYiIYtZiAKLsdtJgIxgFjAqMWE8GoxUQeMVpMBKMWE8GoxSQwHrWYCEYtJoJRi4lg1GIiGAeMCYxaTASjFhPBqMVEMGoxEYxaTALjosUkRNmixUQwajERjFpMBOOAMfGI0WIiGLWYCEYtJoJRi4lg1GISGE9aTASjFhPBqMVEMGoxEYwDxgRGLSaCUYuJYNRiIhi1mIQoO2kxCYxDi4lg1GIS98ahxUQwajERjAPGBEYtJoJRi4lg1GIiC48WE8GoxSQwnrWYxL3xrMVEMGoxEYxaTATjgDGBUYuJYNRiIguPFhPBqMVEMGoxCYwXLSbxiLloMRGMWkwEoxYTwThgTGDUYiIYtZgIRi0mglGLiWDUYhIYr1pMBKMW86cw3pbbB8bb6fArxh23mPvHN307Hf8F4x9kpiomPxB8XH08316QOV0+rz5dxqurz+MD+vn2k/m9+hFP13H8iePLf9Tjn8wH5nHmP0rNxxe+VcynqjzfhPlU/eibMJ+qTH0T5lM1r2/CfKqa9j2Y36bqdN+E+VQF8Jswn6otfhPmeuifY345fAC5nM7Pmf94QfFR/W9fqv/5n1LkNiBPI79fxj8vvX/5L+LvyAtpdTqcPqTV6Xj/Kq2K/9R+IPj4b20Zx18M102/nShMxXmiMDXyicJU9ScKk0OYJ8w7OTFRmKzHRGHSKROFydNMFOYQ5jxhMkAThckATRQmAzRRmAzQRGEyQNOEeT8wQBOFyQBNFCYDNFGYDNBEYQ5hzhMmAzRRmAzQRGEyQBOFyQBNFCYDNE+YRwZoojAZoInCZIAmCpMBmijMIcx5wmSAJgqTAZooTAZoojAZoInCZIDmCXNhgCYKkwGaKEwGaKIwGaCJwhzCnCdMBmiiMBmgicJkgCYKkwGaKEwGaJ4wTwzQRGEyQBOFyQBNFCYDNFGYQ5ibhvn8SPD7idTpnQ9P0zsf6qV3PmzKtvk8P4X0fiJIWuczOI/e+dAYvfNhJnrnQza03t/GkE/rfPiD3vnwB73z4Q967wf8Qe98+IPW+Zz5g9758Ae98+EPeufDH/TOZ8indT78Qe98+IPe+fAHvfPhD3rnwx+0zufCH/TOhz/YNp8X7xcu/EHvfPiD3vkM+bTOhz/ovR/wB73z4Q9658Mf9M6HP2idz5U/6J0Pf9A7H/6gdz78Qe98hnxa58Mf9M6HP+idD3/QOx/+oHc+/MG2+bx4v3DjD3rnwx/0zoc/6J0Pf9B6P7gN+bTOhz/onQ9/0Dsf/qB3PvxB73z4g9b53PmD3vnwB73z4Q9658Mf9M5nyKd1PvxB73z4g9758Afb5vPi/cKdP+idD3/QOJ/L4cAf9M6HP2i8H/zIhz/onQ9/0DufIZ/W+fAHvfPhD3rnwx/0zoc/6J0Pf9A6nyN/0Dsf/qB3PvxB73z4g975DPm0zoc/2DafF+8XjvxB73z4g9758Ae98+EPWu8HC3/QOx/+oHc+/EHvfPiD3vkM+bTOhz/onQ9/0Dsf/qB3PvxB73z4g9b5nPiD3vnwB73z4Q9658MfbJvPi/cLpyGf1vnwB73z4Q9658Mf9N4P+IPe+fAHrfMZ/EHvfPiD3vnwB73z4Q965zPk0zof/qB3PvxB73z4g9758Ae98+EPWudz5g9658MfbJvPi/cLZ/6gdz78Qe98hnxa58Mf9N4P+IPe+fAHvfPhD3rnwx+0zufCH/TOhz/onQ9/0Dsf/qB3PkM+rfPhD3rnwx/0zoc/6J0Pf9A7H/5g23xevF+48ge98+EPeufDH/TOhz9ovR9ch3xa58Mf9M6HP+idD3/QOx/+oHc+/EHrfG78Qe98+IPe+fAHvfPhD3rnM+TTOh/+oHc+/EHvfPiDbfN58X7hxh/0zoc/aJ3PnT/onQ9/0Ho/uPMHvfPhD3rnM+TTOh/+oHc+/EHvfPiD3vnwB73z4Q8653M88Ae98+EPeufDH/TOhz/onc+QT+t8+INt83n+fuEHfPm0zoc/6J0Pf9A7H/6g9X5w5A9658Mf9M6HP+idD3/QO58hn9b58Ae98+EPeufDH/TOhz/onQ9/0DqfhT/onQ9/0Dsf/qB3PvzBtvm8eL+wDPm0zoc/6J0Pf9A7H/6g937AH/TOhz9onc+JP+idD3/QOx/+oHc+/EHvfIZ8WufDH/TOhz/onQ9/0Dsf/qB3PvxB63wGf9A7H/5g23xevF8Y/EHvfPiD3vkM+bTOhz/ovR/wB73z4Q9658Mf9M6HP2idz5k/6J0Pf9A7H/6gdz78Qe98hnxa58Mf9M6HP+idD3/QOx/+oHc+/MG2+bx4v3DhD3rnwx/0zoc/6J0Pf9B6P7gM+bTOhz/onQ9/0Dsf/qB3PvxB73z4g9b5XPmD3vnwB73z4Q9658Mf9M5nyKd1PvxB73z4g9758Afb5vPi/cKVP+idD3/QOp8bf9A7H/6g9X5w4w9658Mf9M5nyKd1PvxB73z4g9758Ae98+EPeufDH7TO584f9M6HP+idD3/QOx/+oHc+Qz6t8+EPts3nxfuFO3/QOx/+oHc+/EHvfPiDzvvBcuAPeufDH/TOhz/onQ9/0DufIZ/W+fAHvfPhD3rnwx/0zoc/6J0Pf9A6nyN/0Dsf/qB3PvxB73z4g23zef5+YTkO+bTOhz/onQ9/0Dsf/qD3fsAf9M6HP2idz8If9M6HP+idD3/QOx/+oHc+Qz6t8+EPeufDH/TOhz/onQ9/0Dsf/qB1Pif+oHc+/MG2+bx4v3DiD3rnwx/0zmfIp3U+/EHv/YA/6J0Pf9A7H/6gdz78Qet8Bn/QOx/+oHc+/EHvfPiD3vkM+bTOhz/onQ9/0Dsf/qB3PvxB73z4g23zefF+4cwf9M6HP+idD3/QOx/+oPV+cB7yaZ0Pf9A7H/6gdz78Qe98+IPe+fAHrfO58Ae98+EPeufDH/TOhz/onc+QT+t8+IPe+fAHvfPhD7bN58X7hQt/0Dsf/qB1Plf+oHc+/EHr/eDKH/TOhz/onc+QT+t8+IPe+fAHvfPhD3rnwx/0zoc/aJ3PjT/onQ9/0Dsf/qB3PvxB73yGfFrnwx9sm8+L9ws3/qB3PvxB73z4g9758Aet94M7f9A7H/6gdz78Qe98+IPe+Qz5tM6HP+idD3/QOx/+oHc+/EHvfPiDzvmcDvxB73z4g9758Ae98+EPts3n+fuF02HIp3U+/EHvfPiD3vnwB733A/6gdz78Qet8jvxB73z4g9758Ae98+EPeucz5NM6H/6gdz78Qe98+IPe+fAHvfPhD1rns/AHvfPhD7bN58X7hYU/6J0Pf9A7nyGf1vnwB733A/6gdz78Qe98+IPe+fAHrfM58Qe98+EPeufDH/TOhz/onc+QT+t8+IPe+fAHvfPhD3rnwx/0zoc/2DafF+8XBn/QOx/+oHc+/EHvfPiD1vvBGPJpnQ9/0Dsf/qB3PvxB73z4g9758Aet8znzB73z4Q9658Mf9M6HP+idz5BP63z4g9758Ae98+EPts3nxfuFM3/QOx/+oHU+F/6gdz78Qev94MIf9M6HP+idz5BP63z4g9758Ae98+EPeufDH/TOhz9onc+VP+idD3/QOx/+oHc+/EHvfIZ8WufDH2ybz4v3C1f+oHc+/EHvfPiD3vnwB633gxt/0Dsf/qB3PvxB73z4g975DPm0zoc/6J0Pf9A7H/6gdz78Qe98+IPW+dz5g9758Ae98+EPeufDH2ybz4v3C/chn9b58Ae98+EPeufDH/TeD/iD3vnwB53zGQf+oHc+/EHvfPiD3vnwB73zGfJpnQ9/0Dsf/qB3PvxB73z4g9758Aet8znyB73z4Q+2zef5+4Vx5A9658Mf9M5nyKd1PvxB7/2AP+idD3/QOx/+oHc+/EHrfBb+oHc+/EHvfPiD3vnwB73zGfJpnQ9/0Dsf/qB3PvxB73z4g9758Afb5vPi/cKJP+idD3/QOx/+oHc+/EHr/eA05NM6H/6gdz78Qe98+IPe+fAHvfPhD1rnM/iD3vnwB73z4Q9658Mf9M5nyKd1PvxB73z4g9758Afb5vPi/cLgD3rnwx+0zufMH7R+/pz5g9758Ae98+EPeucz5NM6H/6gdz78Qe/9mj/onQ9/0Dsf/qD18+fCH/TOhz/onQ9/0Dsf/qB3PkM+rfPhD1rv1xf+oHc+/EHvfPiD3vnwB633gyt/0Dsf/qB3PvxB73z4g975DPm0zoc/6J0Pf9A7H/6gdz78Qe98+IPW+dz4g23zuS23j3xup8Ov+fAH8XyO4/T5bYy/p/I0octpOX5+5TG+JlR9z5fb5/d8/fmll3N18el4/7j4tJy/XvxH9tzEfrPnPfab/ZD9brPna+bN/kdYHxePLzg+s+eC9ps9zzRx9tfPWMZ9eX7xcr99fuXD4fDi4nE+f4Q4rrfnF58PH9eeT8dfiyaRZgA3HUCm0AD+Owbw/vGVl/NyeGcA71SoAdx0ALleA/j7A3j9HI/lej2/uPgwPn7A5XAZb00rO21av8+08umm9a+e1uuH2l2Oh+WtaR2m1bR+m2n1zsK0/uPiwzI+p/X04isvp9vntI7D6evFf0yVtyGm6venKick717JGMBNB9ArGQO46QB6JWMA/x0DmDLi54NXMgZw0wH0SsYA/v4AXj6Harl8narzP6fKqxNTlZ8qrzhMVX6qhqkyVfGp8srAVP3+VP3OC67j7TPx4/14+nUEvV8wghuPoDcMRvCvHcHcr1CdD15HmNbvM63eXZjWbzOtRy86TOtfPa2pX/g7H70VMa3fZ1q9bTGt/7j4+PlZeKfj6c3ufvS2xVTlp2qYKlP1u1OVLCJezBjATQfQaxkDuOkAeiljAP8dA5jrq96zGMBNB9Crk3kH8Hw+fVx8vrz466Df++vz53/Pe1684jBVvz9Vsb9mOy/eWhjATQfQiwgDuOkAemdhAP8dAxj7c8plGEADuOUAer1hAH9/AF/8NdPinYWpyk+VFxGmKj9V3i6YqvxUeWVgqn5/qpJ/THnyfsEIbjyC3jAYwb92BIO/6HTyOsK0fp9p9e7CtH6faR2m1bT+xdMa+4W/k7cipvX7TKu3Lab1Hxdv87H455MXMwZw0wH0DscA/jsGMPZrNCevewzglgM4vOwxgL8/gBvZoOG9kGn9PtPqvZBp/aunNWaDhvdCpvX7TOswrab17xcnPzVueH9jqvJT5T2LqfrtqUoWEe9ZDOCmA+g9iwHcdAC9ZzGA/44BjPXVs/csBnDTAfTqJD+At0/kx9ty/JcB/AO6NwAbQCeyN4A+QF8fOl3510I/jgI6m7cBdAZrA+iszQbQmYr1oV+08/W3l4tGugF0jXQD6BrpBtAH6OtD10g3gK6RbgBdI90Auka6AXSNdH3oV410A+gaaR76k5f0f0DXSDeArpFuAH2Avj50jXQD6Brpn4N+HR/f9u14eA79cvj4VbDL8uW3147LP5Hro6sj10ZXR66Lro38pomujlwPXR25Fro6ch10deQD8rWR65+rI9c+V0eufa6OXPtcHbn2uTbyu/a5OnLtc3Xk2ufqyLXP1ZEPyNdGrn2ujlz7XB259rk6cu1zdeTa58rILwftc3Xk2ufqyLXP1ZFrn6sjH5CvjVz7XB259rk6cu3zzyG/3T8+JvP+6jfMl8vnEZ9faJyqj70cnzDOx+uLSw+Xj0jG8Xj5evEfSSq1sySpK0+S5FEFnyVJzX6WJAmDWZLkIWZJckhykiRZk1mSJGNmSZLjmSVJjmeWJDmeSZJcOJ5ZkuR4ZkmS45klSY5nliSHJCdJkuOZJUmOZ5YkOZ5ZkuR4ZkmS45kkyRPHM0uSHM8sSXI8syTJ8cyS5JDkJElyPLMkyfHMkiTHM0uSHM8sSXI8kyQ5OJ5ZkuR4ZkmS45klSY5nliSHJCdJkuOZJUmOZ5YkOZ5ZkuR4ZkmS45kkyTPHM0uSHM8sSXI8syTJ8cyS5JDkJElyPLMkyfHMkiTHM0uSHM8sSXI8kyR54XhmSZLjmSVJjmeWJDmeWZIckpwkSY5nliQ5nlmS5HhmSZLjmSVJjmeSJK8czyxJcjyzJMnxfJckl9vHlx2nv6fw7OLlePz4dpfjGL/GTgjtMvYh9j3GTjXtMnZeapexk1i7jJ3x2mXs9NgeY79xabuMnXjbZews3S5jZ+l2GfsQ+x5jZ+l2GTtLt8vYWbpdxs7S7TJ2lm6Psd9Zul3GztLtMnaWbpexs3S7jH2IfY+xs3S7jJ2l22XsLN0uY2fpdhk7S7fD2K8Hlm6XsbN0u4ydpdtl7CzdLmMfYt9j7CzdN4n9vNw+IJ9Py/nXJIm3WZLk0mZJkh6bJUnGa5IkjyTWLEnyUrMkSTXNkiR7NEuSQ5KTJMnxzJIkxzNLkhzPLElyPLMkyfFMkuTC8cySJMczS5IczyxJcjyzJDkkOUmSHM8sSXI8syTJ8cySJMczS5IczyRJnjieWZLkeGZJkuOZJUmOZ5YkhyQnSZLjmSVJjmeWJDmeWZLkeGZJkuOZJMnB8cySJMczS5IczyxJcjyzJDkkOUmSHM8sSXI8syTJ8cySJMczS5IczyRJnjmeWZLkeGZJkuOZJUmOZ5YkhyQnSZLjmSVJjmeWJDmeWZLkeGZJkuOZJMkLxzNLkhzPLElyPLMkyfHMkuSQ5CRJcjyzJMnxzJIkxzNLkhzPLElyPN8lyfP189rz/f5LkleOZ5YkOZ5ZkuR4ZkmS45klySHJSZLkeGZJkuOZJUmOZ5YkOZ5ZkuR4JknyxvHMkiTHM0uSHM8sSXI8syQ5JDlJkhzPLElyPLMkyfHMkiTHM0uSHM8kSd45nlmS5HhmSZLjmSVJjmeWJIckJ0mS45klSY5nliQ5nlmS5HhmSZLjmSPJ24HjmSVJjmeWJDmeWZLkeGZJckhykiQ5nlmS5HhmSZLjmSVJjmeWJDmeSZI8cjyzJMnxzJIkxzNLkhzPLEkOSU6SJMczS5IczyxJcjyzJMnxzJIkxzNJkgvHM0uSHM8sSXI8syTJ8cyS5JDkJElyPLMkyfHMkiTHM0uSHM8sSXI8kyR54nhmSZLjmSVJjmeWJDmeb5LkZRkf3+7ldDj9muSQ5CRJcjyzJMnxzJIkxzNLkhzPLElyPJMkOTieWZLkeGZJkuOZJUmOZ5YkhyQnSZLjmSVJjmeWJDmeWZLkeGZJkuOZJMkzxzNLkhzPLElyPLMkyfHMkuSQ5CRJcjyzJMnxzJIkxzNLkhzPLElyPJMkeeF4ZkmS45klSY5nliQ5nlmSHJKcJEmOZ5YkOZ5ZkuR4ZkmS45klSY5nkiSvHM8sSXI8syTJ8cySJMczS5JDkt8kyR9XfCR5HuPXJDmeWZLkeGZJkuOZJUmOZ5YkOZ5JkrxxPLMkyfHMkiTHM0uSHM8sSQ5JTpIkxzNLkhzPLElyPLMkyfHMkiTHM0mSd45nliQ5nlmS5HhmSZLjmSXJIclJkuR4ZkmS45klSY5nliQ5nlmS5HjmSPJ+4HhmSZLjmSVJjmeWJDmeWZIckpwkSY5nliQ5nlmS5HhmSZLjmSVJjmeSJI8czyxJcjyzJMnxzJIkxzNLkkOSkyTJ8cySJMczS5IczyxJcjyzJMnxTJLkwvHMkiTHM0uSHM8sSXI8syQ5JDlJkhzPLElyPLMkyfHMkiTHM0uSHM8kSZ44nu+S5O368WX//mvKvybJ8cySJMczS5Icz3dJ8sfbjs8kz4fnF99Op48vfDudLy8uHh/p3b4E8jkhw4SYkKcTwkmZkOcTwnWZkOcTwqGZkOcTws2ZkOcTwvmZkKcTMrhEE/J8QjhKE/J8QrhPE/J8QjhVE/J8QoYJMSFPJ4RTNSHPJ4RTNSHPJ4RTNSHPJ4RTNSHPJ4RTNSFPJ+TMqZqQ5xPCqZqQ5xPCqZqQ5xPCqZqQ5xMyTIgJeTohnKoJeT4hnKoJeT4hnKoJeT4hnKoJeT4hnKoJeTohF07VhDyfEE7VhDyfEE7VhDyfEE7VhDyfkGFCTMjTCeFUTcjzCeFUTcjzCeFUTcjzCeFUTcjzCeFUTcjTCblyqibk+YRwqibk+YRwqibk+YRwqibk+YQME2JCnk4Ip2pCnk8Ip2pCnk8Ip2pCnk8Ip2pCnk8Ip2pCnk7IjVM1Ic8nhFM1Ic8nhFM1Ic8nhFM1Ic8nZJgQE/J0QjhVE/J8QjhVE/J8QjhVE/J8QjhVE/J8QjhVE/J0Qu6cqgl5PiGcqgl5PiGcqgl5PiGcqgl5PiHDhJiQpxPCqZqQ5xPCqZqQ5xPCqZqQ5xPCqZqQ5xPCqZqQJxNyPRw4VRPyfEI4VRPyfEI4VRPyfEI4VRPyfEKGCTEhTyeEUzUhzyeEUzUhzyeEUzUhzyeEUzUhzyeEUzUhTyfkyKmakOcTwqmakOcTwqmakOcTwqmakOcTMkyICXk6IZyqCXk+IZyqCXk+IZyqCXk+IZyqCXk+IZyqCXk6IQunakKeTwinakKeTwinakKeTwinakKeT8gwISbk6YRwqibk+YRwqibk+YRwqibk+YRwqibk+YRwqibk6YScOFUT8nxCOFUT8nxCOFUT8nxCOFUT8nxChgkxIU8nhFM1Ic8nhFM1Ic8nhFM1Ic8nhFM1Ic8nhFM1IU8nZHCqJuT5hHCqJuT5hHCqc07I8fQ5IZfxa+xE6ZSxj/Pnf+w//o3nFy/36+3jG77ff87IcikuPh8+B+r841Xd14v/GKhhoAxUcqBoWAMVHSjW1kBFB4rkNVDRgeKEDVR0oChkA5UcqDPjbKCiA0VQG6joQPHZBio6UEy5gYoO1DBQBio5UEy5gYoOFFNuoKIDxZQbqOhAMeUGKjpQTLmBSg7UhSk3UNGBYsoNVHSgmHIDFR0optxARQdqGCgDlRwoptxARQeKKTdQ0YFiyg1UdKCYcgMVHSim3EAlB+rKlBuo6EAx5QYqOlBMuYGKDhRTbqCiAzUMlIFKDhRTbqCiA8WUG6joQDHlBio6UEy5gYoOFFNuoJIDdWPKDVR0oJhyAxUdKKbcQEUHiik3UNGBGgbKQCUHiik3UNGBYsoNVHSgmHIDFR0optxARQeKKTdQyYG6M+UGKjpQTLmBig4UU26gogPFlBuo6EANA2WgkgPFlBuo6EAx5QYqOlBMuYGKDhRTbqCiA7VjU347fH7XPwL4l6v/zuZ4mEr6LufP73q5jhdslvPt/vGdXA7HV1efbh9fexmHn9/Jcv4nyKlk518Jcpw/70Xjyw+5nMv/tD+uPf/6H/bxMJUP/EuZ3z9+xuW8HN5iPpUy+yuZXz45LpevID9uGAPIPwfy+klkuV7Pz4f3ePv8IY/3Y3GbnsqnfBvqU0mHLtSXw/hYBZfDZbx1V5+qxM8Y0FSluE9A188v/WObfCugqUrmhAEd52q6h58B3V8hHz8r1xjXy6urT4cPnTJOx/v/eu5efnyvH9CXUVCfqxZ/F+pzFePvQn2uavxdqA/UN6A+V4/+LtTn6tHfhfpc5fi7UJ+r8X4X6nPV2G9CfdFNt6Cum25BXTfdgrpuugX1gfoG1HXTLajrpltQ1023oK6bbkFdN92A+kk33YK6broFdd10C+q66RbUB+obUNdNt6Cum25BXTfdgrpuugV13XQD6kM33YK6broFdd10C+q66RbUB+obUNdNt6Cum25BXTfdgrpuugV13XQD6mfddAvquukW1HXTLajrpltQH6hvQF033YK6broFdd10C+q66RbUddM/Sf1y/vgssXG5XH8BeVE3QyA1yBBIpTAEUs/7kyCvh4/ve1yPBcgBZAakNhYCqWCFQOpMIZBqUOiprdlkQF41mxBIzSYEUrPJPGyumk0I5AAyA1KzCYHUbEIgNZsQSM0mBFKzyYC8aTYhkJpNCKRmEwKp2YRADiAzIDWbEEjNJqPRbppNCKRmEwKp2WRA3jWbzMPmrtmEQGo2IZCaTQjkADIDUrMJgdRsQiA1mxBIzSYEUrOJgFwOmk0IpGYTAqnZhEBqNiGQA8iERlsOmk0IpGYTAqnZhEBqNqGHjWaTAXnUbEIgNZsQSM0mBFKzCYEcQGZAajYhkJpNCKRmEwKp2YRAajYZkItmEwKp2YRAajYZjbZoNiGQA8gMSM0mBFKzCT1sNJsQSM0mBFKzyYA8aTYhkJpNCKRmEwKp2YRADiAzIDWbEEjNJgRSswmB1GxCIDWbDMih2WQ02tBsQiA1mxBIzSYEcgCZedhoNiGQmk0IpGYTAqnZhEBqNhmQZ80mBFKzCYHUbEIgNZsQyAFkBqRmEwKp2YRAajYhkJpNRqOdNZsMyItmEwKp2YRAajaZh81FswmBHEBmQGo2IZCaTQikZhMCqdmEQGo2GZBXzSYEUrMJgdRsQiA1mxDIAWQGpGYTAqnZZDTaVbMJgdRsQiA1mwzIm2aTedjcNJsQSM0mBFKzCYEcQGZAajYhkJpNCKRmEwKp2YRAajYZkHfNJgRSswmB1GxCIDWbEMgBZESj3TWbEEjNJgRSswmB1GxCDxvNJgLydNBsQiA1mxBIzSYEUrMJgRxAZkBqNiGQmk0IpGYTAqnZhEBqNhmQR80mBFKzCYHUbCIa7XTUbEIgB5AZkJpNCKRmE3rYaDYhkJpNCKRmkwG5aDYhkJpNCKRmEwKp2YRADiAzIDWbEEjNJgRSswmB1GxCIDWbDMiTZpPRaCfNJgRSswmB1GxCIAeQmYeNZhMCqdmEQGo2IZCaTQikZpMBOTSbEEjNJgRSswmB1GxCIAeQGZCaTQikZhMCqdmEQGo2GY02NJsMyLNmEwKp2YRAajaZh81ZswmBHEBmQGo2IZCaTQikZhMCqdmEQGo2GZAXzSYEUrMJgdRsQiA1mxDIAWQGpGYTAqnZZDTaRbMJgdRsQiA1mwzIq2aTedhcNZsQSM0mBFKzCYEcQGZAajYhkJpNCKRmEwKp2YRAajYZkDfNJgRSswmB1GxCIDWbEMgBZESj3TSbEEjNJgRSswmB1GxCDxvNJgPyrtmEQGo2IZCaTQikZhMCOYDMgNRsQiA1mxBIzSYEUrMJgdRsIiDHQbMJgdRsQiA1m4hGGwfNJgRyAJkBqdmEQGo2oYeNZhMCqdmEQGo2GZBHzSYEUrMJgdRsQiA1mxDIAWQGpGYTAqnZhEBqNiGQmk0IpGaTAbloNhmNtmg2IZCaTQikZhMCOYDMPGw0mxBIzSYEUrMJgdRsQiA1mwzIk2YTAqnZhEBqNiGQmk0I5AAyA1KzCYHUbEIgNZsQSM0mo9FOmk0G5NBsQiA1mxBIzSbzsBmaTQjkADIDUrMJgdRsQiA1mxBIzSYEUrPJgDxrNiGQmk0IpGYTAqnZhEAOIDMgNZsQSM0mo9HOmk0IpGYTAqnZZEBeNJvMw+ai2YRAajYhkJpNCOQAMgNSswmB1GxCIDWbEEjNJgRSs8mAvGo2IZCaTQikZhMCqdmEQA4gIxrtqtmEQGo2IZCaTQikZhN62Gg2GZA3zSYEUrMJgdRsQiA1mxDIAWQGpGYTAqnZhEBqNiGQmk0IpGaTAXnXbEIgNZsQSM0mo9Humk0I5AAyA1KzCYHUbEIPG80mBFKzCYHUbCIgzwfNJgRSswmB1GxCIDWbEMgBZAakZhMCqdmEQGo2IZCaTQikZpMBedRsIhrtfNRsQiA1mxBIzSYEcgCZedhoNiGQmk0IpGYTAqnZhEBqNhmQi2YTAqnZhEBqNiGQmk0I5AAyA1KzCYHUbEIgNZsQSM0mo9EWzSYD8qTZhEBqNiGQmk3mYXPSbEIgB5AZkJpNCKRmEwKp2YRAajYhkJpNBuTQbEIgNZsQSM0mBFKzCYEcQGZAajYhkJpNRqMNzSYEUrMJgdRsMiDPmk3mYXPWbEIgNZsQSM0mBHIAmQGp2YRAajYhkJpNCKRmEwKp2WRAXjSbEEjNJgRSswmB1GxCIAeQEY120WxCIDWbEEjNJgRSswk9bDSbDMirZhMCqdmEQGo2IZCaTQjkADIDUrMJgdRsQiA1mxBIzSYEUrPJgLxpNiGQmk0IpGaT0Wg3zSYEcgCZAanZhEBqNqGHjWYTAqnZhEBqNhmQd80mBFKzCYHUbEIgNZsQyAFkBqRmEwKp2YRAajYhkJpNCKRmEwF5OWg2EY12OWg2IZCaTQikZhMCOYDMPGw0mxBIzSYEUrMJgdRsQiA1mwzIo2YTAqnZhEBqNiGQmk0I5AAyA1KzCYHUbEIgNZsQSM0mo9GOmk0G5KLZhEBqNiGQmk3mYbNoNiGQA8gMSM0mBFKzCYHUbEIgNZsQSM0mA/Kk2YRAajYhkJpNCKRmEwI5gMyA1GxCIDWbjEY7aTYhkJpNCKRmkwE5NJvMw2ZoNiGQmk0IpGYTAjmAzIDUbEIgNZsQSM0mBFKzCYHUbDIgz5pNCKRmEwKp2YRAajYhkAPIiEY7azYhkJpNCKRmEwKp2YQeNppNBuRFswmB1GxCIDWbEEjNJgRyAJkBqdmEQGo2IZCaTQikZhMCqdlkQF41mxBIzSYEUrPJaLSrZhMCOYDMgNRsQvdIzSYEUrMJgdRsQiA1mwzIm2YTAqnZZNafm2YTAqnZhEAOIDP3SM0mBFKzCYHUbEIgNZsQSM0mA/Ku2WTWn7tmEwKp2YRAajYhkAPIzMNGswmB1GxCIDWbEEjNJgRSs4mAvB40mxBIzSYEUrMJgdRsQiAHkBmQms2fBHlbbh9X306HX0HuuNmcl88ZO4/Tq6tPh9PH1afj/SvIXy/+8ZU/Lj4v4/gr9R3XoA2p77gzbUh9xwVrO+rHHbexDanvuLptSH3HPW9D6jsuhRtSH6hvQH3HdXND6rrpFtR10y2o66ZbUNdNN6C+6KZbUNdNt6Cum25BXTfdgvpAfQPquukW1HXTLajrpltQ1023oK6bbkD9pJtuQV033YK6broFdd10C+oD9Q2o66ZbUNdNt6Cum25BXTfdgrpuugH1oZtuQV033YK6broFdd10C+oD9Q2o66ZbUNdNt6Cum25BXTfdgrpuugH1s266BXXddAvquukW1HXTLagP1Degrpv+SerPP0r4elY3QyA1yBBIpTAEUs/7kyBffJbeRXULgdTGQiAVrBBInSkEcgAZeWpfNJsQSM0mBFKzCYHUbEIPG80mA/Kq2YRAajYhkJpNCKRmEwI5gMyA1GxCIDWbEEjNJgRSswmB1GwyIG+aTQikZhMCqdlkNNpNswmBHEBmQGo2IZCaTehho9mEQGo2IZCaTQbkXbMJgdRsQiA1mxBIzSYEcgCZAanZhEBqNiGQmk0IpGYTAqnZREDeDppNRKPdDppNCKRmEwKp2YRADiAzDxvNJgRSswmB1GxCIDWbEEjNJgPyqNmEQGo2IZCaTQikZhMCOYDMgNRsQiA1mxBIzSYEUrPJaLSjZpMBuWg2IZCaTQikZpN52CyaTQjkADIDUrMJgdRsQiA1mxBIzSYEUrPJgDxpNiGQmk0IpGYTAqnZhEAOIDMgNZsQSM0mo9FOmk0IpGYTAqnZZEAOzSbzsBmaTQikZhMCqdmEQA4gMyA1mxBIzSYEUrMJgdRsQiA1mwzIs2YTAqnZhEBqNiGQmk0I5AAyotHOmk0IpGYTAqnZhEBqNqGHjWaTAXnRbEIgNZsQSM0mBFKzCYEcQGZAajYhkJpNCKRmEwKp2YRAajYZkFfNJgRSswmB1GwyGu2q2YRADiAzIDWbEEjNJvSw0WxCIDWbEEjNJgPyptmEQGo2IZCaTQikZhMCOYDMgNRsQiA1mxBIzSYEUrMJgdRsMiDvmk1Go901mxBIzSYEUrMJgRxAZh42mk0IpGYTAqnZhEBqNiGQmk0E5P2g2YRAajYhkJpNCKRmEwI5gMyA1GxCIDWbEEjNJgRSs4lotPtBs8mAPGo2IZCaTQikZpN52Bw1mxDIAWQGpGYTAqnZhEBqNiGQmk0IpGaTAbloNiGQmk0IpGYTAqnZhEAOIDMgNZsQSM0mo9EWzSYEUrMJgdRsMiBPmk3mYXPSbEIgNZsQSM0mBHIAmQGp2YRAajYhkJpNCKRmEwKp2WRADs0mBFKzCYHUbEIgNZsQyAFkRKMNzSYEUrMJgdRsQiA1m9DDRrPJgDxrNiGQmk0IpGYTAqnZhEAOIDMgNZsQSM0mBFKzCYHUbEIgNZsMyItmEwKp2YRAajYZjXbRbEIgB5AZkJpNCKRmE3rYaDYhkJpNCKRmkwF51WxCIDWbEEjNJgRSswmBHEBmQGo2IZCaTQikZhMCqdmEQGo2GZA3zSaj0W6aTQikZhMCqdmEQA4gMw8bzSYEUrMJgdRsQiA1mxBIzSYD8q7ZhEBqNiGQmk0IpGYTAjmAzIDUbEIgNZsQSM0mBFKzyWi0u2aTAHk7HDSbEEjNJgRSs0k8bH6A1GxCIAeQGZCaTQikZhMCqdmEQGo2IZCaTQbkUbMJgdRsQiA1mxBIzSYEcgCZAanZhEBqNhmNdtRsQiA1mxBIzSYDctFsMg+bRbMJgdRsQiA1mxDIAWQGpGYTAqnZhEBqNiGQmk0IpGaTAXnSbEIgNZsQSM0mBFKzCYEcQEY02kmzCYHUbEIgNZsQSM0m9LDRbDIgh2YTAqnZhEBqNiGQmk0I5AAyA1KzCYHUbEIgNZsQSM0mBFKzyYA8azYhkJpNCKRmk9FoZ80mBHIAmQGp2YRAajahh41mEwKp2YRAajYZkBfNJgRSswmB1GxCIDWbEMgBZAakZhMCqdmEQGo2IZCaTQikZpMBedVsMhrtqtmEQGo2IZCaTQjkADLzsNFsQiA1mxBIzSYEUrMJgdRsMiBvmk0IpGYTAqnZhEBqNiGQA8gMSM0mBFKzCYHUbEIgNZuMRrtpNhmQd80mBFKzCYHUbDIPm7tmEwI5gMyA1GxCIDWbEEjNJgRSswmB1GwiII8HzSYEUrMJgdRsQiA1mxDIAWQGpGYTAqnZRDTa8aDZhEBqNiGQmk0G5FGzyTxsjppNCKRmEwKp2YRADiAzIDWbEEjNJgRSswmB1GxCIDWbDMhFswmB1GxCIDWbEEjNJgRyABnRaItmEwKp2YRAajYhkJpN6GGj2WRAnjSbEEjNJgRSswmB1GxCIAeQGZCaTQikZhMCqdmEQGo2IZCaTQbk0GxCIDWbEEjNJqPRhmYTAjmAzIDUbEIgNZvQw0azCYHUbEIgNZsMyLNmEwKp2YRAajYhkJpNCOQAMgNSswmB1GxCIDWbEEjNJgRSs8mAvGg2GY120WxCIDWbEEjNJgRyAJl52Gg2IZCaTQikZhMCqdmEQGo2GZBXzSYEUrMJgdRsQiA1mxDIAWQGpGYTAqnZhEBqNiGQmk1Go101mwzIm2YTAqnZhEBqNpmHzU2zCYEcQGZAajYhkJpNCKRmEwKp2YRAajYZkHfNJgRSswmB1GxCIDWbEMgBZAakZhMCqdlkNNpdswmB1GxCIDWbCMjloNlEHjbLQbMJgdRsQiA1mxDIAWQGpGYTAqnZhEBqNiGQmk0IpGaTAXnUbEIgNZsQSM0mBFKzCYEcQEY02lGzCYHUbEIgNZsQSM0m9LDRbDIgF80mBFKzCYHUbEIgNZsQyAFkBqRmEwKp2YRAajYhkJpNCKRmkwF50mxCIDWbEEjNJqPRTppNCOQAMgNSswmB1GxCDxvNJgRSswmB1GwyIIdmEwKp2YRAajYhkJpNCOQAMgNSswmB1GxCIDWbEEjNJgRSs8mAPGs2GY121mxCIDWbEEjNJgRyAJl52Gg2IZCaTQikZhMCqdmEQGo2GZAXzSYEUrMJgdRsQiA1mxDIAWQGpGYTAqnZhEBqNiGQmk1Go100mwzIq2YTAqnZZO6RV80mBFKzCYEcQGZAajYhkJpNCKRmE1p/NJsQSM0mA/Km2WTukTfNJgRSswmB1GxCIAeQGZCaTQikZhNafzSbEEjNJgRSs8mAvGs2mYfNXbMJgdRsQiA1mxDIAWQGpGYTAqnZhEBqNiGQmk0IpGYTAXk6aDYhkJrNnwT5w0t8XP0D268g99xsbp8gL8fx6urT4fRx9el4/wry14t/RPRx8XkZx1+p77kGbUd9oL4B9T0XrO2o77mNbUd9z9VtO+p77nnbUd9zKdyM+nHPDXI76nuum9tR1023oK6bbkF9oL4Bdd10C+q66RbUddMtqOumW1DXTTegvuimW1DXTbegrptuQV033YL6QH0D6rrpFtR10y2o66ZbUNdNt6Cum25A/aSbbkFdN92Cum66BXXddAvqA/UNqOumW1DXTbegrptuQV033YK6broB9aGbbkFdN92Cum66BXXddAvqA/UNqOumW1DXTbegrptuQV033YK6broB9bNuugV13fRPUn/+UcKns7oZAqlBhkAOIDMg9bw/CfLFZ+mdVbcQSG0sBFLBCoHUmTIgL2pQ5ql90WxCIDWbEEjNJgRyAJl52Gg2IZCaTQikZhMCqdmEQGo2GZBXzSYEUrMJgdRsQiA1mxDIAWQGpGYTAqnZhEBqNiGQmk1Go101mwzIm2YTAqnZhEBqNpmHzU2zCYEcQGZAajYhkJpNCKRmEwKp2YRAajYZkHfNJgRSswmB1GxCIDWbEMgBZAakZhMCqdlkNNpdswmB1GxCIDWbCMhx0GwiD5tx0GxCIDWbEEjNJgRyAJkBqdmEQGo2IZCaTQikZhMCqdlkQB41mxBIzSYEUrMJgdRsQiAHkBGNdtRsQiA1mxBIzSYEUrMJPWw0mwzIRbMJgdRsQiA1mxBIzSYEcgCZAanZhEBqNiGQmk0IpGYTAqnZZECeNJsQSM0mBFKzyWi0k2YTAjmAzIDUbEIgNZvQw0azCYHUbEIgNZsMyKHZhEBqNiGQmk0IpGYTAjmAzIDUbEIgNZsQSM0mBFKzCYHUbDIgz5pNRqOdNZsQSM0mBFKzCYEcQGYeNppNCKRmEwKp2YRAajYhkJpNBuRFswmB1GxCIDWbEEjNJgRyAJkBqdmEQGo2IZCaTQikZpPRaBfNJgPyqtmEQGo2IZCaTeZhc9VsQiAHkBmQmk0IpGYTAqnZhEBqNiGQmk0G5E2zCYHUbEIgNZsQSM0mBHIAmQGp2YRAajYZjXbTbEIgNZsQSM0mA/Ku2WQeNnfNJgRSswmB1GxCIAeQGZCaTQikZhMCqdmEQGo2IZCaTQTk+aDZhEBqNiGQmk0IpGYTAjmATGi080GzCYHUbEIgNZsQSM0m9LDRbDIgj5pNCKRmEwKp2YRAajYhkAPIDEjNJgRSswmB1GxCIDWbEEjNJgNy0WxCIDWbEEjNJqPRFs0mBHIAmQGp2YRAajahh41mEwKp2YRAajYZkCfNJgRSswmB1GxCIDWbEMgBZAakZhMCqdmEQGo2IZCaTQikZpMBOTSbjEYbmk0IpGYTAqnZhEAOIDMPG80mBFKzCYHUbEIgNZsQSM0mA/Ks2YRAajYhkJpNCKRmEwI5gMyA1GxCIDWbEEjNJgRSs8lotLNmkwF50WxCIDWbEEjNJvOwuWg2IZADyAxIzSYEUrMJgdRsQiA1mxBIzSYD8qrZhEBqNiGQmk0IpGYTAjmAzIDUbEIgNZuMRrtqNiGQmk0IpGaTAXnTbDIPm5tmEwKp2YRAajYhkAPIDEjNJgRSswmB1GxCIDWbEEjNJgPyrtmEQGo2IZCaTQikZhMCOYCMaLS7ZhMCqdmEQGo2IZCaTehho9lEQF4Omk0IpGYTAqnZhEBqNiGQA8gMSM0mBFKzCYHUbEIgNZsQSM0mA/Ko2YRAajYhkJpNRKNdjppNCOQAMgNSswmB1GxCDxvNJgRSswmB1GwyIBfNJgRSswmB1GxCIDWbEMgBZAakZhMCqdmEQGo2IZCaTQikZpMBedJsMhrtpNmEQGo2IZCaTQjkADLzsNFsQiA1mxBIzSYEUrMJgdRsMiCHZhMCqdmEQGo2IZCaTQjkADIDUrMJgdRsQiA1mxBIzSaj0YZmkwF51mxCIDWbEEjNJvOwOWs2IZADyAxIzSYEUrMJgdRsQiA1mxBIzSYD8qLZhEBqNiGQmk0IpGYTAjmAzIDUbEIgNZuMRrtoNiGQmk0IpGaTAXnVbDIPm6tmEwKp2YRAajYhkAPIDEjNJgRSswmB1GxCIDWbEEjNJgPyptmEQGo2IZCaTQikZhMCOYCMaLSbZhMCqdmEQGo2IZCaTehho9lkQN41mxBIzSYEUrMJgdRsQiAHkBmQmk0IpGYTAqnZhEBqNiGQmk0E5PWg2YRAajYhkJpNRKNdD5pNCOQAMgNSswmB1GxCDxvNJgRSswmB1GwyII+aTQikZhMCqdmEQGo2IZADyAxIzSYEUrMJgdRsQiA1mxBIzSYDctFsMhpt0WxCIDWbEEjNJgRyAJl52Gg2IZCaTQikZhMCqdmEQGo2GZAnzSYEUrMJgdRsQiA1mxDIAWQGpGYTAqnZhEBqNiGQmk1Go500mwzIodmEQGo2IZCaTeZhMzSbEMgBZAakZhMCqdmEQGo2IZCaTQikZpMBedZsQiA1mxBIzSYEUrMJgRxAZkBqNiGQmk1Go501mxBIzSYEUrPJgLxoNpmHzUWzCYHUbEIgNZsQyAFkBqRmEwKp2YRAajYhkJpNCKRmkwF51WxCIDWbEEjNJgRSswmBHEBGNNpVswmB1GxCIDWbEEjNJvSw0WwyIG+aTQikZhMCqdmEQGo2IZADyAxIzSYEUrMJgdRsQiA1mxBIzSYD8q7ZhEBqNiGQmk1Go901mxDIAWQGpGYTAqnZhB42mk0IpGYTAqnZREDeDppNCKRmEwKp2YRAajYhkAPIDEjNJgRSswmB1GxCIDWbEEjNJgPyqNlENNrtqNmEQGo2IZCaTQjkADLzsNFsQiA1mxBIzSYEUrMJgdRsMiAXzSYEUrMJgdRsQiA1mxDIAWQGpGYTAqnZhEBqNiGQmk1Goy2aTQbkSbMJgdRsQiA1m8zD5qTZhEAOIDMgNZsQSM0mBFKzCYHUbEIgNZsMyKHZhEBqNiGQmk0IpGYTAjmAzIDUbEIgNZuMRhuaTQikZhMCqdlkQJ41m8zD5qzZhEBqNiGQmk0I5AAyA1KzCYHUbEIgNZsQSM0mBFKzyYC8aDYhkJpNCKRmEwKp2YRADiAjGu2i2YRAajYhkJpN6B6p2YRAajYZkFfNJgRSswmB1GxCIDWbzPpzHUBmQGo2IZCaTegeqdmEQGo2IZCaTQbkTbMJgdRsQiA1m8z6c9NsQiAHkBmQmk0IpGYTethoNiGQmk0IpGaTAXnXbEIgNZsQSM0mBFKzCYEcQGZAajYhkJpNCKRm8ydB3pbbx9W30+FXkDtuNpfz+AR5P7+4+nb5+NI/ZPjPa88fHHdcbH6L4/3ycfH9dvgXjsVXPh1OH1/5dLx/Hd5fLz7/+Ln+efF5Gcd/O+n3w44b0zdJaMdV7JsktOOO900S2nF5/CYJDQk1T2jHdfebJLTjHv1NEtpxQf8mCWn+3RPiFJondOQUuifEKXRPiFPonhCn0D2hIaHmCXEK3RPiFLonxCl0T4hT6J4Qp9A8oYVT6J4Qp9A9IU6he0KcQveEhoSaJ8QpdE+IU+ieEKfQPSFOoXtCnELzhE6cQveEOIXuCXEK3RPiFLonNCTUPCFOoXtCnEL3hDiF7glxCt0T4hSaJzQ4he4JcQrdE+IUuifEKXRPaEioeUKcQveEOIXuCXEK3RPiFLonxCn8BQk9P8zjfqYJNoCu+W8AXZnfALp+/hdAf/7p2/fzAH196Fr0BtAV4w2g67obQFdfN9heNNL1oV800g2ga6QbQNdI13+QXjTSDaAP0NeHrpFuAF0j3QC6RroBdI10A+ga6frQrxrpBtA10g2ga6QbQNdIN4A+QF8fuka6AXSNdH21e9VIN4CukW4AXSNdH/pNI13/QXrTSDeArpFuAF0j3QD6AH196BrpBtA10g2ga6QbQNdIN4Cuka4P/a6RbgBdI90Auka6AXSNdAPoA/TV1e5dI90Auka6AXSNdAPoGukGD1KNdG3o98NBI90Auka6AXSNdAPoGukG0Afo60PXSDeArpFuAF0j3QC6RroBdI10fehHjXQD6BrpBtA10rXV7g/oGukG0Afo60PXSDeArpFu8CDVSDeArpFuAF0jXR/6opFuAF0j3QC6RroBdI10A+gD9PWha6QbQNdIN4CukW4AXSPdALpGuj70k0a6vto9aaQbQNdIN4CukW4AfYC+/oNUI90Auka6AXSNdAPoGukG0DXS9aEPjXQD6BrpBtA10g2ga6QbQB+grw9dI90Auka6AXSNdAPoGun6andopOtDP2ukG0DXSDeArpGu/yA9a6QbQB+grw9dI90Auka6AXSNdAPoGukG0DXS9aFfNNINoGukG0DXSDeArpFuAH2Avj50jXQD6Brp+mr3opFuAF0j3QC6Rro+9KtGuv6D9KqRbgBdI90Auka6AfQB+vrQNdINoGukG0DXSDeArpFuAF0jXR/6TSPdALpGugF0jXQD6BrpBtAH6Kur3ZtGugF0jXQD6BrpBtA10g0epBrp+tDvGukG0DXSDaBrpBtA10g3gD5AXx+6RroBdI10A+ga6QbQNdINoGukq0M/HjTSDaBrpBtA10hXV7vHg0a6AfQB+vrQNdINoGukGzxINdINoGukG0DXSNeHftRIN4CukW4AXSPdALpGugH0Afr60DXSDaBrpBtA10g3gK6RbgBdI10f+qKRrq92F410A+ga6QbQNdINoA/Q13+QaqQbQNdIN4CukW4AXSPdALpGuj70k0a6AXSNdAPoGukG0DXSDaAP0NeHrpFuAF0j3QC6RroBdI10fbV70kjXhz400g2ga6QbQNdI13+QDo10A+gD9PWha6QbQNdIN4CukW4AXSPdALpGuj70s0a6AXSNdAPoGukG0DXSDaAP0NeHrpFuAF0jXV/tnjXSDaBrpBtA10jXh37RSNd/kF400g2ga6QbQNdIN4A+QF8fuka6AXSNdAPoGukG0DXSDaBrpOtDv2qkG0DXSDeArpFuAF0j3QD6AH11tXvVSDeArpFuAF0j3QC6RrrBg1QjXR/6TSPdALpGugF0jXQD6BrpBtD/H/bebldyXYvOexdf+0ISp/iTdzkIklwEBowYSHIX+N1TvVdLVb2lVeyqmosaEj8bMPaBpWryG1zkHEOiaEBvDx1HegB0HOkB0HGkB0DHkR4AHUfaHnrBkR4AHUd6AHQcaftot+BID4BuQG8PHUd6AHQc6QELKY70AOg40gOg40ibQ58GHOkB0HGkB0DHkR4AHUd6AHQDenvoONIDoONID4COIz0AOo70AOg40vbQRxxp82h3GnGkB0DHkR4AHUd6AHQDevuFFEd6AHQc6QHQcaQHQMeRHgAdR9oe+oQjPQA6jvQA6DjSA6DjSA+AbkBvDx1HegB0HOkB0HGkB0DHkbaPdiccaXvoAUd6AHQc6QHQcaTtF9KAIz0AugG9PXQc6QHQcaQHQMeRHgAdR3oAdBxpe+iGIz0AOo70AOg40gOg40gPgG5Abw8dR3oAdBxp+2jXcKQHQMeRHgAdR9oe+owjbb+QzjjSA6DjSA+AjiM9ALoBvT10HOkB0HGkB0DHkR4AHUd6AHQcaXvoEUd6AHQc6QHQcaQHQMeRHgDdgN482o040gOg40gPgI4jPQA6jvSAhRRH2h56wpEeAB1HegB0HOkB0HGkB0A3oLeHjiM9ADqO9ADoONIDoONID4COI20PPeNID4COIz0AOo60fbSbcaQHQDegt4eOIz0AOo70gIUUR3oAdBzpAdBxpO2hFxzpAdBxpAdAx5EeAB1HegB0A3p76DjSA6DjSA+AjiM9ADqO9ADoONLm0MOAI20e7YYBR3oAdBzpAdBxpAdAN6C3X0hxpAdAx5EeAB1HegB0HOkB0HGk7aGPONIDoONID4COIz0AOo70AOgG9PbQcaQHQMeRHgAdR3oAdBxp+2h3xJG2hz7hSA+AjiM9ADqOtP1COuFID4BuQG8PHUd6AHQc6QHQcaQHQMeRHgAdR9oeesCRHgAdR3oAdBzpAdBxpAdAN6C3h44jPQA6jrR9tBtwpAdAx5EeAB1H2h664UjbL6SGIz0AOo70AOg40gOgG9DbQ8eRHgAdR3oAdBzpAdBxpAdAx5G2hz7jSA+AjiM9ADqO9ADoONIDoBvQm0e7M470AOg40gOg40gPgI4jPWAhxZG2hx5xpAdAx5EeAB1HegB0HOkB0A3o7aHjSA+AjiM9ADqO9ADoONIDoONI20NPONIDoONID4COI20f7SYc6QHQDejtoeNID4COIz1gIcWRHgAdR3oAdBxpe+gZR3oAdBzpAdBxpAdAx5EeAN2A3h46jvQA6DjSA6DjSA+AjiM9ADqOtD30giNtH+0WHOkB0HGkB0DHkR4A3YDefiHFkR4AHUd6AHQc6QHQcaQHQMeRNoduA470AOg40gOg40gPgI4jPQC6Ab09dBzpAdBxpAdAx5EeAB1H2jzatQFH2h76iCM9ADqO9ADoONL2C+mIIz0AugG9PXQc6QHQcaQHQMeRHgAdR3oAdBxpe+gTjvQA6DjSA6DjSA+AjiM9ALoBvT10HOkB0HGk7aPdCUd6AHQc6QHQcaTtoQccafuFNOBID4COIz0AOo70AOgG9PbQcaQHQMeRHgAdR3oAdBzpAdBxpO2hG470AOg40gOg40gPgI4jPQC6Ab15tGs40gOg40gPgI4jPQA6jvSAhRRH2h76jCM9ADqO9ADoONIDoONID4BuQG8PHUd6AHQc6QHQcaQHQMeRHgAdR9oeesSRHgAdR3oAdBxp+2g34kgPgG5Abw8dR3rAnI4jPQA6jvQA6DjSA6DjSNtDTzjSA6DjSNuXjAlHegB0HOkB0A3o7ed0HOkB0HGkB0DHkR4AHUd6AHQcaXvoGUfavmTMONIDoONID4COIz0AugG9/UKKIz0AOo70AOg40gOg40gPgI4jbQ+94EgPgI4jPQA6jvQA6DjSA6Ab0NtDx5H+APQ85eWXcxi20HGkfwd9tLCEWKP9Qv0UewzTcnUMZo/Y9+jFRaMbyPtPT/PexWEsy8Vhmh8v/hIUt3sxQXHSFxMUl34pQeeBBOBkgt4UWC62OW8FJV24mKAkF2cTNK2sb7nT84unktdfHoahcrHN86KMpfz84nlYrp3D+G/vNA9EM4wq/1FljCpG1e9RVZZfnuZp+GhUEa4xqvxHFekho+r3xWnVfEpprlw82NLBG3T7aAiSdzIEDx6CJLQMwbeGYFpyxWkcpo+GIJkyQ/DYITiSgl94CIZhsnUIhsovTyGvQ9CG8Hjx11AhX2eouAdnIyE/o8p/VBHyM6r8R5UxqhhV3nHsSMjPqPIfVYT8jKrfysR1pEzxcagsxo4wnqHyl0OF0Jyh8pdDhXCbofJ3Q2UihGao/FbmlecgY15lHMu4TawnEmvG1U+MKzJrxtUb48rx7ZWJgJshePAQNIYgQ/DYIUh0zhB8awi6vUA1kbMzBA8eguT3Vx6C4/oBpjCGT50r+T1D5S+HCvk9Q8W9Yg9E/Ywq/1FF0M+o8h9VxPyMKne3FkjuGVX+o8oYVecaVfMclovnWNmW8NpW0so+vkBozlD5fbHf3phADs6o8h9VRNuMKv9RRQrOqFpGlduOq0BgzqhyH1VGYM6o+n1xZRuFkYIzVP5yqBBtM1T+cqiQVzNU/nKoGEOFofJ1sed+KyOxZlz9xLgis2ZcvTGuHN8xMQJuhuDBQ5A0nCF48BAkOmcIvjUE3V6gmsnZGYIHD0Hy+wsPwaM+WjwT9TOq/EcVTwUYVcuocnvZYTZGFaPKfVTx+IBRdWzAMfOkgSF48BDkSQND8OCAgycNDMGDhyBPGq48BD0/gBR5IsBQ+cuhQnLPUHGv2CPJPaPKf1SR3DOq/EeVMaoYVd5uLZLcM6r8RxVh/F+OqrxyHPM0/jGqvkiSKXuRJBr1IknC50QyEYC9QXK0HZLkQ14kyUS8SJIDeJE0SDqRxO95rd14HC+SeBwvkngcL5J4HCeSGY/jRRKP40USj+NFEo/jRdIg6UQSj+NFEo/zlySfPB38IonH8SKJx/EiicdxIlnwOF4kO/Y4ZVxaYsWGP67+YtOxa6my6diHVNkYbL5l07FXqLLpuPqvsum4nq+y6bhCr7LpuOausIlDx1V0lQ118fdsqIu/Z0Nd/D0bg823bKiLv2dDXfw9G+ri79lQF3/Phrr4WzYjdfH3bKiLv2dDXfw9G+ri79kYbL5lQ138PRvq4u/ZUBd/z4a6+Hs21MXfspmoi79nQ138PZt+6+J5CMtvz2MaKlePw1TuSMJQ7teXPSS3hi8fMhltSuvVYb+b4/ry6fjwaaTbxV8q9Vuhn0klQ6UTqNSva3lVpRDCXSVLNZVyWj9bmh/a8p5K/fqnM6nUr5M7k0r9eso/VMpTrVoOwyKShfG+Ku1+qW6+tXX56cnGx4u/qPfrVg+kHvr1wUdS79dhH0kd734Edbz4EdQN6gdQxysfQR3vewR1vOwR1PGmR1DHmx5A3fCmR1DHmx5BHW96BHW86RHUDeoHUMebHkEdb3oEdbzpEdTxpkdQx5seQH3Gmx5BHW96BHW86RHU8aZHUDeoH0Adb3oEdbzpEdTxpkdQx5seQR1vegD1iDc9gjre9AjqeNMjqONNj6BuUD+AOt70COp40yOo402PoI43PYI63vQA6glvegR1vOkR1PGmR1DHmx5B3aB+AHW86RHU8aZHUMeb/iX1OC/npNrN0W9BYjedQOIgfUBmTKETSHzeX4JMw/qd3zTugMS6OYHEjTmBNED6gMQzOYHEBjmt2jgbJ5A4GyeQOBsfkAVn47PYFJyNE0icjRNInI0TSAOkD0icjRNInI0TSJyNE0icjRNInI0LyDTgbJxA4mycQOJsnEDibJxAGiA9YrQ04GycQOJsnEDibJxA4mycFhucjQ/IEWfjBBJn4wQSZ+MEEmfjBNIA6QMSZ+MEEmfjBBJn4wQSZ+MEEmfjA3LC2TiBxNk4gcTZ+MRoE87GCaQB0gckzsYJJM7GabHB2TiBxNk4gcTZ+IAMOBsnkDgbJ5A4GyeQOBsnkAZIH5A4GyeQOBsnkDgbJ5A4GyeQOBsfkIaz8YnRDGfjBBJn4wQSZ+ME0gDps9jgbJxA4mycQOJsnEDibJxA4mx8QM44GyeQOBsnkDgbJ5A4GyeQBkgfkDgbJ5A4GyeQOBsnkDgbnxhtxtn4gIw4GyeQOBsnkDgbn8Um4mycQBogfUDibJxA4mycQOJsnEDibJxA4mx8QCacjRNInI0TSJyNE0icjRNIA6QPSJyNE0icjU+MlnA2TiBxNk4gcTY+IDPOxmexyTgbJ5A4GyeQOBsnkAZIH5A4GyeQOBsnkDgbJ5A4GyeQOBsfkAVn4wQSZ+MEEmfjBBJn4wTSAOkSoxWcjRNInI0TSJyNE0icjdNig7NxAZkHnI0TSJyNE0icjRNInI0TSAOkD0icjRNInI0TSJyNE0icjRNInI0PyBFn4wQSZ+MEEmfjEqPlEWfjBNIA6QMSZ+MEEmfjtNjgbJxA4mycQOJsfEBOOBsnkDgbJ5A4GyeQOBsnkAZIH5A4GyeQOBsnkDgbJ5A4GyeQOBsfkAFn4xOjBZyNE0icjRNInI0TSAOkz2KDs3ECibNxAomzcQKJs3ECibPxAWk4GyeQOBsnkDgbJ5A4GyeQBkgfkDgbJ5A4GyeQOBsnkDgbnxjNcDY+IGecjRNInI0TSJyNz2Iz42ycQBogfUDibJxA4mycQOJsnEDibJxA4mx8QEacjRNInI0TSJyNE0icjRNIA6QPSJyNE0icjU+MFnE2TiBxNk4gcTY+IBPOxmexSTgbJ5A4GyeQOBsnkAZIH5A4GyeQOBsnkDgbJ5A4GyeQOBsfkBln4wQSZ+MEEmfjBBJn4wTSAOkSo2WcjRNInI0TSJyNE0icjdNig7PxAVlwNk4gcTZOIHE2TiBxNk4gDZA+IHE2TiBxNk4gcTZOIHE2TiBxNi4gy4CzcQKJs3ECibNxidHKgLNxAmmA9AGJs3ECibNxWmxwNk4gcTZOIHE2PiBHnI0TSJyNE0icjRNInI0TSAOkD0icjRNInI0TSJyNE0icjRNInI0PyAln4xOjTTgbJ5A4GyeQOBsnkAZIn8UGZ+MEEmfjBBJn4wQSZ+MEEmfjAzLgbJxA4mycQOJsnEDibJxAGiB9QOJsnEDibJxA4mycQOJsfGK0gLPxAWk4GyeQOBsnkDgbn8XGcDZOIA2QPiBxNk4gcTZOIHE2TiBxNk4gcTY+IGecjRNInI0TSJyNE0icjRNIA6QPSJyNE0icjU+MNuNsnEDibJxA4mx8QEacjc9iE3E2TiBxNk4gcTZOIA2QPiBxNk4gcTZOIHE2TiBxNk4gcTY+IBPOxgkkzsYJJM7GCSTOxgmkAdIlRks4GyeQOBsnkDgbJ5A4G6fFBmfjAzLjbJxA4mycQOJsnEDibJxAGiB9QOJsnEDibJxA4mycQOJsnEDibHxAFpyNE0icjRNInI1PjFZwNk4gDZA+IHE2TiBxNk6LDc7GCSTOxgkkzsYD5Djc/g8knUjibbxIYm68SOJuvEgaJJ1I4m+8SGJwvEjicLxIYnG8SOJxnEiOeByPRO0XSTyOF0k8jhdJPI4XSYOk04qDx/EiicfxIonH8SKJx/EiicdxIjnhcbxI4nG8SOJxvEjicbxIGiSdSOJxvEjicbxI4nG8SOJxnFK1CY/jRDLgcbxI4nG8SOJxnFacgMfxImmQdCKJx/EiicfxIonH8SKJx/EiicdxIml4HC+SeBwvkngcL5J4HC+SBkknkngcL5J4HKdUzfA4XiTxOF4k8ThOJGc8jtOKM+NxvEjicbxI4nG8SBoknUjicbxI4nG8SOJxvEjicbxI4nGcSEY8jhdJPI4XSTyOF0k8jhdJg6RPqhbxOF4k8TheJPE4XiTxOF4rDh7HiWTC43iRxON4kcTjeJHE43iRNEg6kcTjeJHE43iRxON4kcTjeJHE4ziRzHgcL5J4HC+SeBynVC3jcbxIGiSdSOJxvEjicbxWHDyOF0k8jhdJPI4TyYLH8SKJx/EiicfxIonH8SJpkHQiicfxIonH8SKJx/EiicfxIonH8SF5YwlJl1Tt9n8h6UQSj+NFEo/jRdIg6bTi4HG8SOJxvEjicbxI4nG8SOJxnEiOeBwvkngcL5J4HC+SeBwvkgZJJ5J4HC+SeBwvkngcL5J4HKdUbcTjOJGc8DheJPE4XiTxOE4rzoTH8SJpkHQiicfxIonH8SKJx/EiicfxIonHcSIZ8DheJPE4XiTxOF4k8TheJA2STiTxOF4k8ThOqVrA43iRxON4kcTjOJE0PI7TimN4HC+SeBwvkngcL5IGSSeSeBwvkngcL5J4HC+SeBwvkngcJ5IzHseLJB7HiyQex4skHseLpEHSJ1Wb8TheJPE4XiTxOF4k8TheKw4ex4lkxON4kcTjeJHE43iRxON4kTRIOpHE43iRxON4kcTjeJHE43iRxOM4kUx4HC+SeBwvkngcp1Qt4XG8SBoknUjicbxI4nG8Vhw8jhdJPI4XSTyOE8mMx/EiicfxIonH8SKJx/EiaZB0IonH8SKJx/EiicfxIonH8SKJx3EiWfA4TqlaweN4kcTjeJHE43jNkwZJJ5J4HC+SeBwvkngcL5J4HC+SeByfKmga8DheJPE4XiTxOD7z5DTgcbxIGiSdSOJxvEjicbxI4nG8SOJxvKogPI4TyRGP40USj+NFEo/jtOKMeBwvkgZJJ5J4HC+SeBwvkngcL5J4HC+SeBwnkhMex4skHseLJB7HiyQe5y9J5ikvJHMYdkhavySD2UIypPLH1b/hdGxb6nAu5URsmJerbUoVODkuXcz5AeS8/lFdylq8hKbEZdiUPPyBZmdyCkNYJqcwlsfJaWdA3lq6DMjJxp2Z7FIu5CzQL2VYTgI9XMrbnAX6pWzQWaBfyjGdBfqlzNVZoBvQ20O/lL87C/R+feOB0HGkB0DHkR4AHUfaHrrhSA+AjiM9ADqO9ADoONIDoBvQ20PHkR4AHUd6AHQc6QHQcaQHQMeRtoc+40gPgI4jPQA6jvQA6DjSA6Ab0NtDx5EeAB1HegB0HOkB0HGkB0DHkbaHHnGkB0DHkR4AHUd6AHQc6QHQDejtoeNID4COIz0AOo70AOg40gOg40jbQ0840gOg40gPgI4jPQA6jvQA6Ab09tBxpAdAx5EeAB1H+lfQa587T5hMH474RheOGSvowxF391ccax/4zBg2H454MB+OBkcXjjglH46YH5/1Gj/jwxE/48MRP+PCseBnXNaZgp/x4Yif8eGIn/HhaHB04Yif8eGIn/HhiJ/x4Yif8eGIn/HgGAb8jA9H/IwPR/yMD0f8jA9Hg6NDbhYG/IwPR/yMD0f8jA9H/IzPOoOfceE44md8OOJnfDjiZ3w44md8OBocXTjiZ3w44md8OOJnfDjiZ3w44mdcOE74GR+O+BkfjvgZl9xsws/4cDQ4unDEz/hwxM/4rDP4GR+O+BkfjvgZF44BP+PDET/jwxE/48MRP+PD0eDowhE/48MRP+PDET/jwxE/48MRP+PC0fAzLrmZ4Wd8OOJnfDjiZ3w4Ghxd1hn8jA9H/IwPR/yMD0f8jA9H/IwLxxk/48MRP+PDET/jwxE/48PR4OjCET/jwxE/48MRP+PDET/jkpvN+BkXjhE/48MRP+PDET/jss5E/IwPR4OjC0f8jA9H/IwPR/yMD0f8jA9H/IwLx4Sf8eGIn/HhiJ/x4Yif8eFocHThiJ/x4YifccnNEn7GhyN+xocjfsaFY8bPuKwzGT/jwxE/48MRP+PD0eDowhE/48MRP+PDET/jwxE/48MRP+PCseBnfDjiZ3w44md8OOJnfDgaHD1ys4Kf8eGIn/HhiJ/x4Yif8Vln8DMeHG3Az/hwxM/4cMTP+HDEz/hwNDi6cMTP+HDEz/hwxM/4cMTP+HDEz7hwHPEzPhzxMz4c8TMeuZmN+BkfjgZHF474GR+O+BmfdQY/48MRP+PDET/jwnHCz/hwxM/4cMTP+HDEz/hwNDi6cMTP+HDEz/hwxM/4cMTP+HDEz7hwDPgZl9ws4Gd8OOJnfDjiZ3w4Ghxd1hn8jA9H/IwPR/yMD0f8jA9H/IwLR8PP+HDEz/hwxM/4cMTP+HA0OLpwxM/4cMTP+HDEz/hwxM+45GaGn3HhOONnfDjiZ3w44mdc1pkZP+PD0eDowhE/48MRP+PDET/jwxE/48MRP+PCMeJnfDjiZ3w44md8OOJnfDgaHF044md8OOJnXHKziJ/x4Yif8eGIn3HhmPAzLutMws/4cMTP+HDEz/hwNDi6cMTP+HDEz/hwxM/4cMTP+HDEz7hwzPgZH474GR+O+BkfjvgZH44GR4/cLONnfDjiZ3w44md8OOJnfNYZ/IwLx4Kf8eGIn/HhiJ/x4Yif8eFocHThiJ/x4Yif8eGIn/HhiJ/x4Yif8eA4D/gZH474GR+O+BmP3Gwe8DM+HA2OLhzxMz4c8TM+6wx+xocjfsaHI37GheOIn/HhiJ/x4Yif8eGIn/HhaHB04Yif8eGIn/HhiJ/x4Yif8eGIn3HhOOFnXHKzCT/jwxE/48MRP+PD0eDoss7gZ3w44md8OOJnfDjiZ3w44mdcOAb8jA9H/IwPR/yMD0f8jA9Hg6MLR/yMD0f8jA9H/IwPR/yMS24W8DMuHA0/48MRP+PDET/jss4YfsaHo8HRhSN+xocjfsaHI37GhyN+xocjfsaF44yf8eGIn/HhiJ/x4Yif8eFocHThiJ/x4YifccnNZvyMD0f8jA9H/IwLx4ifcVlnIn7GhyN+xocjfsaHo8HRhSN+xocjfsaHI37GhyN+xocjfsaFY8LP+HDEz/hwxM/4cMTP+HA0OHrkZgk/48MRP+PDET/jwxE/47PO4GdcOGb8jA9H/IwPR/yMD0f8jA9Hg6MLR/yMD0f8jA9H/IwPR/yMD0f8jAvHgp/x4Yif8eGIn3HJzQp+xoejwdGFI37GhyN+xmedwc/4cMTP+HDEz3hwjAN+xocjfsaHI37GhyN+xoejwdGFI37GhyN+xocjfsaHI37GhyN+xoXjiJ/xyM3iiJ/x4Yif8eGIn/HhaHB0WWfwMz4c8TM+HPEzPhzxMz4c8TMuHCf8jA9H/IwPR/yMD0f8jA9Hg6MLR/yMD0f8jA9H/IwPR/yMS2424WdcOAb8jA9H/IwPR/yMyzoT8DM+HA2OLhzxMz4c8TM+HPEzPhzxMz4c8TMuHA0/48MRP+PDET/jwxE/48PR4OjCET/jwxE/45KbGX7GhyN+xocjfsaF44yfcVlnZvyMD0f8jA9H/IwPR4OjC0f8jA9H/IwPR/yMD0f8jA9H/IwLx4if8eGIn/HhiJ/x4Yif8eFocPTIzSJ+xocjfsaHI37GhyN+xmedwc+4cEz4GR+O+BkfjvgZH474GR+OBkcXjvgZH474GR+O+BkfjvgZH474GReOGT/jwxE/48MRP+OSm2X8jA9Hg6MLR/yMD0f8jM86g5/x4Yif8eGIn3HhWPAzPhzxMz4c8TM+HPEzPhwNji4c8TM+HPEzPhzxMz4c8TM+HPEzHhzTgJ/xyM3SgJ/x4Yif8eGIn/HhaHB0WWfwMz4c8TM+HPEzPhzxMz4c8TMuHEf8jA9H/IwPR/yMD0f8jA9Hg6MLR/yMD0f8jA9H/IwPR/yMS2424mdcOE74GR+O+BkfjvgZl3Vmws/4cDQ4unDEz/hwxM/4cMTP+HDEz/hwxM+4cAz4GR+O+BkfjvgZH474GR+OBkcXjvgZH474GZfcLOBnfDjiZ3w44mdcOBp+xmWdMfyMD0f8jA9H/IwPR4OjC0f8jA9H/IwPR/yMD0f8jA9H/IwLxxk/48MRP+PDET/jwxE/48PR4OiRm834GR+O+BkfjvgZH474GZ91Bj/jwjHiZ3w44md8OOJnfDjiZ3w4GhxdOOJnfDjiZ3w44md8OOJnfDjiZ1w4JvyMD0f8jA9H/IxLbpbwMz4cDY4uHPEzPhzxMz7rDH7GhyN+xocjfsaFY8bP+HDEz/hwxM/4cMTP+HA0OLpwxM/4cMTP+HDEz/hwxM/4cMTPuHAs+BmX3KzgZ3w44md8OOJnfOZHg6MLR/yMD0f8jA9H/IwPR/yMD0f8jEfdkwf8jA9H/IwPR/yMx/yYB/yMD0eDowtH/IwPR/yMD0f8jA9H/IxP3YOfceE44md8OOJnfDjiZ1zWmRE/48PR4OjCET/jwxE/48MRP+PDET/jwxE/48Jxws/4cMTP+HDEz/hwxM/8Fcc85YVjDsMOR+uW42hhXK/+Re8pyRim5eoYzB5J7vGIC/YbmvtPT/PexWEsy8Xh1xX3i39r1K9XOo9G/fqw82jUr8c7j0b9+kcZjW5Ml4ttzjsa9etNT6NR6Nf36miUVnpWpucXTyWvvzwMQ+Vimxcek6X8/OJ5ZTeHcWsAQr/GnoHy0kDpN7noYaCU5ZeneRo+Gyj9RjMMlJcGijFQrjtQ0qrilNJcuXiwpYPTEO2zUUVaxqjyH1Xke4yq36MqLRHWNA7TZ6OKRJJR5T+qyFBPNarCMNk6qkLll6eQ11FlQ/if2+SPdPbC6jsGOkZEzED5q4FCRMxA+auBQkR85YHil/wZETED5a8GijFQrjtQ4spjio/qL1bGiHJ7Vp/ItWf1iUZ7Vp8I88LqvxKMj3kVZizjTt5p5J0Mlb8bKjOJJ0Pl62LHVwNm4lFGlf+oIktlVPmPKoJXRtXvUeX3wslsjCpGlfuoIv0916ga1292hDF87NVIf3tWn/T3uuq7FrQExQyUvxooxMQMlL8ZKJGQ+MoDxc+fRHJfBspfDRSi3MMHyjyH5eI5Vt5yfm2XV20/TiRyvbD6jm/PR2OgMFD+ZqAQjDJQ/mqgkKFeeaD4bbOIxK0MlL8aKMStFx4otbeyIxlqx+ongtGe1Sft7Fl9IswLq++6ySKRdzJU/nKoGEOFofLPxY4P8BPxKKPKf1SRpTKq/EcVwSuj6veo8nvhJJHSMqr8RxXp76lG1WGfgcwExQyUvxooZMpXHih+j50z8TMD5a8GCuHzhQfKUS49G6OKUeU+qsipGVXuLj2TUzOq/EcVOfW5RpXr1zgyeXLP6pP7Xld9z4K2kPsyUP5qoJD7MlD+aqCQ+155oPj5k0Luy0D5q4Fi/Q6UfL86T+MfA+U3nI4TyTqcjoO1OpyO86E6nI7jk0c4o+3B6ThdqMEpQ8eOug6nYxdZh9Oxc6rD6dgt1FarMhhwvodDhfwEDhXyEzhUyE/gUCE/gUOF/D2ckQr5CRwq5CdwqJCfwKFCfgLHeNjwX7YPG37D4a3WJ3B4OfMJHN4xfAKHV/CewLlWhZxt7W4pf8D56u50rZq32t1rVbHV7l6rLq1291qVZrW71ld3r1UNVrt7rfqu2t1rVWzV7l6rBqt2t6+qKvRVVYW+qqrQV1UV+qqqgvXV3b6qqtBXVRX6qqpCX1VV6Kuqsr6qKuurqrK+qirrq6oy66u7fVVV1ldVZX1VVdZXVWV9VVWzeFU12dqBKVnl6jIvuztLeXjdpuw1eYrrx2cfmhz2NoLa2uJ5TM8vncqwyDPd2D5e/Ju3eFl3Od7ideXJeIexLE0I08MbFPvijOOyj3saH3aI38URr4L7FscQR1cccYfRtzjifqhvccTdW9/iiHvNvsURd8ZdixPx8cLiYPqFxSEhEBaHhEBYHEMcXXFICITFISEQFoeEQFgcEgJhcUgIdMVJJATC4pAQCItDQiAsDgmBsDiGOLrikBAIi0NCICwOCYGwOCQEwuKQEOiKk0kIhMUhIRAWh4RAWBwSAmFxDHF0xSEhEBaHhEBYHBICYXFICITFISHQFaeQEAiLQ0IgLA4JgbA4JATC4hji6IpDQiAsDgmBsDgkBMLikBAIi0NCoCrOOAwkBMLikBAIi0NCICwOCYGwOIY4uuKQEAiLQ0IgLA4JgbA4JATC4pAQ6IozkhAIi0NCICwOCYGwOCQEwuIY4uiKQ0IgLA4Jgas4cb6TGPZ4Y/obng91442Pb8sba96U94TbbssbA92WN564LW9sblveBu+mvDGjbXnjL9vyxl+25Y2/bMsbf9mUd8BftuWNv2zLG3/Zljf+si1vg3dT3vjLtrzxl2154y/b8sZftuWNv2zK2/CXbXnjL9vyxl+25Y2/bMvb4N2UN/6yLW/8ZVve+Mu2vPGXbXnjL5vynvGXbXnjL9vyxl+25Y2/bMvb4N2UN/6yLW/8ZVve+Mu2vPGXbXnjL5vyjvjLtrzxl2154y/b8sZftuVt8G7KG3/Zljf+si1v/GVb3vjLtrzxl015J/xlW974y7a88ZdteeMv2/I2eDfljb9syxt/2ZY3/rItb/xlW974y6a8M/6yLW/8ZVve+Mu2vPGXuoc9ZEMcXXFwrsLiYHOFxcETC4uDgRYWB7etK07BmguLg48XFgfTLywOCYGwOIY4uuKQEAiLQ0IgLA4JgbA4JATC4pAQyIozDiQEwuKQEAiLQ0IgLA4JgbA4hji64pAQCItDQiAsDgmBsDgkBMLikBDoijOSEAiLQ0IgLA4JgbA4JATC4hji6IpDQiAsDgmBsDgkBMLikBAIi0NCoCvOREIgLA4JgbA4JATC4pAQCItjiKMrDgmBsDgkBMLikBAIi0NCICwOCYGuOIGEQFgcEgJhcUgIhMUhIRAWxxBHVxwSAmFxSAiExSEhEBaHhEBYHBICXXGMhEBYHBICYXFICITFISEQFscQR1ccEgJhcUgIhMUhIXAVJ6a4khiG5xdnW6jlBxB3acgHZKUhHVCVZiYbkJWGZEBWGnIBWWlIBWSlMaRRlYZEQFYa8gBZaUgDZKUhDZCVhjRAVZpIGiArDWmArDSkAbLSkAbISmNIoyoNaYCsNKQBstKQBshKQxogKw1pgKo0iTRAVhrSAFlpSANkpSENkJXGkEZVGtIAWWlIA2SlIQ2QlYY0QFYa0gBVaTJpgKw0pAGy0pAGyEpDGiArjSGNqjSkAbLSkAbISkMaICsNaYCsNKQBqtIU0gBZaUgDZKUhDZCVhjRAVhpDGlVpSANkpSENkJWGNEBWGtIAWWlIA0SlmQbSAFlpSANkpSENkJWGNEBWGkMaVWlIA2SlIQ2QlYY0QFYa0gBZaUgDVKUZSQNkpSENkJWGNEBWGtIAWWkMaVSlIQ2QlYY0QFYa0gBZaUgDZKUhDVCVZiINkJWGNEBWGtIAWWlIA2SlMaRRlYY0QFYa0gBZaUgDZKUhDZCVhjRAVZpAGiArDWmArDSkAbLSkAbISmNIoyoNaYCsNKQBstKQBshKQxogKw1pgKo0RhogKw1pgKw0pAGy0pAGyEpjSKMqDWmArDSkAbLSkAbISkMaICsNaYCqNDNpgKw0pAGy0pAGyEpDGiArjSGNqjSkAbLSkAbISkMaICsNaYCsNKQBqtJE0gBZaUgDZKUhDZCVhjRAVhpDGlVpSANkpSENkJWGNEBWGtIAWWlIA1SlSaQBstKQBshKQxogKw1pgKw0hjSq0pAGyEpDGiArDWmArDSkAbLSkAaoSpNJA2SlIQ2QlYY0QFYa0gBZaQxpVKUhDZCVhjRAVhrSAFlpSANkpSENUJWmkAbISkMaICsNaYCsNKQBstIY0qhKQxogKw1pgKw0pAGy0pAGyEpDGiAqTRhIA2SlIQ2QlYY0QFYa0gBZaQxpVKUhDZCVhjRAVhrSAFlpSANkpSENUJVmJA2QlYY0QFYa0gBZaUgDZKUxpFGVhjRAVhrSAFlpSANkpSENkJWGNEBVmok0QFYa0gBZaUgDZKUhDfCVZr6TGGyHt8HbkfdUhmH52TIPO7zx7W15Y8bb8sZht+WNbW7LGy/clHfA4LbljWttyxsr2pY3/rItb4N3U974y7a88ZdteeMv2/LGX7bljb9sytvwl2154y/b8sZftuWNv2zL2+DdlDf+si1v/GVb3vjLtrzxl2154y+b8p7xl2154y/b8sZftuWNv2zL2+DdlDf+si1v/GVb3vjLtrzxl2154y+b8o74y7a88ZdteeMv2/LGX7blbfBuyht/2ZY3/rItb/xlW974y7a88ZdNeSf8ZVve+Mu2vPGXbXnjL9vyNng35Y2/bMsbf9mWN/6yLW/8ZVve+MumvDP+si1v/GVb3vjLtrzxl215G7yb8sZftuWNv2zLG3/Zljf+si1v/GVT3gV/6XqewFiWJoRpjhVxbvyXNoxmO+JgRoXFwbkKi4PNFRbHEEdXHAy0sDi4bWFxsObC4uDjhcXB9MuKYwMJgbA4JATC4pAQCItDQiAsjiGOrjgkBMLikBAIi0NCICwOCYGwOCQEuuKMJATC4pAQCItDQiAsDgmBsDiGOLrikBAIi0NCICwOCYGwOCQEwuKQEOiKM5EQCItDQiAsDgmBsDgkBMLiGOLoikNCICwOCYGwOCQEwuKQEAiLQ0KgK04gIRAWh4RAWBwSAmFxSAiExTHE0RWHhEBYHBICYXFICITFISEQFoeEQFccIyEQFoeEQFgcEgJhcUgIhMUxxNEVh4RAWBwSAmFxSAiExSEhEBaHhEBXnJmEQFgcEgJhcUgIhMUhIRAWxxDHU5yY4kpiGJ5fnG2hlh9A3KUhH5CVhnRAVhqyAVlpSAZkpSEXUJUmkgrISkMmICsNiYCsNOQBstIY0qhKQxogKw1pgKw0pAGy0pAGyEpDGqAqTSINkJWGNEBWGtIAWWlIA2SlMaRRlYY0QFYa0gBZaUgDZKUhDZCVhjRAVZpMGiArDWmArDSkAbLSkAbISmNIoyoNaYCsNKQBstKQBshKQxogKw1pgKo0hTRAVhrSAFlpSANkpSENkJXGkEZVGtIAWWlIA2SlIQ2QlYY0QFYa0gBRaeaBNEBWGtIAWWlIA2SlIQ2QlcaQRlUa0gBZaUgDZKUhDZCVhjRAVhrSAFVpRtIAWWlIA2SlIQ2QlYY0QFYaQxpVaUgDZKUhDZCVhjRAVhrSAFlpSANUpZlIA2SlIQ2QlYY0QFYa0gBZaQxpVKUhDZCVhjRAVhrSAFlpSANkpSENUJUmkAbISkMaICsNaYCsNKQBstIY0qhKQxogKw1pgKw0pAGy0pAGyEpDGqAqjZEGyEpDGiArDWmArDSkAbLSGNKoSkMaICsNaYCsNKQBstKQBshKQxqgKs1MGiArDWmArDSkAbLSkAbISmNIoyoNaYCsNKQBstKQBshKQxogKw1pgKo0kTRAVhrSAFlpSANkpSENkJXGkEZVGtIAWWlIA2SlIQ2QlYY0QFYa0gBVaRJpgKw0pAGy0pAGyEpDGiArjSGNqjSkAbLSkAbISkMaICsNaYCsNKQBqtJk0gBZaUgDZKUhDZCVhjRAVhpDGlVpSANkpSENkJWGNEBWGtIAWWlIA1SlKaQBstKQBshKQxogKw1pgKw0hjSq0pAGyEpDGiArDWmArDSkAbLSkAaIShMH0gBZaUgDZKUhDZCVhjRAVhpDGlVpSANkpSENkJWGNEBWGtIAWWlIA1SlGUkDZKUhDZCVhjRAVhrSAFlpDGlUpSENkJWGNEBWGtIAWWlIA2SlIQ1QlWYiDZCVhjRAVhrSAFlpSANkpTGkUZWGNEBWGtIAWWlIA2SlIQ2QlYY0QFWaQBrgK818JzHYDm8svifvqQzD8rNlHnZ449vb8saMt+Vt8G7KG9vcljdeuC1vDG5b3rjWtryxok15G/6yLW/8ZVve+Mu2vPGXbXkbvJvyxl+25Y2/bMsbf9mWN/6yLW/8ZVPeM/6yLW/8ZVve+Mu2vPGXbXkbvJvyxl+25Y2/bMsbf9mWN/6yLW/8ZVPeEX/Zljf+si1v/GVb3vjLtrwN3k154y/b8sZftuWNv2zLG3/Zljf+sinvhL9syxt/2ZY3/rItb/xlW94G76a88ZdteeMv2/LGX7bljb9syxt/2ZR3xl+25Y2/bMsbf9mWN/6yLW+Dd1Pe+Mu2vPGXbXnjL9vyxl+25Y2/bMq74C/b8sZftuWNv2zLG3/ZlrfBuylv/GVb3vjLtrzxl67nCYxlaUKY5lgRZxzD0obRbEcczKiwODhXWXHSgM0VFgdPLCwOBlpYHNy2sDiGOLri4OOFxcH0C4tDQiAsDgmBsDgkBLrijCQEwuKQEAiLQ0IgLA4JgbA4hji64pAQCItDQiAsDgmBsDgkBMLikBDoijOREAiLQ0IgLA4JgbA4JATC4hji6IpDQiAsDgmBsDgkBMLikBAIi0NCoCtOICEQFoeEQFgcEgJhcUgIhMUxxNEVh4RAWBwSAmFxSAiExSEhEBaHhEBXHCMhEBaHhEBYHBICYXFICITFMcTRFYeEQFgcEgJhcUgIhMUhIRAWh4RAV5yZhEBYHBICYXFICITFISEQFscQR1ccEgJhcUgIhMUhIRAWh4RAWBwSAl1xIgmBsDgkBK7ixBRXEsPw/OJsC7X8AOIuDfmArDSkA7LSGNKoSkMyICsNuYCsNKQCstKQCchKQyKgKk0iD5CVhjRAVhrSAFlpSANkpTGkUZWGNEBWGtIAWWlIA2SlIQ2QlYY0QFWaTBogKw1pgKw0pAGy0pAGyEpjSKMqDWmArDSkAbLSkAbISkMaICsNaYCqNIU0QFYa0gBZaUgDZKUhDZCVxpBGVRrSAFlpSANkpSENkJWGNEBWGtIAUWnyQBogKw1pgKw0pAGy0pAGyEpjSKMqDWmArDSkAbLSkAbISkMaICsNaYCqNCNpgKw0pAGy0pAGyEpDGiArjSGNqjSkAbLSkAbISkMaICsNaYCsNKQBqtJMpAGy0pAGyEpDGiArDWmArDSGNKrSkAbISkMaICsNaYCsNKQBstKQBqhKE0gDZKUhDZCVhjRAVhrSAFlpDGlUpSENkJWGNEBWGtIAWWlIA2SlIQ1QlcZIA2SlIQ2QlYY0QFYa0gBZaQxpVKUhDZCVhjRAVhrSAFlpSANkpSENUJVmJg2QlYY0QFYa0gBZaUgDZKUxpFGVhjRAVhrSAFlpSANkpSENkJWGNEBVmkgaICsNaYCsNKQBstKQBshKY0ijKg1pgKw0pAGy0pAGyEpDGiArDWmAqjSJNEBWGtIAWWlIA2SlIQ2QlcaQRlUa0gBZaUgDZKUhDZCVhjRAVhrSAFVpMmmArDSkAbLSkAbISkMaICuNIY2qNKQBstKQBshKQxogKw1pgKw0pAGq0hTSAFlpSANkpSENkJWGNEBWGkMaVWlIA2SlIQ2QlYY0QFYa0gBZaUgDRKUpA2mArDSkAbLSkAbISkMaICuNIY2qNKQBstKQBshKQxogKw1pgKw0pAGq0oykAbLSkAbISkMaICsNaYCsNIY0qtKQBshKQxogKw1pgKw0pAGy0pAGqEozkQbISkMaICsNaYCsNKQBstIY0qhKQxogKw1pgKw0pAGy0pAGyEpDGqAqTSANkJWGNEBWGtIAWWlIA2SlMaRRlYY0QFYa0gBZaUgDfKWZ7yQG2+GNxffkPZVhWH62zMMOb3x7U96GGW/LG4fdlje2uS1vvHBb3gbvprxxrW15Y0Xb8sZftuWNv2zLG3/ZlPeMv2zLG3/Zljf+si1v/GVb3gbvprzxl2154y/b8sZftuWNv2zLG3/ZlHfEX7bljb9syxt/2ZY3/rItb4N3U974y7a88ZdteeMv2/LGX7bljb9syjvhL9vyxl+25Y2/bMsbf9mWt8G7KW/8ZVve+Mu2vPGXbXnjL9vyxl825Z3xl2154y/b8sZftuWNv2zL2+DdlDf+si1v/GVb3vjLtrzxl2154y+b8i74y7a88ZdteeMv2/LGX7blbfBuyht/2ZY3/rItb/xlW974y7a88ZcNeU/DgL9syxt/2ZY3/rItb/xlW94Gb0fe4VaBLCSmOVbEGcewtGE02xEHMyosDs5VWBxsrrA4eGJhcTDQuuKMuG1hcbDmwuLg44XFwfQLi2OIoysOCYGwOCQEwuKQEAiLQ0IgLA4Jga44EwmBsDgkBMLikBAIi0NCICyOIY6uOCQEwuKQEAiLQ0IgLA4JgbA4JAS64gQSAmFxSAiExSEhEBaHhEBYHEMcXXFICITFISEQFoeEQFgcEgJhcUgIdMUxEgJhcUgIhMUhIRAWh4RAWBxDHF1xSAiExSEhEBaHhEBYHBICYXFICHTFmUkIhMUhIRAWh4RAWBwSAmFxDHF0xSEhEBaHhEBYHBICYXFICITFISHQFSeSEAiLQ0IgLA4JgbA4JATC4hji6IpDQiAsDgmBsDgkBMLikBC4ihNTXEkMw/OLsy3U8gOIuzTkA6rSJNIBWWnIBmSlIRmQlYZcQFYaQxpVacgEZKUhEZCVhjxAVhrSAFlpSANUpcmkAbLSkAbISkMaICsNaYCsNIY0qtKQBshKQxogKw1pgKw0pAGy0pAGqEpTSANkpSENkJWGNEBWGtIAWWkMaVSlIQ2QlYY0QFYa0gBZaUgDZKUhDRCVZhxIA2SlIQ2QlYY0QFYa0gBZaQxpVKUhDZCVhjRAVhrSAFlpSANkpSENUJVmJA2QlYY0QFYa0gBZaUgDZKUxpFGVhjRAVhrSAFlpSANkpSENkJWGNEBVmok0QFYa0gBZaUgDZKUhDZCVxpBGVRrSAFlpSANkpSENkJWGNEBWGtIAVWkCaYCsNKQBstKQBshKQxogK40hjao0pAGy0pAGyEpDGiArDWmArDSkAarSGGmArDSkAbLSkAbISkMaICuNIY2qNKQBstKQBshKQxogKw1pgKw0pAGq0sykAbLSkAbISkMaICsNaYCsNIY0qtKQBshKQxogKw1pgKw0pAGy0pAGqEoTSQNkpSENkJWGNEBWGtIAWWkMaVSlIQ2QlYY0QFYa0gBZaUgDZKUhDVCVJpEGyEpDGiArDWmArDSkAbLSGNKoSkMaICsNaYCsNKQBstKQBshKQxqgKk0mDZCVhjRAVhrSAFlpSANkpTGkUZWGNEBWGtIAWWlIA2SlIQ2QlYY0QFWaQhogKw1pgKw0pAGy0pAGyEpjSKMqDWmArDSkAbLSkAbISkMaICsNaYCoNNNAGiArDWmArDSkAbLSkAbISmNIoyoNaYCsNKQBstKQBshKQxogKw1pgKo0I2mArDSkAbLSkAbISkMaICuNIY2qNKQBstKQBshKQxogKw1pgKw0pAGq0kykAbLSkAbISkMaICsNaYCsNIY0qtKQBshKQxogKw1pgKw0pAGy0pAGqEoTSANkpSENkJWGNEBWGtIAWWkMaVSlIQ2QlYY0QFYa0gBZaUgDZKUhDVCVxkgDZKUhDZCVhjRAVhrSAFlpDGlcpZnvJAbb4Y3F9+Q9lWFYfrbMww5vfHtb3pjxtrxx2G15Y5ub8p7xwm15Y3Db8sa1tuWNFW3L2+DdlDf+si1v/GVb3vjLtrzxl2154y+b8o74y7a88ZdteeMv2/LGX7blbfBuyht/2ZY3/rItb/xlW974y7a88ZdNeSf8ZVve+Mu2vPGXbXnjL9vyNng35Y2/bMsbf9mWN/6yLW/8ZVve+MumvDP+si1v/GVb3vjLtrzxl215G7yb8sZftuWNv2zLG3/Zljf+si1v/GVT3gV/2ZY3/rItb/xlW974y7a8Dd5NeeMv2/LGX7bljb9syxt/2ZY3/rIl7zDgL9vyxl+25Y2/bMsbf9mWt8G7KW/8ZVve+Mu2vPGXbXnjL9vyxl825T3iL9vyxl+6nicwlqUJYZpjRZxxDEsbRrMdcTCjwuLgXIXFMcTRFQdPLCwOBlpYHNy2sDhYc2Fx8PG64kyYfmFxSAiExSEhEBaHhEBYHEMcXXFICITFISEQFoeEQFgcEgJhcUgIdMUJJATC4pAQCItDQiAsDgmBsDiGOLrikBAIi0NCICwOCYGwOCQEwuKQEOiKYyQEwuKQEAiLQ0IgLA4JgbA4hji64pAQCItDQiAsDgmBsDgkBMLikBDoijOTEAiLQ0IgLA4JgbA4JATC4hji6IpDQiAsDgmBsDgkBMLikBAIi0NCoCtOJCEQFoeEQFgcEgJhcUgIhMUxxNEVh4RAWBwSAmFxSAiExSEhEBaHhEBXnERCICwOCYGwOCQEwuKQEAiLY4ijKw4Jgas4McWVxDA8vzjbQi0/gLhLQz4gKw3pgKw0ZAOy0pAMqEqTyQVkpSEVkJWGTEBWGhIBWWkMaVSlIQ2QlYY0QFYa0gBZaUgDZKUhDVCVppAGyEpDGiArDWmArDSkAbLSGNKoSkMaICsNaYCsNKQBstKQBshKQxogKo0NpAGy0pAGyEpDGiArDWmArDSGNKrSkAbISkMaICsNaYCsNKQBstKQBqhKM5IGyEpDGiArDWmArDSkAbLSGNKoSkMaICsNaYCsNKQBstKQBshKQxqgKs1EGiArDWmArDSkAbLSkAbISmNIoyoNaYCsNKQBstKQBshKQxogKw1pgKo0gTRAVhrSAFlpSANkpSENkJXGkEZVGtIAWWlIA2SlIQ2QlYY0QFYa0gBVaYw0QFYa0gBZaUgDZKUhDZCVxpBGVRrSAFlpSANkpSENkJWGNEBWGtIAVWlm0gBZaUgDZKUhDZCVhjRAVhpDGlVpSANkpSENkJWGNEBWGtIAWWlIA1SliaQBstKQBshKQxogKw1pgKw0hjSq0pAGyEpDGiArDWmArDSkAbLSkAaoSpNIA2SlIQ2QlYY0QFYa0gBZaQxpVKUhDZCVhjRAVhrSAFlpSANkpSENUJUmkwbISkMaICsNaYCsNKQBstIY0qhKQxogKw1pgKw0pAGy0pAGyEpDGqAqTSENkJWGNEBWGtIAWWlIA2SlMaRRlYY0QFYa0gBZaUgDZKUhDZCVhjRAVJp5IA2QlYY0QFYa0gBZaUgDZKUxpFGVhjRAVhrSAFlpSANkpSENkJWGNEBVmpE0QFYa0gBZaUgDZKUhDZCVxpBGVRrSAFlpSANkpSENkJWGNEBWGtIAVWkm0gBZaUgDZKUhDZCVhjRAVhpDGlVpSANkpSENkJWGNEBWGtIAWWlIA1SlCaQBstKQBshKQxogKw1pgKw0hjSq0pAGyEpDGiArDWmArDSkAbLSkAaoSmOkAbLSkAbISkMaICsNaYCsNIY0qtKQBshKQxogKw1pgKw0pAGy0pAGqEozkwbISkMa4CvNfCcx2A5vLL4n76kMw/KzZR52eOPb2/I2eDfljcNuyxvb3JY3XrgtbwxuW9641qa8I1a0LW/8ZVve+Mu2vPGXbXkbvJvyxl+25Y2/bMsbf9mWN/6yLW/8ZVPeCX/Zljf+si1v/GVb3vjLtrwN3k154y/b8sZftuWNv2zLG3/Zljf+sinvjL9syxt/2ZY3/rItb/xlW94G76a88ZdteeMv2/LGX7bljb9syxt/2ZR3wV+25Y2/bMsbf9mWN/6yLW+Dd1Pe+Mu2vPGXbXnjL9vyxl+25Y2/bMk7DvjLtrzxl2154y/b8sZftuVt8G7KG3/Zljf+si1v/GVb3vjLtrzxl015j/jLtrzxl2154y/b8sZftuVt8G7KG3/Zljf+si1v/GVb3vhL1/MExrI0IUxzrIgzjmFpw2i2Iw5mVFecCecqLA42V1gcPLGwOBhoYXEMcXTFwZoLi4OPFxYH0y8sDgmBsDgkBLriBBICYXFICITFISEQFoeEQFgcQxxdcUgIhMUhIRAWh4RAWBwSAmFxSAh0xTESAmFxSAiExSEhEBaHhEBYHEMcXXFICITFISEQFoeEQFgcEgJhcUgIdMWZSQiExSEhEBaHhEBYHBICYXEMcXTFISEQFoeEQFgcEgJhcUgIhMUhIdAVJ5IQCItDQiAsDgmBsDgkBMLiGOLoikNCICwOCYGwOCQEwuKQEAiLQ0KgK04iIRAWh4RAWBwSAmFxSAiExTHE0RWHhEBYHBICYXFICITFISEQFoeEQFecTEIgLA4JgbA4JASu4tzK35XEMDy/ONtCLT+AuEtDPiArjSGNqjRkA7LSkAzISkMuICsNqYCsNGQCqtIUEgFZacgDZKUhDZCVhjRAVhpDGlVpSANkpSENkJWGNEBWGtIAWWlIA0Slud2ONKrSkAbISkMaICsNaYCsNIY0qtKQBshKQxogKw1pgKw0pAGy0pAGqEozkgbISkMaICsNaYCsNKQBstIY0qhKQxogKw1pgKw0pAGy0pAGyEpDGqAqzUQaICsNaYCsNKQBstKQBshKY0ijKg1pgKw0pAGy0pAGyEpDGiArDWmAqjSBNEBWGtIAWWlIA2SlIQ2QlcaQRlUa0gBZaUgDZKUhDZCVhjRAVhrSAFVpjDRAVhrSAFlpSANkpSENkJXGkEZVGtIAWWlIA2SlIQ2QlYY0QFYa0gBVaWbSAFlpSANkpSENkJWGNEBWGkMaVWlIA2SlIQ2QlYY0QFYa0gBZaUgDVKWJpAGy0pAGyEpDGiArDWmArDSGNKrSkAbISkMaICsNaYCsNKQBstKQBqhKk0gDZKUhDZCVhjRAVhrSAFlpDGlUpSENkJWGNEBWGtIAWWlIA2SlIQ1QlSaTBshKQxogKw1pgKw0pAGy0hjSqEpDGiArDWmArDSkAbLSkAbISkMaoCpNIQ2QlYY0QFYa0gBZaUgDZKUxpFGVhjRAVhrSAFlpSANkpSENkJWGNEBUmjyQBshKQxogKw1pgKw0pAGy0hjSqEpDGiArDWmArDSkAbLSkAbISkMaoCrNSBogKw1pgKw0pAGy0pAGyEpjSKMqDWmArDSkAbLSkAbISkMaICsNaYCqNBNpgKw0pAGy0pAGyEpDGiArjSGNqjSkAbLSkAbISkMaICsNaYCsNKQBqtIE0gBZaUgDZKUhDZCVhjRAVhpDGlVpSANkpSENkJWGNEBWGtIAWWlIA1SlMdIAWWlIA2SlIQ2QlYY0QFYaQxpVaUgDZKUhDZCVhjRAVhrSAFlpSANUpZlJA2SlIQ2QlYY0QFYa0gBZaQxpVKUhDZCVhjRAVhrSAFlpSAN8pZnvJAbb4Y3F9+Q9lWFYfrbMw5Z3xLe35Y0Zb8sbh92WN7a5LW+Dd1PeGNy2vHGtbXljRdvyxl+25Y2/bMo74S/b8sZftuWNv2zLG3/ZlrfBuylv/GVb3vjLtrzxl2154y/b8sZfNuWd8ZdteeMv2/LGX7bljb9sy9vg3ZQ3/rItb/xlW974y7a88ZdteeMvm/Iu+Mu2vPGXbXnjL9vyxl+25W3wbsobf9mWN/6yLW/8ZVve+Mu2vPGXLXnf/r/h3ZQ3/rItb/xlW974y7a8Dd5NeeMv2/LGX7bljb9syxt/2ZY3/rIp7xF/2ZY3/rItb/xlW974y7a8Dd5NeeMv2/LGX7bljb9syxt/2ZY3/rIp7wl/2ZY3/rItb/xlW974y7a8Dd5NeeMvXc8TGMvShDDNsSLOOIalDaPZjjiYUWFxcK7C4mBzhcXBE+uKEzDQwuLgtoXFwZoLi4OPFxbHEEdXHBICYXFICITFISEQFoeEQFgcEgJdcYyEQFgcEgJhcUgIhMUhIRAWxxBHVxwSAmFxSAiExSEhEBaHhEBYHBICXXFmEgJhcUgIhMUhIRAWh4RAWBxDHF1xSAiExSEhEBaHhEBYHBICYXFICHTFiSQEwuKQEAiLQ0IgLA4JgbA4hji64pAQCItDQiAsDgmBsDgkBMLikBDoipNICITFISEQFoeEQFgcEgJhcQxxdMUhIRAWh4RAWBwSAmFxSAiExSEh0BUnkxAIi0NCICwOCYGwOCQEwuIY4uiKQ0IgLA4JgbA4JATC4pAQCItDQuAqTkxxJTEMzy/OtlDLDyBWaQr5gKw0pAOy0pANyEpDMiArjSGNqjSkArLSkAnISkMiICsNeYCsNKQBmtKEYSANkJWGNEBWGtIAWWlIA2SlMaRRlYY0QFYa0gBZaUgDZKUhDZCVhjRAVZqRNEBWGtIAWWlIA2SlIQ2QlcaQRlUa0gBZaUgDZKUhDZCVhjRAVhrSAFVpJtIAWWlIA2SlIQ2QlYY0QFYaQxpVaUgDZKUhDZCVhjRAVhrSAFlpSANUpQmkAbLSkAbISkMaICsNaYCsNIY0qtKQBshKQxogKw1pgKw0pAGy0pAGqEpjpAGy0pAGyEpDGiArDWmArDSGNKrSkAbISkMaICsNaYCsNKQBstKQBqhKM5MGyEpDGiArDWmArDSkAbLSGNKoSkMaICsNaYCsNKQBstKQBshKQxqgKk0kDZCVhjRAVhrSAFlpSANkpTGkUZWGNEBWGtIAWWlIA2SlIQ2QlYY0QFWaRBogKw1pgKw0pAGy0pAGyEpjSKMqDWmArDSkAbLSkAbISkMaICsNaYCqNJk0QFYa0gBZaUgDZKUhDZCVxpBGVRrSAFlpSANkpSENkJWGNEBWGtIAVWkKaYCsNKQBstKQBshKQxogK40hjao0pAGy0pAGyEpDGiArDWmArDSkAaLSjANpgKw0pAGy0pAGyEpDGiArjSGNqjSkAbLSkAbISkMaICsNaYCsNKQBqtKMpAGy0pAGyEpDGiArDWmArDSGNKrSkAbISkMaICsNaYCsNKQBstKQBqhKM5EGyEpDGiArDWmArDSkAbLSGNKoSkMaICsNaYCsNKQBstKQBshKQxqgKk0gDZCVhjRAVhrSAFlpSANkpTGkUZWGNEBWGtIAWWlIA2SlIQ2QlYY0QFUaIw2QlYY0QFYa0gBZaUgDZKUxpFGVhjRAVhrSAFlpSANkpSENkJWGNEBVmpk0QFYa0gBZaUgDZKUhDZCVxpBGVRrSAFlpSANkpSENkJWGNEBWGtIAVWkiaYCsNKQBstKQBshKQxogK40hjao0pAG+0sx3EoPt8Mbie/Kep7yQmMM07/DGt7fljRlvyxuH3ZR3wja35Y0Xbssbg9uWN661LW+Dd1Pe+Mu2vPGXbXnjL9vyxl+25Y2/bMo74y/b8sZftuWNv2zLG3/ZlrfBuylv/GVb3vjLtrzxl2154y/b8sZfNuVd8JdteeMv2/LGX7bljb9sy9vg3ZQ3/rItb/xlW974y7a88ZdteeMvW/KeBvxlW974y7a88ZdteeMv2/I2eDfljb9syxt/2ZY3/rItb/xlW974y6a8R/xlW974y7a88ZdteeMv2/I2eDfljb9syxt/2ZY3/rItb/xlW974y6a8J/xlW974y7a88ZdteeMv2/I2eDfljb9syxt/2ZY3/rItb/xlW974y6a8A/6yLW/8pSvvOa3XzqXs8MZftuWNv2zL2+DdlDf+si1v/GVb3vjLtrzxl2154y+b8jb8ZVve+Mu2vPGXbXnjL9vyNng35Y2/bMsbf9mWN/6yLW/8ZVve+MumvGf8ZVve+Mu2vPGXbXnjL9vyNng35Y2/bMsbf9mWN/6yLW/8ZVve+MumvCP+si1v/GVb3vjLtrzxl215G7yb8sZftuWNv2zLG3/Zljf+si1v/GVT3gl/2ZY3/rItb/xlW974y7a8Dd5NeeMv2/LGX7bljb9syxt/2ZY3/rIp74y/bMsbf9mWN/6yLW/8ZVveBu+mvPGXbXnjL9vyxl+25Y2/bMsbf9mUd8FftuWNv2zLG3/Zljf+si1vg3dT3vhLT95xsvH3tTEMYYc3/rItb/xlW974y7a88ZcteYcBf9mWN/6yLW/8ZVve+Mu2vA3enrxvVyy8Z7Md3vjLtrzxl2154y/b8sZftuWNv2zKe8RftuWNv2zLG3/Zljf+si1vg3dT3vjLtrzxl2154y/b8sZftuWNv2zKe8JftuWNv2zLG3/Zljf+si1vg3dT3vjLtrzxl2154y/b8sZftuWNv2zKO+Av2/LGX7bljb9syxt/2Za3wbspb/xlW974y7a88ZdteeMv2/LGXzblbfjLtrzxl2154y/b8sZftuVt8G7KG3/Zljf+si1v/GVb3vjLtrzxl015z/jLtrzxl2154y/b8sZftuVt8G7KG3/Zljf+si1v/GVb3vjLtrzxl015R/ylK++clp+NZYg7vPGXbXnjL9vyxl+68i7TsPKeh+cX5xCWH863wrxysS2Ic9z5Lm00dLyEjvjha+iIz76Gjvj3a+hILnANHckbLqFjIse4ho7kI9fQkdzlGjqS51xDR0PHS+hInnMNHclzrqEjec41dCTPuYaO5DmX0DGT51xDR/Kca+hInnMNHclzrqGjoeNxOo5h1THuvFSbCWmExSF5OU4cm9dZzX418tnFU0l5aXApdxJT3Ll4HlbZ5yGMjxf/lp2gpkvZyXW6lJ0YqEfZC6lRl7ITMnUpO5lUl7ITYXUpuyF7j7KTpXUpOyldl7KT0nUpOyldl7KT0nUouw2kdF3KTkrXpeykdF3KTkrXpeyG7D3KTkrXpeykdF3KTkrXpeykdF3KTkrXo+wjKV2XspPSdSk7KV2XspPSdSm7IXuPspPSdSk7KV2XspPSdSk7KV2XspPS9Sj7RErXpeykdF3KTkrXpeykdF3Kbsjeo+ykdF3KTkrXpeykdF3KTkrXpeykdD3KHkjpupSdlK5L2UnpupSdlK5L2Q3Ze5SdlK5L2UnpupSdlK5L2UnpupSdlK5H2Y2UrkvZSem6lL15ShdSWGUvuSp7snzXPc7368dx99fnnO+j6kGlX9f/7nLor8sm3uWSlj/YMQyh1uXbA8T17/Dhzzvmpbv7qcTtH1/+fsdffa90N9/PKbU71LLXgVsXf196e8h1/yMLe3+SJY3LhFPS47y3OzuFXHZ+Oew14jZ93WeyUp5fPOa0ssgPc+T+xePa5HF8PE3SFuDf5AGlDA/AYwX4WIZ14Jfx8ep1tkrfCJvi/d956Pr+v1OmcRXgYfhMewN5nMe1SQ9/WWXsRdkM8cbEiwfx21z3cHmoMl9rinHOc03Neeluifd2jGsP5uH0PRhP34Pp9D0I9R6Mo9V6EG39c7sV4n/8O9ur01rg54dfzmWvsl7r+3myP5aqnXplmJbKyYb0UCCUpa92nb6OYZ1lx4fJ8N7XuSNdY0e6po76mjvqa+mnr3HoqK9jR32dOurrheqmal+to75eqG6q9rWjuil2VDfFjuqm2FHdlDqqm1JHdVO6UN1U8+qpo7opWUd97ahuSh3VTamjuil1VDeljuqm3FHdlDuqm3JHeVPuqG7K1lFfO6qbckd1U+6obsoXqptq/jV3VDeVC9VNNV1LR3VT6ShvKh3VTcUu09eQbHk/NaR8f0F1Wt5bKwfUTTmv78wOITzvbFxftU8Pb/GPMSztP6AWGgdbXxQf4lRRa17/subZ7g15f3tESf11Oat32dbdJrPlXOlyzOW+3Wq8/3Rault66u48DH11929KJJsq3X1he9Mt9Fgm3Fstet+p8mt70+8mTXpNCnpNMr0mzXpNinpNSnpNynpNKnJNGge9JunN3qPe7D3qzd6j3uw96s3eo97sPerN3qPe7D3qzd6T3uw96c3ek97sPenN3pPe7D3pzd6T3uw96c3ek97sPenN3kFv9g56s3fQm72D3uwd9GbvoDd7B73ZO+jN3kFv9g56s7fpzd6mN3ub3uxterO36c3epjd7m97sbXqzt+nN3qY3e896s/esN3vPerP3rDd7z3qz96w3e896s/esN3vPerP3rDd7R73ZO+rN3lFv9o56s3fUm72j3uwd9WbvqDd7R73ZO+rN3klv9k56s3fSm72T3uyd9GbvpDd7J73ZO+nN3klv9k56s3fWm72z3uyd9WbvrDd7Z73ZO+vN3llv9s56s3fWm72z3uxd9Gbvojd7F73Zu+jN3kVv9i56s3fRm72L3uxd9GbvIjd7x0Fu9o56ey2j3l7LqLfXMg5ys3fU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29llFvr2XU22sZ9fZaRr29lklvr2XS22uZ9PZaJr29lmmQm72T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttUx6ey2T3l7LpLfXMunttcx6ey2z3l7LrLfXMuvttcyD3Oyd9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XW22uZ9fZaZr29lllvr2XR22tZ9PZaFr29lkVvr2UZ5GbvorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujttSx6ey2L3l7LorfXsujt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","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_participants","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"name","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"npk_m_hash","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}},{"name":"header","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::note::note_header::NoteHeader"}}],"kind":"struct","path":"types::participant_note::ParticipantNote"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_participants"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"2426":"attempt to add with overflow","4986":"Array index out of bounds","2292":"Array index out of bounds","945":"Storage slot 0 not allowed. Storage slots must start from 1.","1969":"Array index out of bounds","2804":"Array index out of bounds","5230":"attempt to add with overflow","2725":"Array index out of bounds","354":"Array index out of bounds","3938":"Array index out of bounds","4962":"Array index out of bounds","4505":"attempt to add with overflow","4694":"Array index out of bounds","4371":"attempt to add with overflow","5151":"attempt to add with overflow","4749":"Array index out of bounds","5553":"Array index out of bounds","4292":"Array index out of bounds","2433":"Array index out of bounds","3134":"Array index out of bounds","4481":"Array index out of bounds","3000":"attempt to add with overflow","3512":"attempt to add with overflow","2354":"attempt to add with overflow","3701":"Array index out of bounds","4024":"attempt to add with overflow","3433":"attempt to add with overflow","3622":"Array index out of bounds","5048":"Array index out of bounds","5371":"attempt to add with overflow","660":"attempt to add with overflow","1873":"attempt to add with overflow","3409":"attempt to add with overflow","3732":"Array index out of bounds","4299":"Array index out of bounds","5457":"Array index out of bounds","2306":"attempt to add with overflow","3196":"Storage slot 0 not allowed. Storage slots must start from 1.","5110":"attempt to add with overflow","2227":"Array index out of bounds","1904":"attempt to add with overflow","1770":"Array index out of bounds","1179":"Function set_contract_registered can only be called internally","2203":"Array index out of bounds","4952":"attempt to add with overflow","1990":"attempt to add with overflow","3014":"Array index out of bounds","4038":"Array index out of bounds","4928":"Array index out of bounds","5062":"attempt to add with overflow","3959":"attempt to add with overflow","2100":"Array index out of bounds","5306":"Array index out of bounds","4526":"attempt to add with overflow","5361":"attempt to add with overflow","1832":"attempt to add with overflow","5574":"attempt to add with overflow","4770":"attempt to add with overflow","4447":"Array index out of bounds","217":"attempt to add with overflow","1430":"Not initialized","3344":"attempt to add with overflow","3021":"Array index out of bounds","4045":"Array index out of bounds","4880":"Array index out of bounds","571":"Initialization hash does not match","1784":"attempt to add with overflow","3832":"Array index out of bounds","5179":"Array index out of bounds","3375":"attempt to add with overflow","1705":"Array index out of bounds","2918":"Array index out of bounds","2595":"Array index out of bounds","4454":"Array index out of bounds","5478":"attempt to add with overflow","2138":"attempt to add with overflow","3351":"attempt to add with overflow","3863":"Array index out of bounds","1681":"Array index out of bounds","2193":"attempt to add with overflow","2382":"Array index out of bounds","2571":"Array index out of bounds","4186":"DKIM key has already been registered","5375":"Array index out of bounds","5564":"attempt to add with overflow","2169":"Array index out of bounds","3894":"attempt to add with overflow","365":"attempt to add with overflow","877":"Sender is not the registry contract","3949":"attempt to add with overflow","2468":"Array index out of bounds","4973":"attempt to add with overflow","5138":"Array index out of bounds","2633":"Array index out of bounds","5382":"Array index out of bounds","963":"DKIM key has already been registered","3200":"Array index out of bounds","4547":"Array index out of bounds","2475":"Array index out of bounds","3499":"Array index out of bounds","4066":"attempt to add with overflow","5468":"attempt to add with overflow","1238":"Storage slot 0 not allowed. Storage slots must start from 1.","3853":"attempt to add with overflow","3530":"Array index out of bounds","5578":"Array index out of bounds","1860":"Array index out of bounds","2561":"attempt to add with overflow","1915":"Array index out of bounds","3963":"Array index out of bounds","2537":"Array index out of bounds","166":"attempt to add with overflow","2214":"attempt to add with overflow","3750":"Array index out of bounds","1434":"Function get_escrow_class_id can only be called statically","5585":"Array index out of bounds","142":"attempt to add with overflow","3970":"Array index out of bounds","4994":"Array index out of bounds","1977":"Array index out of bounds","118":"attempt to add with overflow","2733":"Array index out of bounds","5482":"Array index out of bounds","2788":"Array index out of bounds","3812":"attempt to add with overflow","2142":"Array index out of bounds","4001":"attempt to add with overflow","2008":"Array index out of bounds","3032":"attempt to add with overflow","4056":"attempt to add with overflow","4190":"Array index out of bounds","2764":"Array index out of bounds","4489":"attempt to add with overflow","4568":"attempt to add with overflow","771":"Sender is not the registry contract","4678":"Array index out of bounds","4757":"Array index out of bounds","5403":"attempt to add with overflow","3764":"attempt to add with overflow","3441":"Array index out of bounds","3630":"Array index out of bounds","4465":"attempt to add with overflow","4788":"Array index out of bounds","2149":"Array index out of bounds","3685":"Array index out of bounds","3039":"Array index out of bounds","1692":"attempt to add with overflow","3874":"attempt to add with overflow","2582":"attempt to add with overflow","4252":"Storage slot 0 not allowed. Storage slots must start from 1.","5489":"Array index out of bounds","3661":"Array index out of bounds","2826":"Array index out of bounds","2503":"Array index out of bounds","1022":"Storage slot 0 not allowed. Storage slots must start from 1.","2235":"Array index out of bounds","4070":"Array index out of bounds","5338":"attempt to add with overflow","5015":"attempt to add with overflow","5393":"attempt to add with overflow","2510":"Array index out of bounds","4936":"attempt to add with overflow","2754":"attempt to add with overflow","2108":"Array index out of bounds","3321":"Array index out of bounds","4400":"attempt to add with overflow","4077":"Array index out of bounds","5290":"Array index out of bounds","2651":"Array index out of bounds","4888":"Array index out of bounds","4431":"attempt to add with overflow","1926":"attempt to add with overflow","3651":"attempt to add with overflow","3840":"Array index out of bounds","5510":"attempt to add with overflow","4407":"attempt to add with overflow","1713":"Array index out of bounds","2926":"Array index out of bounds","2603":"Array index out of bounds","5163":"Array index out of bounds","5407":"Array index out of bounds","1500":"attempt to add with overflow","2713":"attempt to add with overflow","3548":"Array index out of bounds","5596":"attempt to add with overflow","2256":"attempt to add with overflow","2957":"Array index out of bounds","3981":"attempt to add with overflow","2177":"attempt to add with overflow","2366":"Array index out of bounds","2665":"attempt to add with overflow","1318":"attempt to add with overflow","5414":"Array index out of bounds","4256":"Array index out of bounds","3610":"attempt to add with overflow","2775":"attempt to add with overflow","2129":"attempt to add with overflow","4555":"Array index out of bounds","1160":"attempt to add with overflow","5445":"attempt to add with overflow","5122":"Array index out of bounds","5500":"attempt to add with overflow","2160":"attempt to add with overflow","4909":"attempt to add with overflow","1514":"Not initialized","2026":"Array index out of bounds","2404":"attempt to add with overflow","3050":"Array index out of bounds","3562":"attempt to add with overflow","3483":"Array index out of bounds","3672":"attempt to add with overflow","4586":"Array index out of bounds","844":"attempt to add with overflow","1734":"attempt to add with overflow","2947":"attempt to add with overflow","2624":"attempt to add with overflow","3459":"Array index out of bounds","4806":"Array index out of bounds","820":"attempt to add with overflow","1332":"Not initialized","1844":"Array index out of bounds","2545":"attempt to add with overflow","2088":"attempt to add with overflow","3112":"Storage slot 0 not allowed. Storage slots must start from 1.","2978":"attempt to add with overflow","2844":"Array index out of bounds","2521":"attempt to add with overflow","1174":"Not initialized","3222":"SharedImmutable already initialized","3356":"Array index out of bounds","5002":"Array index out of bounds","5514":"Array index out of bounds","4868":"attempt to add with overflow","2040":"attempt to add with overflow","2741":"Array index out of bounds","4088":"attempt to add with overflow","2796":"Array index out of bounds","1961":"Array index out of bounds","3363":"Array index out of bounds","858":"Not initialized","1882":"attempt to add with overflow","2906":"attempt to add with overflow","1937":"Array index out of bounds","4497":"Array index out of bounds","4686":"Array index out of bounds","4820":"attempt to add with overflow","4741":"Array index out of bounds","3906":"Array index out of bounds","4095":"Array index out of bounds","5198":"Array index out of bounds","3449":"attempt to add with overflow","3638":"Array index out of bounds","3315":"attempt to add with overflow","5521":"Array index out of bounds","3693":"Array index out of bounds","2858":"attempt to add with overflow","4717":"Array index out of bounds","3236":"Array index out of bounds","3425":"Array index out of bounds","2456":"attempt to add with overflow","597":"SharedImmutable already initialized","2968":"attempt to add with overflow","2243":"Array index out of bounds","2487":"attempt to add with overflow","5425":"attempt to add with overflow","1518":"Function get_escrow_registry_status can only be called statically","3243":"Array index out of bounds","2408":"Array index out of bounds","2274":"Array index out of bounds","2463":"attempt to add with overflow","4377":"Array index out of bounds","4944":"Array index out of bounds","2116":"Array index out of bounds","2817":"attempt to add with overflow","1336":"Function check_dkim_key_hash_public can only be called statically","5298":"Array index out of bounds","2415":"Array index out of bounds","1257":"SharedImmutable already initialized","2982":"Array index out of bounds","4707":"attempt to add with overflow","4896":"Array index out of bounds","5030":"Array index out of bounds","5542":"attempt to add with overflow","343":"attempt to add with overflow","3927":"attempt to add with overflow","3470":"attempt to add with overflow","3714":"attempt to add with overflow","3391":"Array index out of bounds","4604":"Array index out of bounds","1721":"Array index out of bounds","2934":"Array index out of bounds","2611":"Array index out of bounds","752":"Not initialized","2989":"Array index out of bounds","3824":"Array index out of bounds","4013":"Array index out of bounds","5171":"Array index out of bounds","1886":"Array index out of bounds","1752":"Array index out of bounds","2185":"Array index out of bounds","2374":"Array index out of bounds","3398":"Array index out of bounds","3130":"DKIM key has already been registered","4666":"attempt to add with overflow","1893":"Array index out of bounds","1948":"attempt to add with overflow","5532":"attempt to add with overflow","3917":"attempt to add with overflow","4106":"Array index out of bounds","711":"attempt to add with overflow","4618":"attempt to add with overflow","577":"Initializer address is not the contract deployer","5130":"Array index out of bounds","4539":"Array index out of bounds","4728":"attempt to add with overflow","309":"attempt to add with overflow","5319":"attempt to add with overflow","1577":"Storage slot 0 not allowed. Storage slots must start from 1.","5350":"Array index out of bounds","3491":"Array index out of bounds","4515":"Array index out of bounds","5216":"Array index out of bounds","1041":"SharedImmutable already initialized","4168":"Storage slot 0 not allowed. Storage slots must start from 1.","5192":"attempt to add with overflow","3010":"attempt to add with overflow","4034":"attempt to add with overflow","1852":"Array index out of bounds","2553":"Array index out of bounds","4278":"SharedImmutable already initialized","1395":"Storage slot 0 not allowed. Storage slots must start from 1.","4412":"Array index out of bounds","5546":"Array index out of bounds","5278":"attempt to add with overflow","347":"Array index out of bounds","2395":"attempt to add with overflow","3931":"Array index out of bounds","4419":"Array index out of bounds"}},{"name":"get_managed_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_managed_escrows"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow_contract_id","type":{"kind":"field"},"visibility":"private"},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["constructor"],"assert_messages":{"768":"attempt to add with overflow","1085":"Array index out of bounds","1341":"attempt to add with overflow","1658":"Array index out of bounds","1560":"attempt to add with overflow","1646":"attempt to add with overflow","1256":"Array index out of bounds","1506":"Array index out of bounds","799":"attempt to add with overflow","153":"Array index out of bounds","787":"Array index out of bounds","915":"Array index out of bounds","1354":"Array index out of bounds","775":"attempt to add with overflow","1598":"attempt to add with overflow","1531":"Array index out of bounds","1330":"Array index out of bounds","1519":"attempt to add with overflow","745":"Array index out of bounds","873":"attempt to add with overflow","739":"attempt to add with overflow","1062":"Array index out of bounds","1117":"Array index out of bounds","1312":"Array index out of bounds","404":"SharedImmutable already initialized","660":"Array index out of bounds","142":"attempt to add with overflow","849":"Array index out of bounds","1416":"Array index out of bounds","1666":"Array index out of bounds","1398":"Array index out of bounds","1075":"attempt to add with overflow","624":"Array index out of bounds","1264":"Array index out of bounds","667":"Array index out of bounds","923":"Array index out of bounds","1362":"Array index out of bounds","1490":"Array index out of bounds","972":"Array index out of bounds","1478":"attempt to add with overflow","1539":"Array index out of bounds","1277":"attempt to add with overflow","954":"Array index out of bounds","558":"Array index out of bounds","936":"attempt to add with overflow","1125":"Array index out of bounds","1320":"attempt to add with overflow","857":"attempt to add with overflow","1046":"Array index out of bounds","1174":"Array index out of bounds","1296":"Array index out of bounds","1430":"attempt to add with overflow","1034":"attempt to add with overflow","1674":"Array index out of bounds","1156":"Array index out of bounds","833":"attempt to add with overflow","894":"attempt to add with overflow","1138":"attempt to add with overflow","815":"Array index out of bounds","620":"Storage slot 0 not allowed. Storage slots must start from 1.","108":"attempt to add with overflow","1248":"Array index out of bounds","474":"Array index out of bounds","986":"attempt to add with overflow","1236":"attempt to add with overflow","1370":"Array index out of bounds","1498":"Array index out of bounds","907":"Array index out of bounds","1096":"attempt to add with overflow","1547":"Array index out of bounds","1687":"attempt to add with overflow","377":"Initializer address is not the contract deployer","822":"Array index out of bounds","371":"Initialization hash does not match","883":"Array index out of bounds","1584":"Array index out of bounds","554":"DKIM key has already been registered","1383":"attempt to add with overflow","1188":"attempt to add with overflow","164":"attempt to add with overflow","1566":"Array index out of bounds","865":"Array index out of bounds","1054":"Array index out of bounds","536":"Storage slot 0 not allowed. Storage slots must start from 1.","1109":"Array index out of bounds","146":"Array index out of bounds","463":"Array index out of bounds","780":"Array index out of bounds","1304":"attempt to add with overflow","646":"SharedImmutable already initialized"}},{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim"],"assert_messages":{"329":"Array index out of bounds","637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","50":"Sender is not the registry contract","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","713":"attempt to add with overflow","457":"attempt to add with overflow","137":"Storage slot 0 not allowed. Storage slots must start from 1."}},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7d3bThs7FAbgd8k1Fz4sn/oqW1sVtLSKhKACuqUtxLvvDGRMiL1jwpqs1PJ/U0FxZuyPZLx+M4en1ffrq98/v65vf9w9rL789bS6uft2+bi+u9189/R8sbq6X9/crH9+3f3vlZr+SS/NH35d3k7fPTxe3j+uvuhg6GJ1fft9+tLSZgM/1jfXqy9E5vmiaJ1s2DZOLuS22tXaktFp25iMiW+tta+09lHbbWsfTXrX+u+LlVb8zmulc2u101qi+3oB+zDvIaWWvTY0N9YmpUbno3ZzP6Le3fa282bJzm/o3/d+2oM9+R7o5HtwJ9+D5+/BuTTvwnnVemOEaNy2dYgUizdGOLZD04viZ16UPvEioz7zovonVYcwH/m0jkq3fpFGz5/V8NZWT4eRcttubvvus5d09Q2iXd6wtzuta72wMR/BrMptpzEXTY3xatvWmBAPN/bGzMc6Y3ebTn4Gfiw/Cz+WH8GP5efgx/Lz8GP5Bfix/CL8WH4Jfhw/q+DH8kP+4Pkhf/D8kD94fgQ/lh/yB88P+aPt5/zst/NXjK0f8gfPD/mD54f8wfIj5A+eH/IHzw/5Y89vQkGoqKAQUEoUlP8VFNT0FRQU6hUUVN8VFJTUJYpDnVxBQfFbQUFFW0FBRVtBIaCUKKhoKyioaCsoqGgrKKhoKyioaEsUj4q2goKKtoKCiraCgoq2gkJAKVFQ0VZQUNFWUFDRVlBQ0VZQUNGWKAEVbQUFFW0FBRVtBQUVbQWFgFKioKItUeKgHx+rMorVeh9l0DI/xHnDJuzcT+TYxpPgoJngGEEd3LzhyWVfcNAAsaDgoGljOcE0aMF5lGAM83U6OiZ9uHG084aj3T9kpkHLk5Nha2Xj3Fi5/Tk+YY5fmFvnLmvtaZ8bBYEoN6oHUW6UGpLcWg26Zno270GXY8/mjcJb1nvQVbCzeRO8Gd4vhIiLbEJEQDYhYl17pVypeR3CKFMSIqqxCRG/uIR6kUS1mdh9bq5sEzHkBToXXWPbPs139A5699eTXvuvO++/6bz/tvP+0wf6v/OAiP/pv495tgwqvNtL2dolP3/WXUpvH/b6bfpdsPMxZ/Oledf6ZQSu+xH47kcQuh9B7H4EqfcRGNX9CHT3IzDdj8B2P4Lu52TT/Zxsup+TTQfzgYt5BK58rJjt4FgUKI8gqnIEZzkW5eedeaVcYwQ6ubzt5HfyQXzNB5a6H4HrfgQd1KaNT/KffyyKOh9N484y0TwC6qA2Tf7gCDqoTaN9G4FptE6UT3NLFCrj7X72oA4q2cYIOqhkGyPooJJtjKCDSrYxgg5Wlxoj6GAGb4yggzRxeASugxm8MYIOZvDGCLqfk133c/KH7mP4Z4+g+znZdT8nu+7n5FHvqHaWi7z0qLdqO+FVXvlKbq106U3wFvXGaamy3jiHVfKqUT3qzc7O5o2zY2W9cSqtqPeod387mzfqb1lvXMko640rGWW9Cd4Le7t85ajysfBGvpT1Rr6U9Ua+lPVGvpT1Rr4U9Y7Il7LeyJcnrL8r3siXonln1PtFn82b4C3qjXwp6418KeuNfCnrjXwp6418KeqdkC9lvZEvZb2RL2W9kS9lvZF3ZL2Rd2S9kXdkvZF3JL3NqHfmt2Zua2xxlY1RNKhKfmMZG1WhMuhc31AZdEZuqAw6bzZUBp3dGiqDrrkdVtGDrow1VEatVw6rDLrK1FAZ9dnUh1UIKhUV1LY1FdS2NRXUtjUV1LY1FdS2FRUzam2bb++6AWot3B18BJ4xoxbCxxCavMqnDYWCcNSqeUHCUUvsBQkJhFzCUYv3owh97rKJ5XQyavV2DCHlO4NvvizfhaOWessRWtSFbELUhW1Cr/N04skXhKgL2YSoC9mEBEIuIepCNuGoK8ALEo66XLwgIdIJmxDphEtISCdsQqQTNiHSCZsQ6YRNSCDkEiKdfIDQ56sXfIwFIdIJmxDphE2IdMImRDrhEjqkEzYhgbD95yeVCcmEw40PPcrKOMw8y2o3LvV0mKZkvTGnLex9+IzIUR9EeDZvrOXJemPhT9Ybq4Sy3gRvUW+sP8p6Y7FS1hv5UtYb+VLWG/lS1HvUR20u5P1CiMjIJkQKZBMi2LEJCYRcQsQvNiES1QcIyWZCV5yENOrzIpckRO5hEyLKcAlHfVDjkoRIJ2xCpBM2IdIJm5BAyCVEOmETIp2wCZFO2IRIJ2xCpBPuXWlGfczfkoRIJ2xClNZ7hC8qBJWKCgrgmgpq2poKCgS564asQi2x9HUsSs2NlS69MWvKemM+lvXGTC95XZwd9oF55/LGIpqsN1bcZL1RfYt6D/tgwnN5Y+FP1hvnMMh6I18u7e3ydSzKx8Kb4C3qjXwp6418KeuNfCnrjXwp6418KeqNh4Oesv6ueCNfiuYdPHZU2Bv5Utab4C3qjXwp6418KeuNfCnrjXwp6418KeqNhwwLeyNfynojX8p6E7xFvZF3ZL2Rd2S9kXfkvJ833/1zeb++vLq5fti8Zvrh79tvj+u72+23j//+ev3JpvF/","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"register_escrow","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_contract_instance_internal","get_nullifier_membership_witness","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_integer_quotient","directive_invert"]},{"name":"check_and_register_participant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_notes_internal","get_collapse_hints","pack_arguments_oracle_wrapper","call_private_function_internal","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":19,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"get_escrow_registry_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_escrow_registry_status"],"assert_messages":{"311":"Array index out of bounds","180":"Array index out of bounds","20":"Function get_escrow_registry_status can only be called statically","113":"Storage slot 0 not allowed. Storage slots must start from 1.","148":"Array index out of bounds","299":"attempt to add with overflow","340":"attempt to add with overflow","159":"attempt to add with overflow","188":"Array index out of bounds","319":"Array index out of bounds","237":"Array index out of bounds","327":"Array index out of bounds","219":"Array index out of bounds","251":"attempt to add with overflow","15":"Not initialized","172":"Array index out of bounds","201":"attempt to add with overflow"}},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"admin","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"is_admin","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"admin","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"is_admin","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b3dd3286"},{"kind":"string","value":"ParticipantNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrow"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"recurring_entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"entitlement_nullifiers","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseRegistry"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"escrow_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"managed_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"participants","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"participant_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::DKIMKeyHashRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_parameters"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow_contract_id","type":{"kind":"field"}},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_abi"}]}},"file_map":{"100":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"},"101":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"104":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"105":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"108":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"109":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"111":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"112":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"116":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"128":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"129":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"134":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"135":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"144":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"146":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"150":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::{NoteInterface, NullifiableNote}}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = unsafe {\n            get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier)\n        };\n\n        // 2) First we prove that the tree leaf in the witness is present in the nullifier tree. This is expected to be\n        // the leaf that contains the nullifier we're proving inclusion for.\n        assert(\n            self.state.partial.nullifier_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n\n        // 3) Then we simply check that the value in the leaf is the expected one. Note that we don't need to perform\n        // any checks on the rest of the values in the leaf preimage (the next index or next nullifier), since all we\n        // care about is showing that the tree contains an entry with the expected nullifier.\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, let N: u32>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N> + NullifiableNote;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, let N: u32>(\n        self,\n        note: Note,\n        context: &mut PrivateContext\n    ) where Note: NoteInterface<N> + NullifiableNote {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"152":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"155":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LTE, rhs), \"Expected lhs to not be less than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n    }\n}\n"},"156":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"158":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"161":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"162":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"163":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"166":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"167":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"168":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n"},"169":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"171":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"172":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"174":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"175":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"176":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"177":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"189":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"191":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"192":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"201":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"207":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"208":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"209":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"211":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"212":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"214":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"234":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"236":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"239":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"265":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"286":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"290":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"309":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"334":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/recurring_entitlement_note.nr","source":"use dep::aztec::protocol_types::{\n    address::AztecAddress, traits::{Serialize, Deserialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_bytes}, utils::field::field_from_bytes,\n    scalar::Scalar, point::Point\n};\nuse dep::aztec::note::utils::compute_note_hash_for_nullify;\nuse dep::aztec::oracle::random::random;\nuse dep::aztec::macros::notes::note_custom_interface;\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, NoteInterface, PrivateContext};\nuse dep::aztec::keys::{getters::{get_public_keys, get_nsk_app}, point_to_symmetric_key::point_to_symmetric_key};\nuse dep::compressed_string::CompressedString;\nuse std::embedded_curve_ops::multi_scalar_mul;\nuse std::hash::from_field_unsafe;\nuse dep::generators::GENERATORS;\n\n// serializes verifier_id and max_value into one field element\nglobal RECURRING_ENTITLEMENT_NOTE_LENGTH: u32 = 5;\n\n#[note_custom_interface]\npub struct RecurringEntitlementNote {\n    // admin of the escrow contract (really just needed to comply with interface)\n    admin: AztecAddress,\n    // the user that is allowed to use this entitlement\n    recipient: AztecAddress,\n    // basically a selector for which sk and pk to use when nullifying\n    is_admin: bool,\n    // the type of receipt verifier that this entitlement can be used for\n    verifier_id: u8,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // blinding factor for the note\n    randomness: Field,\n}\n\nimpl NoteInterface<RECURRING_ENTITLEMENT_NOTE_LENGTH> for RecurringEntitlementNote {\n\n    fn serialize_content(self) -> [Field; RECURRING_ENTITLEMENT_NOTE_LENGTH] {\n        // serialize max_value and verifier_id together\n        let max_value_bytes: [u8; 16] = self.max_value.to_le_bytes();\n        let mut packed_bytes: [u8; 17] = [0; 17];\n        for i in 0..16 {\n            packed_bytes[i] = max_value_bytes[i];\n        }\n        packed_bytes[16] = self.is_admin as u8;\n        let packed = field_from_bytes(packed_bytes, true);\n        // return serialized content\n        [\n            self.admin.to_field(),\n            self.recipient.to_field(),\n            self.verifier_id as Field,\n            packed,\n            self.randomness\n        ]\n    }\n\n    fn deserialize_content(serialized_note: [Field; RECURRING_ENTITLEMENT_NOTE_LENGTH]) -> RecurringEntitlementNote {\n        // unpack verifier_id and max_value\n        let packed = serialized_note[2];\n        let packed_bytes: [u8; 17] = packed.to_be_bytes();\n        let is_admin = packed_bytes[16] == 1;\n        let mut max_value_bytes: [u8; 16] = [0; 16];\n        for i in 0..16 {\n            max_value_bytes[i] = packed_bytes[i];\n        }\n        let max_value = U128::from_le_bytes(max_value_bytes);\n        // return deserialized note\n        RecurringEntitlementNote {\n            admin: AztecAddress::from_field(serialized_note[0]),\n            recipient: AztecAddress::from_field(serialized_note[1]),\n            is_admin,\n            verifier_id: serialized_note[2] as u8,\n            max_value,\n            randomness: serialized_note[3],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn to_be_bytes(self, storage_slot: Field) -> [u8; RECURRING_ENTITLEMENT_NOTE_LENGTH * 32 + 64] {\n        let serialized_note = self.serialize_content();\n        let mut buffer: [u8; RECURRING_ENTITLEMENT_NOTE_LENGTH * 32 + 64] = [0; RECURRING_ENTITLEMENT_NOTE_LENGTH * 32 + 64];\n        let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n        let note_type_id_bytes: [u8; 32] = RecurringEntitlementNote::get_note_type_id().to_be_bytes();\n        for i in 0..32 {\n            buffer[i] = storage_slot_bytes[i];\n            buffer[32 + i] = note_type_id_bytes[i];\n        }\n        for i in 0..serialized_note.len() {\n            let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n            for j in 0..32 {\n                buffer[64 + i * 32 + j] = bytes[j];\n            }\n        }\n        buffer\n    }\n\n    fn get_note_type_id() -> Field {\n        comptime\n        {\n            let bytes = \"RecurringEntitlementNote\".as_bytes();\n            let hash = poseidon2_hash_bytes(bytes);\n            let hash_bytes = hash.to_be_bytes::<4>();\n            field_from_bytes(hash_bytes, true)\n        }\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn compute_note_hash(self) -> Field {\n        let serialized = self.serialize_without_is_admin();\n        std::embedded_curve_ops::multi_scalar_mul(\n            [GENERATORS[0], GENERATORS[1], GENERATORS[2], GENERATORS[3], GENERATORS[4], GENERATORS[5]],\n            [\n            from_field_unsafe(serialized[0]),\n            from_field_unsafe(serialized[1]),\n            from_field_unsafe(serialized[2]),\n            from_field_unsafe(serialized[3]),\n            from_field_unsafe(serialized[4]),\n            from_field_unsafe(self.get_header().storage_slot)\n        ]\n        ).x\n    }\n}\n\nimpl NullifiableNote for RecurringEntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = self.derive_nullifier_secret_with_context(context);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = self.derive_nullifier_secret();\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for RecurringEntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.admin == other.admin)\n            & (self.recipient == other.recipient)\n            & (self.max_value == other.max_value)\n            & (self.randomness == other.randomness)\n            & (self.verifier_id == other.verifier_id)\n    }\n}\n\nimpl RecurringEntitlementNote {\n    /**\n     * Entitlement Receipt, shadows an entitlement send to a recepient\n     * Cannot be used to claim a reimbursement, but can be used to nullify the sent entitlement\n     *\n     * @param recipient - the address of the recipient of the entitlement (NOT THE OWNER OF THE NOTE)\n     * @param npk_m_hash - the nullifying public key hash of the escrow admin (NOT THE RECIPIENT OF THE ENTITLEMENT)\n     *                     note: this is a bit confusing but it is different because nullifcation of reads\n     * @param verifier_id - the type of verifier that the entitlement can be used for\n     * @param max_value - the maximum value that can be withdrawn from the escrow using the entitlement\n     * @param randomness - blinding factor for the note (inputted since must be same between the two notes)\n     */\n    fn new(\n        admin: AztecAddress,\n        recipient: AztecAddress,\n        is_admin: bool,\n        verifier_id: u8,\n        max_value: U128,\n        randomness: Field\n    ) -> Self {\n        Self { admin, recipient, is_admin, verifier_id, max_value, randomness, header: NoteHeader::empty() }\n    }\n\n    /**\n     * Derives the nullifier for recurring notes\n     * @dev recurring notes are nullified for a scope (month) without destroying the ntoe\n     *      prove nullifier non-inclusion to use\n     *\n     * @param timestamp - the timestamp (month/ year) from the email receipt verifier\n     * @return - the month nullifier for the note\n     */\n    fn derive_recurring_nullifier(self, timestamp: Field) -> Field {\n        let base_nullifier_secret = self.derive_nullifier_secret();\n        poseidon2_hash_with_separator(\n            [\n            base_nullifier_secret,\n            timestamp\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    fn derive_nullifier_secret_with_context(self, context: &mut PrivateContext) -> Field {\n        // get pubkeys for the admin and recipient\n        let admin_keys = get_public_keys(self.admin);\n        let recipient_keys = get_public_keys(self.recipient);\n        // determine which sk and pk to use\n        let mut sk: Scalar = Scalar::empty();\n        let mut pk: Point = Point::empty();\n        if self.is_admin {\n            pk = recipient_keys.npk_m.to_point();\n            let nsk_app = context.request_nsk_app(admin_keys.npk_m.hash());\n            sk = from_field_unsafe(nsk_app);\n        } else {\n            pk = admin_keys.npk_m.to_point();\n            let nsk_app = context.request_nsk_app(recipient_keys.npk_m.hash());\n            sk = from_field_unsafe(nsk_app);\n        }\n        // derive the shared secret\n        let secret_bytes = point_to_symmetric_key(sk, pk);\n        // set the highest byte to be 0 to ensure that the secret is not too large\n        let mut resized: [u8; 31] = [0; 31];\n        for i in 0..31 {\n            resized[i] = secret_bytes[i + 1];\n        }\n        field_from_bytes(resized, true)\n    }\n\n    fn derive_nullifier_secret(self) -> Field {\n        // get pubkeys for the admin and recipient\n        let admin_keys = get_public_keys(self.admin);\n        let recipient_keys = get_public_keys(self.recipient);\n        // determine which sk and pk to use\n        let mut sk: Scalar = Scalar::empty();\n        let mut pk: Point = Point::empty();\n        if self.is_admin {\n            pk = recipient_keys.npk_m.to_point();\n            let nsk_app = get_nsk_app(admin_keys.npk_m.hash());\n            sk = from_field_unsafe(nsk_app);\n        } else {\n            pk = admin_keys.npk_m.to_point();\n            let nsk_app = get_nsk_app(recipient_keys.npk_m.hash());\n            sk = from_field_unsafe(nsk_app);\n        }\n        // derive the shared secret\n        let secret_bytes = point_to_symmetric_key(sk, pk);\n        // set the highest byte to be 0 to ensure that the secret is not too large\n        let mut resized: [u8; 31] = [0; 31];\n        for i in 0..31 {\n            resized[i] = secret_bytes[i + 1];\n        }\n        field_from_bytes(resized, false)\n    }\n\n    fn serialize_without_is_admin(self) -> [Field; RECURRING_ENTITLEMENT_NOTE_LENGTH] {\n        // serialize max_value and verifier_id together\n        let packed_bytes: [u8; 16] = self.max_value.to_le_bytes();\n        let packed = field_from_bytes(packed_bytes, true);\n        // return serialized content\n        [\n            self.admin.to_field(),\n            self.recipient.to_field(),\n            self.verifier_id as Field,\n            packed,\n            self.randomness\n        ]\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"354":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"355":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"442":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod test;\nmod types;\nmod verifiers;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\n#[aztec]\ncontract ZImburseRegistry {\n    use dep::aztec::{\n        prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map},\n        macros::{storage::storage, events::event, functions::{private, public, view, initializer}},\n        note::{\n        note_viewer_options::NoteViewerOptions, note_getter_options::NoteGetterOptions,\n        note_getter::{get_notes, view_notes}, constants::MAX_NOTES_PER_PAGE\n    },\n        protocol_types::{\n        contract_instance::ContractInstance, address::partial_address::PartialAddress,\n        contract_class_id::ContractClassId, abis::function_selector::FunctionSelector, traits::Serialize\n    },\n        oracle::{get_contract_instance::get_contract_instance, header::get_header_at_oracle},\n        keys::getters::get_public_keys, utils::comparison::Comparator,\n        encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note_unconstrained, encode_and_encrypt_note},\n        unencrypted_logs::unencrypted_event_emission::emit\n    };\n    use std::{meta::derive, collections::bounded_vec::BoundedVec};\n    use dep::address_note::address_note::AddressNote;\n    use dep::z_imburse_escrow::ZImburseEscrow;\n    use crate::{\n        types::{registry_definition::RegistryDefinition, participant_note::{ParticipantNote, NAME_LENGTH}},\n        BULK_KEY_LENGTH\n    };\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyHashRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        definition: SharedImmutable<RegistryDefinition, Context>,\n        escrow_registry: Map<AztecAddress, SharedImmutable<bool, Context>, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n        managed_escrows: PrivateSet<AddressNote, Context>,\n        participants: Map<AztecAddress, PrivateSet<ParticipantNote, Context>, Context>,\n        participant_escrows: PrivateSet<AddressNote, Context>,\n    }\n\n    /**\n     * Initialize the Z-Imburse registry contract\n     *\n     * @param usdc - The address of the USDC token\n     * @param contract_class_id - The class ID of the escrow contract that all escrows must be instances of\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys to add to the registry\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        usdc: AztecAddress,\n        escrow_contract_id: Field,\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // initialize the registry definition\n        let definition = RegistryDefinition::new(context.msg_sender(), usdc, escrow_contract_id);\n        storage.definition.initialize(definition);\n        // add any DKIM key hashes that were passed in at initialization\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(\n                    &mut context,\n                    DKIMKeyHashRegistered { dkim_key_hash: dkim_key_hashes[i], verifier_id: verifier_ids[i] }\n                );\n            }\n        }\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(\n                    &mut context,\n                    DKIMKeyHashRegistered { dkim_key_hash: dkim_key_hashes[i], verifier_id: verifier_ids[i] }\n                );\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(\n            &mut context,\n            DKIMKeyHashRegistered { dkim_key_hash, verifier_id }\n        );\n    }\n\n    /**\n     * Check the authenticity and deployment status of an escrow contract and register it in the Z-Imburse registry\n     * @dev the header will not include the contract address and the contract \n     *\n     * @param escrow_contract - the address of the escrow contract to register\n     */\n    #[private]\n    fn register_escrow(escrow_contract: AztecAddress) {\n        // check the contract class ID by recomputing the contract address\n        let definition = storage.definition.read_private();\n        let contract_instance: ContractInstance = unsafe {\n            get_contract_instance(escrow_contract)\n        };\n        let exected_escrow_address = AztecAddress::compute(\n            contract_instance.public_keys_hash,\n            PartialAddress::compute(\n                ContractClassId::from_field(definition.escrow_contract_id), // constrained here\n                contract_instance.salt,\n                contract_instance.initialization_hash,\n                contract_instance.deployer\n            )\n        );\n        assert(\n            exected_escrow_address == escrow_contract, \"Escrow contract class ID does not match expected class ID\"\n        );\n        // check that the contract has been deployed\n        // annoying that we can't use this in the deploy tx\n        context.historical_header.prove_contract_initialization(escrow_contract);\n\n        // check that the contract has not already been registered\n        let registration_status = storage.escrow_registry.at(escrow_contract).read_private();\n        assert(!registration_status, \"Escrow contract has already been registered\");\n\n        let escrow_params = ZImburseEscrow::at(escrow_contract).get_registration_params().view(&mut context);\n        assert(\n            escrow_params[0] == context.this_address(), \"Escrow contract registry does not match this contract\"\n        );\n        assert(escrow_params[1] == definition.usdc, \"Escrow contract USDC does not match registry USDC\");\n        assert(\n            escrow_params[2] == context.msg_sender(), \"Escrow contract admin does not match sender of message\"\n        );\n\n        // privately add the escrow contract to the list of managed escrows\n        let admin_keys = get_public_keys(context.msg_sender());\n        let mut escrow_note = AddressNote::new(escrow_contract, admin_keys.npk_m.hash());\n\n        // use unconstrained - why would you lie here\n        storage.managed_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                admin_keys.ovpk_m,\n                admin_keys.ivpk_m,\n                context.msg_sender()\n            )\n        );\n\n        // publicly add the escrow contract to the list of participant escrows\n        ZImburseRegistry::at(context.this_address()).set_contract_registered(escrow_contract).enqueue(&mut context);\n    }\n\n    /**\n     * Publicly set the contract registration status\n     *\n     * @param escrow_contract - the address of the escrow contract that has privately been constrained to be valid\n     */\n    #[public]\n    #[internal]\n    fn set_contract_registered(escrow_contract: AztecAddress) {\n        storage.escrow_registry.at(escrow_contract).initialize(true);\n    }\n\n    #[private]\n    fn check_and_register_participant(participant: AztecAddress, participant_name: str<60>, escrow: AztecAddress) -> bool{\n        // todo: switch to check that the sender is an escrow\n        // check that sender is admin\n        let admin = storage.definition.read_private().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        let is_registered = storage.escrow_registry.at(admin).read_private();\n        assert(is_registered, \"Sender is not an escrow contract\");\n        // check if the participant has already been registered\n        let options = NoteGetterOptions::new().select(AddressNote::properties().address, Comparator.EQ, participant).set_limit(1);\n        let participant_exists = storage.participants.at(escrow).get_notes(options).len() == 0;\n        // if the participant has not been registered, enqueue a private call to register the participant\n        // do this instead of if statement here to make adding first time expensive but cheap if already registered\n        let mut added = false;\n        if participant_exists {\n            added = true;\n            ZImburseRegistry::at(context.this_address()).register_participant(participant, participant_name, admin, escrow).call(&mut context);\n        }\n        added\n    }\n\n    #[private]\n    #[interal]\n    fn register_participant(participant: AztecAddress, participant_name: str<60>, admin: AztecAddress, escrow: AztecAddress) {\n        let admin_keys = get_public_keys(admin);\n        let participant_keys = get_public_keys(participant);\n        // add escrow to the participant's set of escrows\n        let mut escrow_note = AddressNote::new(escrow, participant_keys.npk_m.hash());\n        storage.participant_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note(\n                &mut context,\n                admin_keys.ovpk_m,\n                participant_keys.ivpk_m,\n                participant\n            )\n        );\n        // add the participant to the admin set of participants\n        let mut participant_note = ParticipantNote::new(participant, participant_name, admin_keys.npk_m.hash());\n        storage.participants.at(escrow).insert(&mut participant_note).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, admin)\n        );\n    }\n\n    // todo: add ability to remove participant\n    // todo: add ability to remove participant escrows by looking up nullifications\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n\n    /** Get the class ID that all escrow contracts must match */\n    #[public]\n    #[view]\n    fn get_escrow_class_id() -> Field {\n        storage.definition.read_public().escrow_contract_id\n    }\n\n    /** Get the registration status of an escrow contract */\n    #[public]\n    #[view]\n    fn get_escrow_registry_status(escrow_contract: AztecAddress) -> bool {\n        storage.escrow_registry.at(escrow_contract).read_public()\n    }\n\n    /**\n     * Get a page of the list of escrows administrated by a given address (private)\n     *\n     * @param admin - the address of the admin\n     * @param page_index - the index of the page to retrieve\n     * @return managed_escrows - the list of managed escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_managed_escrows(offset: u32) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.managed_escrows.view_notes(options);\n        let mut managed_escrows = BoundedVec::new();\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                managed_escrows.push(notes.get_unchecked(i).address);\n            }\n        }\n        (managed_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of escrows participated in by a given address (private)\n     *\n     * @param admin - the address of the participant\n     * @param page_index - the index of the page to retrieve\n     * @return participant_escrows - the list of enrolled escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_participant_escrows(\n        participant: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participant_escrows.view_notes(options);\n        let mut participant_escrows: BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE> = BoundedVec::new();\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                participant_escrows.push(notes.get_unchecked(i).address);\n            }\n        }\n        (participant_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of of participants in an escrow (private)\n     *\n     * @param admin - the address of the escrow\n     * @param page_index - the index of the page to retrieve\n     * @return participants - the list of participating addresses\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participants(\n        escrow: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<ParticipantNote, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participants.at(escrow).view_notes(options);\n        (notes, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n}\n\n"},"444":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_registry/src/types/registry_definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal REGISTRY_DEFINITION_LENGTH: u32 = 3;\n\npub struct RegistryDefinition {\n    admin: AztecAddress,\n    usdc: AztecAddress,\n    escrow_contract_id: Field\n}\n\nimpl Serialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn serialize(self: Self) -> [Field; REGISTRY_DEFINITION_LENGTH] {\n        [self.admin.to_field(), self.usdc.to_field(), self.escrow_contract_id]\n    }\n}\n\nimpl Deserialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn deserialize(fields: [Field; REGISTRY_DEFINITION_LENGTH]) -> Self {\n        RegistryDefinition {\n            admin: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            escrow_contract_id: fields[2]\n        }\n    }\n}\n\nimpl RegistryDefinition {\n    /**\n     * Create a new definition for a Z-Imburse escrow registry contract\n     *\n     * @param admin - The address that can add dkim keys to the registry\n     * @param usdc The address of the USDC token\n     * @param escrow_contract_id The ID of the escrow contract\n     * @return The new escrow registry definition\n     */\n    pub fn new(admin: AztecAddress, usdc: AztecAddress, escrow_contract_id: Field) -> Self {\n        RegistryDefinition { admin, usdc, escrow_contract_id }\n    }\n}\n"},"446":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_registry/src/types/participant_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator, traits::{Serialize, Deserialize}\n},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\nuse dep::compressed_string::CompressedString;\n\nglobal NAME_LENGTH: u32 = 60;\nglobal NAME_SERIALIZED_LENGTH: u32 = 2;\n\n#[note]\npub struct ParticipantNote {\n    address: AztecAddress,\n    name: [Field; 2],\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n\nimpl NullifiableNote for ParticipantNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for ParticipantNote {\n    // does not check for participant name\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl ParticipantNote {\n    pub fn new(address: AztecAddress, name: str<NAME_LENGTH>, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        let name_serialized: CompressedString<NAME_SERIALIZED_LENGTH, NAME_LENGTH> = CompressedString::from_string(name);\n        ParticipantNote { address, name: name_serialized.value, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_name(self) -> [u8; NAME_LENGTH] {\n        CompressedString::<NAME_SERIALIZED_LENGTH, NAME_LENGTH> { value: self.name }.to_bytes()\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"71":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"85":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"86":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"88":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"89":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"92":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"94":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"96":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"98":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"}}}
=======
{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseRegistry","functions":[{"name":"register_participant","is_unconstrained":false,"custom_attributes":["private","interal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim"],"assert_messages":{"329":"Array index out of bounds","637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","50":"Sender is not the registry contract","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","713":"attempt to add with overflow","457":"attempt to add with overflow","137":"Storage slot 0 not allowed. Storage slots must start from 1."}},{"name":"get_escrow_registry_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRQAAJAAEAQQkAAQABR8AAAAABQAAAAQAAAhDKwAIQwADIgAAAAkrAAADCEQ5AAAACEQAAAABHgAAAAUeAAAABjAAAAAABQAAAAYAAAAHJAACAQYKAAIHBgUhAAAQAAU6AQAAHgALAAYkAAcBBwoABwYHBSEAABUABToBAAAqAAAHJAAEBAYAAAQABgAkAQQBBwAABAcCBioABgUkAAcACCoCCAUAAAQFAgUqAggFAAAEBQIFKgIIBSoBBwYAAAQGAgYqAgYHKgEHBgAABAYCBioCBgcqAQcGAAAEBgIGKgIGByoBBwYAAAQGAgYqAgYHKgAABgAABAACACoCBwYqAAAHJAAEBQUAAAQABQAkAQQBBwAABAcCBSoABQkqAggJAAAECQIJKgIICQAABAkCCSoCCAkAAAQJAgkoAAcAAAAAAAAAAgAAAAAAAAAAAAoqAgoJKgEHBQAABAUCBSoCBQcqAAAFAAAEAAIAKgIHBSoAAAcAAAQAAgAkAAQACioCCgcqAAAJAAAEAAIAJAABAAsqAgsJJAAEAgwkAAQBDSQABwQOJAAEBA8kAAQDECoACgQgAFMMAAQEDBEhAADMABEgAFYqAQkMCgABDAsEIQAAWgAEOgEAACoACg4gAFwMAAQOEAwhAACjAAwgAF8qAQUMKgAAByQABAUGAAAEAAYAJAEEAQcAAAQMAgYkAAQEBAAABAcCAz4DAAAABgAAAAMqAgcFJAABAQUqAgUJAAAEBwIFAAAEBQoMKgEMCQoABwkIBwoAAQcLBSEAAHIABToBAAAqAAALJAAEAgcAAAQABwAkAQQBCwAABAsCByoABwUqAggFKgELBwAABAcCByoCBwsqAAAHAAAEAAIAKgILByoACg4gAIEKAAQOCgwhAACNAAwgAIQqAQcJAAAECQIIAAAECAoGKgEGBxwAAQcKHAAHCgkcAAEJByoABwMjKgEHDBwABw4LAAAHCQsILAAAAAAIAAAACyQABAEGDAAEDgYFIQAAlQAFOgEAACsAAAwIAyUABAACCAQiAAABVysACAUACAAABAgCBQAABAUOBioCCwYAAAQODQwOAAQODAshAACgAAs6AQAAKgIIByoADA4gAIEqAQcMDAAEDgwEIQAApwAEIADGKgEFDCoBBQQkAAQEEQwABA4REiEAAK0AEjoBAAAAAAQEAhIAAAQSDhEqAREDKgEGBCQABAMRDAAEDhETIQAAtQATOgEAAAAABAQCEwAABBMOESoBERIAAAcDEgQkAAQEAwwABA4DEyEAAL0AEzoBAAArAAAMCAMlAAQABQgEIgAAAVcrAAgFABIAAAQSAhMAAAQTDgMqAgQDKgISBSAAxgAABA4NDA4ABA4MBCEAAMoABDoBAAAqAAwOIABcDAAEBAwRIQAAzwARIAEoKgAAESQABAMSAAAEABIAJAEEAREAAAQRAhIqABITKgIOEwAABBMCEyoCAxMkAAQCEwwABAQTFCEAANwAFDoBAAAAAAQRAhQAAAQUBBMqARMSKgEJEQoAARELFCEAAOMAFDoBAAAqAQcRCgAEERAUIQAA/wAUIADnKgEGESoBBxMqAQcUJAAEAxYMAAQUFhchAADuABc6AQAAKwAAEQgDJQAEAAQIBCIAAAFXKwAIBQAVAAAEFQIXAAAEFxQWKgISFioBFRIAAAQSAhIqAhIVAAAEEw0SDgAEExIUIQAA/AAUOgEAACoCFQYqAhIHIAEoKgAKESABAQwABBEQEyEAAS4AEyABBCoBBhEqAQUTKgAAFCQABAUVAAAEABUAJAEEARQAAAQTAhUkAAQEFgAABBQCFz4DAAAAFQAAABcqARETAgAEEwITKgITESoBERMAAAQTAhMqAhMRKgEUEwAABBMCEyoCExQrAAARCAMlAAQABAgEIgAAAVcrAAgFABMAAAQTAhcAAAQXChYqAhIWKgETEQAABBECESoCERMqARQRAAAEEQIRKgIRFCoCEwYqAhQFKgINByABKAAABAQNEQ4ABAQREiEAASwAEjoBAAAqABEEIABTKgEHEwwABBETFCEAATIAFCABUSoBBRMqAQUUJAAEBBYMAAQRFhchAAE4ABc6AQAAAAAEFAIXAAAEFxEWKgEWFSoBBhQkAAQDFgwABBEWGCEAAUAAGDoBAAAAAAQUAhgAAAQYERYqARYXAAAHFRcUJAAEBBcMAAQRFxghAAFIABg6AQAAKwAAEwgDJQAEAAUIBCIAAAFXKwAIBQAVAAAEFQIYAAAEGBEXKgIUFyoCFQUgAVEAAAQRDRMOAAQRExQhAAFVABQ6AQAAKgATESABASsBCAMIBgsABAgGAAIIByEAAVsIByABXSsACAMIBSABaysAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAAFpCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAWAlAQQAAQgFIAFrIysAGMoYyg==","debug_symbols":"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","brillig_names":["get_escrow_registry_status"],"assert_messages":{"311":"Array index out of bounds","180":"Array index out of bounds","20":"Function get_escrow_registry_status can only be called statically","113":"Storage slot 0 not allowed. Storage slots must start from 1.","148":"Array index out of bounds","299":"attempt to add with overflow","340":"attempt to add with overflow","159":"attempt to add with overflow","188":"Array index out of bounds","319":"Array index out of bounds","237":"Array index out of bounds","327":"Array index out of bounds","219":"Array index out of bounds","251":"attempt to add with overflow","15":"Not initialized","172":"Array index out of bounds","201":"attempt to add with overflow"}},{"name":"get_participants","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"name","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"npk_m_hash","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}},{"name":"header","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::note::note_header::NoteHeader"}}],"kind":"struct","path":"types::participant_note::ParticipantNote"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_participants"]},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"set_contract_registered","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["set_contract_registered"],"assert_messages":{"180":"attempt to add with overflow","369":"Array index out of bounds","14":"Not initialized","139":"SharedImmutable already initialized","206":"Array index out of bounds","238":"Array index out of bounds","357":"attempt to add with overflow","398":"attempt to add with overflow","188":"Array index out of bounds","217":"attempt to add with overflow","246":"Array index out of bounds","19":"Function set_contract_registered can only be called internally","112":"Storage slot 0 not allowed. Storage slots must start from 1.","377":"Array index out of bounds","295":"Array index out of bounds","196":"attempt to add with overflow","385":"Array index out of bounds","277":"Array index out of bounds","309":"attempt to add with overflow","172":"Array index out of bounds","230":"Array index out of bounds","259":"attempt to add with overflow"}},{"name":"get_participant_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_participant_escrows"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"2426":"attempt to add with overflow","4986":"Array index out of bounds","2292":"Array index out of bounds","945":"Storage slot 0 not allowed. Storage slots must start from 1.","1969":"Array index out of bounds","2804":"Array index out of bounds","5230":"attempt to add with overflow","2725":"Array index out of bounds","354":"Array index out of bounds","3938":"Array index out of bounds","4962":"Array index out of bounds","4505":"attempt to add with overflow","4694":"Array index out of bounds","4371":"attempt to add with overflow","5151":"attempt to add with overflow","4749":"Array index out of bounds","5553":"Array index out of bounds","4292":"Array index out of bounds","2433":"Array index out of bounds","3134":"Array index out of bounds","4481":"Array index out of bounds","3000":"attempt to add with overflow","3512":"attempt to add with overflow","2354":"attempt to add with overflow","3701":"Array index out of bounds","4024":"attempt to add with overflow","3433":"attempt to add with overflow","3622":"Array index out of bounds","5048":"Array index out of bounds","5371":"attempt to add with overflow","660":"attempt to add with overflow","1873":"attempt to add with overflow","3409":"attempt to add with overflow","3732":"Array index out of bounds","4299":"Array index out of bounds","5457":"Array index out of bounds","2306":"attempt to add with overflow","3196":"Storage slot 0 not allowed. Storage slots must start from 1.","5110":"attempt to add with overflow","2227":"Array index out of bounds","1904":"attempt to add with overflow","1770":"Array index out of bounds","1179":"Function set_contract_registered can only be called internally","2203":"Array index out of bounds","4952":"attempt to add with overflow","1990":"attempt to add with overflow","3014":"Array index out of bounds","4038":"Array index out of bounds","4928":"Array index out of bounds","5062":"attempt to add with overflow","3959":"attempt to add with overflow","2100":"Array index out of bounds","5306":"Array index out of bounds","4526":"attempt to add with overflow","5361":"attempt to add with overflow","1832":"attempt to add with overflow","5574":"attempt to add with overflow","4770":"attempt to add with overflow","4447":"Array index out of bounds","217":"attempt to add with overflow","1430":"Not initialized","3344":"attempt to add with overflow","3021":"Array index out of bounds","4045":"Array index out of bounds","4880":"Array index out of bounds","571":"Initialization hash does not match","1784":"attempt to add with overflow","3832":"Array index out of bounds","5179":"Array index out of bounds","3375":"attempt to add with overflow","1705":"Array index out of bounds","2918":"Array index out of bounds","2595":"Array index out of bounds","4454":"Array index out of bounds","5478":"attempt to add with overflow","2138":"attempt to add with overflow","3351":"attempt to add with overflow","3863":"Array index out of bounds","1681":"Array index out of bounds","2193":"attempt to add with overflow","2382":"Array index out of bounds","2571":"Array index out of bounds","4186":"DKIM key has already been registered","5375":"Array index out of bounds","5564":"attempt to add with overflow","2169":"Array index out of bounds","3894":"attempt to add with overflow","365":"attempt to add with overflow","877":"Sender is not the registry contract","3949":"attempt to add with overflow","2468":"Array index out of bounds","4973":"attempt to add with overflow","5138":"Array index out of bounds","2633":"Array index out of bounds","5382":"Array index out of bounds","963":"DKIM key has already been registered","3200":"Array index out of bounds","4547":"Array index out of bounds","2475":"Array index out of bounds","3499":"Array index out of bounds","4066":"attempt to add with overflow","5468":"attempt to add with overflow","1238":"Storage slot 0 not allowed. Storage slots must start from 1.","3853":"attempt to add with overflow","3530":"Array index out of bounds","5578":"Array index out of bounds","1860":"Array index out of bounds","2561":"attempt to add with overflow","1915":"Array index out of bounds","3963":"Array index out of bounds","2537":"Array index out of bounds","166":"attempt to add with overflow","2214":"attempt to add with overflow","3750":"Array index out of bounds","1434":"Function get_escrow_class_id can only be called statically","5585":"Array index out of bounds","142":"attempt to add with overflow","3970":"Array index out of bounds","4994":"Array index out of bounds","1977":"Array index out of bounds","118":"attempt to add with overflow","2733":"Array index out of bounds","5482":"Array index out of bounds","2788":"Array index out of bounds","3812":"attempt to add with overflow","2142":"Array index out of bounds","4001":"attempt to add with overflow","2008":"Array index out of bounds","3032":"attempt to add with overflow","4056":"attempt to add with overflow","4190":"Array index out of bounds","2764":"Array index out of bounds","4489":"attempt to add with overflow","4568":"attempt to add with overflow","771":"Sender is not the registry contract","4678":"Array index out of bounds","4757":"Array index out of bounds","5403":"attempt to add with overflow","3764":"attempt to add with overflow","3441":"Array index out of bounds","3630":"Array index out of bounds","4465":"attempt to add with overflow","4788":"Array index out of bounds","2149":"Array index out of bounds","3685":"Array index out of bounds","3039":"Array index out of bounds","1692":"attempt to add with overflow","3874":"attempt to add with overflow","2582":"attempt to add with overflow","4252":"Storage slot 0 not allowed. Storage slots must start from 1.","5489":"Array index out of bounds","3661":"Array index out of bounds","2826":"Array index out of bounds","2503":"Array index out of bounds","1022":"Storage slot 0 not allowed. Storage slots must start from 1.","2235":"Array index out of bounds","4070":"Array index out of bounds","5338":"attempt to add with overflow","5015":"attempt to add with overflow","5393":"attempt to add with overflow","2510":"Array index out of bounds","4936":"attempt to add with overflow","2754":"attempt to add with overflow","2108":"Array index out of bounds","3321":"Array index out of bounds","4400":"attempt to add with overflow","4077":"Array index out of bounds","5290":"Array index out of bounds","2651":"Array index out of bounds","4888":"Array index out of bounds","4431":"attempt to add with overflow","1926":"attempt to add with overflow","3651":"attempt to add with overflow","3840":"Array index out of bounds","5510":"attempt to add with overflow","4407":"attempt to add with overflow","1713":"Array index out of bounds","2926":"Array index out of bounds","2603":"Array index out of bounds","5163":"Array index out of bounds","5407":"Array index out of bounds","1500":"attempt to add with overflow","2713":"attempt to add with overflow","3548":"Array index out of bounds","5596":"attempt to add with overflow","2256":"attempt to add with overflow","2957":"Array index out of bounds","3981":"attempt to add with overflow","2177":"attempt to add with overflow","2366":"Array index out of bounds","2665":"attempt to add with overflow","1318":"attempt to add with overflow","5414":"Array index out of bounds","4256":"Array index out of bounds","3610":"attempt to add with overflow","2775":"attempt to add with overflow","2129":"attempt to add with overflow","4555":"Array index out of bounds","1160":"attempt to add with overflow","5445":"attempt to add with overflow","5122":"Array index out of bounds","5500":"attempt to add with overflow","2160":"attempt to add with overflow","4909":"attempt to add with overflow","1514":"Not initialized","2026":"Array index out of bounds","2404":"attempt to add with overflow","3050":"Array index out of bounds","3562":"attempt to add with overflow","3483":"Array index out of bounds","3672":"attempt to add with overflow","4586":"Array index out of bounds","844":"attempt to add with overflow","1734":"attempt to add with overflow","2947":"attempt to add with overflow","2624":"attempt to add with overflow","3459":"Array index out of bounds","4806":"Array index out of bounds","820":"attempt to add with overflow","1332":"Not initialized","1844":"Array index out of bounds","2545":"attempt to add with overflow","2088":"attempt to add with overflow","3112":"Storage slot 0 not allowed. Storage slots must start from 1.","2978":"attempt to add with overflow","2844":"Array index out of bounds","2521":"attempt to add with overflow","1174":"Not initialized","3222":"SharedImmutable already initialized","3356":"Array index out of bounds","5002":"Array index out of bounds","5514":"Array index out of bounds","4868":"attempt to add with overflow","2040":"attempt to add with overflow","2741":"Array index out of bounds","4088":"attempt to add with overflow","2796":"Array index out of bounds","1961":"Array index out of bounds","3363":"Array index out of bounds","858":"Not initialized","1882":"attempt to add with overflow","2906":"attempt to add with overflow","1937":"Array index out of bounds","4497":"Array index out of bounds","4686":"Array index out of bounds","4820":"attempt to add with overflow","4741":"Array index out of bounds","3906":"Array index out of bounds","4095":"Array index out of bounds","5198":"Array index out of bounds","3449":"attempt to add with overflow","3638":"Array index out of bounds","3315":"attempt to add with overflow","5521":"Array index out of bounds","3693":"Array index out of bounds","2858":"attempt to add with overflow","4717":"Array index out of bounds","3236":"Array index out of bounds","3425":"Array index out of bounds","2456":"attempt to add with overflow","597":"SharedImmutable already initialized","2968":"attempt to add with overflow","2243":"Array index out of bounds","2487":"attempt to add with overflow","5425":"attempt to add with overflow","1518":"Function get_escrow_registry_status can only be called statically","3243":"Array index out of bounds","2408":"Array index out of bounds","2274":"Array index out of bounds","2463":"attempt to add with overflow","4377":"Array index out of bounds","4944":"Array index out of bounds","2116":"Array index out of bounds","2817":"attempt to add with overflow","1336":"Function check_dkim_key_hash_public can only be called statically","5298":"Array index out of bounds","2415":"Array index out of bounds","1257":"SharedImmutable already initialized","2982":"Array index out of bounds","4707":"attempt to add with overflow","4896":"Array index out of bounds","5030":"Array index out of bounds","5542":"attempt to add with overflow","343":"attempt to add with overflow","3927":"attempt to add with overflow","3470":"attempt to add with overflow","3714":"attempt to add with overflow","3391":"Array index out of bounds","4604":"Array index out of bounds","1721":"Array index out of bounds","2934":"Array index out of bounds","2611":"Array index out of bounds","752":"Not initialized","2989":"Array index out of bounds","3824":"Array index out of bounds","4013":"Array index out of bounds","5171":"Array index out of bounds","1886":"Array index out of bounds","1752":"Array index out of bounds","2185":"Array index out of bounds","2374":"Array index out of bounds","3398":"Array index out of bounds","3130":"DKIM key has already been registered","4666":"attempt to add with overflow","1893":"Array index out of bounds","1948":"attempt to add with overflow","5532":"attempt to add with overflow","3917":"attempt to add with overflow","4106":"Array index out of bounds","711":"attempt to add with overflow","4618":"attempt to add with overflow","577":"Initializer address is not the contract deployer","5130":"Array index out of bounds","4539":"Array index out of bounds","4728":"attempt to add with overflow","309":"attempt to add with overflow","5319":"attempt to add with overflow","1577":"Storage slot 0 not allowed. Storage slots must start from 1.","5350":"Array index out of bounds","3491":"Array index out of bounds","4515":"Array index out of bounds","5216":"Array index out of bounds","1041":"SharedImmutable already initialized","4168":"Storage slot 0 not allowed. Storage slots must start from 1.","5192":"attempt to add with overflow","3010":"attempt to add with overflow","4034":"attempt to add with overflow","1852":"Array index out of bounds","2553":"Array index out of bounds","4278":"SharedImmutable already initialized","1395":"Storage slot 0 not allowed. Storage slots must start from 1.","4412":"Array index out of bounds","5546":"Array index out of bounds","5278":"attempt to add with overflow","347":"Array index out of bounds","2395":"attempt to add with overflow","3931":"Array index out of bounds","4419":"Array index out of bounds"}},{"name":"check_and_register_participant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_notes_internal","get_collapse_hints","pack_arguments_oracle_wrapper","call_private_function_internal","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"get_managed_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_managed_escrows"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":18,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"register_escrow","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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b7redL3petP1putN15uuN11vul4/1ktZN3adLeHZO2qOB2ak+1e63nS96XrT9abrTdebrjddb7pef9ZLWHfVtfngAL4RnSMdx3S96XrT9abrTdebrjddb7redL3petP1putN15uuN11vut50vel60/Wm603Xm643XW+63nS96XqJ666L5/yOEvAiT84XT6brTdebrjddb7redL3petP1putN1+ulXsK6q57zQ08gsF3S9abrTdebrjddb7redL3petP1putN15uuN11vut50ven7nLs46v4v/qiihHeucLQjVX+yKkpi8YpICXW9XHw1bW6+5O93F/DMwOAM/3PcPv1cQ7redL3petP1putN15uuN11vul6f1ktYd9U8d2kA34jOkY5jut50vel60/Wm603Xm643XW+63nS96XrT9abrTdebrjddb7redL3petP1putN15uuN11vut50vel60/Wm603Xm643XW+63nS96XrT9abrTdebrjddb7redL11UG+67nTd6bqT29Rz9DkBfOPin65XZr1cdVN/JzpbCM8cITxzhfDME8IzXwjPAiE86wvh2UAIz4ZCeDYSwrOxEJ5NhPBsKoTnNkJ4NhPCs7kQni2E8GwphGcrITy3FcJzOyE8Wwvhub0QnjsQ8jTfM+jcONoiXW+63nS96XrT9abrTdebrjddb7redL3petP1putN15uuN11vut50vel60/X++/VS1q3WmZsE8E1au6TrTdebrjdd7/9LvZR1K51vEMA3ae2Srjddb7peuTrUPIBv0tolXW+63nS96XrT9abr3Vq9Un7jl5rn3AIZPBcK4cnx+9PmJqDuEs72bSOkHwSF8LSE8AwJ4bmbEJ67C+HZTQhPwrqCmQbP5QU214xN/z8W/r8CcBxgJeB4wAmAEwEnAU4GnAI4FXAaYBXgdMAZgDMBZwHOBpwDOBdwHuB8wAWACwEXAS4GXAK4FHAZ4HLAFYArAVcBrgZcA7gWsBpwHeB6wA2AGwE3AW4GrAHcArgVcBvgdsAdgDsBdwHuBqwF3AO4F3Af4H7AA4AHAesA6wEPAR4GPAJ4FPAY4HHABsATgCcBTwGeBjwDeBbwHGAj4HnAC4AXAS8BXga8AngV8BrgdcAbgDcBbwHeBrwDeBfwHuB9wAeADwEfAT4GfAL4FPAZ4HPAF4AvAV8BvgZ8A/gW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","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_contract_instance_internal","get_nullifier_membership_witness","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_integer_quotient","directive_invert"]},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim_bulk"],"assert_messages":{"326":"Array index out of bounds","573":"Array index out of bounds","762":"attempt to add with overflow","515":"Array index out of bounds","488":"Array index out of bounds","549":"Array index out of bounds","290":"Array index out of bounds","741":"attempt to add with overflow","220":"DKIM key has already been registered","930":"Array index out of bounds","854":"attempt to add with overflow","83":"Sender is not the registry contract","531":"Array index out of bounds","333":"Array index out of bounds","202":"Storage slot 0 not allowed. Storage slots must start from 1.","589":"Array index out of bounds","720":"Array index out of bounds","129":"Array index out of bounds","446":"Array index out of bounds","638":"Array index out of bounds","312":"SharedImmutable already initialized","775":"Array index out of bounds","434":"attempt to add with overflow","751":"Array index out of bounds","620":"Array index out of bounds","943":"attempt to add with overflow","964":"attempt to add with overflow","224":"Array index out of bounds","602":"attempt to add with overflow","791":"Array index out of bounds","922":"Array index out of bounds","465":"attempt to add with overflow","523":"attempt to add with overflow","712":"Array index out of bounds","453":"Array index out of bounds","581":"Array index out of bounds","840":"Array index out of bounds","700":"attempt to add with overflow","441":"attempt to add with overflow","822":"Array index out of bounds","499":"attempt to add with overflow","560":"attempt to add with overflow","48":"Not initialized","953":"Array index out of bounds","804":"attempt to add with overflow","481":"Array index out of bounds","286":"Storage slot 0 not allowed. Storage slots must start from 1.","539":"attempt to add with overflow","411":"Array index out of bounds","405":"attempt to add with overflow","914":"Array index out of bounds","728":"Array index out of bounds","783":"Array index out of bounds","140":"Array index out of bounds","902":"attempt to add with overflow","652":"attempt to add with overflow"}},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow_contract_id","type":{"kind":"field"},"visibility":"private"},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"","brillig_names":["constructor"],"assert_messages":{"768":"attempt to add with overflow","1085":"Array index out of bounds","1341":"attempt to add with overflow","1658":"Array index out of bounds","1560":"attempt to add with overflow","1646":"attempt to add with overflow","1256":"Array index out of bounds","1506":"Array index out of bounds","799":"attempt to add with overflow","153":"Array index out of bounds","787":"Array index out of bounds","915":"Array index out of bounds","1354":"Array index out of bounds","775":"attempt to add with overflow","1598":"attempt to add with overflow","1531":"Array index out of bounds","1330":"Array index out of bounds","1519":"attempt to add with overflow","745":"Array index out of bounds","873":"attempt to add with overflow","739":"attempt to add with overflow","1062":"Array index out of bounds","1117":"Array index out of bounds","1312":"Array index out of bounds","404":"SharedImmutable already initialized","660":"Array index out of bounds","142":"attempt to add with overflow","849":"Array index out of bounds","1416":"Array index out of bounds","1666":"Array index out of bounds","1398":"Array index out of bounds","1075":"attempt to add with overflow","624":"Array index out of bounds","1264":"Array index out of bounds","667":"Array index out of bounds","923":"Array index out of bounds","1362":"Array index out of bounds","1490":"Array index out of bounds","972":"Array index out of bounds","1478":"attempt to add with overflow","1539":"Array index out of bounds","1277":"attempt to add with overflow","954":"Array index out of bounds","558":"Array index out of bounds","936":"attempt to add with overflow","1125":"Array index out of bounds","1320":"attempt to add with overflow","857":"attempt to add with overflow","1046":"Array index out of bounds","1174":"Array index out of bounds","1296":"Array index out of bounds","1430":"attempt to add with overflow","1034":"attempt to add with overflow","1674":"Array index out of bounds","1156":"Array index out of bounds","833":"attempt to add with overflow","894":"attempt to add with overflow","1138":"attempt to add with overflow","815":"Array index out of bounds","620":"Storage slot 0 not allowed. Storage slots must start from 1.","108":"attempt to add with overflow","1248":"Array index out of bounds","474":"Array index out of bounds","986":"attempt to add with overflow","1236":"attempt to add with overflow","1370":"Array index out of bounds","1498":"Array index out of bounds","907":"Array index out of bounds","1096":"attempt to add with overflow","1547":"Array index out of bounds","1687":"attempt to add with overflow","377":"Initializer address is not the contract deployer","822":"Array index out of bounds","371":"Initialization hash does not match","883":"Array index out of bounds","1584":"Array index out of bounds","554":"DKIM key has already been registered","1383":"attempt to add with overflow","1188":"attempt to add with overflow","164":"attempt to add with overflow","1566":"Array index out of bounds","865":"Array index out of bounds","1054":"Array index out of bounds","536":"Storage slot 0 not allowed. Storage slots must start from 1.","1109":"Array index out of bounds","146":"Array index out of bounds","463":"Array index out of bounds","780":"Array index out of bounds","1304":"attempt to add with overflow","646":"SharedImmutable already initialized"}},{"name":"get_escrow_class_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQQKAAIGBAUhAAAPAAU6AQAAHgALAAQkAAcBBgoABwQGBSEAABQABToBAAAqAAAEJAAEBAUAAAQABQAkAQQBBAAABAQCBSoABQckAAcACCoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBAUAAAQFAgUqAgUEKgAABQAABAACACoCBAUkAAQBCCQABAMEJAAEAAcqAAcDIAArDAAEAwQHIQAANAAHIAAuKgEFBCQABAIFAAAEBAIGAAAEBgUHKgEHAyMqAQUHHAAHAwkAAAcGCQosAAAAAAoAAAAJJAAEAwsMAAQDCwwhAAA8AAw6AQAAKwAABwgDJQAEAAQIBCIAAABKKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMICQ4ABAMJByEAAEcABzoBAAAqAgoFKgAJAyAAKysBCAMIBgsABAgGAAIIByEAAE4IByAAUCsACAMIBSAAXisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABcCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAFMlAQQAAQgFIABeIysAGMoYyg==","debug_symbols":"1ZrRTuMwEEX/Jc99sMdje6a/slqhFFoUKUpRW1ZaVf13EkhMIJUjCgXuS9W015k5sTPXGeVY3K1Xj/c3VbPZ7ovln2NRb2/LQ7Vt2qPjaVGsdlVdV/c3458L033Is3z/UDbd0f5Q7g7F0kbiRbFu7rqvjtsTbKp6XSyZ6bSYqNXFXqw+Jq3157RMVnsxE8mr2oYz6iDW9eogpG/UfxeFfj53a2xSm5H6G7K35gsufRwiqM5deks8iC2pziQv1g95iB2fu0/efmXy7aV/m30Xga4ewV09Al89gv98BO91COGDmVsYUcj36igsk4URPppQNyheMkguGaQXDKLzdyqxDemGYg5zpaYtAimIGc1kVxqmk6JhKDVe1cxMio/ODuro6P2kkEUHIHQAhw7A6AAeHSCgA0R0AEEHUHAAh+7EDt2JHboTO3QnduhO7NCd2KE7sUN3Yga4ib0kAD9p/jDAEoqcAMRMAH5kCaWeVDDGzzUqUldDDI3y4Of0BTt9hU7fG+z0AfZA2erjf3/5FJvqv5CdAPDvnwENOQCAPZC4VwCaUSu7YcEpxykuut15gB1THgCgd5EHAOhdZAECQO8iDwDQu8gDAPh2HgDgsScPAODbeQAA384DoDtxQHfigO7EAd2JI7oTR2wnPrWH/8pdVa7qdf+C2uaxuR29r3b4//DyTyt+Ag==","brillig_names":["get_escrow_class_id"],"assert_messages":{"14":"Not initialized","59":"Array index out of bounds","70":"attempt to add with overflow","19":"Function get_escrow_class_id can only be called statically"}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d8f1a923"},{"kind":"string","value":"RecurringEntitlementNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b3dd3286"},{"kind":"string","value":"ParticipantNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrow"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"recurring_entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"entitlement_nullifiers","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseRegistry"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"escrow_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"managed_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"participants","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"participant_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::DKIMKeyHashRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow_contract_id","type":{"kind":"field"}},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_parameters"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_abi"}]}},"file_map":{"100":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"},"101":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"104":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"105":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"108":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"109":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"111":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"112":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"116":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"128":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"129":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"134":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"135":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"144":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"146":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"150":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::{NoteInterface, NullifiableNote}}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = unsafe {\n            get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier)\n        };\n\n        // 2) First we prove that the tree leaf in the witness is present in the nullifier tree. This is expected to be\n        // the leaf that contains the nullifier we're proving inclusion for.\n        assert(\n            self.state.partial.nullifier_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n\n        // 3) Then we simply check that the value in the leaf is the expected one. Note that we don't need to perform\n        // any checks on the rest of the values in the leaf preimage (the next index or next nullifier), since all we\n        // care about is showing that the tree contains an entry with the expected nullifier.\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, let N: u32>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N> + NullifiableNote;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, let N: u32>(\n        self,\n        note: Note,\n        context: &mut PrivateContext\n    ) where Note: NoteInterface<N> + NullifiableNote {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"152":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"155":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LTE, rhs), \"Expected lhs to not be less than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n    }\n}\n"},"156":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"158":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"161":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"162":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"163":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"166":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"167":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"168":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n"},"169":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"171":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"172":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"174":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"175":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"176":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"177":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"189":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"191":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"192":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"201":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"207":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"208":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"209":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"211":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"212":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"214":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"234":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"236":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"239":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"265":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"286":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"290":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"309":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"328":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        debug_log_oracle_wrapper(msg, args)\n    };\n}\n\nunconstrained pub fn debug_log_oracle_wrapper<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"},"334":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/recurring_entitlement_note.nr","source":"use dep::aztec::protocol_types::{\n    address::AztecAddress, traits::{Serialize, Deserialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_bytes}, utils::field::field_from_bytes,\n    scalar::Scalar, point::Point\n};\nuse dep::aztec::note::utils::compute_note_hash_for_nullify;\nuse dep::aztec::oracle::random::random;\nuse dep::aztec::macros::notes::note_custom_interface;\nuse dep::aztec::prelude::{NoteHeader, NullifiableNote, NoteInterface, PrivateContext};\nuse dep::aztec::keys::{getters::{get_public_keys, get_nsk_app}, point_to_symmetric_key::point_to_symmetric_key};\nuse dep::compressed_string::CompressedString;\nuse std::embedded_curve_ops::multi_scalar_mul;\nuse std::hash::from_field_unsafe;\nuse dep::generators::GENERATORS;\n\n// serializes verifier_id and max_value into one field element\nglobal RECURRING_ENTITLEMENT_NOTE_LENGTH: u32 = 4;\n\n#[note_custom_interface]\npub struct RecurringEntitlementNote {\n    // the user that is allowed to use this entitlement\n    recipient: AztecAddress,\n    // the type of receipt verifier that this entitlement can be used for\n    verifier_id: u8,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // blinding factor & nullifier secret for the note\n    randomness: Field,\n}\n\nimpl NoteInterface<RECURRING_ENTITLEMENT_NOTE_LENGTH> for RecurringEntitlementNote {\n\n    fn serialize_content(self) -> [Field; RECURRING_ENTITLEMENT_NOTE_LENGTH] {\n        // // serialize max_value and verifier_id together\n        // let max_value_bytes: [u8; 16] = self.max_value.to_be_bytes();\n        // let mut packed_bytes: [u8; 17] = [0; 17];\n        // for i in 0..16 {\n        //     packed_bytes[i] = max_value_bytes[i];\n        // }\n        // packed_bytes[16] = self.is_admin as u8;\n        // let packed = field_from_bytes(packed_bytes, true);\n        // return serialized content\n        [\n            self.recipient.to_field(),\n            self.verifier_id as Field,\n            self.max_value.to_integer(),\n            self.randomness\n        ]\n    }\n\n    fn deserialize_content(serialized_note: [Field; RECURRING_ENTITLEMENT_NOTE_LENGTH]) -> RecurringEntitlementNote {\n        // // unpack verifier_id and max_value\n        // let packed = serialized_note[2];\n        // let packed_bytes: [u8; 17] = packed.to_be_bytes();\n        // let is_admin = packed_bytes[16] == 1;\n        // let mut max_value_bytes: [u8; 16] = [0; 16];\n        // for i in 0..16 {\n        //     max_value_bytes[i] = packed_bytes[i];\n        // }\n        // let max_value = U128::from_be_bytes(max_value_bytes);\n        // return deserialized note\n        RecurringEntitlementNote {\n            recipient: AztecAddress::from_field(serialized_note[0]),\n            verifier_id: serialized_note[1] as u8,\n            max_value: U128::from_integer(serialized_note[2]),\n            randomness: serialized_note[3],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn to_be_bytes(self, storage_slot: Field) -> [u8; RECURRING_ENTITLEMENT_NOTE_LENGTH * 32 + 64] {\n        let serialized_note = self.serialize_content();\n        let mut buffer: [u8; RECURRING_ENTITLEMENT_NOTE_LENGTH * 32 + 64] = [0; RECURRING_ENTITLEMENT_NOTE_LENGTH * 32 + 64];\n        let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n        let note_type_id_bytes: [u8; 32] = RecurringEntitlementNote::get_note_type_id().to_be_bytes();\n        for i in 0..32 {\n            buffer[i] = storage_slot_bytes[i];\n            buffer[32 + i] = note_type_id_bytes[i];\n        }\n        for i in 0..serialized_note.len() {\n            let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n            for j in 0..32 {\n                buffer[64 + i * 32 + j] = bytes[j];\n            }\n        }\n        buffer\n    }\n\n    fn get_note_type_id() -> Field {\n        comptime\n        {\n            let bytes = \"RecurringEntitlementNote\".as_bytes();\n            let hash = poseidon2_hash_bytes(bytes);\n            let hash_bytes = hash.to_be_bytes::<4>();\n            field_from_bytes(hash_bytes, true)\n        }\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn compute_note_hash(self) -> Field {\n        let serialized = self.serialize_content();\n        std::embedded_curve_ops::multi_scalar_mul(\n            [GENERATORS[0], GENERATORS[1], GENERATORS[2], GENERATORS[3]],\n            [\n            from_field_unsafe(serialized[0]),\n            from_field_unsafe(serialized[1]),\n            from_field_unsafe(serialized[2]),\n            from_field_unsafe(serialized[3]),\n        ]).x\n    }\n}\n\nimpl NullifiableNote for RecurringEntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = self.randomness; // use as nullifier_secret so that admin and recipient can nullify\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = self.randomness; // use as nullifier secret so that admin and recipient can nullify\n        dep::aztec::oracle::debug_log::debug_log_format(\"\\n\\nNote_hash_for_nullify: {0}/n secret: {1}\\n\\n\", [note_hash_for_nullify, secret]);\n\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for RecurringEntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient)\n            & (self.max_value == other.max_value)\n            & (self.randomness == other.randomness)\n            & (self.verifier_id == other.verifier_id)\n    }\n}\n\nimpl RecurringEntitlementNote {\n    /**\n     * Entitlement Receipt, shadows an entitlement send to a recepient\n     * Cannot be used to claim a reimbursement, but can be used to nullify the sent entitlement\n     *\n     * @param recipient - the address of the recipient of the entitlement (NOT THE OWNER OF THE NOTE)\n     * @param verifier_id - the type of verifier that the entitlement can be used for\n     * @param max_value - the maximum value that can be withdrawn from the escrow using the entitlement\n     * @param randomness - blinding factor for the note (inputted since must be same between the two notes)\n     */\n    fn new(\n        recipient: AztecAddress,\n        verifier_id: u8,\n        max_value: U128,\n        randomness: Field\n    ) -> Self {\n        Self { recipient, verifier_id, max_value, randomness, header: NoteHeader::empty() }\n    }\n\n    /**\n     * Derives the nullifier for recurring notes\n     * @dev recurring notes are nullified for a scope (month) without destroying the ntoe\n     *      prove nullifier non-inclusion to use\n     *\n     * @param timestamp - the timestamp (month/ year) from the email receipt verifier\n     * @return - the month nullifier for the note\n     */\n    fn derive_recurring_nullifier(self, timestamp: Field) -> Field {\n        let base_nullifier_secret = self.randomness; //todo: switch to regular nullifier\n        poseidon2_hash_with_separator(\n            [\n            base_nullifier_secret,\n            timestamp\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"354":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"355":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"442":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod test;\nmod types;\nmod verifiers;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\n#[aztec]\ncontract ZImburseRegistry {\n    use dep::aztec::{\n        prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map},\n        macros::{storage::storage, events::event, functions::{private, public, view, initializer}},\n        note::{\n        note_viewer_options::NoteViewerOptions, note_getter_options::NoteGetterOptions,\n        note_getter::{get_notes, view_notes}, constants::MAX_NOTES_PER_PAGE\n    },\n        protocol_types::{\n        contract_instance::ContractInstance, address::partial_address::PartialAddress,\n        contract_class_id::ContractClassId, abis::function_selector::FunctionSelector, traits::Serialize\n    },\n        oracle::{get_contract_instance::get_contract_instance, header::get_header_at_oracle},\n        keys::getters::get_public_keys, utils::comparison::Comparator,\n        encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note_unconstrained, encode_and_encrypt_note},\n        unencrypted_logs::unencrypted_event_emission::emit\n    };\n    use std::{meta::derive, collections::bounded_vec::BoundedVec};\n    use dep::address_note::address_note::AddressNote;\n    use dep::z_imburse_escrow::ZImburseEscrow;\n    use crate::{\n        types::{registry_definition::RegistryDefinition, participant_note::{ParticipantNote, NAME_LENGTH}},\n        BULK_KEY_LENGTH\n    };\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyHashRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        definition: SharedImmutable<RegistryDefinition, Context>,\n        escrow_registry: Map<AztecAddress, SharedImmutable<bool, Context>, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n        managed_escrows: PrivateSet<AddressNote, Context>,\n        participants: Map<AztecAddress, PrivateSet<ParticipantNote, Context>, Context>,\n        participant_escrows: PrivateSet<AddressNote, Context>,\n    }\n\n    /**\n     * Initialize the Z-Imburse registry contract\n     *\n     * @param usdc - The address of the USDC token\n     * @param contract_class_id - The class ID of the escrow contract that all escrows must be instances of\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys to add to the registry\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        usdc: AztecAddress,\n        escrow_contract_id: Field,\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // initialize the registry definition\n        let definition = RegistryDefinition::new(context.msg_sender(), usdc, escrow_contract_id);\n        storage.definition.initialize(definition);\n        // add any DKIM key hashes that were passed in at initialization\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(\n                    &mut context,\n                    DKIMKeyHashRegistered { dkim_key_hash: dkim_key_hashes[i], verifier_id: verifier_ids[i] }\n                );\n            }\n        }\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(\n                    &mut context,\n                    DKIMKeyHashRegistered { dkim_key_hash: dkim_key_hashes[i], verifier_id: verifier_ids[i] }\n                );\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(\n            &mut context,\n            DKIMKeyHashRegistered { dkim_key_hash, verifier_id }\n        );\n    }\n\n    /**\n     * Check the authenticity and deployment status of an escrow contract and register it in the Z-Imburse registry\n     * @dev the header will not include the contract address and the contract \n     *\n     * @param escrow_contract - the address of the escrow contract to register\n     */\n    #[private]\n    fn register_escrow(escrow_contract: AztecAddress) {\n        // check the contract class ID by recomputing the contract address\n        let definition = storage.definition.read_private();\n        let contract_instance: ContractInstance = unsafe {\n            get_contract_instance(escrow_contract)\n        };\n        let exected_escrow_address = AztecAddress::compute(\n            contract_instance.public_keys_hash,\n            PartialAddress::compute(\n                ContractClassId::from_field(definition.escrow_contract_id), // constrained here\n                contract_instance.salt,\n                contract_instance.initialization_hash,\n                contract_instance.deployer\n            )\n        );\n        assert(\n            exected_escrow_address == escrow_contract, \"Escrow contract class ID does not match expected class ID\"\n        );\n        // check that the contract has been deployed\n        // annoying that we can't use this in the deploy tx\n        context.historical_header.prove_contract_initialization(escrow_contract);\n\n        // check that the contract has not already been registered\n        let registration_status = storage.escrow_registry.at(escrow_contract).read_private();\n        assert(!registration_status, \"Escrow contract has already been registered\");\n\n        let escrow_params = ZImburseEscrow::at(escrow_contract).get_registration_params().view(&mut context);\n        assert(\n            escrow_params[0] == context.this_address(), \"Escrow contract registry does not match this contract\"\n        );\n        assert(escrow_params[1] == definition.usdc, \"Escrow contract USDC does not match registry USDC\");\n        assert(\n            escrow_params[2] == context.msg_sender(), \"Escrow contract admin does not match sender of message\"\n        );\n\n        // privately add the escrow contract to the list of managed escrows\n        let admin_keys = get_public_keys(context.msg_sender());\n        let mut escrow_note = AddressNote::new(escrow_contract, admin_keys.npk_m.hash());\n\n        // use unconstrained - why would you lie here\n        storage.managed_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                admin_keys.ovpk_m,\n                admin_keys.ivpk_m,\n                context.msg_sender()\n            )\n        );\n\n        // publicly add the escrow contract to the list of participant escrows\n        ZImburseRegistry::at(context.this_address()).set_contract_registered(escrow_contract).enqueue(&mut context);\n    }\n\n    /**\n     * Publicly set the contract registration status\n     *\n     * @param escrow_contract - the address of the escrow contract that has privately been constrained to be valid\n     */\n    #[public]\n    #[internal]\n    fn set_contract_registered(escrow_contract: AztecAddress) {\n        storage.escrow_registry.at(escrow_contract).initialize(true);\n    }\n\n    #[private]\n    fn check_and_register_participant(participant: AztecAddress, participant_name: str<60>, escrow: AztecAddress) -> bool{\n        // todo: switch to check that the sender is an escrow\n        // check that sender is admin\n        let admin = storage.definition.read_private().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        let is_registered = storage.escrow_registry.at(admin).read_private();\n        assert(is_registered, \"Sender is not an escrow contract\");\n        // check if the participant has already been registered\n        let options = NoteGetterOptions::new().select(AddressNote::properties().address, Comparator.EQ, participant).set_limit(1);\n        let participant_exists = storage.participants.at(escrow).get_notes(options).len() == 0;\n        // if the participant has not been registered, enqueue a private call to register the participant\n        // do this instead of if statement here to make adding first time expensive but cheap if already registered\n        let mut added = false;\n        if participant_exists {\n            added = true;\n            ZImburseRegistry::at(context.this_address()).register_participant(participant, participant_name, admin, escrow).call(&mut context);\n        }\n        added\n    }\n\n    #[private]\n    #[interal]\n    fn register_participant(participant: AztecAddress, participant_name: str<60>, admin: AztecAddress, escrow: AztecAddress) {\n        let admin_keys = get_public_keys(admin);\n        let participant_keys = get_public_keys(participant);\n        // add escrow to the participant's set of escrows\n        let mut escrow_note = AddressNote::new(escrow, participant_keys.npk_m.hash());\n        storage.participant_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note(\n                &mut context,\n                admin_keys.ovpk_m,\n                participant_keys.ivpk_m,\n                participant\n            )\n        );\n        // add the participant to the admin set of participants\n        let mut participant_note = ParticipantNote::new(participant, participant_name, admin_keys.npk_m.hash());\n        storage.participants.at(escrow).insert(&mut participant_note).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, admin)\n        );\n    }\n\n    // todo: add ability to remove participant\n    // todo: add ability to remove participant escrows by looking up nullifications\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n\n    /** Get the class ID that all escrow contracts must match */\n    #[public]\n    #[view]\n    fn get_escrow_class_id() -> Field {\n        storage.definition.read_public().escrow_contract_id\n    }\n\n    /** Get the registration status of an escrow contract */\n    #[public]\n    #[view]\n    fn get_escrow_registry_status(escrow_contract: AztecAddress) -> bool {\n        storage.escrow_registry.at(escrow_contract).read_public()\n    }\n\n    /**\n     * Get a page of the list of escrows administrated by a given address (private)\n     *\n     * @param admin - the address of the admin\n     * @param page_index - the index of the page to retrieve\n     * @return managed_escrows - the list of managed escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_managed_escrows(offset: u32) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.managed_escrows.view_notes(options);\n        let mut managed_escrows = BoundedVec::new();\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                managed_escrows.push(notes.get_unchecked(i).address);\n            }\n        }\n        (managed_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of escrows participated in by a given address (private)\n     *\n     * @param admin - the address of the participant\n     * @param page_index - the index of the page to retrieve\n     * @return participant_escrows - the list of enrolled escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_participant_escrows(\n        participant: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participant_escrows.view_notes(options);\n        let mut participant_escrows: BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE> = BoundedVec::new();\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                participant_escrows.push(notes.get_unchecked(i).address);\n            }\n        }\n        (participant_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of of participants in an escrow (private)\n     *\n     * @param admin - the address of the escrow\n     * @param page_index - the index of the page to retrieve\n     * @return participants - the list of participating addresses\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participants(\n        escrow: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<ParticipantNote, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participants.at(escrow).view_notes(options);\n        (notes, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n}\n\n"},"444":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_registry/src/types/registry_definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal REGISTRY_DEFINITION_LENGTH: u32 = 3;\n\npub struct RegistryDefinition {\n    admin: AztecAddress,\n    usdc: AztecAddress,\n    escrow_contract_id: Field\n}\n\nimpl Serialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn serialize(self: Self) -> [Field; REGISTRY_DEFINITION_LENGTH] {\n        [self.admin.to_field(), self.usdc.to_field(), self.escrow_contract_id]\n    }\n}\n\nimpl Deserialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn deserialize(fields: [Field; REGISTRY_DEFINITION_LENGTH]) -> Self {\n        RegistryDefinition {\n            admin: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            escrow_contract_id: fields[2]\n        }\n    }\n}\n\nimpl RegistryDefinition {\n    /**\n     * Create a new definition for a Z-Imburse escrow registry contract\n     *\n     * @param admin - The address that can add dkim keys to the registry\n     * @param usdc The address of the USDC token\n     * @param escrow_contract_id The ID of the escrow contract\n     * @return The new escrow registry definition\n     */\n    pub fn new(admin: AztecAddress, usdc: AztecAddress, escrow_contract_id: Field) -> Self {\n        RegistryDefinition { admin, usdc, escrow_contract_id }\n    }\n}\n"},"446":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/z_imburse_registry/src/types/participant_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator, traits::{Serialize, Deserialize}\n},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\nuse dep::compressed_string::CompressedString;\n\nglobal NAME_LENGTH: u32 = 60;\nglobal NAME_SERIALIZED_LENGTH: u32 = 2;\n\n#[note]\npub struct ParticipantNote {\n    address: AztecAddress,\n    name: [Field; 2],\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n\nimpl NullifiableNote for ParticipantNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for ParticipantNote {\n    // does not check for participant name\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl ParticipantNote {\n    pub fn new(address: AztecAddress, name: str<NAME_LENGTH>, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        let name_serialized: CompressedString<NAME_SERIALIZED_LENGTH, NAME_LENGTH> = CompressedString::from_string(name);\n        ParticipantNote { address, name: name_serialized.value, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_name(self) -> [u8; NAME_LENGTH] {\n        CompressedString::<NAME_SERIALIZED_LENGTH, NAME_LENGTH> { value: self.name }.to_bytes()\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"71":{"path":"/home/jpag/Workground/aztec/zimburse/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"85":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"86":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"88":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"89":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"92":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"94":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"96":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"98":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"}}}
>>>>>>> main
