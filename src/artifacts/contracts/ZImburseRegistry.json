{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-aarch64","name":"ZImburseRegistry","functions":[{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"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","brillig_names":["public_dispatch"],"assert_messages":{"2426":"attempt to add with overflow","4986":"Array index out of bounds","2292":"Array index out of bounds","945":"Storage slot 0 not allowed. Storage slots must start from 1.","1969":"Array index out of bounds","2804":"Array index out of bounds","5230":"attempt to add with overflow","2725":"Array index out of bounds","354":"Array index out of bounds","3938":"Array index out of bounds","4962":"Array index out of bounds","4505":"attempt to add with overflow","4694":"Array index out of bounds","4371":"attempt to add with overflow","5151":"attempt to add with overflow","4749":"Array index out of bounds","5553":"Array index out of bounds","4292":"Array index out of bounds","2433":"Array index out of bounds","3134":"Array index out of bounds","4481":"Array index out of bounds","3000":"attempt to add with overflow","3512":"attempt to add with overflow","2354":"attempt to add with overflow","3701":"Array index out of bounds","4024":"attempt to add with overflow","3433":"attempt to add with overflow","3622":"Array index out of bounds","5048":"Array index out of bounds","5371":"attempt to add with overflow","660":"attempt to add with overflow","1873":"attempt to add with overflow","3409":"attempt to add with overflow","3732":"Array index out of bounds","4299":"Array index out of bounds","5457":"Array index out of bounds","2306":"attempt to add with overflow","3196":"Storage slot 0 not allowed. Storage slots must start from 1.","5110":"attempt to add with overflow","2227":"Array index out of bounds","1904":"attempt to add with overflow","1770":"Array index out of bounds","1179":"Function set_contract_registered can only be called internally","2203":"Array index out of bounds","4952":"attempt to add with overflow","1990":"attempt to add with overflow","3014":"Array index out of bounds","4038":"Array index out of bounds","4928":"Array index out of bounds","5062":"attempt to add with overflow","3959":"attempt to add with overflow","2100":"Array index out of bounds","5306":"Array index out of bounds","4526":"attempt to add with overflow","5361":"attempt to add with overflow","1832":"attempt to add with overflow","5574":"attempt to add with overflow","4770":"attempt to add with overflow","4447":"Array index out of bounds","217":"attempt to add with overflow","1430":"Not initialized","3344":"attempt to add with overflow","3021":"Array index out of bounds","4045":"Array index out of bounds","4880":"Array index out of bounds","571":"Initialization hash does not match","1784":"attempt to add with overflow","3832":"Array index out of bounds","5179":"Array index out of bounds","3375":"attempt to add with overflow","1705":"Array index out of bounds","2918":"Array index out of bounds","2595":"Array index out of bounds","4454":"Array index out of bounds","5478":"attempt to add with overflow","2138":"attempt to add with overflow","3351":"attempt to add with overflow","3863":"Array index out of bounds","1681":"Array index out of bounds","2193":"attempt to add with overflow","2382":"Array index out of bounds","2571":"Array index out of bounds","4186":"DKIM key has already been registered","5375":"Array index out of bounds","5564":"attempt to add with overflow","2169":"Array index out of bounds","3894":"attempt to add with overflow","365":"attempt to add with overflow","877":"Sender is not the registry contract","3949":"attempt to add with overflow","2468":"Array index out of bounds","4973":"attempt to add with overflow","5138":"Array index out of bounds","2633":"Array index out of bounds","5382":"Array index out of bounds","963":"DKIM key has already been registered","3200":"Array index out of bounds","4547":"Array index out of bounds","2475":"Array index out of bounds","3499":"Array index out of bounds","4066":"attempt to add with overflow","5468":"attempt to add with overflow","1238":"Storage slot 0 not allowed. Storage slots must start from 1.","3853":"attempt to add with overflow","3530":"Array index out of bounds","5578":"Array index out of bounds","1860":"Array index out of bounds","2561":"attempt to add with overflow","1915":"Array index out of bounds","3963":"Array index out of bounds","2537":"Array index out of bounds","166":"attempt to add with overflow","2214":"attempt to add with overflow","3750":"Array index out of bounds","1434":"Function get_escrow_class_id can only be called statically","5585":"Array index out of bounds","142":"attempt to add with overflow","3970":"Array index out of bounds","4994":"Array index out of bounds","1977":"Array index out of bounds","118":"attempt to add with overflow","2733":"Array index out of bounds","5482":"Array index out of bounds","2788":"Array index out of bounds","3812":"attempt to add with overflow","2142":"Array index out of bounds","4001":"attempt to add with overflow","2008":"Array index out of bounds","3032":"attempt to add with overflow","4056":"attempt to add with overflow","4190":"Array index out of bounds","2764":"Array index out of bounds","4489":"attempt to add with overflow","4568":"attempt to add with overflow","771":"Sender is not the registry contract","4678":"Array index out of bounds","4757":"Array index out of bounds","5403":"attempt to add with overflow","3764":"attempt to add with overflow","3441":"Array index out of bounds","3630":"Array index out of bounds","4465":"attempt to add with overflow","4788":"Array index out of bounds","2149":"Array index out of bounds","3685":"Array index out of bounds","3039":"Array index out of bounds","1692":"attempt to add with overflow","3874":"attempt to add with overflow","2582":"attempt to add with overflow","4252":"Storage slot 0 not allowed. Storage slots must start from 1.","5489":"Array index out of bounds","3661":"Array index out of bounds","2826":"Array index out of bounds","2503":"Array index out of bounds","1022":"Storage slot 0 not allowed. Storage slots must start from 1.","2235":"Array index out of bounds","4070":"Array index out of bounds","5338":"attempt to add with overflow","5015":"attempt to add with overflow","5393":"attempt to add with overflow","2510":"Array index out of bounds","4936":"attempt to add with overflow","2754":"attempt to add with overflow","2108":"Array index out of bounds","3321":"Array index out of bounds","4400":"attempt to add with overflow","4077":"Array index out of bounds","5290":"Array index out of bounds","2651":"Array index out of bounds","4888":"Array index out of bounds","4431":"attempt to add with overflow","1926":"attempt to add with overflow","3651":"attempt to add with overflow","3840":"Array index out of bounds","5510":"attempt to add with overflow","4407":"attempt to add with overflow","1713":"Array index out of bounds","2926":"Array index out of bounds","2603":"Array index out of bounds","5163":"Array index out of bounds","5407":"Array index out of bounds","1500":"attempt to add with overflow","2713":"attempt to add with overflow","3548":"Array index out of bounds","5596":"attempt to add with overflow","2256":"attempt to add with overflow","2957":"Array index out of bounds","3981":"attempt to add with overflow","2177":"attempt to add with overflow","2366":"Array index out of bounds","2665":"attempt to add with overflow","1318":"attempt to add with overflow","5414":"Array index out of bounds","4256":"Array index out of bounds","3610":"attempt to add with overflow","2775":"attempt to add with overflow","2129":"attempt to add with overflow","4555":"Array index out of bounds","1160":"attempt to add with overflow","5445":"attempt to add with overflow","5122":"Array index out of bounds","5500":"attempt to add with overflow","2160":"attempt to add with overflow","4909":"attempt to add with overflow","1514":"Not initialized","2026":"Array index out of bounds","2404":"attempt to add with overflow","3050":"Array index out of bounds","3562":"attempt to add with overflow","3483":"Array index out of bounds","3672":"attempt to add with overflow","4586":"Array index out of bounds","844":"attempt to add with overflow","1734":"attempt to add with overflow","2947":"attempt to add with overflow","2624":"attempt to add with overflow","3459":"Array index out of bounds","4806":"Array index out of bounds","820":"attempt to add with overflow","1332":"Not initialized","1844":"Array index out of bounds","2545":"attempt to add with overflow","2088":"attempt to add with overflow","3112":"Storage slot 0 not allowed. Storage slots must start from 1.","2978":"attempt to add with overflow","2844":"Array index out of bounds","2521":"attempt to add with overflow","1174":"Not initialized","3222":"SharedImmutable already initialized","3356":"Array index out of bounds","5002":"Array index out of bounds","5514":"Array index out of bounds","4868":"attempt to add with overflow","2040":"attempt to add with overflow","2741":"Array index out of bounds","4088":"attempt to add with overflow","2796":"Array index out of bounds","1961":"Array index out of bounds","3363":"Array index out of bounds","858":"Not initialized","1882":"attempt to add with overflow","2906":"attempt to add with overflow","1937":"Array index out of bounds","4497":"Array index out of bounds","4686":"Array index out of bounds","4820":"attempt to add with overflow","4741":"Array index out of bounds","3906":"Array index out of bounds","4095":"Array index out of bounds","5198":"Array index out of bounds","3449":"attempt to add with overflow","3638":"Array index out of bounds","3315":"attempt to add with overflow","5521":"Array index out of bounds","3693":"Array index out of bounds","2858":"attempt to add with overflow","4717":"Array index out of bounds","3236":"Array index out of bounds","3425":"Array index out of bounds","2456":"attempt to add with overflow","597":"SharedImmutable already initialized","2968":"attempt to add with overflow","2243":"Array index out of bounds","2487":"attempt to add with overflow","5425":"attempt to add with overflow","1518":"Function get_escrow_registry_status can only be called statically","3243":"Array index out of bounds","2408":"Array index out of bounds","2274":"Array index out of bounds","2463":"attempt to add with overflow","4377":"Array index out of bounds","4944":"Array index out of bounds","2116":"Array index out of bounds","2817":"attempt to add with overflow","1336":"Function check_dkim_key_hash_public can only be called statically","5298":"Array index out of bounds","2415":"Array index out of bounds","1257":"SharedImmutable already initialized","2982":"Array index out of bounds","4707":"attempt to add with overflow","4896":"Array index out of bounds","5030":"Array index out of bounds","5542":"attempt to add with overflow","343":"attempt to add with overflow","3927":"attempt to add with overflow","3470":"attempt to add with overflow","3714":"attempt to add with overflow","3391":"Array index out of bounds","4604":"Array index out of bounds","1721":"Array index out of bounds","2934":"Array index out of bounds","2611":"Array index out of bounds","752":"Not initialized","2989":"Array index out of bounds","3824":"Array index out of bounds","4013":"Array index out of bounds","5171":"Array index out of bounds","1886":"Array index out of bounds","1752":"Array index out of bounds","2185":"Array index out of bounds","2374":"Array index out of bounds","3398":"Array index out of bounds","3130":"DKIM key has already been registered","4666":"attempt to add with overflow","1893":"Array index out of bounds","1948":"attempt to add with overflow","5532":"attempt to add with overflow","3917":"attempt to add with overflow","4106":"Array index out of bounds","711":"attempt to add with overflow","4618":"attempt to add with overflow","577":"Initializer address is not the contract deployer","5130":"Array index out of bounds","4539":"Array index out of bounds","4728":"attempt to add with overflow","309":"attempt to add with overflow","5319":"attempt to add with overflow","1577":"Storage slot 0 not allowed. Storage slots must start from 1.","5350":"Array index out of bounds","3491":"Array index out of bounds","4515":"Array index out of bounds","5216":"Array index out of bounds","1041":"SharedImmutable already initialized","4168":"Storage slot 0 not allowed. Storage slots must start from 1.","5192":"attempt to add with overflow","3010":"attempt to add with overflow","4034":"attempt to add with overflow","1852":"Array index out of bounds","2553":"Array index out of bounds","4278":"SharedImmutable already initialized","1395":"Storage slot 0 not allowed. Storage slots must start from 1.","4412":"Array index out of bounds","5546":"Array index out of bounds","5278":"attempt to add with overflow","347":"Array index out of bounds","2395":"attempt to add with overflow","3931":"Array index out of bounds","4419":"Array index out of bounds"}},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"get_participants","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"name","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"npk_m_hash","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}},{"name":"header","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::note::note_header::NoteHeader"}}],"kind":"struct","path":"types::participant_note::ParticipantNote"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_participants"]},{"name":"register_participant","is_unconstrained":false,"custom_attributes":["private","internal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow_contract_id","type":{"kind":"field"},"visibility":"private"},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["constructor"],"assert_messages":{"768":"attempt to add with overflow","1085":"Array index out of bounds","1341":"attempt to add with overflow","1658":"Array index out of bounds","1560":"attempt to add with overflow","1646":"attempt to add with overflow","1256":"Array index out of bounds","1506":"Array index out of bounds","799":"attempt to add with overflow","153":"Array index out of bounds","787":"Array index out of bounds","915":"Array index out of bounds","1354":"Array index out of bounds","775":"attempt to add with overflow","1598":"attempt to add with overflow","1531":"Array index out of bounds","1330":"Array index out of bounds","1519":"attempt to add with overflow","745":"Array index out of bounds","873":"attempt to add with overflow","739":"attempt to add with overflow","1062":"Array index out of bounds","1117":"Array index out of bounds","1312":"Array index out of bounds","404":"SharedImmutable already initialized","660":"Array index out of bounds","142":"attempt to add with overflow","849":"Array index out of bounds","1416":"Array index out of bounds","1666":"Array index out of bounds","1398":"Array index out of bounds","1075":"attempt to add with overflow","624":"Array index out of bounds","1264":"Array index out of bounds","667":"Array index out of bounds","923":"Array index out of bounds","1362":"Array index out of bounds","1490":"Array index out of bounds","972":"Array index out of bounds","1478":"attempt to add with overflow","1539":"Array index out of bounds","1277":"attempt to add with overflow","954":"Array index out of bounds","558":"Array index out of bounds","936":"attempt to add with overflow","1125":"Array index out of bounds","1320":"attempt to add with overflow","857":"attempt to add with overflow","1046":"Array index out of bounds","1174":"Array index out of bounds","1296":"Array index out of bounds","1430":"attempt to add with overflow","1034":"attempt to add with overflow","1674":"Array index out of bounds","1156":"Array index out of bounds","833":"attempt to add with overflow","894":"attempt to add with overflow","1138":"attempt to add with overflow","815":"Array index out of bounds","620":"Storage slot 0 not allowed. Storage slots must start from 1.","108":"attempt to add with overflow","1248":"Array index out of bounds","474":"Array index out of bounds","986":"attempt to add with overflow","1236":"attempt to add with overflow","1370":"Array index out of bounds","1498":"Array index out of bounds","907":"Array index out of bounds","1096":"attempt to add with overflow","1547":"Array index out of bounds","1687":"attempt to add with overflow","377":"Initializer address is not the contract deployer","822":"Array index out of bounds","371":"Initialization hash does not match","883":"Array index out of bounds","1584":"Array index out of bounds","554":"DKIM key has already been registered","1383":"attempt to add with overflow","1188":"attempt to add with overflow","164":"attempt to add with overflow","1566":"Array index out of bounds","865":"Array index out of bounds","1054":"Array index out of bounds","536":"Storage slot 0 not allowed. Storage slots must start from 1.","1109":"Array index out of bounds","146":"Array index out of bounds","463":"Array index out of bounds","780":"Array index out of bounds","1304":"attempt to add with overflow","646":"SharedImmutable already initialized"}},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"7Z3bjtu2FobfZa5zwcPiqa+yERRpmxYBgqRo0g1sBHn3bU8i2hnJ9ijmGpG//pui05KLi/xMk/ooyV8e/nj7279//fruw58fPz388p8vD+8//v7m87uPHw5/fXmw/vG/ffr7zYfjn58+v/nn88MvNjl59fD2wx/Hf/Xy9dXDn+/ev334RaL7+mpW2qUwlXYpxVrahrBQ2osP30v7YPKN0takZKZUTMqnXLxdLJ+Tm4rnYk+lZamwtVMq1kY5L/z61YMVDs2loQkcmktDEzk0l4Ym3T80Pvs8dTanU+nyrYWs3kK5vwXrfJxKu2TPgC2NafFmGtPinTvPZ+GT40Oesj+0YtOT9J0ZO327Nv1jJbdYyTnxtRsuphu9Ls5O3TjvcyxLIxSmsrac4npjluKmOmVKiv7GbPS5fC8s3lyfiy7lUL9ESrkxcdvNcuc53C853NJiuK2ROqet8bcGPJqafjTlRuxYptmZ7DnK/Jh+GDv9OHb6aez08zPSL+HWbuuwa6prTk4/NDIvnVL9/rCn5K0sdtV4XzMxXtLL7bVc4dBcGBpvODSXhsa+/NBYE9Pp2yP/MDjHlFx/Kfn+UpL+Ugr9pRT7Syn1l1LuL6XSXUpi+ktpk29vd9r7RTdLyfWX0hbf3jFVcOl8h7y4AZAqoCScLed2qWyRep0cwg9lj12V/XQ17KerEaqr0VQfM+9q2k9X8366WqC6mmtXz7Xft64Gs5+u2v101WEtNqfzQGNmfYXaLh16WI+KjJNZZ2VPnYXaMt3qLNam6WzKutn6GvrfNZXpXC2UcKuvaid2h8Pm2sF0y5uKmQpbcenrHZI19L/T2zWe/nenXeDZ6Lw79r+j3jWe/q8CGuE5dnaT64BwdrNTuNHZVE/m09kxvovfWPmx05ex0w9jpx/HTj+NnX4eO/0ydPrJjJ2+HTv9sVfdNPaqm8ZeddPYq24ae9VNY6+6aexVN4296uaxV9089qqbx15189irbh571c1jr7p57FU3j73q5rFX3Tz2qlvGXnXL2KtuGXvVLWOvumXsVbeMveqWsVfdMvaqW8ZedcvYq641Yy+71oy97loz9sJrzdgrrzVjL73WjL32WjP24mvN2KuvNWMvv9YMvv7awddfO/j6awdff+3g668dfP21g6+/dvD11w6+/trB1187+PrrBl9/3eDrrxt8/XXdr785ToVzKvP8u19/b+Tf/fpbYn1LyPljr8cOzAtLrC/wkmRuvTMX7qkO67rfjhDnGpzd786Icw3O7jerxLkGZ/d7d+JcgdN3fylDnGtwdn9lR5xrcHZ/oUuca3B2f91PnGtwCnEi4aQVgsJJKwSFk1YICietEBROWiEknEIrBIWTVggKJ60QFE5aISicQpxIOGmFoHDSCkHhpBWCwkkrBIWTVggJZ6AVgsJJKwSFk1YICietEBROIU4knLRCUDhphaBw0gpB4aQVgsJJK4SEM9IKQeGkFYLCSSsEhZNWCAqnECcSTlohKJy0QlA4aYWgcNIKQeGkFULC2f+vUBPnGpy0QlA4aYWgcNIKQeEU4kTCSSsEhZNWCAonrRAUTlohKJy0Qkg4M60QFE5aISictEJQOGmFoHAKcSLhpBWCwkkrBIWTVggKJ60QFE5aISSchVYICietEBROWiEonLRCUDiFOJFw0gpB4aQVgsJJKwSFk1YICietEBBOZ2iFoHDSCkHhpBWCwkkrBIVTiBMJJ60QFE5aISictEJQOGmFoHDSCiHhtLRCUDhphaBw0gpB4aQVgsIpxImEk1YICietEBROWiEonLRCUDhphZBwOlohKJy0QlA4aYWgcNIKQeEU4kTCSSsEhZNWCAonrRAUTlohKJy0Qkg4Pa0QFE5aISictEJQOGmFoHAKcSLhpBWCwkkrBIWTVggKJ60QFE5aISScQisEhZNWCAonrRAUTlohKJxCnEg4aYWgcNIKQeGkFYLCSSsEhZNWCAlnoBWCwkkrBIWTVggKJ60QFE4hTiSctEJQOGmFoHDSCkHhpBWCwkkrhIQz0gpB4aQVgsJJKwSFk1YICqcQJxJOWiEonLRCUDhphaBw0gpB4aQVQsKZaIWgcNIKQeGkFYLCSSsEhVOIEwknrRAUTlohKJy0QlA4aYWgcNIKIeHMtEJQOGmFoHDSCkHhpBWCwinEiYSTVggKJ60QFE5aISictEJQOGmFkHAWWiEonLRCUDhphaBw0gpB4RTiRMJJKwSFk1YICietEBROWiEonLRCQDi9oRWCwkkrBIWTVggKJ60QFE4hTiSctEJQOGmFoHDSCkHhpBWCwkkrhITT0gpB4aQVgsJJKwSFk1YICqcQJxJOWiEonLRCUDhphaBw0gpB4aQVQsLpaIWgcNIKQeGkFYLCSSsEhVOIEwknrRAUTlohKJxbWKFQ8iWcjzltoDbcYVN4Km1vfMSOudRUzti6lBZKx8P1w/fS0YucfSKXPjQxToPjY4qnwoufsIM3mAp7F84LPw5k4UA2GUhvOJBtBtJyINsMpONAPnMgRaasvYQ8G0jPgWwzkMKBfO5AplQHsrjrhV3JNfIP29nFwj5Pe18nxs8QBSLaHJGEutOXlK8XDmYqG7w9794jzUiaQDQTaQLR5CVsBzTLFNkFZ+6hyetoIJrCi/ntacZKyMVzRN82qkJN0D0iCojuEVFtdI9IiGhzRMlXaZJSuF74cOBWz96KnRkWoWHB4knHMhZPZ2TqoDNnx90/cZlAIbNb9LQ3u0VP1TMa+jSdkztr3B3oA73QbtHTN2mg96Ym7Y2/EfnG2XWgb9oeUbPzsUA1hURTSHN7mq3OxwIdFhJNGqztaV4/BAg0Td0johHqHhHNTe+IIg3L9ogano5FahMsnnQsY/Fsd+4RKWR2i16Ifq/oqXpGQ9/qyCvSC+0WPX2TCvoDlamw9XfuxOmbukdE37Q5onY7oUQ1hUSTYgqJJrUUEk2apg5otrqWSEKaQDTpg55LM4RpSHyIN26ea/kOp0Rvsz2iZndOJqoYJJq0Nkg0KXg6oNnqPthMwYNEk4Jne5rXb/bLtDbdI6KK6R6REFHviChNtkfU8C7YTMOCxZOOZSye7c6aMoXMbtHT3uwVfaHqGQ19qwPMQi+0W/T0TRroW77DqdA3bY+o2flYEdIEokmL1QHNVudjhQ4LiSYN1vY0rx8CFJqm7hHRCHWOSAzNTfeIaFi2R9TudEwMtQkWTzqWsXg2O/cQI0S/V/S0N7tFT9UzGvpGR15i6IV2i56+SQV9uxcEiaFv6h2RpW/aHFG7nZClmkKiSTGFRJNaCommkOb2NFtdS1jKIySaW/ggsdMgOsluFJreTmPuvQuzi4PEgWwzkJkD2WYgCweyyUA6w4F85kCK1EVMQp4NpOVAthlIx4F87kCq/fj81adXxHki2hxRq+cdxAlpAtEMpAlEk5ewHdBs9PSKOF5HI9Hkxfz2NK/fou+oCXpH5CkgukdEtdE9IkqT7RE1fHbF07Bg8RTyHIpnuztEPIXMbtHT3uwWPVXPaOhb3Xbk6YV2i56+SQN9wzcvitA3bY+o2fmYUE0h0aTF6oBmq/MxocNCoimkuTnN64cAQtPUPSIaoe4R0dx0j4iGZXtEDU/HhNoEimegYxmLZ7tzj0Ahs1v0tDe7RU/VMxr6VkdeQYh+r+jpm1TQN3ytX6Bv6h4RfdPmiBruhKimkGhSTAHRjNRSSDRpmjqg2epaIlIeIdGkD3ouTb0fn79+H2wUItocUbM7JyNVDBJNWhskmhQ8HdBsdR9spOBBoknBsz3N6zf7JVqb7hFRxXSPiH6le0SUJtsjangXbBLyhOJJxzIWz3ZnTYlCZrfoaW92i56qZzT0rQ4wE73QXtFn+iYN9C3f4ZTpm7ZH1Ox8LFNNIdGkxeqAZqvzsSykCUSTBmt7mtcPATJNU/eIaIS6R0Rz0z0iGpbtETU8HSvUJlg86VjG4tnu3KNQyOwWPe3NbtEL0Q+GvtWRV6EX2i16+iYV9A1fEFTom7pHRN+0OaKGOyGqKRyawVBMIdGklkKiSdPUAc1G1xLBUB4h0ZQNaEZbS0dffqD5mFPoMKctrqBDrpSjmHlOqcOctrhGSt6fpMpCTqW/nKzpMCfbYU7Le4d0+oZPXm5kFKXeZx6DO30FFlkqbGpZOVto7Pd0fIN0Qh2gGGK5no5LQU7jc1pwbFhcRMSHuuKYfKO0NYcRn/I2KZ8S93ZZj6SqR3I5jaNfStxaO6Vi7dn28VD4cSCFA3n/QB7++O2fd+/fv/vr1/cff3/z+d3HD5+OVc3xH25x6pw2MOlMVluXjlicX19F1lcJ66vE9VXS+iqLi1eqb+JMeV6lrK7izfoqdn2VRfpZpm+3HMKsil9fRdZXCeurLNLPcZrQOflZlbS+Sl5fpayusvzL9DlPKHOZoVz++fPrVdz6Kn59FblepZh598P6KnF9lUX6xU6fseJmn7HlX5u8XqWsrrL8m3nXqyzSL6c9mTnb0hzrvFpT+NiA027Aazcg2g0E7QaidgNJu4Gs3UBRbmD5hwNaNqA9k6P2TI7aMzlqz+SoPZOj9kyO2jM5as/kqD2Tk/ZMTtozOd3/KQr16uCg7GpZVx5FRrofQTT14tvEp/GzUY5vleM75fhFl29pMP52Khydn8W3yvGdcnyvHF8afH5KjS+z+EE5flSOn5TjZ+X4RTe+NUa7AeVvUGucdgNeuwHRbiBoNxC1G0jaDWTtBpR3QtYa7Qa0Z7LVnslWeyZb7ZlstWeyVZ3Jh7/sseSFU+nD4drUzA97zaWzrdMt1MXcuoulpHpXTyk37rwJpu63gpndx3Lh6HqAxN2oiftRE5dREw+jJh5HTTzdnXjx9ZgqmJdLPI+aeBk0cWdGTdyOmrgbNXGvl/jrSzfktAsfdMNH3fBJN3zWDV9Uw/v7B+dwGVJvVjNenjQg939JWldv4LIuzx7R9No9EO0GWjAo0wMNB/mQnzaQtRsoyg0Eo92AbdBA9qcGytMGnHYDXrsB0W4gaDcQtRtI2g00mMm2vo7iYJjc0waKcgPRaDdgtRtw2g147QZEu4EGM9mW0wN99um2JUbtBorytiVp74uS1W7Aazcg2g0E7QaiagOHP9zDRYWfUr29/tYPsoibEhJxL3ZRbO2Yabsx0/Zjpi1jph3GTDuOmXa6N+36cJ6kp1/iNmsGL4rBndEMfu+39wFpJfp0A+mcZnCvGfze76vgpqLBpa/PEbGtgkfN4EkxuL97zKW+LkNmwe/NPIbpay6mpy/L91kxuDjFYZG7J1GsQH98qcrrS8q1VfCgGTxqBk+awbNm8KIYPJh2wXP4+hwx3Cr43TM01hlaZsHvnqH1u2UhuGgGD5rB752h0U2bouhmxwhJM3jWDF4Ug8d7Z2i0UoM/deLRagZ3msG9ZnDRDB40g0fN4KldcD/7nGfN4HfP0NPTS/I0eLp7htY3zi0Et5rBnWbwu2folf15Es3gQTN41AyuecGV9C64Dn/4Y8ELN9THUA/MYkrXG7Hiplt2rPiZM5IGDZxeXiXlRuGubn1G62XcRS/TLnqZd9HLsodeOrOLXtqX7WVXd42j9dLvopeyi16GXfQy7qKXqZNevr74rMI2uZR+cvGmo1x6WZNfX3qh7Ea59LK+vb74UItaLjeeH3nhkbnxPE7samxST9mEF//c/MQzL1tl47rKxneVjbx0Nj/xnM5W2cSuskldZZO7yqb0lE00XWXz0t/FP/OI01bZ+K6yka6yCV1lE7vKJnWVzUt/F//M820bZZNcT1cwqavrqSRdZRO7yiZ1lU3uKpvSTzaHP+RYdPlHfZKfvhpSnP382oXb769WyeurlJVVvh7+/O+bf969+e392+PPbx3/778ffp9+jevw5+f//f3t/xwK/x8=","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim_bulk"],"assert_messages":{"326":"Array index out of bounds","573":"Array index out of bounds","762":"attempt to add with overflow","515":"Array index out of bounds","488":"Array index out of bounds","549":"Array index out of bounds","290":"Array index out of bounds","741":"attempt to add with overflow","220":"DKIM key has already been registered","930":"Array index out of bounds","854":"attempt to add with overflow","83":"Sender is not the registry contract","531":"Array index out of bounds","333":"Array index out of bounds","202":"Storage slot 0 not allowed. Storage slots must start from 1.","589":"Array index out of bounds","720":"Array index out of bounds","129":"Array index out of bounds","446":"Array index out of bounds","638":"Array index out of bounds","312":"SharedImmutable already initialized","775":"Array index out of bounds","434":"attempt to add with overflow","751":"Array index out of bounds","620":"Array index out of bounds","943":"attempt to add with overflow","964":"attempt to add with overflow","224":"Array index out of bounds","602":"attempt to add with overflow","791":"Array index out of bounds","922":"Array index out of bounds","465":"attempt to add with overflow","523":"attempt to add with overflow","712":"Array index out of bounds","453":"Array index out of bounds","581":"Array index out of bounds","840":"Array index out of bounds","700":"attempt to add with overflow","441":"attempt to add with overflow","822":"Array index out of bounds","499":"attempt to add with overflow","560":"attempt to add with overflow","48":"Not initialized","953":"Array index out of bounds","804":"attempt to add with overflow","481":"Array index out of bounds","286":"Storage slot 0 not allowed. Storage slots must start from 1.","539":"attempt to add with overflow","411":"Array index out of bounds","405":"attempt to add with overflow","914":"Array index out of bounds","728":"Array index out of bounds","783":"Array index out of bounds","140":"Array index out of bounds","902":"attempt to add with overflow","652":"attempt to add with overflow"}},{"name":"get_escrow_class_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQQKAAIGBAUhAAAPAAU6AQAAHgALAAQkAAcBBgoABwQGBSEAABQABToBAAAqAAAEJAAEBAUAAAQABQAkAQQBBAAABAQCBSoABQckAAcACCoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBAUAAAQFAgUqAgUEKgAABQAABAACACoCBAUkAAQBCCQABAMEJAAEAAcqAAcDIAArDAAEAwQHIQAANAAHIAAuKgEFBCQABAIFAAAEBAIGAAAEBgUHKgEHAyMqAQUHHAAHAwkAAAcGCQosAAAAAAoAAAAJJAAEAwsMAAQDCwwhAAA8AAw6AQAAKwAABwgDJQAEAAQIBCIAAABKKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMICQ4ABAMJByEAAEcABzoBAAAqAgoFKgAJAyAAKysBCAMIBgsABAgGAAIIByEAAE4IByAAUCsACAMIBSAAXisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABcCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAFMlAQQAAQgFIABeIysAGMoYyg==","debug_symbols":"1ZrRbuowDIbfJddcJLaT2LzK0dFUNpgqVWUCdqQjxLuv3dqs61DQ2NDiG0TgT/yROPmD1aN5WK+eH+/qdrPdm+Wfo2m299Wh3rZd63hamNWubpr68W76sbH9C7/K909V27f2h2p3MEsXgRZm3T70b5G6ATZ1szZLCnBafFILxkEsPiat83RGS+BkEBMAJ7XgGXFgh4M4MMhU/Hdh5PvkzrqkthP1zdmd/YFpj2MAkUvT7oBGsQORPDp3YwxidpOhB3T3k+jdtH9k7yPAzSPgzSPQzSP470fwXsYQPtgLaREZ/CCOTDxPi/BVnL5TvKYTX9NJrugE53cpEKVeQPHiIdPt/xTETtYx8LklkTAeMl7E5pfER3SjOCLMlgScbnzQjY+68Uk3vteNH3TjR934rBtfVOOjbtdF3a6Lul0Xdbsu6nZd1O26qNt1UbfrUvlb13PC9/OSDpWfPJESPts5/q8kTyo0BWv9hfJDKlWwfU8d6goRPT2rphfN9N6qpi//vpM7dXzxhya7dOYzuDk+FT/7EjL45d93GN/xIS8WwjHThOKn36rb33z5l6MsfvkliSx++SWJHH4ovySRxS+/JJHFL9+is/jl/6/J4pdv0Vn88i06i6/bdYNu1w26XTfodt2o23WjZtc9da1/1a6uVs16eIZs89zeTx4pO/x/evumE78A","brillig_names":["get_escrow_class_id"],"assert_messages":{"14":"Not initialized","59":"Array index out of bounds","70":"attempt to add with overflow","19":"Function get_escrow_class_id can only be called statically"}},{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim"],"assert_messages":{"329":"Array index out of bounds","637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","50":"Sender is not the registry contract","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","713":"attempt to add with overflow","457":"attempt to add with overflow","137":"Storage slot 0 not allowed. Storage slots must start from 1."}},{"name":"register_escrow","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_contract_instance_internal","get_nullifier_membership_witness","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_integer_quotient","directive_invert"]},{"name":"check_and_register_participant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_notes_internal","get_collapse_hints","pack_arguments_oracle_wrapper","call_private_function_internal","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"set_contract_registered","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["set_contract_registered"],"assert_messages":{"180":"attempt to add with overflow","369":"Array index out of bounds","14":"Not initialized","139":"SharedImmutable already initialized","206":"Array index out of bounds","238":"Array index out of bounds","357":"attempt to add with overflow","398":"attempt to add with overflow","188":"Array index out of bounds","217":"attempt to add with overflow","246":"Array index out of bounds","19":"Function set_contract_registered can only be called internally","112":"Storage slot 0 not allowed. Storage slots must start from 1.","377":"Array index out of bounds","295":"Array index out of bounds","196":"attempt to add with overflow","385":"Array index out of bounds","277":"Array index out of bounds","309":"attempt to add with overflow","172":"Array index out of bounds","230":"Array index out of bounds","259":"attempt to add with overflow"}},{"name":"get_managed_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_managed_escrows"]},{"name":"get_participant_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_participant_escrows"]},{"name":"get_escrow_registry_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_escrow_registry_status"],"assert_messages":{"311":"Array index out of bounds","180":"Array index out of bounds","20":"Function get_escrow_registry_status can only be called statically","113":"Storage slot 0 not allowed. Storage slots must start from 1.","148":"Array index out of bounds","299":"attempt to add with overflow","340":"attempt to add with overflow","159":"attempt to add with overflow","188":"Array index out of bounds","319":"Array index out of bounds","237":"Array index out of bounds","327":"Array index out of bounds","219":"Array index out of bounds","251":"attempt to add with overflow","15":"Not initialized","172":"Array index out of bounds","201":"attempt to add with overflow"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":22,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"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","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000f518d98e"},{"kind":"string","value":"EntitlementNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_start","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_end","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"destination","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"spot","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000f518d98e"},{"kind":"string","value":"EntitlementNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_start","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_end","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"destination","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"spot","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b3dd3286"},{"kind":"string","value":"ParticipantNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrow"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseRegistry"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"escrow_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"managed_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"participants","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"participant_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::DKIMKeyHashRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow_contract_id","type":{"kind":"field"}},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_parameters"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_abi"}]}},"file_map":{"101":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"111":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"},"114":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"115":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"116":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"117":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"118":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"119":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"120":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"121":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"122":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"124":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n"},"127":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"128":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"130":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"132":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"135":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LTE, rhs), \"Expected lhs to not be less than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n    }\n}\n"},"136":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"149":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"151":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"152":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::{NoteInterface, NullifiableNote}}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = unsafe {\n            get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier)\n        };\n\n        // 2) First we prove that the tree leaf in the witness is present in the nullifier tree. This is expected to be\n        // the leaf that contains the nullifier we're proving inclusion for.\n        assert(\n            self.state.partial.nullifier_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n\n        // 3) Then we simply check that the value in the leaf is the expected one. Note that we don't need to perform\n        // any checks on the rest of the values in the leaf preimage (the next index or next nullifier), since all we\n        // care about is showing that the tree contains an entry with the expected nullifier.\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, let N: u32>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N> + NullifiableNote;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, let N: u32>(\n        self,\n        note: Note,\n        context: &mut PrivateContext\n    ) where Note: NoteInterface<N> + NullifiableNote {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"154":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"155":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"158":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"160":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"161":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"168":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"169":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"180":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"209":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"222":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"231":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"264":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"277":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"297":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"299":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"300":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"302":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"303":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"306":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"307":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"309":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"310":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"315":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"316":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"319":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"331":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_escrow/src/types/entitlement_note.nr","source":"use aztec::{\n    encrypted_logs::encrypted_event_emission::encode_and_encrypt_event,\n    keys::getters::get_public_keys,\n    macros::notes::note_custom_interface,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::{random::random, notes::check_nullifier_exists, debug_log::debug_log_format},\n    prelude::{NoteHeader, NullifiableNote, NoteInterface, PrivateContext},\n    protocol_types::{\n        address::AztecAddress,\n        traits::{Serialize, Deserialize},\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::{poseidon2_hash_with_separator, poseidon2_hash_bytes},\n        utils::field::field_from_bytes,\n    },\n};\nuse compressed_string::CompressedString;\nuse generators::GENERATORS;\nuse std::{embedded_curve_ops::multi_scalar_mul, hash::from_field_unsafe};\nuse crate::ZImburseEscrow::{SpotReimbursementClaimed, RecurringReimbursementClaimed, EntitlementNullified};\n\nglobal ENTITLEMENT_NOTE_LENGTH: u32 = 8;\n\n#[note_custom_interface]\npub struct EntitlementNote {\n    // the user that is allowed to use this entitlement\n    recipient: AztecAddress,\n    // the type of receipt verifier that this entitlement can be used for\n    verifier_id: u8,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // date range that verified emails can be used for\n    date_start: u32,\n    date_end: u32,\n    // destination if used for travel\n    destination: Field,\n    // whether or not the entitlement is a spot entitlement\n    spot: bool,\n    // blinding factor & nullifier secret for the note\n    randomness: Field,\n}\n\nimpl NoteInterface<ENTITLEMENT_NOTE_LENGTH> for EntitlementNote {\n\n    fn serialize_content(self) -> [Field; ENTITLEMENT_NOTE_LENGTH] {\n\n        [\n            self.recipient.to_field(),\n            self.verifier_id as Field,\n            self.max_value.to_integer(),\n            self.date_start as Field,\n            self.date_end as Field,\n            self.destination,\n            self.spot as Field,\n            self.randomness\n        ]\n    }\n\n    fn deserialize_content(serialized_note: [Field; ENTITLEMENT_NOTE_LENGTH]) -> EntitlementNote {\n        EntitlementNote {\n            recipient: AztecAddress::from_field(serialized_note[0]),\n            verifier_id: serialized_note[1] as u8,\n            max_value: U128::from_integer(serialized_note[2]),\n            date_start: serialized_note[3] as u32,\n            date_end: serialized_note[4] as u32,\n            destination: serialized_note[5],\n            spot: serialized_note[6] as bool,\n            randomness: serialized_note[7],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn to_be_bytes(self, storage_slot: Field) -> [u8; ENTITLEMENT_NOTE_LENGTH * 32 + 64] {\n        let serialized_note = self.serialize_content();\n        let mut buffer: [u8; ENTITLEMENT_NOTE_LENGTH * 32 + 64] = [0; ENTITLEMENT_NOTE_LENGTH * 32 + 64];\n        let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n        let note_type_id_bytes: [u8; 32] = EntitlementNote::get_note_type_id().to_be_bytes();\n        for i in 0..32 {\n            buffer[i] = storage_slot_bytes[i];\n            buffer[32 + i] = note_type_id_bytes[i];\n        }\n        for i in 0..serialized_note.len() {\n            let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n            for j in 0..32 {\n                buffer[64 + i * 32 + j] = bytes[j];\n            }\n        }\n        buffer\n    }\n\n    fn get_note_type_id() -> Field {\n        comptime\n        {\n            let bytes = \"EntitlementNote\".as_bytes();\n            let hash = poseidon2_hash_bytes(bytes);\n            let hash_bytes = hash.to_be_bytes::<4>();\n            field_from_bytes(hash_bytes, true)\n        }\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn compute_note_hash(self) -> Field {\n        let serialized = self.serialize_content();\n        std::embedded_curve_ops::multi_scalar_mul(\n            [GENERATORS[0], GENERATORS[1], GENERATORS[2], GENERATORS[3], GENERATORS[4], GENERATORS[5], GENERATORS[6], GENERATORS[7]],\n            [\n            from_field_unsafe(serialized[0]),\n            from_field_unsafe(serialized[1]),\n            from_field_unsafe(serialized[2]),\n            from_field_unsafe(serialized[3]),\n            from_field_unsafe(serialized[4]),\n            from_field_unsafe(serialized[5]),\n            from_field_unsafe(serialized[6]),\n            from_field_unsafe(serialized[7]),\n            // do not use slot so it can be used for the nullifier\n        ]).x\n    }\n}\n\nimpl NullifiableNote for EntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = self.randomness; // use as nullifier_secret so that admin and recipient can nullify\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = self.randomness; // use as nullifier secret so that admin and recipient can nullify\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for EntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient)\n            & (self.max_value == other.max_value)\n            & (self.randomness == other.randomness)\n            & (self.verifier_id == other.verifier_id)\n    }\n}\nimpl EntitlementNote {\n    \n    /**\n     * EntitlementNote constructor\n     *\n     * @param recipient - the address of the recipient of the entitlement (NOT THE OWNER OF THE NOTE)\n     * @param verifier_id - the type of verifier that the entitlement can be used for\n     * @param max_value - the maximum value that can be withdrawn from the escrow using the entitlement\n     * @param date_start - the start of the date range that the entitlement can be used for (0 for recurring)\n     * @param date_end - the end of the date range that the entitlement can be used for (0 for recurring)\n     * @param destination - the destination of the entitlement (ZERO_DESTINATION for recurring)\n     * @param randomness - blinding factor for the note (inputted since must be same between the two notes)\n     */\n    fn new(\n        recipient: AztecAddress,\n        verifier_id: u8,\n        max_value: U128,\n        date_start: u32,\n        date_end: u32,\n        destination: str<31>,\n        spot: bool,\n        randomness: Field\n    ) -> Self {\n        let destination_compressed: CompressedString<1, 31> = CompressedString::from_string(destination);\n        Self {\n            recipient,\n            verifier_id,\n            max_value,\n            date_start,\n            date_end,\n            destination: destination_compressed.value[0],\n            spot,\n            randomness,\n            header: NoteHeader::empty()\n        }\n    }\n\n    /**\n     * Determine if the entitlement is a spot entitlement by checking if date_start is set\n     *\n     * @return true if entitlement can only be used once, and false if it is recurring\n     */\n    fn is_spot(self) -> bool {\n        self.date_start != 0\n    }\n\n    /**\n     * Return the destination of the entitlement\n     *\n     * @return the utf8 bytes of the destination\n     */\n    fn destination(self) -> [u8; 31] {\n        CompressedString::<1, 31> { value: [self.destination] }.to_bytes()\n    } \n\n    /**\n     * Constrain a given timestamp to be within the date range of the entitlement\n     *\n     * @param timestamp - the timestamp to check\n     */\n    fn check_date_range(self, timestamp: u32) {\n        debug_log_format(\"\\n\\n\\n\\nChecking date range:\\nStart: {0}\\nTimestamp:{1}\\nEnd:{2}\", [\n            self.date_start as Field,\n            timestamp as Field,\n            self.date_end as Field\n        ]);\n        assert(\n            (timestamp >= self.date_start) & (timestamp <= self.date_end),\n            \"Receipt is out of entitlement date range\"\n        );\n    }\n\n    /**\n     * Determine the amount to reimburse for a given claimed amount (lesser of the two)\n     *\n     * @param claimed - the amount claimed by the user\n     * @return the amount to reimburse\n     */\n    fn amount_to_reimburse(self, claimed: U128) -> Field {\n        if self.max_value >= claimed {\n            claimed.to_field()\n        } else {\n            self.max_value.to_field()\n        }\n    }\n\n    /**\n     * Derives the nullifier for recurring notes\n     * @dev recurring notes are nullified for a scope (month) without destroying the ntoe\n     *      prove nullifier non-inclusion to use\n     *\n     * @param timestamp - the timestamp (month/ year) from the email receipt verifier\n     * @return - the month nullifier for the note\n     */\n    fn derive_recurring_nullifier(self, timestamp: Field) -> Field {\n        poseidon2_hash_with_separator(\n            [self.randomness, timestamp],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    /**\n     * This check is not safe but simulates desired behavior of check_nullifier and can be used in txe\n     */\n    fn check_nullifier_txe(self, context: &mut PrivateContext) -> Field {\n        let nullifier = self.compute_nullifier_without_context();\n        let nullifier_exists = unsafe { check_nullifier_exists(nullifier) };\n        assert(!nullifier_exists, \"Entitlement has already been claimed\");\n        nullifier\n    }\n\n    /**\n     * Ensure that the note nullifier has not been used before\n     *\n     * @param context - the private context to use for the oracle call\n     * @return - the nullifier for the note\n     */\n    fn check_nullifier(self, context: &mut PrivateContext) -> Field {\n        let nullifier = self.compute_nullifier_without_context();\n        context.historical_header.prove_nullifier_non_inclusion(nullifier);\n        nullifier\n    }\n\n    /**\n     * Assert that a recurring nullifier has not been used before and emits it\n     * @dev uses oracle check_nullifier_exists which is technically unsafe but will be caught by kernel\n     *\n     * @param context - the private context to use for the oracle call\n     * @param timestamp - the timestamp to check\n     */\n    fn check_and_emit_recurring_nullifier(self, context: &mut PrivateContext, timestamp: Field) {\n        // derive recurring nullifier for the month\n        let recurring_nullifier = self.derive_recurring_nullifier(timestamp);\n        let recurring_nullifier_exists = unsafe { check_nullifier_exists(recurring_nullifier) };\n        // check the nullifeir has not been emitted via oracle call (rely on kernel to actually constrain)\n        assert(!recurring_nullifier_exists, \"Entitlement has already been claimed for this month\");\n        // emit the nullifier\n        context.push_nullifier(recurring_nullifier);\n    }\n\n    /**\n     * Emit an event to the admin notifying them of a recurring claim\n     *\n     * @param context - the private execution context\n     * @param admin - the address of the admin of the escrow to notify\n     * @param amount - the amount claimed\n     * @param timestamp - the timestamp of the claim\n     */\n    fn emit_recurring_claim(self, context: &mut PrivateContext, admin: AztecAddress, amount: Field, timestamp: Field) {\n        RecurringReimbursementClaimed {\n            claimant: self.recipient,\n            amount,\n            verifier_id: self.verifier_id,\n            timestamp\n        }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(self.recipient).ovpk_m,\n                get_public_keys(admin).ivpk_m,\n                admin\n            )\n        );\n    }\n\n    /**\n     * Emit an event to the admin notifying them of a spot claim\n     *\n     * @param context - the private execution context\n     * @param admin - the address of the admin of the escrow to notify\n     * @param amount - the amount claimed\n     */\n    fn emit_spot_claim(self, context: &mut PrivateContext, admin: AztecAddress, amount: Field) {\n        SpotReimbursementClaimed {\n            claimant: self.recipient,\n            amount,\n            verifier_id: self.verifier_id,\n        }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(self.recipient).ovpk_m,\n                get_public_keys(admin).ivpk_m,\n                admin\n            )\n        );\n    }\n\n    /**\n     * Admin or recipient notifies counterparty that note has been nullified\n     * @dev admin emits event when revoking entitlement, recipient emits when claiming spot\n     * @dev clients must scan for these events to prune notes that are no longer valid\n     *\n     * @param context - the private execution context\n     * @param to - the address of the counterparty to notify\n     * @param from - the address of the notifier who nullified the entitlement note\n     */\n    fn emit_nullified(self, context: &mut PrivateContext, to: AztecAddress, from: AztecAddress) {\n        EntitlementNullified { randomness: self.randomness }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(from).ovpk_m,\n                get_public_keys(to).ivpk_m,\n                to\n            )\n        );\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"346":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"347":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"448":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_registry/src/types/registry_definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal REGISTRY_DEFINITION_LENGTH: u32 = 3;\n\npub struct RegistryDefinition {\n    admin: AztecAddress,\n    usdc: AztecAddress,\n    escrow_contract_id: Field\n}\n\nimpl Serialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn serialize(self: Self) -> [Field; REGISTRY_DEFINITION_LENGTH] {\n        [self.admin.to_field(), self.usdc.to_field(), self.escrow_contract_id]\n    }\n}\n\nimpl Deserialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn deserialize(fields: [Field; REGISTRY_DEFINITION_LENGTH]) -> Self {\n        RegistryDefinition {\n            admin: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            escrow_contract_id: fields[2]\n        }\n    }\n}\n\nimpl RegistryDefinition {\n    /**\n     * Create a new definition for a Z-Imburse escrow registry contract\n     *\n     * @param admin - The address that can add dkim keys to the registry\n     * @param usdc The address of the USDC token\n     * @param escrow_contract_id The ID of the escrow contract\n     * @return The new escrow registry definition\n     */\n    pub fn new(admin: AztecAddress, usdc: AztecAddress, escrow_contract_id: Field) -> Self {\n        RegistryDefinition { admin, usdc, escrow_contract_id }\n    }\n}\n"},"449":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_registry/src/types/participant_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator, traits::{Serialize, Deserialize}\n},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\nuse dep::compressed_string::CompressedString;\n\nglobal NAME_LENGTH: u32 = 60;\nglobal NAME_SERIALIZED_LENGTH: u32 = 2;\n\n#[note]\npub struct ParticipantNote {\n    address: AztecAddress,\n    name: [Field; 2],\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n\nimpl NullifiableNote for ParticipantNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for ParticipantNote {\n    // does not check for participant name\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl ParticipantNote {\n    pub fn new(address: AztecAddress, name: str<NAME_LENGTH>, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        let name_serialized: CompressedString<NAME_SERIALIZED_LENGTH, NAME_LENGTH> = CompressedString::from_string(name);\n        ParticipantNote { address, name: name_serialized.value, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_name(self) -> [u8; NAME_LENGTH] {\n        CompressedString::<NAME_SERIALIZED_LENGTH, NAME_LENGTH> { value: self.name }.to_bytes()\n    }\n}\n"},"462":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/z_imburse_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod test;\nmod types;\nmod verifiers;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\n#[aztec]\ncontract ZImburseRegistry {\n    use dep::aztec::{\n        prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map},\n        macros::{storage::storage, events::event, functions::{private, public, view, initializer}},\n        note::{\n            note_viewer_options::NoteViewerOptions, note_getter_options::NoteGetterOptions,\n            note_getter::{get_notes, view_notes}, constants::MAX_NOTES_PER_PAGE\n        },\n        protocol_types::{\n            contract_instance::ContractInstance, address::partial_address::PartialAddress,\n            contract_class_id::ContractClassId, abis::function_selector::FunctionSelector, traits::Serialize\n        },\n        oracle::{get_contract_instance::get_contract_instance, header::get_header_at_oracle},\n        keys::getters::get_public_keys, utils::comparison::Comparator,\n        encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note_unconstrained, encode_and_encrypt_note},\n        unencrypted_logs::unencrypted_event_emission::emit\n    };\n    use std::{meta::derive, collections::bounded_vec::BoundedVec};\n    use dep::address_note::address_note::AddressNote;\n    use dep::z_imburse_escrow::ZImburseEscrow;\n    use crate::{\n        types::{registry_definition::RegistryDefinition, participant_note::{ParticipantNote, NAME_LENGTH}},\n        BULK_KEY_LENGTH\n    };\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyHashRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        definition: SharedImmutable<RegistryDefinition, Context>,\n        escrow_registry: Map<AztecAddress, SharedImmutable<bool, Context>, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n        managed_escrows: PrivateSet<AddressNote, Context>,\n        participants: Map<AztecAddress, PrivateSet<ParticipantNote, Context>, Context>,\n        participant_escrows: PrivateSet<AddressNote, Context>,\n    }\n\n    /**\n     * Initialize the Z-Imburse registry contract\n     *\n     * @param usdc - The address of the USDC token\n     * @param contract_class_id - The class ID of the escrow contract that all escrows must be instances of\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys to add to the registry\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        usdc: AztecAddress,\n        escrow_contract_id: Field,\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // initialize the registry definition\n        let definition = RegistryDefinition::new(context.msg_sender(), usdc, escrow_contract_id);\n        storage.definition.initialize(definition);\n        // add any DKIM key hashes that were passed in at initialization\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(\n                    &mut context,\n                    DKIMKeyHashRegistered { dkim_key_hash: dkim_key_hashes[i], verifier_id: verifier_ids[i] }\n                );\n            }\n        }\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(\n                    &mut context,\n                    DKIMKeyHashRegistered { dkim_key_hash: dkim_key_hashes[i], verifier_id: verifier_ids[i] }\n                );\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(\n            &mut context,\n            DKIMKeyHashRegistered { dkim_key_hash, verifier_id }\n        );\n    }\n\n    /**\n     * Check the authenticity and deployment status of an escrow contract and register it in the Z-Imburse registry\n     * @dev the header will not include the contract address and the contract \n     *\n     * @param escrow_contract - the address of the escrow contract to register\n     */\n    #[private]\n    fn register_escrow(escrow_contract: AztecAddress) {\n        // check the contract class ID by recomputing the contract address\n        let definition = storage.definition.read_private();\n        let contract_instance: ContractInstance = unsafe {\n            get_contract_instance(escrow_contract)\n        };\n        let exected_escrow_address = AztecAddress::compute(\n            contract_instance.public_keys_hash,\n            PartialAddress::compute(\n                ContractClassId::from_field(definition.escrow_contract_id), // constrained here\n                contract_instance.salt,\n                contract_instance.initialization_hash,\n                contract_instance.deployer\n            )\n        );\n        assert(\n            exected_escrow_address == escrow_contract, \"Escrow contract class ID does not match expected class ID\"\n        );\n        // check that the contract has been deployed\n        // annoying that we can't use this in the deploy tx\n        context.historical_header.prove_contract_initialization(escrow_contract);\n\n        // check that the contract has not already been registered\n        let registration_status = storage.escrow_registry.at(escrow_contract).read_private();\n        assert(!registration_status, \"Escrow contract has already been registered\");\n\n        let escrow_params = ZImburseEscrow::at(escrow_contract).get_registration_params().view(&mut context);\n        assert(\n            escrow_params[0] == context.this_address(), \"Escrow contract registry does not match this contract\"\n        );\n        assert(escrow_params[1] == definition.usdc, \"Escrow contract USDC does not match registry USDC\");\n        assert(\n            escrow_params[2] == context.msg_sender(), \"Escrow contract admin does not match sender of message\"\n        );\n\n        // privately add the escrow contract to the list of managed escrows\n        let admin_keys = get_public_keys(context.msg_sender());\n        let mut escrow_note = AddressNote::new(escrow_contract, admin_keys.npk_m.hash());\n\n        // use unconstrained - why would you lie here\n        storage.managed_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                admin_keys.ovpk_m,\n                admin_keys.ivpk_m,\n                context.msg_sender()\n            )\n        );\n\n        // publicly add the escrow contract to the list of participant escrows\n        ZImburseRegistry::at(context.this_address()).set_contract_registered(escrow_contract).enqueue(&mut context);\n    }\n\n    /**\n     * Publicly set the contract registration status\n     *\n     * @param escrow_contract - the address of the escrow contract that has privately been constrained to be valid\n     */\n    #[public]\n    #[internal]\n    fn set_contract_registered(escrow_contract: AztecAddress) {\n        storage.escrow_registry.at(escrow_contract).initialize(true);\n    }\n\n    #[private]\n    fn check_and_register_participant(participant: AztecAddress, participant_name: str<60>, escrow: AztecAddress) -> bool {\n        // todo: switch to check that the sender is an escrow\n        // check that sender is admin\n        let admin = storage.definition.read_private().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        let is_registered = storage.escrow_registry.at(escrow).read_private();\n        assert(is_registered, \"Escrow contract is not registered\");\n        // check if the participant has already been registered\n        let options = NoteGetterOptions::new().select(AddressNote::properties().address, Comparator.EQ, participant).set_limit(1);\n        let participant_exists = storage.participants.at(escrow).get_notes(options).len() == 0;\n        // if the participant has not been registered, enqueue a private call to register the participant\n        // do this instead of if statement here to make adding first time expensive but cheap if already registered\n        let mut added = false;\n        if participant_exists {\n            added = true;\n            ZImburseRegistry::at(context.this_address()).register_participant(participant, participant_name, admin, escrow).call(&mut context);\n        }\n        added\n    }\n\n    #[private]\n    #[internal]\n    fn register_participant(participant: AztecAddress, participant_name: str<60>, admin: AztecAddress, escrow: AztecAddress) {\n        let admin_keys = get_public_keys(admin);\n        let participant_keys = get_public_keys(participant);\n        // add escrow to the participant's set of escrows\n        let mut escrow_note = AddressNote::new(escrow, participant_keys.npk_m.hash());\n        storage.participant_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note(\n                &mut context,\n                admin_keys.ovpk_m,\n                participant_keys.ivpk_m,\n                participant\n            )\n        );\n        // add the participant to the admin set of participants\n        let mut participant_note = ParticipantNote::new(participant, participant_name, admin_keys.npk_m.hash());\n        storage.participants.at(escrow).insert(&mut participant_note).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, admin)\n        );\n    }\n\n    // todo: add ability to remove participant\n    // todo: add ability to remove participant escrows by looking up nullifications\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n\n    /** Get the class ID that all escrow contracts must match */\n    #[public]\n    #[view]\n    fn get_escrow_class_id() -> Field {\n        storage.definition.read_public().escrow_contract_id\n    }\n\n    /** Get the registration status of an escrow contract */\n    #[public]\n    #[view]\n    fn get_escrow_registry_status(escrow_contract: AztecAddress) -> bool {\n        storage.escrow_registry.at(escrow_contract).read_public()\n    }\n\n    /**\n     * Get a page of the list of escrows administrated by a given address (private)\n     *\n     * @param admin - the address of the admin\n     * @param page_index - the index of the page to retrieve\n     * @return managed_escrows - the list of managed escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_managed_escrows(offset: u32) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.managed_escrows.view_notes(options);\n        let mut managed_escrows = BoundedVec::new();\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                managed_escrows.push(notes.get_unchecked(i).address);\n            }\n        }\n        (managed_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of escrows participated in by a given address (private)\n     *\n     * @param admin - the address of the participant\n     * @param page_index - the index of the page to retrieve\n     * @return participant_escrows - the list of enrolled escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_participant_escrows(\n        participant: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participant_escrows.view_notes(options);\n        let mut participant_escrows: BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE> = BoundedVec::new();\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                participant_escrows.push(notes.get_unchecked(i).address);\n            }\n        }\n        (participant_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of of participants in an escrow (private)\n     *\n     * @param admin - the address of the escrow\n     * @param page_index - the index of the page to retrieve\n     * @return participants - the list of participating addresses\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participants(\n        escrow: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<ParticipantNote, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participants.at(escrow).view_notes(options);\n        (notes, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n}\n\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"71":{"path":"/Users/ianbrighton/Documents/Mach34/zimburse/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"77":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"78":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"80":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"83":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"84":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"87":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"91":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"92":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"93":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"94":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"98":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"99":{"path":"/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"}}}