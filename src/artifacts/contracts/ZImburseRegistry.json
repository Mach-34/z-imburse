{"transpiled":true,"noir_version":"0.35.0+b848cc128d2dc2b461581f21a35509a1af9065a7-x8664","name":"ZImburseRegistry","functions":[{"name":"register_dkim_bulk","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim_bulk"],"assert_messages":{"326":"Array index out of bounds","573":"Array index out of bounds","762":"attempt to add with overflow","515":"Array index out of bounds","488":"Array index out of bounds","549":"Array index out of bounds","290":"Array index out of bounds","741":"attempt to add with overflow","220":"DKIM key has already been registered","930":"Array index out of bounds","854":"attempt to add with overflow","83":"Sender is not the registry contract","531":"Array index out of bounds","333":"Array index out of bounds","202":"Storage slot 0 not allowed. Storage slots must start from 1.","589":"Array index out of bounds","720":"Array index out of bounds","129":"Array index out of bounds","446":"Array index out of bounds","638":"Array index out of bounds","312":"SharedImmutable already initialized","775":"Array index out of bounds","434":"attempt to add with overflow","751":"Array index out of bounds","620":"Array index out of bounds","943":"attempt to add with overflow","964":"attempt to add with overflow","224":"Array index out of bounds","602":"attempt to add with overflow","791":"Array index out of bounds","922":"Array index out of bounds","465":"attempt to add with overflow","523":"attempt to add with overflow","712":"Array index out of bounds","453":"Array index out of bounds","581":"Array index out of bounds","840":"Array index out of bounds","700":"attempt to add with overflow","441":"attempt to add with overflow","822":"Array index out of bounds","499":"attempt to add with overflow","560":"attempt to add with overflow","48":"Not initialized","953":"Array index out of bounds","804":"attempt to add with overflow","481":"Array index out of bounds","286":"Storage slot 0 not allowed. Storage slots must start from 1.","539":"attempt to add with overflow","411":"Array index out of bounds","405":"attempt to add with overflow","914":"Array index out of bounds","728":"Array index out of bounds","783":"Array index out of bounds","140":"Array index out of bounds","902":"attempt to add with overflow","652":"attempt to add with overflow"}},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow_contract_id","type":{"kind":"field"},"visibility":"private"},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"768":"attempt to add with overflow","1085":"Array index out of bounds","1341":"attempt to add with overflow","1658":"Array index out of bounds","1560":"attempt to add with overflow","1646":"attempt to add with overflow","1256":"Array index out of bounds","1506":"Array index out of bounds","799":"attempt to add with overflow","153":"Array index out of bounds","787":"Array index out of bounds","915":"Array index out of bounds","1354":"Array index out of bounds","775":"attempt to add with overflow","1598":"attempt to add with overflow","1531":"Array index out of bounds","1330":"Array index out of bounds","1519":"attempt to add with overflow","745":"Array index out of bounds","873":"attempt to add with overflow","739":"attempt to add with overflow","1062":"Array index out of bounds","1117":"Array index out of bounds","1312":"Array index out of bounds","404":"SharedImmutable already initialized","660":"Array index out of bounds","142":"attempt to add with overflow","849":"Array index out of bounds","1416":"Array index out of bounds","1666":"Array index out of bounds","1398":"Array index out of bounds","1075":"attempt to add with overflow","624":"Array index out of bounds","1264":"Array index out of bounds","667":"Array index out of bounds","923":"Array index out of bounds","1362":"Array index out of bounds","1490":"Array index out of bounds","972":"Array index out of bounds","1478":"attempt to add with overflow","1539":"Array index out of bounds","1277":"attempt to add with overflow","954":"Array index out of bounds","558":"Array index out of bounds","936":"attempt to add with overflow","1125":"Array index out of bounds","1320":"attempt to add with overflow","857":"attempt to add with overflow","1046":"Array index out of bounds","1174":"Array index out of bounds","1296":"Array index out of bounds","1430":"attempt to add with overflow","1034":"attempt to add with overflow","1674":"Array index out of bounds","1156":"Array index out of bounds","833":"attempt to add with overflow","894":"attempt to add with overflow","1138":"attempt to add with overflow","815":"Array index out of bounds","620":"Storage slot 0 not allowed. Storage slots must start from 1.","108":"attempt to add with overflow","1248":"Array index out of bounds","474":"Array index out of bounds","986":"attempt to add with overflow","1236":"attempt to add with overflow","1370":"Array index out of bounds","1498":"Array index out of bounds","907":"Array index out of bounds","1096":"attempt to add with overflow","1547":"Array index out of bounds","1687":"attempt to add with overflow","377":"Initializer address is not the contract deployer","822":"Array index out of bounds","371":"Initialization hash does not match","883":"Array index out of bounds","1584":"Array index out of bounds","554":"DKIM key has already been registered","1383":"attempt to add with overflow","1188":"attempt to add with overflow","164":"attempt to add with overflow","1566":"Array index out of bounds","865":"Array index out of bounds","1054":"Array index out of bounds","536":"Storage slot 0 not allowed. Storage slots must start from 1.","1109":"Array index out of bounds","146":"Array index out of bounds","463":"Array index out of bounds","780":"Array index out of bounds","1304":"attempt to add with overflow","646":"SharedImmutable already initialized"}},{"name":"check_dkim_key_hash_public","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7d3bbts4EAbgd/F1L3g+5FUWiyJp08JA4BRJusAi6LuvnFqMktGadUYei+B/U8QtLYlfbXF+RhKfN19vb35+/7zdfbt/3Fz99by5u/9y/bS93w2vnn992tw8bO/utt8/T/96o/Z/5Jfmjz+ud/tXj0/XD0+bKx2N+7S53X3d/2jdsIFv27vbzZVzw8+kdbbx0Dj7WNpGP9PUGZ0PbZ0xqTTWKs20DknbQ+uQTH7T+u9PG634x66VLq3VpLXA0esF5OO4h5wr8tq4sa02OVeOPWk/HkbSk02Px26WPPYB/s3B73dgz70Dd+4d+HPvIPB34H0e9+CDqn0oYjL+0Doml8iHIp56QPs3pY+8KX/gTUZ95E3zX1Id43jK0zopXft/NHr8msbXtnnOWPux6ZuvXZ7/eGhfthvspHWcaW1TOXdZVdrauQ0bE9ShrTExHW8cjBnPcsZOm+75DPg4fBZ8HD4HPg6fBx+HL4CPwxfBx+FL4OPwZfAx+KwCH4cPqYPFh9TB4kPqYPE58HH4kDpYfEgdVT4fRr7JrysOfEgdLD6kDhYfUgeHzyF1sPiQOlh8SB1v+fYmiBLUxMGEmKDopyao5KkJynNqgpqbmqCQJiYe1TE1QclLTVDHUhPUsdTEwYSYoI6lJqhjqQnqWGqCOpaaoI4lJgF1LDVBHUtNUMdSE9Sx1MTBhJigjqUmqGOpCepYaoI6lpqgjiUmEXUsNUEdS01Qx1IT1LHUxMGEmKCOJSapz++OVcXEav3epM/aPqZxwyZOHglyauM9YJ9B4BRAHf244T3Le8A+U8OCgH1GjOUAc5915kmAKY533uiU9fHGyY4bTvb96TL3WZeczVorm8bGyr8f3TNG92W1dTlkrYN7r41SQFIbdYOkNooMQW2t+pwivRh3n7OvF+NGwS3K3ee818W4Hbg/zv0iiJDIFUTw4woizFUnxpUa5x6MMlQQAY0riNDFFNSL5KhhSA+lubI1w1hm5HzylU2HPD6EO05+Nzf0+uXoddNHb5o+etv00bs/OPrJOg7/c/QhlSEyqjjdCW3scxi/4j7n1+/4/BP1fbTjqWb40bxp/dIB33oHQusdiK13ILXegdx4B4xqvQO69Q6Y1jtgW+9A6yOxaX0kNq2PxGb944BPpQOervdl138Wiq50ICnagUuchco6ZEEpX+mAzr5sOgc9CePhdwdc6x3wrXdg/dVo5Uu8+rNQ0uU0miZTQWMH3Pqr0RyOdmD91Wiyrx0wldbZlUvXsosz3W191HDrr10rHVh/7VrpwPpr10oH1l+7Vjqw/lmkSgfWP25XOrD+9HC8A37943alA+sftysdaH0k9q2PxH/0yMFVd6D1kdi3PhL71kfiTh9/dpHbtHSnz1U7431a5S5srTTlduCW5MYFpqLcuBpV8KZP3emzyS7GjetcRblxUawkd6cPa7sYN+puUW7ciSjKjTsRRbkduJfl9uXGTxUS4UaqFOVGqhTlRqoU5UaqFOVGqpTkTkiVotxIleeru2e4kSolY06nz3W+GLcDtyQ3UqUoN1KlKDdSpSg3UqUoN1KlJHdGqhTlRqoU5UaqFOVGqhTlRswR5UbMEeVGzBHlRswR5DadPj7fmrGtseQOGqNcnyjlY2VsUgSlz1G+gtLnWFxB6XPErKD0Oa5VUPqcZDuOovucCqugdFqnHEfpc1qpgtLpUtHHURxQKAoq2hkUVLQzKKhoZ1BQ0c6goKKlKKbTirY8lXXwqU3THV2YzphOy99TBE2Z09PGRSLYaa28oGCnhfWCgg6CTMFOS/aTBEM5ZJPoSNJp1XaKoCsP8x5+pJ/BTku85QQt6kGuIOrBqmDQZSQJLhBB1INcQdSDXEEHQaYg6kGuYKfzvQsKdjo5vKAgMglXEJmEKeiQSbiCyCRcQWQSriAyCVfQQZApiExSFwzlpoSQEhFEJuEKIpNwBZFJuILIJExBj0zCFXQQrP6mSRVBZ+LxxscWnjIeg86i2JVbNz1GKFFuDGfLch+/4rHTJQMvxo3JO1FuzPSJcmNaUJTbgVuSGxOOotyYnRTlRqoU5UaqFOVGqpTk7nRJzIW4XwQRFLmCyH5cQcQ5rqCDIFMQoYsriBxVF3S2CHpypVGn6zouKYi0wxVEgGEKdrqg4pKCyCRcQWQSriAyCVfQQZApiEzCFUQm4Qoik3AFkUm4gsgkzOfLdLoc35KCyCRcQVTUkVyFnB1QKArq3hkUlLIzKKgMxO4HsgpFxMI3qCg1NlaacmO8FOXGSCzKjTFe8G432+vCdpfixqyZKDem2ES5UXVLcve6gOCluDHTJ8qNSxVEuZEqF+b25QYVFRLhduCW5EaqFOVGqhTlRqoU5UaqFOVGqpTkxiKeZ6y7Z7iRKiVjDpYHleVGqhTlduCW5EaqFOVGqhTlRqoU5UaqFOVGqpTkxlLAstxIlaLcSJWi3A7cktyIOaLciDmi3Ig5Yty/hlf/XD9sr2/ubh+H9+z/8efuy9P2fnd4+fTvj9//MjT+Dw==","brillig_names":["check_dkim_key_hash_public"],"assert_messages":{"308":"Array index out of bounds","20":"Function check_dkim_key_hash_public can only be called statically","177":"Array index out of bounds","113":"Storage slot 0 not allowed. Storage slots must start from 1.","145":"Array index out of bounds","296":"attempt to add with overflow","337":"attempt to add with overflow","156":"attempt to add with overflow","185":"Array index out of bounds","316":"Array index out of bounds","234":"Array index out of bounds","324":"Array index out of bounds","216":"Array index out of bounds","248":"attempt to add with overflow","15":"Not initialized","169":"Array index out of bounds","198":"attempt to add with overflow"}},{"name":"get_escrow_registry_status","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_escrow_registry_status"],"assert_messages":{"311":"Array index out of bounds","180":"Array index out of bounds","20":"Function get_escrow_registry_status can only be called statically","113":"Storage slot 0 not allowed. Storage slots must start from 1.","148":"Array index out of bounds","299":"attempt to add with overflow","340":"attempt to add with overflow","159":"attempt to add with overflow","188":"Array index out of bounds","319":"Array index out of bounds","237":"Array index out of bounds","327":"Array index out of bounds","219":"Array index out of bounds","251":"attempt to add with overflow","15":"Not initialized","172":"Array index out of bounds","201":"attempt to add with overflow"}},{"name":"get_participants","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"name","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"npk_m_hash","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}},{"name":"header","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::note::note_header::NoteHeader"}}],"kind":"struct","path":"types::participant_note::ParticipantNote"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_participants"]},{"name":"get_managed_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_managed_escrows"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"3715688037512703171":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"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","brillig_names":["public_dispatch"],"assert_messages":{"2426":"attempt to add with overflow","4986":"Array index out of bounds","2292":"Array index out of bounds","945":"Storage slot 0 not allowed. Storage slots must start from 1.","1969":"Array index out of bounds","2804":"Array index out of bounds","5230":"attempt to add with overflow","2725":"Array index out of bounds","354":"Array index out of bounds","3938":"Array index out of bounds","4962":"Array index out of bounds","4505":"attempt to add with overflow","4694":"Array index out of bounds","4371":"attempt to add with overflow","5151":"attempt to add with overflow","4749":"Array index out of bounds","5553":"Array index out of bounds","4292":"Array index out of bounds","2433":"Array index out of bounds","3134":"Array index out of bounds","4481":"Array index out of bounds","3000":"attempt to add with overflow","3512":"attempt to add with overflow","2354":"attempt to add with overflow","3701":"Array index out of bounds","4024":"attempt to add with overflow","3433":"attempt to add with overflow","3622":"Array index out of bounds","5048":"Array index out of bounds","5371":"attempt to add with overflow","660":"attempt to add with overflow","1873":"attempt to add with overflow","3409":"attempt to add with overflow","3732":"Array index out of bounds","4299":"Array index out of bounds","5457":"Array index out of bounds","2306":"attempt to add with overflow","3196":"Storage slot 0 not allowed. Storage slots must start from 1.","5110":"attempt to add with overflow","2227":"Array index out of bounds","1904":"attempt to add with overflow","1770":"Array index out of bounds","1179":"Function set_contract_registered can only be called internally","2203":"Array index out of bounds","4952":"attempt to add with overflow","1990":"attempt to add with overflow","3014":"Array index out of bounds","4038":"Array index out of bounds","4928":"Array index out of bounds","5062":"attempt to add with overflow","3959":"attempt to add with overflow","2100":"Array index out of bounds","5306":"Array index out of bounds","4526":"attempt to add with overflow","5361":"attempt to add with overflow","1832":"attempt to add with overflow","5574":"attempt to add with overflow","4770":"attempt to add with overflow","4447":"Array index out of bounds","217":"attempt to add with overflow","1430":"Not initialized","3344":"attempt to add with overflow","3021":"Array index out of bounds","4045":"Array index out of bounds","4880":"Array index out of bounds","571":"Initialization hash does not match","1784":"attempt to add with overflow","3832":"Array index out of bounds","5179":"Array index out of bounds","3375":"attempt to add with overflow","1705":"Array index out of bounds","2918":"Array index out of bounds","2595":"Array index out of bounds","4454":"Array index out of bounds","5478":"attempt to add with overflow","2138":"attempt to add with overflow","3351":"attempt to add with overflow","3863":"Array index out of bounds","1681":"Array index out of bounds","2193":"attempt to add with overflow","2382":"Array index out of bounds","2571":"Array index out of bounds","4186":"DKIM key has already been registered","5375":"Array index out of bounds","5564":"attempt to add with overflow","2169":"Array index out of bounds","3894":"attempt to add with overflow","365":"attempt to add with overflow","877":"Sender is not the registry contract","3949":"attempt to add with overflow","2468":"Array index out of bounds","4973":"attempt to add with overflow","5138":"Array index out of bounds","2633":"Array index out of bounds","5382":"Array index out of bounds","963":"DKIM key has already been registered","3200":"Array index out of bounds","4547":"Array index out of bounds","2475":"Array index out of bounds","3499":"Array index out of bounds","4066":"attempt to add with overflow","5468":"attempt to add with overflow","1238":"Storage slot 0 not allowed. Storage slots must start from 1.","3853":"attempt to add with overflow","3530":"Array index out of bounds","5578":"Array index out of bounds","1860":"Array index out of bounds","2561":"attempt to add with overflow","1915":"Array index out of bounds","3963":"Array index out of bounds","2537":"Array index out of bounds","166":"attempt to add with overflow","2214":"attempt to add with overflow","3750":"Array index out of bounds","1434":"Function get_escrow_class_id can only be called statically","5585":"Array index out of bounds","142":"attempt to add with overflow","3970":"Array index out of bounds","4994":"Array index out of bounds","1977":"Array index out of bounds","118":"attempt to add with overflow","2733":"Array index out of bounds","5482":"Array index out of bounds","2788":"Array index out of bounds","3812":"attempt to add with overflow","2142":"Array index out of bounds","4001":"attempt to add with overflow","2008":"Array index out of bounds","3032":"attempt to add with overflow","4056":"attempt to add with overflow","4190":"Array index out of bounds","2764":"Array index out of bounds","4489":"attempt to add with overflow","4568":"attempt to add with overflow","771":"Sender is not the registry contract","4678":"Array index out of bounds","4757":"Array index out of bounds","5403":"attempt to add with overflow","3764":"attempt to add with overflow","3441":"Array index out of bounds","3630":"Array index out of bounds","4465":"attempt to add with overflow","4788":"Array index out of bounds","2149":"Array index out of bounds","3685":"Array index out of bounds","3039":"Array index out of bounds","1692":"attempt to add with overflow","3874":"attempt to add with overflow","2582":"attempt to add with overflow","4252":"Storage slot 0 not allowed. Storage slots must start from 1.","5489":"Array index out of bounds","3661":"Array index out of bounds","2826":"Array index out of bounds","2503":"Array index out of bounds","1022":"Storage slot 0 not allowed. Storage slots must start from 1.","2235":"Array index out of bounds","4070":"Array index out of bounds","5338":"attempt to add with overflow","5015":"attempt to add with overflow","5393":"attempt to add with overflow","2510":"Array index out of bounds","4936":"attempt to add with overflow","2754":"attempt to add with overflow","2108":"Array index out of bounds","3321":"Array index out of bounds","4400":"attempt to add with overflow","4077":"Array index out of bounds","5290":"Array index out of bounds","2651":"Array index out of bounds","4888":"Array index out of bounds","4431":"attempt to add with overflow","1926":"attempt to add with overflow","3651":"attempt to add with overflow","3840":"Array index out of bounds","5510":"attempt to add with overflow","4407":"attempt to add with overflow","1713":"Array index out of bounds","2926":"Array index out of bounds","2603":"Array index out of bounds","5163":"Array index out of bounds","5407":"Array index out of bounds","1500":"attempt to add with overflow","2713":"attempt to add with overflow","3548":"Array index out of bounds","5596":"attempt to add with overflow","2256":"attempt to add with overflow","2957":"Array index out of bounds","3981":"attempt to add with overflow","2177":"attempt to add with overflow","2366":"Array index out of bounds","2665":"attempt to add with overflow","1318":"attempt to add with overflow","5414":"Array index out of bounds","4256":"Array index out of bounds","3610":"attempt to add with overflow","2775":"attempt to add with overflow","2129":"attempt to add with overflow","4555":"Array index out of bounds","1160":"attempt to add with overflow","5445":"attempt to add with overflow","5122":"Array index out of bounds","5500":"attempt to add with overflow","2160":"attempt to add with overflow","4909":"attempt to add with overflow","1514":"Not initialized","2026":"Array index out of bounds","2404":"attempt to add with overflow","3050":"Array index out of bounds","3562":"attempt to add with overflow","3483":"Array index out of bounds","3672":"attempt to add with overflow","4586":"Array index out of bounds","844":"attempt to add with overflow","1734":"attempt to add with overflow","2947":"attempt to add with overflow","2624":"attempt to add with overflow","3459":"Array index out of bounds","4806":"Array index out of bounds","820":"attempt to add with overflow","1332":"Not initialized","1844":"Array index out of bounds","2545":"attempt to add with overflow","2088":"attempt to add with overflow","3112":"Storage slot 0 not allowed. Storage slots must start from 1.","2978":"attempt to add with overflow","2844":"Array index out of bounds","2521":"attempt to add with overflow","1174":"Not initialized","3222":"SharedImmutable already initialized","3356":"Array index out of bounds","5002":"Array index out of bounds","5514":"Array index out of bounds","4868":"attempt to add with overflow","2040":"attempt to add with overflow","2741":"Array index out of bounds","4088":"attempt to add with overflow","2796":"Array index out of bounds","1961":"Array index out of bounds","3363":"Array index out of bounds","858":"Not initialized","1882":"attempt to add with overflow","2906":"attempt to add with overflow","1937":"Array index out of bounds","4497":"Array index out of bounds","4686":"Array index out of bounds","4820":"attempt to add with overflow","4741":"Array index out of bounds","3906":"Array index out of bounds","4095":"Array index out of bounds","5198":"Array index out of bounds","3449":"attempt to add with overflow","3638":"Array index out of bounds","3315":"attempt to add with overflow","5521":"Array index out of bounds","3693":"Array index out of bounds","2858":"attempt to add with overflow","4717":"Array index out of bounds","3236":"Array index out of bounds","3425":"Array index out of bounds","2456":"attempt to add with overflow","597":"SharedImmutable already initialized","2968":"attempt to add with overflow","2243":"Array index out of bounds","2487":"attempt to add with overflow","5425":"attempt to add with overflow","1518":"Function get_escrow_registry_status can only be called statically","3243":"Array index out of bounds","2408":"Array index out of bounds","2274":"Array index out of bounds","2463":"attempt to add with overflow","4377":"Array index out of bounds","4944":"Array index out of bounds","2116":"Array index out of bounds","2817":"attempt to add with overflow","1336":"Function check_dkim_key_hash_public can only be called statically","5298":"Array index out of bounds","2415":"Array index out of bounds","1257":"SharedImmutable already initialized","2982":"Array index out of bounds","4707":"attempt to add with overflow","4896":"Array index out of bounds","5030":"Array index out of bounds","5542":"attempt to add with overflow","343":"attempt to add with overflow","3927":"attempt to add with overflow","3470":"attempt to add with overflow","3714":"attempt to add with overflow","3391":"Array index out of bounds","4604":"Array index out of bounds","1721":"Array index out of bounds","2934":"Array index out of bounds","2611":"Array index out of bounds","752":"Not initialized","2989":"Array index out of bounds","3824":"Array index out of bounds","4013":"Array index out of bounds","5171":"Array index out of bounds","1886":"Array index out of bounds","1752":"Array index out of bounds","2185":"Array index out of bounds","2374":"Array index out of bounds","3398":"Array index out of bounds","3130":"DKIM key has already been registered","4666":"attempt to add with overflow","1893":"Array index out of bounds","1948":"attempt to add with overflow","5532":"attempt to add with overflow","3917":"attempt to add with overflow","4106":"Array index out of bounds","711":"attempt to add with overflow","4618":"attempt to add with overflow","577":"Initializer address is not the contract deployer","5130":"Array index out of bounds","4539":"Array index out of bounds","4728":"attempt to add with overflow","309":"attempt to add with overflow","5319":"attempt to add with overflow","1577":"Storage slot 0 not allowed. Storage slots must start from 1.","5350":"Array index out of bounds","3491":"Array index out of bounds","4515":"Array index out of bounds","5216":"Array index out of bounds","1041":"SharedImmutable already initialized","4168":"Storage slot 0 not allowed. Storage slots must start from 1.","5192":"attempt to add with overflow","3010":"attempt to add with overflow","4034":"attempt to add with overflow","1852":"Array index out of bounds","2553":"Array index out of bounds","4278":"SharedImmutable already initialized","1395":"Storage slot 0 not allowed. Storage slots must start from 1.","4412":"Array index out of bounds","5546":"Array index out of bounds","5278":"attempt to add with overflow","347":"Array index out of bounds","2395":"attempt to add with overflow","3931":"Array index out of bounds","4419":"Array index out of bounds"}},{"name":"register_participant","is_unconstrained":false,"custom_attributes":["private","interal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block_iter","pad_msg_block","attach_len_to_msg_block","build_msg_block_iter","emit_encrypted_note_log_oracle_wrapper","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"check_and_register_participant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"1756802668388977958":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"participant_name","type":{"kind":"string","length":60},"visibility":"private"},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_notes_internal","get_collapse_hints","pack_arguments_oracle_wrapper","call_private_function_internal","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"register_dkim","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"verifier_id","type":{"kind":"field"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["register_dkim"],"assert_messages":{"329":"Array index out of bounds","637":"Array index out of bounds","692":"Array index out of bounds","241":"SharedImmutable already initialized","433":"Array index out of bounds","491":"Array index out of bounds","561":"attempt to add with overflow","814":"Array index out of bounds","162":"DKIM key has already been registered","671":"attempt to add with overflow","802":"attempt to add with overflow","406":"Array index out of bounds","467":"Array index out of bounds","650":"attempt to add with overflow","449":"Array index out of bounds","830":"Array index out of bounds","507":"Array index out of bounds","629":"Array index out of bounds","50":"Sender is not the registry contract","754":"attempt to add with overflow","364":"Array index out of bounds","684":"Array index out of bounds","547":"Array index out of bounds","352":"attempt to add with overflow","221":"Storage slot 0 not allowed. Storage slots must start from 1.","864":"attempt to add with overflow","660":"Array index out of bounds","529":"Array index out of bounds","843":"attempt to add with overflow","520":"attempt to add with overflow","383":"attempt to add with overflow","700":"Array index out of bounds","441":"attempt to add with overflow","822":"Array index out of bounds","371":"Array index out of bounds","499":"Array index out of bounds","621":"Array index out of bounds","359":"attempt to add with overflow","740":"Array index out of bounds","417":"attempt to add with overflow","478":"attempt to add with overflow","609":"attempt to add with overflow","853":"Array index out of bounds","722":"Array index out of bounds","399":"Array index out of bounds","15":"Not initialized","713":"attempt to add with overflow","457":"attempt to add with overflow","137":"Storage slot 0 not allowed. Storage slots must start from 1."}},{"name":"get_participant_escrows","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"offset","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_participant_escrows"]},{"name":"check_dkim_key_hash_private","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"dkim_key_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"register_escrow","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","get_contract_instance_internal","get_nullifier_membership_witness","pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","compute_raw_note_log_unconstrained","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_integer_quotient","directive_invert"]},{"name":"get_escrow_class_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAAQIRAAAJAAEAAMkAAQABB8AAAAABAAAAAMAAAhDIgAAAAgrAAADCEM5AAAACEMAAAABHgAAAAQeAAAABTAAAAAABAAAAAUAAAAGJAACAQQKAAIGBAUhAAAPAAU6AQAAHgALAAQkAAcBBgoABwQGBSEAABQABToBAAAqAAAEJAAEBAUAAAQABQAkAQQBBAAABAQCBSoABQckAAcACCoCCAcAAAQHAgcqAggHAAAEBwIHKgIIByoBBAUAAAQFAgUqAgUEKgAABQAABAACACoCBAUkAAQBCCQABAMEJAAEAAcqAAcDIAArDAAEAwQHIQAANAAHIAAuKgEFBCQABAIFAAAEBAIGAAAEBgUHKgEHAyMqAQUHHAAHAwkAAAcGCQosAAAAAAoAAAAJJAAEAwsMAAQDCwwhAAA8AAw6AQAAKwAABwgDJQAEAAQIBCIAAABKKwAIBQAKAAAECgIMAAAEDAMLKgIJCwAABAMICQ4ABAMJByEAAEcABzoBAAAqAgoFKgAJAyAAKysBCAMIBgsABAgGAAIIByEAAE4IByAAUCsACAMIBSAAXisAAAAIBQEABAAACAQAACUABAAACAkNAAQICQgECAoXAAgKCAohAABcCAoBAAQIAwgJCAsrAQgLCAgBAAQIBQgJCAsrAggICAsBAAQICQACCAkgAFMlAQQAAQgFIABeIysAGMoYyg==","debug_symbols":"1ZrdbuIwEIXfxddc2J4Ze4ZXWa2q0EIVKQoV0JVWqO++STdx0wY5Ki2q5wbFcJz58M8cZ5Szedhunh/v6na3P5r1r7Np9vfVqd63Xev8sjKbQ9009ePd9Gtj+w9+lR+fqrZvHU/V4WTWLnpcmW370F8CdjfY1c3WrBG765laIA5ioZi0kS5I0TsZtOg9J7GzfEEd2MGgDuzlnfr3ysjX0Z11SW0n6tvDO/sNAx/HCCILA+88jlrnRRbY2dGIwW5y65HdfSd7N/Dv4PsA/tYB4NYB8NYB6OsBiGSMQMEuLYrIngZ1ZOTZogifBeo7xWs68TWd5IpO/vIm9ehC2kyIYSnJdPs/BbFvE9lvw/mcSBiTDInYhTmhCG5UR/Af58Q75fxeOT8o50fl/KScPyjnj8r5WTm/6OYH5f4Lyv0XlPsvKPdfUO6/oNx/Qbn/gnL/xfL3L3Hip1mRB8tfPxETP9sZ/0+sn1R6CtbSUk0iFTDY+glGeKVn1fSimZ6savryzz3ZvEPF5012Ke+zdzN+LH78JeT4yz/3MLzx+wW1IIyrTTDO/61yl6PyT0l5/vKrFHn+8qsUWf5QfpUiz19+lSLPX75b5/nLf8rJ85fv1nn+8t06z6/cf4Ny/w3K/Tco99+o3H+jav996Zp/qkNdbZrt8LbZ7rm9n7x8dvr79P+XTvwP","brillig_names":["get_escrow_class_id"],"assert_messages":{"14":"Not initialized","59":"Array index out of bounds","70":"attempt to add with overflow","19":"Function get_escrow_class_id can only be called statically"}},{"name":"set_contract_registered","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["set_contract_registered"],"assert_messages":{"180":"attempt to add with overflow","369":"Array index out of bounds","14":"Not initialized","139":"SharedImmutable already initialized","206":"Array index out of bounds","238":"Array index out of bounds","357":"attempt to add with overflow","398":"attempt to add with overflow","188":"Array index out of bounds","217":"attempt to add with overflow","246":"Array index out of bounds","19":"Function set_contract_registered can only be called internally","112":"Storage slot 0 not allowed. Storage slots must start from 1.","377":"Array index out of bounds","295":"Array index out of bounds","196":"attempt to add with overflow","385":"Array index out of bounds","277":"Array index out of bounds","309":"attempt to add with overflow","172":"Array index out of bounds","230":"Array index out of bounds","259":"attempt to add with overflow"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"12265343917440897559":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":22,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000f518d98e"},{"kind":"string","value":"EntitlementNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_start","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_end","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"destination","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"spot","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000f518d98e"},{"kind":"string","value":"EntitlementNote"},{"fields":[{"name":"recipient","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"verifier_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"max_value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_start","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"date_end","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"destination","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"spot","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000b3dd3286"},{"kind":"string","value":"ParticipantNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseEscrow"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"entitlements","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"ZImburseRegistry"}},{"name":"fields","value":{"fields":[{"name":"definition","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"escrow_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"dkim_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"managed_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"participants","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"participant_escrows","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}},{"name":"verifier_id","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::DKIMKeyHashRegistered"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::check_and_register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_class_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"ZImburseRegistry::get_escrow_registry_status_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::check_dkim_key_hash_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"usdc","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow_contract_id","type":{"kind":"field"}},{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::constructor_parameters"}}],"kind":"struct","path":"ZImburseRegistry::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_id","type":{"kind":"field"}},{"name":"dkim_key_hash","type":{"kind":"field"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"participant","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"participant_name","type":{"kind":"string","length":60}},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"escrow","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_participant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_parameters"}}],"kind":"struct","path":"ZImburseRegistry::set_contract_registered_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"verifier_ids","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"dkim_key_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_dkim_bulk_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"escrow_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_parameters"}}],"kind":"struct","path":"ZImburseRegistry::register_escrow_abi"}]}},"file_map":{"103":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n    set_public_teardown_function_call_internal\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_selector::FunctionSelector, max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests : BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() });\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            returns_hash,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let call_request = PublicCallRequest { contract_address, call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let function_selector = comptime {\n            FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR)\n        };\n        let call_context = self.generate_call_context(\n            contract_address,\n            function_selector,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            contract_address,\n            call_context,\n            args_hash,\n            counter,\n        };\n    }\n\n    fn generate_call_context(\n        self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> CallContext {\n        let msg_sender = if is_delegate_call {\n            self.msg_sender()\n        } else {\n            self.this_address()\n        };\n        let storage_contract_address = if is_delegate_call {\n            self.this_address()\n        } else {\n            contract_address\n        };\n        CallContext { msg_sender, storage_contract_address, function_selector, is_static_call, is_delegate_call }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"104":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe {\n            unpack_returns(self.packed_returns)\n        };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"105":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\npub struct PrivateStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<let N: u32, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](()) -> T,\n    is_static: bool\n}\n\nimpl<let N: u32, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](()) -> T {\n        self.original\n    }\n}\n\npub struct PublicStaticCallInterface<let N: u32, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<let N: u32, T, P, Env> CallInterface<N, (), (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](()) -> () {\n        self.original\n    }\n}\n\npub struct PublicStaticVoidCallInterface<let N: u32, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](()) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<let N: u32, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"108":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn () -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        _contract_address: AztecAddress,\n        _function_selector: FunctionSelector,\n        _args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        panic(f\"'delegate_call_public_function' not implemented!\")\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(_self: Self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [\n        user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE),\n        user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained pub fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N]\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"112":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{execution::{get_chain_id, get_version, get_contract_address, get_block_number}, storage::storage_read};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(\n        self,\n        storage_slot: Field\n    ) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"114":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{context::PublicContext, event::event_interface::EventInterface};\nuse dep::protocol_types::{traits::Serialize};\n\nfn emit<Event, let N: u32, let M: u32>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, let N: u32, let M: u32>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<N>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<let N: u32, let M: u32> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {\n        [self[0] as Field; 2]\n    }\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {\n        [self[0] as Field; 3]\n    }\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {\n        [self[0] as Field; 4]\n    }\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {\n        [self[0] as Field; 5]\n    }\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {\n        [self[0] as Field; 6]\n    }\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {\n        [self[0] as Field; 7]\n    }\n}\n"},"116":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = unsafe {\n        ContractInstance::deserialize(get_contract_instance_internal(address))\n    };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"117":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::{function_selector::FunctionSelector}, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> Field {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe {\n        notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter)\n    };\n}\n\nunconstrained pub fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"118":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; 2] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"119":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_returns_oracle_wrapper(returns)\n    };\n}\n\nunconstrained pub fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\nunconstrained pub fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"120":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\nunconstrained pub fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"122":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\nunconstrained pub fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\nunconstrained pub fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\nunconstrained pub fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\nunconstrained pub fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"123":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"127":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::{PublicKeys, public_keys::{NpkM, IvpkM, OvpkM, TpkM}};\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained pub fn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool } }\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"128":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(contract_address: AztecAddress, randomness: Field, encrypted_event: [u8; M], counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(contract_address, randomness, encrypted_event, counter)\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(note_hash_counter: u32, encrypted_note: [u8; M], counter: u32) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\nunconstrained pub fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32\n) -> Field {}\n"},"129":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_oracle_wrapper(args)\n    };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe {\n        pack_arguments_array_oracle_wrapper(args)\n    };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"130":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: u32 = 24;\n\npub struct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"131":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(storage_slot, note_type_id, serialized_note, note_hash, counter)\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter)\n    };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_created_note_oracle(storage_slot, note_type_id, serialized_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"134":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\nunconstrained pub fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"143":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::{getters::get_ovsk_app, public_keys::{PublicKeys, OvpkM, IvpkM}},\n    encrypted_logs::payload::compute_encrypted_log\n};\nuse dep::protocol_types::{hash::sha256_to_field, address::AztecAddress, abis::note_hash::NoteHash};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] = compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> (u32, [u8; 416 + N * 32], Field) where Note: NoteInterface<N> {\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) = compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N> {\n    | e: NoteEmission<Note> | {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) = unsafe {\n            compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress\n) {\n    let ovsk_app: Field  = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"144":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash_with_separator\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes, encrypted_logs::{header::EncryptedLogHeader},\n    keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::{OvpkM, IvpkM}}\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P]\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] = compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe {\n        random()\n    };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(plaintext: [u8; P], eph_sk: Scalar, ivpk: IvpkM) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field\n    ).to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::{\n        encrypted_logs::payload::{compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext},\n        keys::public_keys::{OvpkM, IvpkM}\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{address::AztecAddress, point::Point, scalar::Scalar};\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04);\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false\n            }\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false\n            }\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41, 2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239, 247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118, 183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183, 12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78, 101, 153, 0, 0, 16, 39\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2);\n\n        let log: [u8; 448] = compute_encrypted_log(contract_address, ovsk_app, ovpk_m, ivpk_m, recipient, plaintext);\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235, 86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79, 51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171, 62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203, 98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211, 49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205, 104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248, 193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110, 249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173, 151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4, 235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194, 90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219, 22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18, 204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167, 110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239, 95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25, 244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91, 68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76, 26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178, 143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189, 117, 147, 101, 230, 132\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false\n            }\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160, 190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157, 131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93, 46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130, 37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95, 115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234, 245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162, 25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185, 212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236, 23, 206, 229, 108\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(recipient, recipient_ivpk, sender_ovsk_app, eph_sk, eph_pk);\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238, 50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248, 43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31, 211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151, 152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58, 120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25, 173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224, 30, 168, 177, 26, 144, 5, 124, 128, 6\n        ];\n\n        for i in 0..outgoing_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], outgoing_body_ciphertext_from_typescript[i]);\n        }\n        assert_eq(outgoing_body_ciphertext_from_typescript.len(), ciphertext.len());\n    }\n}\n"},"147":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::{point_to_symmetric_key::point_to_symmetric_key, public_keys::ToPoint};\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48] where T: ToPoint {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = crate::keys::public_keys::IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false\n        }\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131, 160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171, 176, 218, 48, 209, 73, 89, 200, 209\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"157":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use dep::protocol_types::merkle_tree::root::root_from_sibling_path;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::{NoteInterface, NullifiableNote}}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = unsafe {\n            get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier)\n        };\n\n        // 2) First we prove that the tree leaf in the witness is present in the nullifier tree. This is expected to be\n        // the leaf that contains the nullifier we're proving inclusion for.\n        assert(\n            self.state.partial.nullifier_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n\n        // 3) Then we simply check that the value in the leaf is the expected one. Note that we don't need to perform\n        // any checks on the rest of the values in the leaf preimage (the next index or next nullifier), since all we\n        // care about is showing that the tree contains an entry with the expected nullifier.\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, let N: u32>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N> + NullifiableNote;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, let N: u32>(\n        self,\n        note: Note,\n        context: &mut PrivateContext\n    ) where Note: NoteInterface<N> + NullifiableNote {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"158":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(DEPLOYER_CONTRACT_ADDRESS, contract_address.to_field());\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"161":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::{oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n        // we have two scenarios:\n        // 1. The tree entry is initialized, and the value is the same as the one in the witness\n        // 2. The entry was never initialized, and the value is default zero (the default)\n        // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n        let preimage = witness.leaf_preimage;\n\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n        let is_next_greater_than = full_field_less_than(public_data_tree_index, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_data_tree_index, \"Public data tree index doesn't match witness\");\n            preimage.value\n        };\n\n        value\n    }\n}\n"},"166":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field = 10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122, 205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115\n        ];\n\n        assert_eq(expected_compressed_point_positive_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_positive_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_positive_sign[i]);\n        }\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169, 34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign.len(), compressed_point.len());\n        for i in 0..expected_compressed_point_negative_sign.len() {\n            assert_eq(compressed_point[i], expected_compressed_point_negative_sign[i]);\n        }\n    }\n}\n"},"167":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum {\n    EQ: 1,\n    NEQ: 2,\n    LT: 3,\n    LTE: 4,\n    GT: 5,\n    GTE: 6,\n};\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GTE, rhs), \"Expected lhs to be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LTE, rhs), \"Expected lhs to not be less than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.GTE, rhs), \"Expected lhs to not be greater than or equal to rhs\");\n    }\n}\n"},"168":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N> where T: Eq {\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe {\n        get_collapse_hints(input)\n    };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>\n) where T: Eq {\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(collapsed.len(), collapsed_to_input_index_mapping.len(), \"Collapse hint vec length mismatch\");\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(collapsed.get_unchecked(i), input[input_index].unwrap(), \"Wrong collapsed vec content\");\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(collapsed.get_unchecked(i), std::mem::zeroed(), \"Dirty collapsed vec storage\");\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(input: [Option<T>; N]) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"172":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}}\n};\n\nuse dep::protocol_types::{\n    hash::{\n    compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field\n) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\nunconstrained pub fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> + NullifiableNote {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"173":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\npub struct NoteViewerOptions<Note, let N: u32> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, let N: u32> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> where Note: NoteInterface<N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        comparator: u8,\n        value: T\n    ) -> Self where T: ToField {\n        self.selects.push(Option::some(Select::new(property_selector, comparator, value.to_field())));\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"175":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()), \"Mismatch return note field.\"\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> (Note, Field) where Note: NoteInterface<N> + NullifiableNote {\n    let note = unsafe {\n        get_note_internal(storage_slot)\n    };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    let opt_notes = unsafe {\n        get_notes_internal(storage_slot, options)\n    };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\nunconstrained pub fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"178":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field\n) where Note: NoteInterface<N> + NullifiableNote {\n    let note_hash_for_nullify = compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"180":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"187":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"194":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f);\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript = 0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"196":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Serialize<N * M> for [T; N] where T: Serialize<M> {\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl <T, let N: u32, let M: u32> Deserialize<N * M> for [T; N] where T: Deserialize<M> {\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n"},"197":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256([log_hash.contract_address.to_field(), log_hash.log_hash.value])\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n                0\n            )\n        )\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(\n    inputs: [Field; N],\n    separator: T\n) -> Field where T: ToField {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field where T: ToField {\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv : Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n        message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n        contract_address: AztecAddress::from_field(3)\n    },\n        version,\n        chainId\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"203":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\npub struct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self { nullifier: 0, next_nullifier: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable<ScopedReadRequest> for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n    fn eq(self, other: Self) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.next_nullifier == other.next_nullifier)\n            & (self.next_index == other.next_index)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"218":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self { pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool }, sk_app: fields[3] }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset+31 - i] as Field) * v;\n            hi = hi + (bytes[offset+15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\nfn multi_scalar_mul_array_return<let N: u32>(points: [EmbeddedCurvePoint; N], scalars: [EmbeddedCurveScalar; N]) -> [Field; 3] {}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_slice(points: [EmbeddedCurvePoint], scalars: [EmbeddedCurveScalar]) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint { x: point1.x + (x_coordinates_match as Field), y: point1.y, is_infinite: x_coordinates_match };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result= point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(point1: EmbeddedCurvePoint, point2: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained pub(crate) fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size(128);\n        rhi.assert_max_bit_size(128);\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size(128);\n            xhi.assert_max_bit_size(128);\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"258":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE: u32 = 4;\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // We choose the last SELECTOR_SIZE bytes of the hash to avoid getting the first byte that is not full\n        let hash_bytes = hash.to_be_bytes::<SELECTOR_SIZE>();\n\n        FunctionSelector::from_field(field_from_bytes(hash_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector = FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size(self, bit_size: u32) {\n        // docs:end:assert_max_bit_size\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    /// \n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n     // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    /// \n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self', \n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let  p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        crate::assert_constant(radix);\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N-1-i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"271":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N]\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"274":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl <let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"282":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"286":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    hash::poseidon2_hash_with_separator, traits::{Empty, FromField, ToField, Serialize, Deserialize},\n    utils\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash_with_separator(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS_V1\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"287":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress}, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            poseidon2_hash_with_separator(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"289":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            poseidon2_hash_with_separator(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::collections::vec::Vec;\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_slice};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    pedersen_hash_with_separator_noir(input, separator)\n}\n\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let value = __pedersen_commitment_with_separator(input, separator);\n    if (value[0] == 0) & (value[1] == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value[0], y: value[1], is_infinite: false }\n    }\n}\n\n#[no_predicates]\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n#[no_predicates]\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: Vec<EmbeddedCurveScalar> = Vec::from_slice([EmbeddedCurveScalar { lo: 0, hi: 0 }; N].as_slice()); //Vec::new();\n\n    for i in 0..N {\n        scalars.set(i, from_field_unsafe(input[i]));\n    }\n    scalars.push(EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field });\n    let domain_generators :[EmbeddedCurvePoint; N]= derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let mut vec_generators = Vec::new();\n    for i in 0..N {\n        vec_generators.push(domain_generators[i]);\n    }\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    vec_generators.push(length_generator[0]);\n    multi_scalar_mul_slice(vec_generators.slice, scalars.slice)[0]\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator_noir(input, 0)\n}\n\n#[foreign(pedersen_hash)]\nfn __pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe {\n        crate::field::bn254::decompose_hint(scalar)\n    };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, |fields| fields)\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H> where H: Hasher {\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default {\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1), 0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1), EmbeddedCurvePoint {\n        x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n        y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n        is_infinite: false\n    }\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2), 0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2), EmbeddedCurvePoint {\n        x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n        y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3), 0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3), EmbeddedCurvePoint {\n        x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n        y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4), 0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4), EmbeddedCurvePoint {\n        x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n        y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5), 0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5), EmbeddedCurvePoint {\n        x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n        y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6), 0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6), EmbeddedCurvePoint {\n        x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n        y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7), 0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7), EmbeddedCurvePoint {\n        x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n        y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), 0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8), EmbeddedCurvePoint {\n        x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n        y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), 0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9), EmbeddedCurvePoint {\n        x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n        y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n        is_infinite: false\n    }\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), 0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10), EmbeddedCurvePoint {\n        x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n        y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n        is_infinite: false\n    }\n    );\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    /// \n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    /// \n    /// example\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    /// \n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let first_elem = f(self[0]);\n        let mut ret = [first_elem; N];\n\n        for i in 1..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    /// \n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    /// \n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    /// \n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    /// \n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Ord + Eq {\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N] where T: Eq {\n    /// Returns a new sorted array by sorting it with a custom comparison function. \n    /// The original array remains untouched. \n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    /// \n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    /// \n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]), \"Array has not been sorted correctly according to `ordering`.\"\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    /// \n    /// Example:\n    /// \n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n"},"324":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"325":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"326":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"327":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{aztec_address::AztecAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    contract_class_id::ContractClassId, constants::CONTRACT_INSTANCE_LENGTH,\n    traits::{Deserialize, Hash, Serialize}\n};\n\npub struct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4])\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"333":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_escrow/src/types/entitlement_note.nr","source":"use aztec::{\n    encrypted_logs::encrypted_event_emission::encode_and_encrypt_event,\n    keys::getters::get_public_keys,\n    macros::notes::note_custom_interface,\n    note::utils::compute_note_hash_for_nullify,\n    oracle::{random::random, notes::check_nullifier_exists, debug_log::debug_log_format},\n    prelude::{NoteHeader, NullifiableNote, NoteInterface, PrivateContext},\n    protocol_types::{\n        address::AztecAddress,\n        traits::{Serialize, Deserialize},\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::{poseidon2_hash_with_separator, poseidon2_hash_bytes},\n        utils::field::field_from_bytes,\n    },\n};\nuse compressed_string::CompressedString;\nuse generators::GENERATORS;\nuse std::{embedded_curve_ops::multi_scalar_mul, hash::from_field_unsafe};\nuse crate::ZImburseEscrow::{SpotReimbursementClaimed, RecurringReimbursementClaimed, EntitlementNullified};\n\nglobal ENTITLEMENT_NOTE_LENGTH: u32 = 8;\n\n#[note_custom_interface]\npub struct EntitlementNote {\n    // the user that is allowed to use this entitlement\n    recipient: AztecAddress,\n    // the type of receipt verifier that this entitlement can be used for\n    verifier_id: u8,\n    // the maximum value that can be withdrawn from the escrow using this entitlement\n    max_value: U128,\n    // date range that verified emails can be used for\n    date_start: u32,\n    date_end: u32,\n    // destination if used for travel\n    destination: Field,\n    // whether or not the entitlement is a spot entitlement\n    spot: bool,\n    // blinding factor & nullifier secret for the note\n    randomness: Field,\n}\n\nimpl NoteInterface<ENTITLEMENT_NOTE_LENGTH> for EntitlementNote {\n\n    fn serialize_content(self) -> [Field; ENTITLEMENT_NOTE_LENGTH] {\n\n        [\n            self.recipient.to_field(),\n            self.verifier_id as Field,\n            self.max_value.to_integer(),\n            self.date_start as Field,\n            self.date_end as Field,\n            self.destination,\n            self.spot as Field,\n            self.randomness\n        ]\n    }\n\n    fn deserialize_content(serialized_note: [Field; ENTITLEMENT_NOTE_LENGTH]) -> EntitlementNote {\n        EntitlementNote {\n            recipient: AztecAddress::from_field(serialized_note[0]),\n            verifier_id: serialized_note[1] as u8,\n            max_value: U128::from_integer(serialized_note[2]),\n            date_start: serialized_note[3] as u32,\n            date_end: serialized_note[4] as u32,\n            destination: serialized_note[5],\n            spot: serialized_note[6] as bool,\n            randomness: serialized_note[7],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn to_be_bytes(self, storage_slot: Field) -> [u8; ENTITLEMENT_NOTE_LENGTH * 32 + 64] {\n        let serialized_note = self.serialize_content();\n        let mut buffer: [u8; ENTITLEMENT_NOTE_LENGTH * 32 + 64] = [0; ENTITLEMENT_NOTE_LENGTH * 32 + 64];\n        let storage_slot_bytes: [u8; 32] = storage_slot.to_be_bytes();\n        let note_type_id_bytes: [u8; 32] = EntitlementNote::get_note_type_id().to_be_bytes();\n        for i in 0..32 {\n            buffer[i] = storage_slot_bytes[i];\n            buffer[32 + i] = note_type_id_bytes[i];\n        }\n        for i in 0..serialized_note.len() {\n            let bytes: [u8; 32] = serialized_note[i].to_be_bytes();\n            for j in 0..32 {\n                buffer[64 + i * 32 + j] = bytes[j];\n            }\n        }\n        buffer\n    }\n\n    fn get_note_type_id() -> Field {\n        comptime\n        {\n            let bytes = \"EntitlementNote\".as_bytes();\n            let hash = poseidon2_hash_bytes(bytes);\n            let hash_bytes = hash.to_be_bytes::<4>();\n            field_from_bytes(hash_bytes, true)\n        }\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn compute_note_hash(self) -> Field {\n        let serialized = self.serialize_content();\n        std::embedded_curve_ops::multi_scalar_mul(\n            [GENERATORS[0], GENERATORS[1], GENERATORS[2], GENERATORS[3], GENERATORS[4], GENERATORS[5], GENERATORS[6], GENERATORS[7]],\n            [\n            from_field_unsafe(serialized[0]),\n            from_field_unsafe(serialized[1]),\n            from_field_unsafe(serialized[2]),\n            from_field_unsafe(serialized[3]),\n            from_field_unsafe(serialized[4]),\n            from_field_unsafe(serialized[5]),\n            from_field_unsafe(serialized[6]),\n            from_field_unsafe(serialized[7]),\n            // do not use slot so it can be used for the nullifier\n        ]).x\n    }\n}\n\nimpl NullifiableNote for EntitlementNote {\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = self.randomness; // use as nullifier_secret so that admin and recipient can nullify\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = self.randomness; // use as nullifier secret so that admin and recipient can nullify\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for EntitlementNote {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient)\n            & (self.max_value == other.max_value)\n            & (self.randomness == other.randomness)\n            & (self.verifier_id == other.verifier_id)\n    }\n}\nimpl EntitlementNote {\n    \n    /**\n     * EntitlementNote constructor for recurring entitlements\n     *\n     * @param recipient - the address of the recipient of the entitlement (NOT THE OWNER OF THE NOTE)\n     * @param verifier_id - the type of verifier that the entitlement can be used for\n     * @param max_value - the maximum value that can be withdrawn from the escrow using the entitlement\n     * @param randomness - blinding factor for the note (inputted since must be same between the two notes)\n     */\n    fn new_spot(\n        recipient: AztecAddress,\n        verifier_id: u8,\n        max_value: U128,\n        date_start: u32,\n        date_end: u32,\n        destination: str<31>,\n        randomness: Field\n    ) -> Self {\n        let destination_compressed: CompressedString<1, 31> = CompressedString::from_string(destination);\n        Self {\n            recipient,\n            verifier_id,\n            max_value,\n            date_start,\n            date_end,\n            destination: destination_compressed.value[0],\n            spot: true,\n            randomness,\n            header: NoteHeader::empty()\n        }\n    }\n\n    /**\n     * EntitlementNote constructor for recurring entitlements\n     * @todo: allow destinations on recurring?\n     *\n     * @param recipient - the address of the recipient of the entitlement (NOT THE OWNER OF THE NOTE)\n     * @param verifier_id - the type of verifier that the entitlement can be used for\n     * @param max_value - the maximum value that can be withdrawn from the escrow using the entitlement\n     * @param randomness - blinding factor for the note (inputted since must be same between the two notes)\n     */\n    fn new_recurring(\n        recipient: AztecAddress,\n        verifier_id: u8,\n        max_value: U128,\n        randomness: Field\n    ) -> Self {\n        Self {\n            recipient,\n            verifier_id,\n            max_value,\n            date_start: 0,\n            date_end: 0,\n            destination: 0,\n            spot: false,\n            randomness,\n            header: NoteHeader::empty()\n        }\n    }\n\n    /**\n     * Determine if the entitlement is a spot entitlement by checking if date_start is set\n     *\n     * @return true if entitlement can only be used once, and false if it is recurring\n     */\n    fn is_spot(self) -> bool {\n        self.date_start != 0\n    }\n\n    /**\n     * Return the destination of the entitlement\n     *\n     * @return the utf8 bytes of the destination\n     */\n    fn destination(self) -> [u8; 31] {\n        CompressedString::<1, 31> { value: [self.destination] }.to_bytes()\n    } \n\n    /**\n     * Constrain a given timestamp to be within the date range of the entitlement\n     *\n     * @param timestamp - the timestamp to check\n     */\n    fn check_date_range(self, timestamp: u32) {\n        debug_log_format(\"\\n\\n\\n\\nChecking date range:\\nStart: {0}\\nTimestamp:{1}\\nEnd:{2}\", [\n            self.date_start as Field,\n            timestamp as Field,\n            self.date_end as Field\n        ]);\n        assert(\n            (timestamp >= self.date_start) & (timestamp <= self.date_end),\n            \"Receipt is out of entitlement date range\"\n        );\n    }\n\n    /**\n     * Determine the amount to reimburse for a given claimed amount (lesser of the two)\n     *\n     * @param claimed - the amount claimed by the user\n     * @return the amount to reimburse\n     */\n    fn amount_to_reimburse(self, claimed: U128) -> Field {\n        if self.max_value >= claimed {\n            claimed.to_field()\n        } else {\n            self.max_value.to_field()\n        }\n    }\n\n    /**\n     * Derives the nullifier for recurring notes\n     * @dev recurring notes are nullified for a scope (month) without destroying the ntoe\n     *      prove nullifier non-inclusion to use\n     *\n     * @param timestamp - the timestamp (month/ year) from the email receipt verifier\n     * @return - the month nullifier for the note\n     */\n    fn derive_recurring_nullifier(self, timestamp: Field) -> Field {\n        poseidon2_hash_with_separator(\n            [self.randomness, timestamp],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    /**\n     * This check is not safe but simulates desired behavior of check_nullifier and can be used in txe\n     */\n    fn check_nullifier_txe(self, context: &mut PrivateContext) -> Field {\n        let nullifier = self.compute_nullifier_without_context();\n        let nullifier_exists = unsafe { check_nullifier_exists(nullifier) };\n        assert(!nullifier_exists, \"Entitlement has already been claimed\");\n        nullifier\n    }\n\n    /**\n     * Ensure that the note nullifier has not been used before\n     *\n     * @param context - the private context to use for the oracle call\n     * @return - the nullifier for the note\n     */\n    fn check_nullifier(self, context: &mut PrivateContext) -> Field {\n        let nullifier = self.compute_nullifier_without_context();\n        context.historical_header.prove_nullifier_non_inclusion(nullifier);\n        nullifier\n    }\n\n    /**\n     * Assert that a recurring nullifier has not been used before and emits it\n     * @dev uses oracle check_nullifier_exists which is technically unsafe but will be caught by kernel\n     *\n     * @param context - the private context to use for the oracle call\n     * @param timestamp - the timestamp to check\n     */\n    fn check_and_emit_recurring_nullifier(self, context: &mut PrivateContext, timestamp: Field) {\n        // derive recurring nullifier for the month\n        let recurring_nullifier = self.derive_recurring_nullifier(timestamp);\n        let recurring_nullifier_exists = unsafe { check_nullifier_exists(recurring_nullifier) };\n        // check the nullifeir has not been emitted via oracle call (rely on kernel to actually constrain)\n        assert(!recurring_nullifier_exists, \"Entitlement has already been claimed for this month\");\n        // emit the nullifier\n        context.push_nullifier(recurring_nullifier);\n    }\n\n    /**\n     * Emit an event to the admin notifying them of a recurring claim\n     *\n     * @param context - the private execution context\n     * @param admin - the address of the admin of the escrow to notify\n     * @param amount - the amount claimed\n     * @param timestamp - the timestamp of the claim\n     */\n    fn emit_recurring_claim(self, context: &mut PrivateContext, admin: AztecAddress, amount: Field, timestamp: Field) {\n        RecurringReimbursementClaimed {\n            claimant: self.recipient,\n            amount,\n            verifier_id: self.verifier_id,\n            timestamp\n        }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(self.recipient).ovpk_m,\n                get_public_keys(admin).ivpk_m,\n                admin\n            )\n        );\n    }\n\n    /**\n     * Emit an event to the admin notifying them of a spot claim\n     *\n     * @param context - the private execution context\n     * @param admin - the address of the admin of the escrow to notify\n     * @param amount - the amount claimed\n     */\n    fn emit_spot_claim(self, context: &mut PrivateContext, admin: AztecAddress, amount: Field) {\n        SpotReimbursementClaimed {\n            claimant: self.recipient,\n            amount,\n            verifier_id: self.verifier_id,\n        }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(self.recipient).ovpk_m,\n                get_public_keys(admin).ivpk_m,\n                admin\n            )\n        );\n    }\n\n    /**\n     * Admin or recipient notifies counterparty that note has been nullified\n     * @dev admin emits event when revoking entitlement, recipient emits when claiming spot\n     * @dev clients must scan for these events to prune notes that are no longer valid\n     *\n     * @param context - the private execution context\n     * @param to - the address of the counterparty to notify\n     * @param from - the address of the notifier who nullified the entitlement note\n     */\n    fn emit_nullified(self, context: &mut PrivateContext, to: AztecAddress, from: AztecAddress) {\n        EntitlementNullified { randomness: self.randomness }.emit(\n            encode_and_encrypt_event(\n                context,\n                get_public_keys(from).ovpk_m,\n                get_public_keys(to).ivpk_m,\n                to\n            )\n        );\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"344":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    macros::notes::note\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(self, _context: &mut PrivateContext, _note_hash_for_nullify: Field) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"345":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::utils::compute_note_hash_for_nullify, oracle::random::random, keys::getters::get_nsk_app,\n    macros::notes::partial_note\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe {\n            random()\n        };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> [u8; 32] {\n    sha256_var(msg, N as u64)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: [u8; 64]) -> [u32; 16] {\n    let mut msg32: [u32; 16] = [0; 16];\n\n    for i in 0..16 {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4*(i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\nunconstrained fn build_msg_block_iter<let N: u32>(msg: [u8; N], message_size: u32, msg_start: u32) -> ([u8; 64], u32) {\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: [u8; 64],\n    msg_start: u32\n) -> u32 {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\nglobal BLOCK_SIZE = 64;\nglobal ZERO = 0;\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> [u8; 32] {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: [u8; BLOCK_SIZE] = [0; BLOCK_SIZE];\n    let mut h: [u32; 8] = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = unsafe {\n            build_msg_block_iter(msg, message_size, msg_start)\n        };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    unsafe {\n        let (new_msg_block, new_msg_byte_ptr) = pad_msg_block(msg_block, msg_byte_ptr);\n        msg_block = new_msg_block;\n        if crate::runtime::is_unconstrained() {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..BLOCK_SIZE {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n\n        // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n        // the 1 and 0s fill up the current block, which we then compress accordingly.\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for _i in 57..BLOCK_SIZE {\n            if msg_byte_ptr <= 63 & msg_byte_ptr >= 57 {\n                assert_eq(msg_block[msg_byte_ptr], zero);\n                msg_byte_ptr += 1;\n            }\n        }\n    }\n\n    if msg_byte_ptr >= 57 {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe {\n        attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size)\n    };\n\n    if !crate::runtime::is_unconstrained() {\n        for i in 0..56 {\n            let predicate = (i < msg_byte_ptr) as u8;\n            let expected_byte = predicate * last_block[i];\n            assert_eq(msg_block[i], expected_byte);\n        }\n\n        // We verify the message length was inserted correctly by reversing the byte decomposition.\n        let len = 8 * message_size;\n        let mut reconstructed_len: Field = 0;\n        for i in 56..64 {\n            reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n        }\n        assert_eq(reconstructed_len, len as Field);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\nunconstrained fn pad_msg_block(\n    mut msg_block: [u8; 64],\n    mut msg_byte_ptr: u32\n) -> ([u8; BLOCK_SIZE], u32) {\n    // If i >= 57, there aren't enough bits in the current message block to accomplish this, so\n    // the 1 and 0s fill up the current block, which we then compress accordingly.\n    if msg_byte_ptr >= 57 {\n        // Not enough bits (64) to store length. Fill up with zeros.\n        for i in msg_byte_ptr..BLOCK_SIZE {\n            msg_block[i] = 0;\n        }\n        (msg_block, BLOCK_SIZE)\n    } else {\n        (msg_block, msg_byte_ptr)\n    }\n}\n\nunconstrained fn attach_len_to_msg_block(mut msg_block: [u8; BLOCK_SIZE], msg_byte_ptr: u32, message_size: u32) -> [u8; BLOCK_SIZE] {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n\n    for i in msg_byte_ptr..56 {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[56 + i] = len_bytes[i];\n    }\n    msg_block\n}\n\nfn hash_final_block(msg_block: [u8; BLOCK_SIZE], mut state: [u32; 8]) -> [u8; 32] {\n    let mut out_h: [u8; 32] = [0; 32]; // Digest as sequence of bytes\n\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4*j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d, 0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0, 0x8f, 0xfe, 0x73, 0x2b\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94, 24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154, 60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213, 165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117, 101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112, 108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115, 99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49, 46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46, 48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115, 117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97, 103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45, 52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55, 64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32, 50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32, 43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64, 103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103, 110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115, 104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101, 108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56, 51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48, 87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75, 57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101, 114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97, 103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186, 55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17, 48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12, 201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48, 37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6, 242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2, 1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89, 110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2, 1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75, 193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1, 12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189, 233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4, 32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45, 105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4, 32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188, 194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212, 181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253, 179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9, 236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214, 72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107, 218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198, 149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126, 32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36, 137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59, 245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97, 3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180, 170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216, 116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70, 86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246, 215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193, 104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74, 134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210, 188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210, 186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69, 79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22, 121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175, 169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53, 101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200, 157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86, 119, 30, 63, 129, 143, 32, 96\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"444":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_registry/src/main.nr","source":"use dep::aztec::macros::aztec;\n\nmod test;\nmod types;\nmod verifiers;\n\npub global BULK_KEY_LENGTH: u32 = 4;\n\n#[aztec]\ncontract ZImburseRegistry {\n    use dep::aztec::{\n        prelude::{AztecAddress, PrivateImmutable, PrivateSet, SharedImmutable, Map},\n        macros::{storage::storage, events::event, functions::{private, public, view, initializer}},\n        note::{\n        note_viewer_options::NoteViewerOptions, note_getter_options::NoteGetterOptions,\n        note_getter::{get_notes, view_notes}, constants::MAX_NOTES_PER_PAGE\n    },\n        protocol_types::{\n        contract_instance::ContractInstance, address::partial_address::PartialAddress,\n        contract_class_id::ContractClassId, abis::function_selector::FunctionSelector, traits::Serialize\n    },\n        oracle::{get_contract_instance::get_contract_instance, header::get_header_at_oracle},\n        keys::getters::get_public_keys, utils::comparison::Comparator,\n        encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note_unconstrained, encode_and_encrypt_note},\n        unencrypted_logs::unencrypted_event_emission::emit\n    };\n    use std::{meta::derive, collections::bounded_vec::BoundedVec};\n    use dep::address_note::address_note::AddressNote;\n    use dep::z_imburse_escrow::ZImburseEscrow;\n    use crate::{\n        types::{registry_definition::RegistryDefinition, participant_note::{ParticipantNote, NAME_LENGTH}},\n        BULK_KEY_LENGTH\n    };\n\n    #[event]\n    #[derive(Serialize)]\n    struct DKIMKeyHashRegistered {\n        dkim_key_hash: Field,\n        verifier_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        definition: SharedImmutable<RegistryDefinition, Context>,\n        escrow_registry: Map<AztecAddress, SharedImmutable<bool, Context>, Context>,\n        dkim_registry: Map<Field, SharedImmutable<Field, Context>, Context>,\n        managed_escrows: PrivateSet<AddressNote, Context>,\n        participants: Map<AztecAddress, PrivateSet<ParticipantNote, Context>, Context>,\n        participant_escrows: PrivateSet<AddressNote, Context>,\n    }\n\n    /**\n     * Initialize the Z-Imburse registry contract\n     *\n     * @param usdc - The address of the USDC token\n     * @param contract_class_id - The class ID of the escrow contract that all escrows must be instances of\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys to add to the registry\n     */\n    #[public]\n    #[initializer]\n    fn constructor(\n        usdc: AztecAddress,\n        escrow_contract_id: Field,\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // initialize the registry definition\n        let definition = RegistryDefinition::new(context.msg_sender(), usdc, escrow_contract_id);\n        storage.definition.initialize(definition);\n        // add any DKIM key hashes that were passed in at initialization\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(\n                    &mut context,\n                    DKIMKeyHashRegistered { dkim_key_hash: dkim_key_hashes[i], verifier_id: verifier_ids[i] }\n                );\n            }\n        }\n    }\n\n    /**\n     * Bulk registration of DKIM keys\n     *\n     * @param verifier_ids - the verifier IDs to register the DKIM keys to\n     * @param dkim_key_hashes - the hashes of the DKIM keys\n     */\n    #[public]\n    fn register_dkim_bulk(\n        verifier_ids: [Field; BULK_KEY_LENGTH],\n        dkim_key_hashes: [Field; BULK_KEY_LENGTH]\n    ) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // bulk insert up to 50 dkim key hashes\n        for i in 0..BULK_KEY_LENGTH {\n            if (verifier_ids[i] != 0) {\n                // ensure that the dkim key has not already been registered\n                let stored_id = storage.dkim_registry.at(dkim_key_hashes[i]).read_public();\n                assert(stored_id == 0, \"DKIM key has already been registered\");\n                storage.dkim_registry.at(dkim_key_hashes[i]).initialize(verifier_ids[i]);\n                emit(\n                    &mut context,\n                    DKIMKeyHashRegistered { dkim_key_hash: dkim_key_hashes[i], verifier_id: verifier_ids[i] }\n                );\n            }\n        }\n    }\n\n    /**\n     * Register a DKIM key hash for email verifiers to anchor trust to\n     *\n     * @param verifier_id - the ID of the verifier\n     * @param dkim_key_hash - the hash of the DKIM key\n     */\n    #[public]\n    fn register_dkim(verifier_id: Field, dkim_key_hash: Field) {\n        // check that the sender is the admin\n        let admin = storage.definition.read_public().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        // ensure that the dkim key has not already been registered\n        let stored_id = storage.dkim_registry.at(dkim_key_hash).read_public();\n        assert(stored_id == 0, \"DKIM key has already been registered\");\n        storage.dkim_registry.at(dkim_key_hash).initialize(verifier_id);\n        emit(\n            &mut context,\n            DKIMKeyHashRegistered { dkim_key_hash, verifier_id }\n        );\n    }\n\n    /**\n     * Check the authenticity and deployment status of an escrow contract and register it in the Z-Imburse registry\n     * @dev the header will not include the contract address and the contract \n     *\n     * @param escrow_contract - the address of the escrow contract to register\n     */\n    #[private]\n    fn register_escrow(escrow_contract: AztecAddress) {\n        // check the contract class ID by recomputing the contract address\n        let definition = storage.definition.read_private();\n        let contract_instance: ContractInstance = unsafe {\n            get_contract_instance(escrow_contract)\n        };\n        let exected_escrow_address = AztecAddress::compute(\n            contract_instance.public_keys_hash,\n            PartialAddress::compute(\n                ContractClassId::from_field(definition.escrow_contract_id), // constrained here\n                contract_instance.salt,\n                contract_instance.initialization_hash,\n                contract_instance.deployer\n            )\n        );\n        assert(\n            exected_escrow_address == escrow_contract, \"Escrow contract class ID does not match expected class ID\"\n        );\n        // check that the contract has been deployed\n        // annoying that we can't use this in the deploy tx\n        context.historical_header.prove_contract_initialization(escrow_contract);\n\n        // check that the contract has not already been registered\n        let registration_status = storage.escrow_registry.at(escrow_contract).read_private();\n        assert(!registration_status, \"Escrow contract has already been registered\");\n\n        let escrow_params = ZImburseEscrow::at(escrow_contract).get_registration_params().view(&mut context);\n        assert(\n            escrow_params[0] == context.this_address(), \"Escrow contract registry does not match this contract\"\n        );\n        assert(escrow_params[1] == definition.usdc, \"Escrow contract USDC does not match registry USDC\");\n        assert(\n            escrow_params[2] == context.msg_sender(), \"Escrow contract admin does not match sender of message\"\n        );\n\n        // privately add the escrow contract to the list of managed escrows\n        let admin_keys = get_public_keys(context.msg_sender());\n        let mut escrow_note = AddressNote::new(escrow_contract, admin_keys.npk_m.hash());\n\n        // use unconstrained - why would you lie here\n        storage.managed_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                admin_keys.ovpk_m,\n                admin_keys.ivpk_m,\n                context.msg_sender()\n            )\n        );\n\n        // publicly add the escrow contract to the list of participant escrows\n        ZImburseRegistry::at(context.this_address()).set_contract_registered(escrow_contract).enqueue(&mut context);\n    }\n\n    /**\n     * Publicly set the contract registration status\n     *\n     * @param escrow_contract - the address of the escrow contract that has privately been constrained to be valid\n     */\n    #[public]\n    #[internal]\n    fn set_contract_registered(escrow_contract: AztecAddress) {\n        storage.escrow_registry.at(escrow_contract).initialize(true);\n    }\n\n    #[private]\n    fn check_and_register_participant(participant: AztecAddress, participant_name: str<60>, escrow: AztecAddress) -> bool{\n        // todo: switch to check that the sender is an escrow\n        // check that sender is admin\n        let admin = storage.definition.read_private().admin;\n        assert(admin == context.msg_sender(), \"Sender is not the registry contract\");\n        let is_registered = storage.escrow_registry.at(admin).read_private();\n        assert(is_registered, \"Sender is not an escrow contract\");\n        // check if the participant has already been registered\n        let options = NoteGetterOptions::new().select(AddressNote::properties().address, Comparator.EQ, participant).set_limit(1);\n        let participant_exists = storage.participants.at(escrow).get_notes(options).len() == 0;\n        // if the participant has not been registered, enqueue a private call to register the participant\n        // do this instead of if statement here to make adding first time expensive but cheap if already registered\n        let mut added = false;\n        if participant_exists {\n            added = true;\n            ZImburseRegistry::at(context.this_address()).register_participant(participant, participant_name, admin, escrow).call(&mut context);\n        }\n        added\n    }\n\n    #[private]\n    #[interal]\n    fn register_participant(participant: AztecAddress, participant_name: str<60>, admin: AztecAddress, escrow: AztecAddress) {\n        let admin_keys = get_public_keys(admin);\n        let participant_keys = get_public_keys(participant);\n        // add escrow to the participant's set of escrows\n        let mut escrow_note = AddressNote::new(escrow, participant_keys.npk_m.hash());\n        storage.participant_escrows.insert(&mut escrow_note).emit(\n            encode_and_encrypt_note(\n                &mut context,\n                admin_keys.ovpk_m,\n                participant_keys.ivpk_m,\n                participant\n            )\n        );\n        // add the participant to the admin set of participants\n        let mut participant_note = ParticipantNote::new(participant, participant_name, admin_keys.npk_m.hash());\n        storage.participants.at(escrow).insert(&mut participant_note).emit(\n            encode_and_encrypt_note_unconstrained(&mut context, admin_keys.ovpk_m, admin_keys.ivpk_m, admin)\n        );\n    }\n\n    // todo: add ability to remove participant\n    // todo: add ability to remove participant escrows by looking up nullifications\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the public context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[public]\n    #[view]\n    fn check_dkim_key_hash_public(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_public()\n    }\n\n    /**\n     * Check which verifier type a DKIM key maps to using the DKIM key hash\n     * @dev constrained in the private context\n     * \n     * @param dkim_key_hash - the hash of the DKIM key\n     * @return verifier_id - the ID of the verifier (returns 0 if none)\n     */\n    #[private]\n    #[view]\n    fn check_dkim_key_hash_private(dkim_key_hash: Field) -> Field {\n        storage.dkim_registry.at(dkim_key_hash).read_private()\n    }\n\n    /** Get the class ID that all escrow contracts must match */\n    #[public]\n    #[view]\n    fn get_escrow_class_id() -> Field {\n        storage.definition.read_public().escrow_contract_id\n    }\n\n    /** Get the registration status of an escrow contract */\n    #[public]\n    #[view]\n    fn get_escrow_registry_status(escrow_contract: AztecAddress) -> bool {\n        storage.escrow_registry.at(escrow_contract).read_public()\n    }\n\n    /**\n     * Get a page of the list of escrows administrated by a given address (private)\n     *\n     * @param admin - the address of the admin\n     * @param page_index - the index of the page to retrieve\n     * @return managed_escrows - the list of managed escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_managed_escrows(offset: u32) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.managed_escrows.view_notes(options);\n        let mut managed_escrows = BoundedVec::new();\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                managed_escrows.push(notes.get_unchecked(i).address);\n            }\n        }\n        (managed_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of escrows participated in by a given address (private)\n     *\n     * @param admin - the address of the participant\n     * @param page_index - the index of the page to retrieve\n     * @return participant_escrows - the list of enrolled escrows\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained pub fn get_participant_escrows(\n        participant: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participant_escrows.view_notes(options);\n        let mut participant_escrows: BoundedVec<AztecAddress, MAX_NOTES_PER_PAGE> = BoundedVec::new();\n        for i in 0..notes.len() {\n            if i < notes.len() {\n                participant_escrows.push(notes.get_unchecked(i).address);\n            }\n        }\n        (participant_escrows, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n\n    /**\n     * Get a page of the list of of participants in an escrow (private)\n     *\n     * @param admin - the address of the escrow\n     * @param page_index - the index of the page to retrieve\n     * @return participants - the list of participating addresses\n     * @return page_limit_reached - whether the page limit has been reached (keep calling until this is true)\n     */\n    unconstrained fn get_participants(\n        escrow: AztecAddress,\n        offset: u32\n    ) -> pub (BoundedVec<ParticipantNote, MAX_NOTES_PER_PAGE>, bool) {\n        let mut options = NoteViewerOptions::new().set_offset(offset);\n        let notes = storage.participants.at(escrow).view_notes(options);\n        (notes, notes.len() == MAX_NOTES_PER_PAGE)\n    }\n}\n\n"},"445":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_registry/src/types/participant_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash_with_separator, traits::{Serialize, Deserialize}\n},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\nuse dep::compressed_string::CompressedString;\n\nglobal NAME_LENGTH: u32 = 60;\nglobal NAME_SERIALIZED_LENGTH: u32 = 2;\n\n#[note]\npub struct ParticipantNote {\n    address: AztecAddress,\n    name: [Field; 2],\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n\nimpl NullifiableNote for ParticipantNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for ParticipantNote {\n    // does not check for participant name\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl ParticipantNote {\n    pub fn new(address: AztecAddress, name: str<NAME_LENGTH>, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        let name_serialized: CompressedString<NAME_SERIALIZED_LENGTH, NAME_LENGTH> = CompressedString::from_string(name);\n        ParticipantNote { address, name: name_serialized.value, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    pub fn get_name(self) -> [u8; NAME_LENGTH] {\n        CompressedString::<NAME_SERIALIZED_LENGTH, NAME_LENGTH> { value: self.name }.to_bytes()\n    }\n}\n"},"446":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/z_imburse_registry/src/types/registry_definition.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\nglobal REGISTRY_DEFINITION_LENGTH: u32 = 3;\n\npub struct RegistryDefinition {\n    admin: AztecAddress,\n    usdc: AztecAddress,\n    escrow_contract_id: Field\n}\n\nimpl Serialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn serialize(self: Self) -> [Field; REGISTRY_DEFINITION_LENGTH] {\n        [self.admin.to_field(), self.usdc.to_field(), self.escrow_contract_id]\n    }\n}\n\nimpl Deserialize<REGISTRY_DEFINITION_LENGTH> for RegistryDefinition {\n    fn deserialize(fields: [Field; REGISTRY_DEFINITION_LENGTH]) -> Self {\n        RegistryDefinition {\n            admin: AztecAddress::from_field(fields[0]),\n            usdc: AztecAddress::from_field(fields[1]),\n            escrow_contract_id: fields[2]\n        }\n    }\n}\n\nimpl RegistryDefinition {\n    /**\n     * Create a new definition for a Z-Imburse escrow registry contract\n     *\n     * @param admin - The address that can add dkim keys to the registry\n     * @param usdc The address of the USDC token\n     * @param escrow_contract_id The ID of the escrow contract\n     * @return The new escrow registry definition\n     */\n    pub fn new(admin: AztecAddress, usdc: AztecAddress, escrow_contract_id: Field) -> Self {\n        RegistryDefinition { admin, usdc, escrow_contract_id }\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (unsafe {\n                        U128::uconstrained_check_is_upper_ascii(ascii) as u8\n                    });\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        }) as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q,r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c: [u8; 17]= b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q,r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c,d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d)= a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n/// \n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n/// \n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n/// \n/// Example:\n/// \n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a \n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    /// \n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    /// \n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    /// \n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    /// \n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    /// \n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure. \n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    /// \n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    /// \n    /// Panics if the new length of the vector will be greater than the max length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// \n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    /// \n    /// v.push(100);\n    /// assert(v.len() == 1);\n    /// \n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    /// \n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    /// \n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    /// \n    /// Note that uninitialized elements may be zeroed out!\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    /// \n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    /// \n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    /// \n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    /// \n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    /// \n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    /// \n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    /// \n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input. \n    /// The maximum length of the vector is determined based on the type signature.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    /// \n    /// Panics if the vector is empty.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    /// \n    /// let two = v.pop();\n    /// let one = v.pop();\n    /// \n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    /// \n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.  \n    /// \n    /// Example:\n    /// \n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    /// \n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"71":{"path":"/home/jpag/Workground/aztec/z-imburse/contracts/address_note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator},\n    note::{note_header::NoteHeader, note_interface::NullifiableNote, utils::compute_note_hash_for_nullify},\n    oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext, macros::notes::note\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [\n            note_hash_for_nullify,\n            secret\n        ],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field\n        )\n    }\n}\n\nimpl Eq for AddressNote {\n    fn eq(self, other: Self) -> bool {\n        (self.address == other.address) & (self.npk_m_hash == other.npk_m_hash)\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        let randomness = unsafe {\n            random()\n        };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"75":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator, constants::GENERATOR_INDEX__CONSTRUCTOR,\n    abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"77":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    hash::poseidon2_hash_with_separator, point::{Point, POINT_LENGTH},\n    traits::{Deserialize, Serialize, Empty, is_empty, Hash}\n};\n\nglobal PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m: NpkM { inner: Point::empty() },\n            ivpk_m: IvpkM { inner: Point::empty() },\n            ovpk_m: OvpkM { inner: Point::empty() },\n            tpk_m: TpkM { inner: Point::empty() }\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field)\n        }\n        )\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM { inner: Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool } },\n            ivpk_m: IvpkM { inner: Point { x: serialized[3], y: serialized[4], is_infinite: serialized[5] as bool } },\n            ovpk_m: OvpkM { inner: Point { x: serialized[6], y: serialized[7], is_infinite: serialized[8] as bool } },\n            tpk_m: TpkM { inner: Point { x: serialized[9], y: serialized[10], is_infinite: serialized[11] as bool } }\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"78":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158, 236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"80":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse crate::{\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, OUTGOING_INDEX}}\n};\n\nmod test;\n\nunconstrained pub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\nunconstrained pub fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) = unsafe {\n        get_public_keys_and_partial_address(account)\n    };\n    assert_eq(\n        account, AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address), \"Invalid public keys hint for address\"\n    );\n\n    hinted_canonical_public_keys\n}\n"},"83":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, GENERATOR_INDEX__FUNCTION_ARGS},\n    point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice}\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(contract_address: AztecAddress, log: [u8; N]) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"94":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext> where Note: NoteInterface<N> + NullifiableNote + Eq {\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext> where Note: NoteInterface<N> + NullifiableNote {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"98":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"99":{"path":"/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.57.0/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    unconstrained pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext> where T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN> {\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"}}}